
katan.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00004ea8 l    d  .rodata	00000000 .rodata
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 katan32.c
00004100 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004e6e g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
00004100  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
00004100  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00005698 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004dde g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040fa  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
000047c8 g     F .text	000005d8 katan32_decrypt
00000192 g       *ABS*	00000000 __TBCCR0
00004100  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004e9c g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
00004100  w      .text	00000000 __isr_5
00005698 g       *ABS*	00000000 __data_load_start
00004100 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
00004100  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
00004100  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
00004100  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004100  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00004104 g     F .text	000006c4 katan32_encrypt
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004ea6  w      .text	00000000 _unexpected_
00004100  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
00004100  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004e3c g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
00004100 g       .text	00000000 __ctors_start
00004100  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .rodata	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	000000bc main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
00004100  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004da0 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
00004100  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
00004100 g       .text	00000000 __dtors_start
00004100  w      .text	00000000 __isr_6
00004100 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
00004100  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .rodata	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004e88 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040fa  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004e92 g     F .text	0000000a start_decrypt
00001100 g       .rodata	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT
00004ea8 g     O .rodata	000007f0 IR



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 98 56 	mov	22168(r15),4352(r15);0x5698(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
    plain[i+19] = L1[i];
  
}

int main()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 7e f9 	add	#-1666,	r1	;#0xf97e
  u64 key[80];
  u64 plain[64], cipher[64];
  int i;

  for(i=0;i<80;++i)   key[i]=ONES;
    4046:	84 43 7c f9 	mov	#0,	-1668(r4);r3 As==00, 0xf97c(r4)
    404a:	14 3c       	jmp	$+42     	;abs 0x4074
    404c:	1f 44 7c f9 	mov	-1668(r4),r15	;0xf97c(r4)
    4050:	0f 5f       	rla	r15		
    4052:	0f 5f       	rla	r15		
    4054:	0f 5f       	rla	r15		
    4056:	3e 40 7c f9 	mov	#-1668,	r14	;#0xf97c
    405a:	0e 54       	add	r4,	r14	
    405c:	0f 5e       	add	r14,	r15	
    405e:	2f 53       	incd	r15		
    4060:	bf 43 00 00 	mov	#-1,	0(r15)	;r3 As==11, 0x0000(r15)
    4064:	bf 43 02 00 	mov	#-1,	2(r15)	;r3 As==11, 0x0002(r15)
    4068:	bf 43 04 00 	mov	#-1,	4(r15)	;r3 As==11, 0x0004(r15)
    406c:	bf 43 06 00 	mov	#-1,	6(r15)	;r3 As==11, 0x0006(r15)
    4070:	94 53 7c f9 	inc	-1668(r4)	;0xf97c(r4)
    4074:	b4 90 50 00 	cmp	#80,	-1668(r4);#0x0050, 0xf97c(r4)
    4078:	7c f9 
    407a:	e8 3b       	jl	$-46     	;abs 0x404c
  for(i=0;i<32;++i)   plain[i]=0;
    407c:	84 43 7c f9 	mov	#0,	-1668(r4);r3 As==00, 0xf97c(r4)
    4080:	15 3c       	jmp	$+44     	;abs 0x40ac
    4082:	1f 44 7c f9 	mov	-1668(r4),r15	;0xf97c(r4)
    4086:	0f 5f       	rla	r15		
    4088:	0f 5f       	rla	r15		
    408a:	0f 5f       	rla	r15		
    408c:	3e 40 7c f9 	mov	#-1668,	r14	;#0xf97c
    4090:	0e 54       	add	r4,	r14	
    4092:	0f 5e       	add	r14,	r15	
    4094:	3f 50 82 02 	add	#642,	r15	;#0x0282
    4098:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    409c:	8f 43 02 00 	mov	#0,	2(r15)	;r3 As==00, 0x0002(r15)
    40a0:	8f 43 04 00 	mov	#0,	4(r15)	;r3 As==00, 0x0004(r15)
    40a4:	8f 43 06 00 	mov	#0,	6(r15)	;r3 As==00, 0x0006(r15)
    40a8:	94 53 7c f9 	inc	-1668(r4)	;0xf97c(r4)
    40ac:	b4 90 20 00 	cmp	#32,	-1668(r4);#0x0020, 0xf97c(r4)
    40b0:	7c f9 
    40b2:	e7 3b       	jl	$-48     	;abs 0x4082
  
  START_ENCRYPT();
    40b4:	b0 12 88 4e 	call	#0x4e88	
  katan32_encrypt( plain, cipher, key, 254 );
    40b8:	0d 44       	mov	r4,	r13	
    40ba:	3d 50 7e f9 	add	#-1666,	r13	;#0xf97e
    40be:	0e 44       	mov	r4,	r14	
    40c0:	3e 50 fe fd 	add	#-514,	r14	;#0xfdfe
    40c4:	0f 44       	mov	r4,	r15	
    40c6:	3f 50 fe fb 	add	#-1026,	r15	;#0xfbfe
    40ca:	3c 40 fe 00 	mov	#254,	r12	;#0x00fe
    40ce:	b0 12 04 41 	call	#0x4104	
  
  //printf("\nkatan32_encrypt(key=11..11, plain=00.00) = ");
  //  for(i=0;i<32;++i)   printf("%llu",cipher[i]&1);
  //for(i=31;i>=0;i--)   printf("%llu",cipher[i]&1);
  
  START_DECRYPT();
    40d2:	b0 12 92 4e 	call	#0x4e92	
  katan32_decrypt( cipher, plain, key, 254 );
    40d6:	0d 44       	mov	r4,	r13	
    40d8:	3d 50 7e f9 	add	#-1666,	r13	;#0xf97e
    40dc:	0e 44       	mov	r4,	r14	
    40de:	3e 50 fe fb 	add	#-1026,	r14	;#0xfbfe
    40e2:	0f 44       	mov	r4,	r15	
    40e4:	3f 50 fe fd 	add	#-514,	r15	;#0xfdfe
    40e8:	3c 40 fe 00 	mov	#254,	r12	;#0x00fe
    40ec:	b0 12 c8 47 	call	#0x47c8	
  
  END_EXPE();
    40f0:	b0 12 9c 4e 	call	#0x4e9c	
  
  return 0;
    40f4:	0f 43       	clr	r15		
    40f6:	31 50 82 06 	add	#1666,	r1	;#0x0682

000040fa <__stop_progExec__>:
    40fa:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40fe:	fd 3f       	jmp	$-4      	;abs 0x40fa

00004100 <__ctors_end>:
    4100:	30 40 a6 4e 	br	#0x4ea6	

00004104 <katan32_encrypt>:
  ONES,ONES,0,0,0,0,0,0,0,ONES, // 240-249
  0,0,ONES,0,
};


void katan32_encrypt( const u64 plain[32], u64 cipher[32], const u64 key[80], int rounds ) {
    4104:	0b 12       	push	r11		
    4106:	0a 12       	push	r10		
    4108:	09 12       	push	r9		
    410a:	08 12       	push	r8		
    410c:	07 12       	push	r7		
    410e:	06 12       	push	r6		
    4110:	04 12       	push	r4		
    4112:	04 41       	mov	r1,	r4	
    4114:	34 50 0e 00 	add	#14,	r4	;#0x000e
    4118:	31 50 b8 fe 	add	#-328,	r1	;#0xfeb8
    411c:	84 4f c2 ff 	mov	r15,	-62(r4)	;0xffc2(r4)
    4120:	84 4e c4 ff 	mov	r14,	-60(r4)	;0xffc4(r4)
    4124:	84 4d c6 ff 	mov	r13,	-58(r4)	;0xffc6(r4)
    4128:	84 4c c8 ff 	mov	r12,	-56(r4)	;0xffc8(r4)
  for(i=0;i<19;++i) 
    cipher[i] = L2[i];
  for(i=0;i<13;++i) 
    cipher[i+19] = L1[i];

}
    412c:	07 41       	mov	r1,	r7	
  ONES,ONES,0,0,0,0,0,0,0,ONES, // 240-249
  0,0,ONES,0,
};


void katan32_encrypt( const u64 plain[32], u64 cipher[32], const u64 key[80], int rounds ) {
    412e:	0f 41       	mov	r1,	r15	
    4130:	06 4f       	mov	r15,	r6	

  u64 L1[13], L2[19], k[2*rounds], fa, fb;
    4132:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    4136:	0f 5f       	rla	r15		
    4138:	0e 4f       	mov	r15,	r14	
    413a:	3e 53       	add	#-1,	r14	;r3 As==11
    413c:	84 4e ae fe 	mov	r14,	-338(r4);0xfeae(r4)
    4140:	0e 4f       	mov	r15,	r14	
    4142:	08 4e       	mov	r14,	r8	
    4144:	09 43       	clr	r9		
    4146:	0e 4f       	mov	r15,	r14	
    4148:	0a 4e       	mov	r14,	r10	
    414a:	0b 43       	clr	r11		
    414c:	0f 5f       	rla	r15		
    414e:	0f 5f       	rla	r15		
    4150:	0f 5f       	rla	r15		
    4152:	1f 53       	inc	r15		
    4154:	1f 53       	inc	r15		
    4156:	12 c3       	clrc			
    4158:	0f 10       	rrc	r15		
    415a:	0f 5f       	rla	r15		
    415c:	01 8f       	sub	r15,	r1	
    415e:	0f 41       	mov	r1,	r15	
    4160:	1f 53       	inc	r15		
    4162:	12 c3       	clrc			
    4164:	0f 10       	rrc	r15		
    4166:	0f 5f       	rla	r15		
    4168:	84 4f b0 fe 	mov	r15,	-336(r4);0xfeb0(r4)
  int i,j;

  for(i=0;i<19;++i) 
    416c:	84 43 aa fe 	mov	#0,	-342(r4);r3 As==00, 0xfeaa(r4)
    4170:	23 3c       	jmp	$+72     	;abs 0x41b8
    L2[i] = plain[i];
    4172:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    4176:	0f 5f       	rla	r15		
    4178:	0f 5f       	rla	r15		
    417a:	0f 5f       	rla	r15		
    417c:	1f 54 c2 ff 	add	-62(r4),r15	;0xffc2(r4)
    4180:	2c 4f       	mov	@r15,	r12	
    4182:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4186:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    418a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    418e:	1b 44 aa fe 	mov	-342(r4),r11	;0xfeaa(r4)
    4192:	0b 5b       	rla	r11		
    4194:	0b 5b       	rla	r11		
    4196:	0b 5b       	rla	r11		
    4198:	38 40 aa fe 	mov	#-342,	r8	;#0xfeaa
    419c:	08 54       	add	r4,	r8	
    419e:	0b 58       	add	r8,	r11	
    41a0:	3b 50 80 00 	add	#128,	r11	;#0x0080
    41a4:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    41a8:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    41ac:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    41b0:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
void katan32_encrypt( const u64 plain[32], u64 cipher[32], const u64 key[80], int rounds ) {

  u64 L1[13], L2[19], k[2*rounds], fa, fb;
  int i,j;

  for(i=0;i<19;++i) 
    41b4:	94 53 aa fe 	inc	-342(r4)	;0xfeaa(r4)
    41b8:	b4 90 13 00 	cmp	#19,	-342(r4);#0x0013, 0xfeaa(r4)
    41bc:	aa fe 
    41be:	d9 3b       	jl	$-76     	;abs 0x4172
    L2[i] = plain[i];
  for(i=0;i<13;++i) 
    41c0:	84 43 aa fe 	mov	#0,	-342(r4);r3 As==00, 0xfeaa(r4)
    41c4:	25 3c       	jmp	$+76     	;abs 0x4210
    L1[i] = plain[i+19];
    41c6:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    41ca:	3f 50 13 00 	add	#19,	r15	;#0x0013
    41ce:	0f 5f       	rla	r15		
    41d0:	0f 5f       	rla	r15		
    41d2:	0f 5f       	rla	r15		
    41d4:	1f 54 c2 ff 	add	-62(r4),r15	;0xffc2(r4)
    41d8:	2c 4f       	mov	@r15,	r12	
    41da:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41de:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    41e2:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    41e6:	1b 44 aa fe 	mov	-342(r4),r11	;0xfeaa(r4)
    41ea:	0b 5b       	rla	r11		
    41ec:	0b 5b       	rla	r11		
    41ee:	0b 5b       	rla	r11		
    41f0:	39 40 aa fe 	mov	#-342,	r9	;#0xfeaa
    41f4:	09 54       	add	r4,	r9	
    41f6:	0b 59       	add	r9,	r11	
    41f8:	3b 50 18 00 	add	#24,	r11	;#0x0018
    41fc:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4200:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4204:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4208:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  u64 L1[13], L2[19], k[2*rounds], fa, fb;
  int i,j;

  for(i=0;i<19;++i) 
    L2[i] = plain[i];
  for(i=0;i<13;++i) 
    420c:	94 53 aa fe 	inc	-342(r4)	;0xfeaa(r4)
    4210:	b4 90 0d 00 	cmp	#13,	-342(r4);#0x000d, 0xfeaa(r4)
    4214:	aa fe 
    4216:	d7 3b       	jl	$-80     	;abs 0x41c6
    L1[i] = plain[i+19];

  for(i=0;i<80;++i)
    4218:	84 43 aa fe 	mov	#0,	-342(r4);r3 As==00, 0xfeaa(r4)
    421c:	20 3c       	jmp	$+66     	;abs 0x425e
    k[i]=key[i];
    421e:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    4222:	0f 5f       	rla	r15		
    4224:	0f 5f       	rla	r15		
    4226:	0f 5f       	rla	r15		
    4228:	1f 54 c6 ff 	add	-58(r4),r15	;0xffc6(r4)
    422c:	2c 4f       	mov	@r15,	r12	
    422e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4232:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4236:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    423a:	1a 44 b0 fe 	mov	-336(r4),r10	;0xfeb0(r4)
    423e:	1b 44 aa fe 	mov	-342(r4),r11	;0xfeaa(r4)
    4242:	0b 5b       	rla	r11		
    4244:	0b 5b       	rla	r11		
    4246:	0b 5b       	rla	r11		
    4248:	0b 5a       	add	r10,	r11	
    424a:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    424e:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4252:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4256:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<19;++i) 
    L2[i] = plain[i];
  for(i=0;i<13;++i) 
    L1[i] = plain[i+19];

  for(i=0;i<80;++i)
    425a:	94 53 aa fe 	inc	-342(r4)	;0xfeaa(r4)
    425e:	b4 90 50 00 	cmp	#80,	-342(r4);#0x0050, 0xfeaa(r4)
    4262:	aa fe 
    4264:	dc 3b       	jl	$-70     	;abs 0x421e
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    4266:	b4 40 50 00 	mov	#80,	-342(r4);#0x0050, 0xfeaa(r4)
    426a:	aa fe 
    426c:	62 3c       	jmp	$+198    	;abs 0x4332
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;
    426e:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    4272:	3f 50 b0 ff 	add	#-80,	r15	;#0xffb0
    4276:	1e 44 b0 fe 	mov	-336(r4),r14	;0xfeb0(r4)
    427a:	0f 5f       	rla	r15		
    427c:	0f 5f       	rla	r15		
    427e:	0f 5f       	rla	r15		
    4280:	0f 5e       	add	r14,	r15	
    4282:	28 4f       	mov	@r15,	r8	
    4284:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    4288:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    428c:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    4290:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    4294:	3f 50 c3 ff 	add	#-61,	r15	;#0xffc3
    4298:	1e 44 b0 fe 	mov	-336(r4),r14	;0xfeb0(r4)
    429c:	0f 5f       	rla	r15		
    429e:	0f 5f       	rla	r15		
    42a0:	0f 5f       	rla	r15		
    42a2:	0f 5e       	add	r14,	r15	
    42a4:	2c 4f       	mov	@r15,	r12	
    42a6:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42aa:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    42ae:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    42b2:	08 ec       	xor	r12,	r8	
    42b4:	09 ed       	xor	r13,	r9	
    42b6:	0a ee       	xor	r14,	r10	
    42b8:	0b ef       	xor	r15,	r11	
    42ba:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    42be:	3f 50 ce ff 	add	#-50,	r15	;#0xffce
    42c2:	1e 44 b0 fe 	mov	-336(r4),r14	;0xfeb0(r4)
    42c6:	0f 5f       	rla	r15		
    42c8:	0f 5f       	rla	r15		
    42ca:	0f 5f       	rla	r15		
    42cc:	0f 5e       	add	r14,	r15	
    42ce:	2c 4f       	mov	@r15,	r12	
    42d0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42d4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    42d8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    42dc:	08 ec       	xor	r12,	r8	
    42de:	09 ed       	xor	r13,	r9	
    42e0:	0a ee       	xor	r14,	r10	
    42e2:	0b ef       	xor	r15,	r11	
    42e4:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    42e8:	3f 50 f3 ff 	add	#-13,	r15	;#0xfff3
    42ec:	1e 44 b0 fe 	mov	-336(r4),r14	;0xfeb0(r4)
    42f0:	0f 5f       	rla	r15		
    42f2:	0f 5f       	rla	r15		
    42f4:	0f 5f       	rla	r15		
    42f6:	0f 5e       	add	r14,	r15	
    42f8:	2c 4f       	mov	@r15,	r12	
    42fa:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42fe:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4302:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4306:	0c e8       	xor	r8,	r12	
    4308:	0d e9       	xor	r9,	r13	
    430a:	0e ea       	xor	r10,	r14	
    430c:	0f eb       	xor	r11,	r15	
    430e:	1a 44 b0 fe 	mov	-336(r4),r10	;0xfeb0(r4)
    4312:	1b 44 aa fe 	mov	-342(r4),r11	;0xfeaa(r4)
    4316:	0b 5b       	rla	r11		
    4318:	0b 5b       	rla	r11		
    431a:	0b 5b       	rla	r11		
    431c:	0b 5a       	add	r10,	r11	
    431e:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4322:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4326:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    432a:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<13;++i) 
    L1[i] = plain[i+19];

  for(i=0;i<80;++i)
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    432e:	94 53 aa fe 	inc	-342(r4)	;0xfeaa(r4)
    4332:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    4336:	0f 5f       	rla	r15		
    4338:	84 9f aa fe 	cmp	r15,	-342(r4);0xfeaa(r4)
    433c:	98 3b       	jl	$-206    	;abs 0x426e
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;

  for(i=0;i<rounds;++i) {
    433e:	84 43 aa fe 	mov	#0,	-342(r4);r3 As==00, 0xfeaa(r4)
    4342:	30 40 f4 46 	br	#0x46f4	
    
    fa = L1[X1_32] ^ L1[X2_32] ^ (L1[X3_32] & L1[X4_32]) ^ (L1[X5_32] & IR[i])     ^ k[2*i];
    4346:	94 44 22 ff 	mov	-222(r4),-22(r4)	;0xff22(r4), 0xffea(r4)
    434a:	ea ff 
    434c:	94 44 24 ff 	mov	-220(r4),-20(r4)	;0xff24(r4), 0xffec(r4)
    4350:	ec ff 
    4352:	94 44 26 ff 	mov	-218(r4),-18(r4)	;0xff26(r4), 0xffee(r4)
    4356:	ee ff 
    4358:	94 44 28 ff 	mov	-216(r4),-16(r4)	;0xff28(r4), 0xfff0(r4)
    435c:	f0 ff 
    435e:	1c 44 fa fe 	mov	-262(r4),r12	;0xfefa(r4)
    4362:	1d 44 fc fe 	mov	-260(r4),r13	;0xfefc(r4)
    4366:	1e 44 fe fe 	mov	-258(r4),r14	;0xfefe(r4)
    436a:	1f 44 00 ff 	mov	-256(r4),r15	;0xff00(r4)
    436e:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4372:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    4376:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    437a:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    437e:	08 ec       	xor	r12,	r8	
    4380:	09 ed       	xor	r13,	r9	
    4382:	0a ee       	xor	r14,	r10	
    4384:	0b ef       	xor	r15,	r11	
    4386:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    438a:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    438e:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    4392:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    4396:	94 44 02 ff 	mov	-254(r4),-54(r4)	;0xff02(r4), 0xffca(r4)
    439a:	ca ff 
    439c:	94 44 04 ff 	mov	-252(r4),-52(r4)	;0xff04(r4), 0xffcc(r4)
    43a0:	cc ff 
    43a2:	94 44 06 ff 	mov	-250(r4),-50(r4)	;0xff06(r4), 0xffce(r4)
    43a6:	ce ff 
    43a8:	94 44 08 ff 	mov	-248(r4),-48(r4)	;0xff08(r4), 0xffd0(r4)
    43ac:	d0 ff 
    43ae:	1c 44 ea fe 	mov	-278(r4),r12	;0xfeea(r4)
    43b2:	1d 44 ec fe 	mov	-276(r4),r13	;0xfeec(r4)
    43b6:	1e 44 ee fe 	mov	-274(r4),r14	;0xfeee(r4)
    43ba:	1f 44 f0 fe 	mov	-272(r4),r15	;0xfef0(r4)
    43be:	1c f4 ca ff 	and	-54(r4),r12	;0xffca(r4)
    43c2:	1d f4 cc ff 	and	-52(r4),r13	;0xffcc(r4)
    43c6:	1e f4 ce ff 	and	-50(r4),r14	;0xffce(r4)
    43ca:	1f f4 d0 ff 	and	-48(r4),r15	;0xffd0(r4)
    43ce:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    43d2:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    43d6:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    43da:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    43de:	08 ec       	xor	r12,	r8	
    43e0:	09 ed       	xor	r13,	r9	
    43e2:	0a ee       	xor	r14,	r10	
    43e4:	0b ef       	xor	r15,	r11	
    43e6:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    43ea:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    43ee:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    43f2:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    43f6:	94 44 da fe 	mov	-294(r4),-46(r4)	;0xfeda(r4), 0xffd2(r4)
    43fa:	d2 ff 
    43fc:	94 44 dc fe 	mov	-292(r4),-44(r4)	;0xfedc(r4), 0xffd4(r4)
    4400:	d4 ff 
    4402:	94 44 de fe 	mov	-290(r4),-42(r4)	;0xfede(r4), 0xffd6(r4)
    4406:	d6 ff 
    4408:	94 44 e0 fe 	mov	-288(r4),-40(r4)	;0xfee0(r4), 0xffd8(r4)
    440c:	d8 ff 
    440e:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    4412:	0f 5f       	rla	r15		
    4414:	0f 5f       	rla	r15		
    4416:	0f 5f       	rla	r15		
    4418:	3f 50 a8 4e 	add	#20136,	r15	;#0x4ea8
    441c:	2c 4f       	mov	@r15,	r12	
    441e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4422:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4426:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    442a:	1c f4 d2 ff 	and	-46(r4),r12	;0xffd2(r4)
    442e:	1d f4 d4 ff 	and	-44(r4),r13	;0xffd4(r4)
    4432:	1e f4 d6 ff 	and	-42(r4),r14	;0xffd6(r4)
    4436:	1f f4 d8 ff 	and	-40(r4),r15	;0xffd8(r4)
    443a:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    443e:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    4442:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    4446:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    444a:	08 ec       	xor	r12,	r8	
    444c:	09 ed       	xor	r13,	r9	
    444e:	0a ee       	xor	r14,	r10	
    4450:	0b ef       	xor	r15,	r11	
    4452:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    4456:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    445a:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    445e:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    4462:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    4466:	0f 5f       	rla	r15		
    4468:	1e 44 b0 fe 	mov	-336(r4),r14	;0xfeb0(r4)
    446c:	0f 5f       	rla	r15		
    446e:	0f 5f       	rla	r15		
    4470:	0f 5f       	rla	r15		
    4472:	0f 5e       	add	r14,	r15	
    4474:	2c 4f       	mov	@r15,	r12	
    4476:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    447a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    447e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4482:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4486:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    448a:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    448e:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4492:	08 ec       	xor	r12,	r8	
    4494:	09 ed       	xor	r13,	r9	
    4496:	0a ee       	xor	r14,	r10	
    4498:	0b ef       	xor	r15,	r11	
    449a:	84 48 b2 fe 	mov	r8,	-334(r4);0xfeb2(r4)
    449e:	84 49 b4 fe 	mov	r9,	-332(r4);0xfeb4(r4)
    44a2:	84 4a b6 fe 	mov	r10,	-330(r4);0xfeb6(r4)
    44a6:	84 4b b8 fe 	mov	r11,	-328(r4);0xfeb8(r4)
    fb = L2[Y1_32] ^ L2[Y2_32] ^ (L2[Y3_32] & L2[Y4_32]) ^ (L2[Y5_32] & L2[Y6_32]) ^ k[2*i+1];
    44aa:	94 44 ba ff 	mov	-70(r4),-22(r4)	;0xffba(r4), 0xffea(r4)
    44ae:	ea ff 
    44b0:	94 44 bc ff 	mov	-68(r4),-20(r4)	;0xffbc(r4), 0xffec(r4)
    44b4:	ec ff 
    44b6:	94 44 be ff 	mov	-66(r4),-18(r4)	;0xffbe(r4), 0xffee(r4)
    44ba:	ee ff 
    44bc:	94 44 c0 ff 	mov	-64(r4),-16(r4)	;0xffc0(r4), 0xfff0(r4)
    44c0:	f0 ff 
    44c2:	1c 44 62 ff 	mov	-158(r4),r12	;0xff62(r4)
    44c6:	1d 44 64 ff 	mov	-156(r4),r13	;0xff64(r4)
    44ca:	1e 44 66 ff 	mov	-154(r4),r14	;0xff66(r4)
    44ce:	1f 44 68 ff 	mov	-152(r4),r15	;0xff68(r4)
    44d2:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    44d6:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    44da:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    44de:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    44e2:	08 ec       	xor	r12,	r8	
    44e4:	09 ed       	xor	r13,	r9	
    44e6:	0a ee       	xor	r14,	r10	
    44e8:	0b ef       	xor	r15,	r11	
    44ea:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    44ee:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    44f2:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    44f6:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    44fa:	94 44 8a ff 	mov	-118(r4),-38(r4)	;0xff8a(r4), 0xffda(r4)
    44fe:	da ff 
    4500:	94 44 8c ff 	mov	-116(r4),-36(r4)	;0xff8c(r4), 0xffdc(r4)
    4504:	dc ff 
    4506:	94 44 8e ff 	mov	-114(r4),-34(r4)	;0xff8e(r4), 0xffde(r4)
    450a:	de ff 
    450c:	94 44 90 ff 	mov	-112(r4),-32(r4)	;0xff90(r4), 0xffe0(r4)
    4510:	e0 ff 
    4512:	1c 44 7a ff 	mov	-134(r4),r12	;0xff7a(r4)
    4516:	1d 44 7c ff 	mov	-132(r4),r13	;0xff7c(r4)
    451a:	1e 44 7e ff 	mov	-130(r4),r14	;0xff7e(r4)
    451e:	1f 44 80 ff 	mov	-128(r4),r15	;0xff80(r4)
    4522:	1c f4 da ff 	and	-38(r4),r12	;0xffda(r4)
    4526:	1d f4 dc ff 	and	-36(r4),r13	;0xffdc(r4)
    452a:	1e f4 de ff 	and	-34(r4),r14	;0xffde(r4)
    452e:	1f f4 e0 ff 	and	-32(r4),r15	;0xffe0(r4)
    4532:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4536:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    453a:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    453e:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4542:	08 ec       	xor	r12,	r8	
    4544:	09 ed       	xor	r13,	r9	
    4546:	0a ee       	xor	r14,	r10	
    4548:	0b ef       	xor	r15,	r11	
    454a:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    454e:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    4552:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    4556:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    455a:	94 44 6a ff 	mov	-150(r4),-30(r4)	;0xff6a(r4), 0xffe2(r4)
    455e:	e2 ff 
    4560:	94 44 6c ff 	mov	-148(r4),-28(r4)	;0xff6c(r4), 0xffe4(r4)
    4564:	e4 ff 
    4566:	94 44 6e ff 	mov	-146(r4),-26(r4)	;0xff6e(r4), 0xffe6(r4)
    456a:	e6 ff 
    456c:	94 44 70 ff 	mov	-144(r4),-24(r4)	;0xff70(r4), 0xffe8(r4)
    4570:	e8 ff 
    4572:	1c 44 42 ff 	mov	-190(r4),r12	;0xff42(r4)
    4576:	1d 44 44 ff 	mov	-188(r4),r13	;0xff44(r4)
    457a:	1e 44 46 ff 	mov	-186(r4),r14	;0xff46(r4)
    457e:	1f 44 48 ff 	mov	-184(r4),r15	;0xff48(r4)
    4582:	1c f4 e2 ff 	and	-30(r4),r12	;0xffe2(r4)
    4586:	1d f4 e4 ff 	and	-28(r4),r13	;0xffe4(r4)
    458a:	1e f4 e6 ff 	and	-26(r4),r14	;0xffe6(r4)
    458e:	1f f4 e8 ff 	and	-24(r4),r15	;0xffe8(r4)
    4592:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4596:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    459a:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    459e:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    45a2:	08 ec       	xor	r12,	r8	
    45a4:	09 ed       	xor	r13,	r9	
    45a6:	0a ee       	xor	r14,	r10	
    45a8:	0b ef       	xor	r15,	r11	
    45aa:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    45ae:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    45b2:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    45b6:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    45ba:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    45be:	0f 5f       	rla	r15		
    45c0:	1f 53       	inc	r15		
    45c2:	1e 44 b0 fe 	mov	-336(r4),r14	;0xfeb0(r4)
    45c6:	0f 5f       	rla	r15		
    45c8:	0f 5f       	rla	r15		
    45ca:	0f 5f       	rla	r15		
    45cc:	0f 5e       	add	r14,	r15	
    45ce:	2c 4f       	mov	@r15,	r12	
    45d0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    45d4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    45d8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    45dc:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    45e0:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    45e4:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    45e8:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    45ec:	08 ec       	xor	r12,	r8	
    45ee:	09 ed       	xor	r13,	r9	
    45f0:	0a ee       	xor	r14,	r10	
    45f2:	0b ef       	xor	r15,	r11	
    45f4:	84 48 ba fe 	mov	r8,	-326(r4);0xfeba(r4)
    45f8:	84 49 bc fe 	mov	r9,	-324(r4);0xfebc(r4)
    45fc:	84 4a be fe 	mov	r10,	-322(r4);0xfebe(r4)
    4600:	84 4b c0 fe 	mov	r11,	-320(r4);0xfec0(r4)

    for(j=12;j>0;--j)
    4604:	b4 40 0c 00 	mov	#12,	-340(r4);#0x000c, 0xfeac(r4)
    4608:	ac fe 
    460a:	28 3c       	jmp	$+82     	;abs 0x465c
      L1[j] = L1[j-1];
    460c:	1f 44 ac fe 	mov	-340(r4),r15	;0xfeac(r4)
    4610:	3f 53       	add	#-1,	r15	;r3 As==11
    4612:	0f 5f       	rla	r15		
    4614:	0f 5f       	rla	r15		
    4616:	0f 5f       	rla	r15		
    4618:	39 40 aa fe 	mov	#-342,	r9	;#0xfeaa
    461c:	09 54       	add	r4,	r9	
    461e:	0f 59       	add	r9,	r15	
    4620:	3f 50 18 00 	add	#24,	r15	;#0x0018
    4624:	2c 4f       	mov	@r15,	r12	
    4626:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    462a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    462e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4632:	1b 44 ac fe 	mov	-340(r4),r11	;0xfeac(r4)
    4636:	0b 5b       	rla	r11		
    4638:	0b 5b       	rla	r11		
    463a:	0b 5b       	rla	r11		
    463c:	3a 40 aa fe 	mov	#-342,	r10	;#0xfeaa
    4640:	0a 54       	add	r4,	r10	
    4642:	0b 5a       	add	r10,	r11	
    4644:	3b 50 18 00 	add	#24,	r11	;#0x0018
    4648:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    464c:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4650:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4654:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<rounds;++i) {
    
    fa = L1[X1_32] ^ L1[X2_32] ^ (L1[X3_32] & L1[X4_32]) ^ (L1[X5_32] & IR[i])     ^ k[2*i];
    fb = L2[Y1_32] ^ L2[Y2_32] ^ (L2[Y3_32] & L2[Y4_32]) ^ (L2[Y5_32] & L2[Y6_32]) ^ k[2*i+1];

    for(j=12;j>0;--j)
    4658:	b4 53 ac fe 	add	#-1,	-340(r4);r3 As==11, 0xfeac(r4)
    465c:	94 93 ac fe 	cmp	#1,	-340(r4);r3 As==01, 0xfeac(r4)
    4660:	d5 37       	jge	$-84     	;abs 0x460c
      L1[j] = L1[j-1];
    for(j=18;j>0;--j)
    4662:	b4 40 12 00 	mov	#18,	-340(r4);#0x0012, 0xfeac(r4)
    4666:	ac fe 
    4668:	28 3c       	jmp	$+82     	;abs 0x46ba
      L2[j] = L2[j-1];
    466a:	1f 44 ac fe 	mov	-340(r4),r15	;0xfeac(r4)
    466e:	3f 53       	add	#-1,	r15	;r3 As==11
    4670:	0f 5f       	rla	r15		
    4672:	0f 5f       	rla	r15		
    4674:	0f 5f       	rla	r15		
    4676:	3b 40 aa fe 	mov	#-342,	r11	;#0xfeaa
    467a:	0b 54       	add	r4,	r11	
    467c:	0f 5b       	add	r11,	r15	
    467e:	3f 50 80 00 	add	#128,	r15	;#0x0080
    4682:	2c 4f       	mov	@r15,	r12	
    4684:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4688:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    468c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4690:	1b 44 ac fe 	mov	-340(r4),r11	;0xfeac(r4)
    4694:	0b 5b       	rla	r11		
    4696:	0b 5b       	rla	r11		
    4698:	0b 5b       	rla	r11		
    469a:	38 40 aa fe 	mov	#-342,	r8	;#0xfeaa
    469e:	08 54       	add	r4,	r8	
    46a0:	0b 58       	add	r8,	r11	
    46a2:	3b 50 80 00 	add	#128,	r11	;#0x0080
    46a6:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    46aa:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    46ae:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    46b2:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    fa = L1[X1_32] ^ L1[X2_32] ^ (L1[X3_32] & L1[X4_32]) ^ (L1[X5_32] & IR[i])     ^ k[2*i];
    fb = L2[Y1_32] ^ L2[Y2_32] ^ (L2[Y3_32] & L2[Y4_32]) ^ (L2[Y5_32] & L2[Y6_32]) ^ k[2*i+1];

    for(j=12;j>0;--j)
      L1[j] = L1[j-1];
    for(j=18;j>0;--j)
    46b6:	b4 53 ac fe 	add	#-1,	-340(r4);r3 As==11, 0xfeac(r4)
    46ba:	94 93 ac fe 	cmp	#1,	-340(r4);r3 As==01, 0xfeac(r4)
    46be:	d5 37       	jge	$-84     	;abs 0x466a
      L2[j] = L2[j-1];
    L1[0] = fb;
    46c0:	94 44 ba fe 	mov	-326(r4),-318(r4);0xfeba(r4), 0xfec2(r4)
    46c4:	c2 fe 
    46c6:	94 44 bc fe 	mov	-324(r4),-316(r4);0xfebc(r4), 0xfec4(r4)
    46ca:	c4 fe 
    46cc:	94 44 be fe 	mov	-322(r4),-314(r4);0xfebe(r4), 0xfec6(r4)
    46d0:	c6 fe 
    46d2:	94 44 c0 fe 	mov	-320(r4),-312(r4);0xfec0(r4), 0xfec8(r4)
    46d6:	c8 fe 
    L2[0] = fa;
    46d8:	94 44 b2 fe 	mov	-334(r4),-214(r4);0xfeb2(r4), 0xff2a(r4)
    46dc:	2a ff 
    46de:	94 44 b4 fe 	mov	-332(r4),-212(r4);0xfeb4(r4), 0xff2c(r4)
    46e2:	2c ff 
    46e4:	94 44 b6 fe 	mov	-330(r4),-210(r4);0xfeb6(r4), 0xff2e(r4)
    46e8:	2e ff 
    46ea:	94 44 b8 fe 	mov	-328(r4),-208(r4);0xfeb8(r4), 0xff30(r4)
    46ee:	30 ff 
  for(i=0;i<80;++i)
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;

  for(i=0;i<rounds;++i) {
    46f0:	94 53 aa fe 	inc	-342(r4)	;0xfeaa(r4)
    46f4:	94 94 c8 ff 	cmp	-56(r4),-342(r4);0xffc8(r4), 0xfeaa(r4)
    46f8:	aa fe 
    46fa:	02 34       	jge	$+6      	;abs 0x4700
    46fc:	30 40 46 43 	br	#0x4346	
      L2[j] = L2[j-1];
    L1[0] = fb;
    L2[0] = fa;
  }

  for(i=0;i<19;++i) 
    4700:	84 43 aa fe 	mov	#0,	-342(r4);r3 As==00, 0xfeaa(r4)
    4704:	24 3c       	jmp	$+74     	;abs 0x474e
    cipher[i] = L2[i];
    4706:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    470a:	0f 5f       	rla	r15		
    470c:	0f 5f       	rla	r15		
    470e:	0f 5f       	rla	r15		
    4710:	1b 44 c4 ff 	mov	-60(r4),r11	;0xffc4(r4)
    4714:	0b 5f       	add	r15,	r11	
    4716:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    471a:	0f 5f       	rla	r15		
    471c:	0f 5f       	rla	r15		
    471e:	0f 5f       	rla	r15		
    4720:	39 40 aa fe 	mov	#-342,	r9	;#0xfeaa
    4724:	09 54       	add	r4,	r9	
    4726:	0f 59       	add	r9,	r15	
    4728:	3f 50 80 00 	add	#128,	r15	;#0x0080
    472c:	2c 4f       	mov	@r15,	r12	
    472e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4732:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4736:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    473a:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    473e:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4742:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4746:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
      L2[j] = L2[j-1];
    L1[0] = fb;
    L2[0] = fa;
  }

  for(i=0;i<19;++i) 
    474a:	94 53 aa fe 	inc	-342(r4)	;0xfeaa(r4)
    474e:	b4 90 13 00 	cmp	#19,	-342(r4);#0x0013, 0xfeaa(r4)
    4752:	aa fe 
    4754:	d8 3b       	jl	$-78     	;abs 0x4706
    cipher[i] = L2[i];
  for(i=0;i<13;++i) 
    4756:	84 43 aa fe 	mov	#0,	-342(r4);r3 As==00, 0xfeaa(r4)
    475a:	26 3c       	jmp	$+78     	;abs 0x47a8
    cipher[i+19] = L1[i];
    475c:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    4760:	3f 50 13 00 	add	#19,	r15	;#0x0013
    4764:	0f 5f       	rla	r15		
    4766:	0f 5f       	rla	r15		
    4768:	0f 5f       	rla	r15		
    476a:	1b 44 c4 ff 	mov	-60(r4),r11	;0xffc4(r4)
    476e:	0b 5f       	add	r15,	r11	
    4770:	1f 44 aa fe 	mov	-342(r4),r15	;0xfeaa(r4)
    4774:	0f 5f       	rla	r15		
    4776:	0f 5f       	rla	r15		
    4778:	0f 5f       	rla	r15		
    477a:	3a 40 aa fe 	mov	#-342,	r10	;#0xfeaa
    477e:	0a 54       	add	r4,	r10	
    4780:	0f 5a       	add	r10,	r15	
    4782:	3f 50 18 00 	add	#24,	r15	;#0x0018
    4786:	2c 4f       	mov	@r15,	r12	
    4788:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    478c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4790:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4794:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4798:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    479c:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    47a0:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    L2[0] = fa;
  }

  for(i=0;i<19;++i) 
    cipher[i] = L2[i];
  for(i=0;i<13;++i) 
    47a4:	94 53 aa fe 	inc	-342(r4)	;0xfeaa(r4)
    47a8:	b4 90 0d 00 	cmp	#13,	-342(r4);#0x000d, 0xfeaa(r4)
    47ac:	aa fe 
    47ae:	d6 3b       	jl	$-82     	;abs 0x475c
    47b0:	01 46       	mov	r6,	r1	
    cipher[i+19] = L1[i];

}
    47b2:	01 47       	mov	r7,	r1	
    47b4:	31 50 48 01 	add	#328,	r1	;#0x0148
    47b8:	34 41       	pop	r4		
    47ba:	36 41       	pop	r6		
    47bc:	37 41       	pop	r7		
    47be:	38 41       	pop	r8		
    47c0:	39 41       	pop	r9		
    47c2:	3a 41       	pop	r10		
    47c4:	3b 41       	pop	r11		
    47c6:	30 41       	ret			

000047c8 <katan32_decrypt>:


void katan32_decrypt( const u64 cipher[32], u64 plain[32], const u64 key[80], int rounds ) {
    47c8:	0b 12       	push	r11		
    47ca:	0a 12       	push	r10		
    47cc:	09 12       	push	r9		
    47ce:	08 12       	push	r8		
    47d0:	07 12       	push	r7		
    47d2:	06 12       	push	r6		
    47d4:	04 12       	push	r4		
    47d6:	04 41       	mov	r1,	r4	
    47d8:	34 50 0e 00 	add	#14,	r4	;#0x000e
    47dc:	31 50 c0 fe 	add	#-320,	r1	;#0xfec0
    47e0:	84 4f ca ff 	mov	r15,	-54(r4)	;0xffca(r4)
    47e4:	84 4e cc ff 	mov	r14,	-52(r4)	;0xffcc(r4)
    47e8:	84 4d ce ff 	mov	r13,	-50(r4)	;0xffce(r4)
    47ec:	84 4c d0 ff 	mov	r12,	-48(r4)	;0xffd0(r4)
  for(i=0;i<19;++i) 
    plain[i] = L2[i];
  for(i=0;i<13;++i) 
    plain[i+19] = L1[i];
  
}
    47f0:	07 41       	mov	r1,	r7	
    cipher[i+19] = L1[i];

}


void katan32_decrypt( const u64 cipher[32], u64 plain[32], const u64 key[80], int rounds ) {
    47f2:	0f 41       	mov	r1,	r15	
    47f4:	06 4f       	mov	r15,	r6	

  u64 L1[13], L2[19], k[2*rounds], fa, fb;
    47f6:	1f 44 d0 ff 	mov	-48(r4),r15	;0xffd0(r4)
    47fa:	0f 5f       	rla	r15		
    47fc:	0e 4f       	mov	r15,	r14	
    47fe:	3e 53       	add	#-1,	r14	;r3 As==11
    4800:	84 4e b6 fe 	mov	r14,	-330(r4);0xfeb6(r4)
    4804:	0e 4f       	mov	r15,	r14	
    4806:	08 4e       	mov	r14,	r8	
    4808:	09 43       	clr	r9		
    480a:	0e 4f       	mov	r15,	r14	
    480c:	0a 4e       	mov	r14,	r10	
    480e:	0b 43       	clr	r11		
    4810:	0f 5f       	rla	r15		
    4812:	0f 5f       	rla	r15		
    4814:	0f 5f       	rla	r15		
    4816:	1f 53       	inc	r15		
    4818:	1f 53       	inc	r15		
    481a:	12 c3       	clrc			
    481c:	0f 10       	rrc	r15		
    481e:	0f 5f       	rla	r15		
    4820:	01 8f       	sub	r15,	r1	
    4822:	0f 41       	mov	r1,	r15	
    4824:	1f 53       	inc	r15		
    4826:	12 c3       	clrc			
    4828:	0f 10       	rrc	r15		
    482a:	0f 5f       	rla	r15		
    482c:	84 4f b8 fe 	mov	r15,	-328(r4);0xfeb8(r4)
  int i,j;
  
  for(i=0;i<19;++i) 
    4830:	84 43 b2 fe 	mov	#0,	-334(r4);r3 As==00, 0xfeb2(r4)
    4834:	23 3c       	jmp	$+72     	;abs 0x487c
    L2[i] = cipher[i];
    4836:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    483a:	0f 5f       	rla	r15		
    483c:	0f 5f       	rla	r15		
    483e:	0f 5f       	rla	r15		
    4840:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    4844:	2c 4f       	mov	@r15,	r12	
    4846:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    484a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    484e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4852:	1b 44 b2 fe 	mov	-334(r4),r11	;0xfeb2(r4)
    4856:	0b 5b       	rla	r11		
    4858:	0b 5b       	rla	r11		
    485a:	0b 5b       	rla	r11		
    485c:	3a 40 b2 fe 	mov	#-334,	r10	;#0xfeb2
    4860:	0a 54       	add	r4,	r10	
    4862:	0b 5a       	add	r10,	r11	
    4864:	3b 50 80 00 	add	#128,	r11	;#0x0080
    4868:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    486c:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4870:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4874:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
void katan32_decrypt( const u64 cipher[32], u64 plain[32], const u64 key[80], int rounds ) {

  u64 L1[13], L2[19], k[2*rounds], fa, fb;
  int i,j;
  
  for(i=0;i<19;++i) 
    4878:	94 53 b2 fe 	inc	-334(r4)	;0xfeb2(r4)
    487c:	b4 90 13 00 	cmp	#19,	-334(r4);#0x0013, 0xfeb2(r4)
    4880:	b2 fe 
    4882:	d9 3b       	jl	$-76     	;abs 0x4836
    L2[i] = cipher[i];
  for(i=0;i<13;++i) 
    4884:	84 43 b2 fe 	mov	#0,	-334(r4);r3 As==00, 0xfeb2(r4)
    4888:	25 3c       	jmp	$+76     	;abs 0x48d4
    L1[i] = cipher[i+19];
    488a:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    488e:	3f 50 13 00 	add	#19,	r15	;#0x0013
    4892:	0f 5f       	rla	r15		
    4894:	0f 5f       	rla	r15		
    4896:	0f 5f       	rla	r15		
    4898:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    489c:	2c 4f       	mov	@r15,	r12	
    489e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    48a2:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    48a6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    48aa:	1b 44 b2 fe 	mov	-334(r4),r11	;0xfeb2(r4)
    48ae:	0b 5b       	rla	r11		
    48b0:	0b 5b       	rla	r11		
    48b2:	0b 5b       	rla	r11		
    48b4:	3a 40 b2 fe 	mov	#-334,	r10	;#0xfeb2
    48b8:	0a 54       	add	r4,	r10	
    48ba:	0b 5a       	add	r10,	r11	
    48bc:	3b 50 18 00 	add	#24,	r11	;#0x0018
    48c0:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    48c4:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    48c8:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    48cc:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  u64 L1[13], L2[19], k[2*rounds], fa, fb;
  int i,j;
  
  for(i=0;i<19;++i) 
    L2[i] = cipher[i];
  for(i=0;i<13;++i) 
    48d0:	94 53 b2 fe 	inc	-334(r4)	;0xfeb2(r4)
    48d4:	b4 90 0d 00 	cmp	#13,	-334(r4);#0x000d, 0xfeb2(r4)
    48d8:	b2 fe 
    48da:	d7 3b       	jl	$-80     	;abs 0x488a
    L1[i] = cipher[i+19];

  for(i=0;i<80;++i)
    48dc:	84 43 b2 fe 	mov	#0,	-334(r4);r3 As==00, 0xfeb2(r4)
    48e0:	20 3c       	jmp	$+66     	;abs 0x4922
    k[i]=key[i];
    48e2:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    48e6:	0f 5f       	rla	r15		
    48e8:	0f 5f       	rla	r15		
    48ea:	0f 5f       	rla	r15		
    48ec:	1f 54 ce ff 	add	-50(r4),r15	;0xffce(r4)
    48f0:	2c 4f       	mov	@r15,	r12	
    48f2:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    48f6:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    48fa:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    48fe:	1a 44 b8 fe 	mov	-328(r4),r10	;0xfeb8(r4)
    4902:	1b 44 b2 fe 	mov	-334(r4),r11	;0xfeb2(r4)
    4906:	0b 5b       	rla	r11		
    4908:	0b 5b       	rla	r11		
    490a:	0b 5b       	rla	r11		
    490c:	0b 5a       	add	r10,	r11	
    490e:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4912:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4916:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    491a:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<19;++i) 
    L2[i] = cipher[i];
  for(i=0;i<13;++i) 
    L1[i] = cipher[i+19];

  for(i=0;i<80;++i)
    491e:	94 53 b2 fe 	inc	-334(r4)	;0xfeb2(r4)
    4922:	b4 90 50 00 	cmp	#80,	-334(r4);#0x0050, 0xfeb2(r4)
    4926:	b2 fe 
    4928:	dc 3b       	jl	$-70     	;abs 0x48e2
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    492a:	b4 40 50 00 	mov	#80,	-334(r4);#0x0050, 0xfeb2(r4)
    492e:	b2 fe 
    4930:	62 3c       	jmp	$+198    	;abs 0x49f6
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;
    4932:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4936:	3f 50 b0 ff 	add	#-80,	r15	;#0xffb0
    493a:	1e 44 b8 fe 	mov	-328(r4),r14	;0xfeb8(r4)
    493e:	0f 5f       	rla	r15		
    4940:	0f 5f       	rla	r15		
    4942:	0f 5f       	rla	r15		
    4944:	0f 5e       	add	r14,	r15	
    4946:	28 4f       	mov	@r15,	r8	
    4948:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    494c:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    4950:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    4954:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4958:	3f 50 c3 ff 	add	#-61,	r15	;#0xffc3
    495c:	1e 44 b8 fe 	mov	-328(r4),r14	;0xfeb8(r4)
    4960:	0f 5f       	rla	r15		
    4962:	0f 5f       	rla	r15		
    4964:	0f 5f       	rla	r15		
    4966:	0f 5e       	add	r14,	r15	
    4968:	2c 4f       	mov	@r15,	r12	
    496a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    496e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4972:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4976:	08 ec       	xor	r12,	r8	
    4978:	09 ed       	xor	r13,	r9	
    497a:	0a ee       	xor	r14,	r10	
    497c:	0b ef       	xor	r15,	r11	
    497e:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4982:	3f 50 ce ff 	add	#-50,	r15	;#0xffce
    4986:	1e 44 b8 fe 	mov	-328(r4),r14	;0xfeb8(r4)
    498a:	0f 5f       	rla	r15		
    498c:	0f 5f       	rla	r15		
    498e:	0f 5f       	rla	r15		
    4990:	0f 5e       	add	r14,	r15	
    4992:	2c 4f       	mov	@r15,	r12	
    4994:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4998:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    499c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    49a0:	08 ec       	xor	r12,	r8	
    49a2:	09 ed       	xor	r13,	r9	
    49a4:	0a ee       	xor	r14,	r10	
    49a6:	0b ef       	xor	r15,	r11	
    49a8:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    49ac:	3f 50 f3 ff 	add	#-13,	r15	;#0xfff3
    49b0:	1e 44 b8 fe 	mov	-328(r4),r14	;0xfeb8(r4)
    49b4:	0f 5f       	rla	r15		
    49b6:	0f 5f       	rla	r15		
    49b8:	0f 5f       	rla	r15		
    49ba:	0f 5e       	add	r14,	r15	
    49bc:	2c 4f       	mov	@r15,	r12	
    49be:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    49c2:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    49c6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    49ca:	0c e8       	xor	r8,	r12	
    49cc:	0d e9       	xor	r9,	r13	
    49ce:	0e ea       	xor	r10,	r14	
    49d0:	0f eb       	xor	r11,	r15	
    49d2:	1a 44 b8 fe 	mov	-328(r4),r10	;0xfeb8(r4)
    49d6:	1b 44 b2 fe 	mov	-334(r4),r11	;0xfeb2(r4)
    49da:	0b 5b       	rla	r11		
    49dc:	0b 5b       	rla	r11		
    49de:	0b 5b       	rla	r11		
    49e0:	0b 5a       	add	r10,	r11	
    49e2:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    49e6:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    49ea:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    49ee:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<13;++i) 
    L1[i] = cipher[i+19];

  for(i=0;i<80;++i)
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    49f2:	94 53 b2 fe 	inc	-334(r4)	;0xfeb2(r4)
    49f6:	1f 44 d0 ff 	mov	-48(r4),r15	;0xffd0(r4)
    49fa:	0f 5f       	rla	r15		
    49fc:	84 9f b2 fe 	cmp	r15,	-334(r4);0xfeb2(r4)
    4a00:	98 3b       	jl	$-206    	;abs 0x4932
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;

  for(i=rounds-1;i>=0;--i) {
    4a02:	1e 44 d0 ff 	mov	-48(r4),r14	;0xffd0(r4)
    4a06:	3e 53       	add	#-1,	r14	;r3 As==11
    4a08:	84 4e b2 fe 	mov	r14,	-334(r4);0xfeb2(r4)
    4a0c:	30 40 ce 4c 	br	#0x4cce	

    fb = L1[0];    
    4a10:	94 44 ca fe 	mov	-310(r4),-326(r4);0xfeca(r4), 0xfeba(r4)
    4a14:	ba fe 
    4a16:	94 44 cc fe 	mov	-308(r4),-324(r4);0xfecc(r4), 0xfebc(r4)
    4a1a:	bc fe 
    4a1c:	94 44 ce fe 	mov	-306(r4),-322(r4);0xfece(r4), 0xfebe(r4)
    4a20:	be fe 
    4a22:	94 44 d0 fe 	mov	-304(r4),-320(r4);0xfed0(r4), 0xfec0(r4)
    4a26:	c0 fe 
    fa = L2[0];
    4a28:	94 44 32 ff 	mov	-206(r4),-318(r4);0xff32(r4), 0xfec2(r4)
    4a2c:	c2 fe 
    4a2e:	94 44 34 ff 	mov	-204(r4),-316(r4);0xff34(r4), 0xfec4(r4)
    4a32:	c4 fe 
    4a34:	94 44 36 ff 	mov	-202(r4),-314(r4);0xff36(r4), 0xfec6(r4)
    4a38:	c6 fe 
    4a3a:	94 44 38 ff 	mov	-200(r4),-312(r4);0xff38(r4), 0xfec8(r4)
    4a3e:	c8 fe 
    for(j=0;j<12;++j)
    4a40:	84 43 b4 fe 	mov	#0,	-332(r4);r3 As==00, 0xfeb4(r4)
    4a44:	28 3c       	jmp	$+82     	;abs 0x4a96
      L1[j] = L1[j+1];
    4a46:	1f 44 b4 fe 	mov	-332(r4),r15	;0xfeb4(r4)
    4a4a:	1f 53       	inc	r15		
    4a4c:	0f 5f       	rla	r15		
    4a4e:	0f 5f       	rla	r15		
    4a50:	0f 5f       	rla	r15		
    4a52:	3a 40 b2 fe 	mov	#-334,	r10	;#0xfeb2
    4a56:	0a 54       	add	r4,	r10	
    4a58:	0f 5a       	add	r10,	r15	
    4a5a:	3f 50 18 00 	add	#24,	r15	;#0x0018
    4a5e:	2c 4f       	mov	@r15,	r12	
    4a60:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a64:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a68:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a6c:	1b 44 b4 fe 	mov	-332(r4),r11	;0xfeb4(r4)
    4a70:	0b 5b       	rla	r11		
    4a72:	0b 5b       	rla	r11		
    4a74:	0b 5b       	rla	r11		
    4a76:	3a 40 b2 fe 	mov	#-334,	r10	;#0xfeb2
    4a7a:	0a 54       	add	r4,	r10	
    4a7c:	0b 5a       	add	r10,	r11	
    4a7e:	3b 50 18 00 	add	#24,	r11	;#0x0018
    4a82:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4a86:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4a8a:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4a8e:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

  for(i=rounds-1;i>=0;--i) {

    fb = L1[0];    
    fa = L2[0];
    for(j=0;j<12;++j)
    4a92:	94 53 b4 fe 	inc	-332(r4)	;0xfeb4(r4)
    4a96:	b4 90 0c 00 	cmp	#12,	-332(r4);#0x000c, 0xfeb4(r4)
    4a9a:	b4 fe 
    4a9c:	d4 3b       	jl	$-86     	;abs 0x4a46
      L1[j] = L1[j+1];
    for(j=0;j<18;++j)
    4a9e:	84 43 b4 fe 	mov	#0,	-332(r4);r3 As==00, 0xfeb4(r4)
    4aa2:	28 3c       	jmp	$+82     	;abs 0x4af4
      L2[j] = L2[j+1];
    4aa4:	1f 44 b4 fe 	mov	-332(r4),r15	;0xfeb4(r4)
    4aa8:	1f 53       	inc	r15		
    4aaa:	0f 5f       	rla	r15		
    4aac:	0f 5f       	rla	r15		
    4aae:	0f 5f       	rla	r15		
    4ab0:	3e 40 b2 fe 	mov	#-334,	r14	;#0xfeb2
    4ab4:	0e 54       	add	r4,	r14	
    4ab6:	0f 5e       	add	r14,	r15	
    4ab8:	3f 50 80 00 	add	#128,	r15	;#0x0080
    4abc:	2c 4f       	mov	@r15,	r12	
    4abe:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4ac2:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4ac6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4aca:	1b 44 b4 fe 	mov	-332(r4),r11	;0xfeb4(r4)
    4ace:	0b 5b       	rla	r11		
    4ad0:	0b 5b       	rla	r11		
    4ad2:	0b 5b       	rla	r11		
    4ad4:	3a 40 b2 fe 	mov	#-334,	r10	;#0xfeb2
    4ad8:	0a 54       	add	r4,	r10	
    4ada:	0b 5a       	add	r10,	r11	
    4adc:	3b 50 80 00 	add	#128,	r11	;#0x0080
    4ae0:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4ae4:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4ae8:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4aec:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    fb = L1[0];    
    fa = L2[0];
    for(j=0;j<12;++j)
      L1[j] = L1[j+1];
    for(j=0;j<18;++j)
    4af0:	94 53 b4 fe 	inc	-332(r4)	;0xfeb4(r4)
    4af4:	b4 90 12 00 	cmp	#18,	-332(r4);#0x0012, 0xfeb4(r4)
    4af8:	b4 fe 
    4afa:	d4 3b       	jl	$-86     	;abs 0x4aa4
      L2[j] = L2[j+1];
    
    L1[X1_32] = fa ^ L1[X2_32] ^ (L1[X3_32] & L1[X4_32]) ^ (L1[X5_32] & IR[i])     ^ k[2*i];
    4afc:	1c 44 02 ff 	mov	-254(r4),r12	;0xff02(r4)
    4b00:	1d 44 04 ff 	mov	-252(r4),r13	;0xff04(r4)
    4b04:	1e 44 06 ff 	mov	-250(r4),r14	;0xff06(r4)
    4b08:	1f 44 08 ff 	mov	-248(r4),r15	;0xff08(r4)
    4b0c:	08 4c       	mov	r12,	r8	
    4b0e:	09 4d       	mov	r13,	r9	
    4b10:	0a 4e       	mov	r14,	r10	
    4b12:	0b 4f       	mov	r15,	r11	
    4b14:	18 e4 c2 fe 	xor	-318(r4),r8	;0xfec2(r4)
    4b18:	19 e4 c4 fe 	xor	-316(r4),r9	;0xfec4(r4)
    4b1c:	1a e4 c6 fe 	xor	-314(r4),r10	;0xfec6(r4)
    4b20:	1b e4 c8 fe 	xor	-312(r4),r11	;0xfec8(r4)
    4b24:	94 44 0a ff 	mov	-246(r4),-46(r4)	;0xff0a(r4), 0xffd2(r4)
    4b28:	d2 ff 
    4b2a:	94 44 0c ff 	mov	-244(r4),-44(r4)	;0xff0c(r4), 0xffd4(r4)
    4b2e:	d4 ff 
    4b30:	94 44 0e ff 	mov	-242(r4),-42(r4)	;0xff0e(r4), 0xffd6(r4)
    4b34:	d6 ff 
    4b36:	94 44 10 ff 	mov	-240(r4),-40(r4)	;0xff10(r4), 0xffd8(r4)
    4b3a:	d8 ff 
    4b3c:	1c 44 f2 fe 	mov	-270(r4),r12	;0xfef2(r4)
    4b40:	1d 44 f4 fe 	mov	-268(r4),r13	;0xfef4(r4)
    4b44:	1e 44 f6 fe 	mov	-266(r4),r14	;0xfef6(r4)
    4b48:	1f 44 f8 fe 	mov	-264(r4),r15	;0xfef8(r4)
    4b4c:	1c f4 d2 ff 	and	-46(r4),r12	;0xffd2(r4)
    4b50:	1d f4 d4 ff 	and	-44(r4),r13	;0xffd4(r4)
    4b54:	1e f4 d6 ff 	and	-42(r4),r14	;0xffd6(r4)
    4b58:	1f f4 d8 ff 	and	-40(r4),r15	;0xffd8(r4)
    4b5c:	08 ec       	xor	r12,	r8	
    4b5e:	09 ed       	xor	r13,	r9	
    4b60:	0a ee       	xor	r14,	r10	
    4b62:	0b ef       	xor	r15,	r11	
    4b64:	94 44 e2 fe 	mov	-286(r4),-38(r4)	;0xfee2(r4), 0xffda(r4)
    4b68:	da ff 
    4b6a:	94 44 e4 fe 	mov	-284(r4),-36(r4)	;0xfee4(r4), 0xffdc(r4)
    4b6e:	dc ff 
    4b70:	94 44 e6 fe 	mov	-282(r4),-34(r4)	;0xfee6(r4), 0xffde(r4)
    4b74:	de ff 
    4b76:	94 44 e8 fe 	mov	-280(r4),-32(r4)	;0xfee8(r4), 0xffe0(r4)
    4b7a:	e0 ff 
    4b7c:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4b80:	0f 5f       	rla	r15		
    4b82:	0f 5f       	rla	r15		
    4b84:	0f 5f       	rla	r15		
    4b86:	3f 50 a8 4e 	add	#20136,	r15	;#0x4ea8
    4b8a:	2c 4f       	mov	@r15,	r12	
    4b8c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4b90:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4b94:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4b98:	1c f4 da ff 	and	-38(r4),r12	;0xffda(r4)
    4b9c:	1d f4 dc ff 	and	-36(r4),r13	;0xffdc(r4)
    4ba0:	1e f4 de ff 	and	-34(r4),r14	;0xffde(r4)
    4ba4:	1f f4 e0 ff 	and	-32(r4),r15	;0xffe0(r4)
    4ba8:	08 ec       	xor	r12,	r8	
    4baa:	09 ed       	xor	r13,	r9	
    4bac:	0a ee       	xor	r14,	r10	
    4bae:	0b ef       	xor	r15,	r11	
    4bb0:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4bb4:	0f 5f       	rla	r15		
    4bb6:	1e 44 b8 fe 	mov	-328(r4),r14	;0xfeb8(r4)
    4bba:	0f 5f       	rla	r15		
    4bbc:	0f 5f       	rla	r15		
    4bbe:	0f 5f       	rla	r15		
    4bc0:	0f 5e       	add	r14,	r15	
    4bc2:	2c 4f       	mov	@r15,	r12	
    4bc4:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4bc8:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4bcc:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4bd0:	0c e8       	xor	r8,	r12	
    4bd2:	0d e9       	xor	r9,	r13	
    4bd4:	0e ea       	xor	r10,	r14	
    4bd6:	0f eb       	xor	r11,	r15	
    4bd8:	84 4c 2a ff 	mov	r12,	-214(r4);0xff2a(r4)
    4bdc:	84 4d 2c ff 	mov	r13,	-212(r4);0xff2c(r4)
    4be0:	84 4e 2e ff 	mov	r14,	-210(r4);0xff2e(r4)
    4be4:	84 4f 30 ff 	mov	r15,	-208(r4);0xff30(r4)
    L2[Y1_32] = fb ^ L2[Y2_32] ^ (L2[Y3_32] & L2[Y4_32]) ^ (L2[Y5_32] & L2[Y6_32]) ^ k[2*i+1];
    4be8:	1c 44 6a ff 	mov	-150(r4),r12	;0xff6a(r4)
    4bec:	1d 44 6c ff 	mov	-148(r4),r13	;0xff6c(r4)
    4bf0:	1e 44 6e ff 	mov	-146(r4),r14	;0xff6e(r4)
    4bf4:	1f 44 70 ff 	mov	-144(r4),r15	;0xff70(r4)
    4bf8:	08 4c       	mov	r12,	r8	
    4bfa:	09 4d       	mov	r13,	r9	
    4bfc:	0a 4e       	mov	r14,	r10	
    4bfe:	0b 4f       	mov	r15,	r11	
    4c00:	18 e4 ba fe 	xor	-326(r4),r8	;0xfeba(r4)
    4c04:	19 e4 bc fe 	xor	-324(r4),r9	;0xfebc(r4)
    4c08:	1a e4 be fe 	xor	-322(r4),r10	;0xfebe(r4)
    4c0c:	1b e4 c0 fe 	xor	-320(r4),r11	;0xfec0(r4)
    4c10:	94 44 92 ff 	mov	-110(r4),-30(r4)	;0xff92(r4), 0xffe2(r4)
    4c14:	e2 ff 
    4c16:	94 44 94 ff 	mov	-108(r4),-28(r4)	;0xff94(r4), 0xffe4(r4)
    4c1a:	e4 ff 
    4c1c:	94 44 96 ff 	mov	-106(r4),-26(r4)	;0xff96(r4), 0xffe6(r4)
    4c20:	e6 ff 
    4c22:	94 44 98 ff 	mov	-104(r4),-24(r4)	;0xff98(r4), 0xffe8(r4)
    4c26:	e8 ff 
    4c28:	1c 44 82 ff 	mov	-126(r4),r12	;0xff82(r4)
    4c2c:	1d 44 84 ff 	mov	-124(r4),r13	;0xff84(r4)
    4c30:	1e 44 86 ff 	mov	-122(r4),r14	;0xff86(r4)
    4c34:	1f 44 88 ff 	mov	-120(r4),r15	;0xff88(r4)
    4c38:	1c f4 e2 ff 	and	-30(r4),r12	;0xffe2(r4)
    4c3c:	1d f4 e4 ff 	and	-28(r4),r13	;0xffe4(r4)
    4c40:	1e f4 e6 ff 	and	-26(r4),r14	;0xffe6(r4)
    4c44:	1f f4 e8 ff 	and	-24(r4),r15	;0xffe8(r4)
    4c48:	08 ec       	xor	r12,	r8	
    4c4a:	09 ed       	xor	r13,	r9	
    4c4c:	0a ee       	xor	r14,	r10	
    4c4e:	0b ef       	xor	r15,	r11	
    4c50:	94 44 72 ff 	mov	-142(r4),-22(r4)	;0xff72(r4), 0xffea(r4)
    4c54:	ea ff 
    4c56:	94 44 74 ff 	mov	-140(r4),-20(r4)	;0xff74(r4), 0xffec(r4)
    4c5a:	ec ff 
    4c5c:	94 44 76 ff 	mov	-138(r4),-18(r4)	;0xff76(r4), 0xffee(r4)
    4c60:	ee ff 
    4c62:	94 44 78 ff 	mov	-136(r4),-16(r4)	;0xff78(r4), 0xfff0(r4)
    4c66:	f0 ff 
    4c68:	1c 44 4a ff 	mov	-182(r4),r12	;0xff4a(r4)
    4c6c:	1d 44 4c ff 	mov	-180(r4),r13	;0xff4c(r4)
    4c70:	1e 44 4e ff 	mov	-178(r4),r14	;0xff4e(r4)
    4c74:	1f 44 50 ff 	mov	-176(r4),r15	;0xff50(r4)
    4c78:	1c f4 ea ff 	and	-22(r4),r12	;0xffea(r4)
    4c7c:	1d f4 ec ff 	and	-20(r4),r13	;0xffec(r4)
    4c80:	1e f4 ee ff 	and	-18(r4),r14	;0xffee(r4)
    4c84:	1f f4 f0 ff 	and	-16(r4),r15	;0xfff0(r4)
    4c88:	08 ec       	xor	r12,	r8	
    4c8a:	09 ed       	xor	r13,	r9	
    4c8c:	0a ee       	xor	r14,	r10	
    4c8e:	0b ef       	xor	r15,	r11	
    4c90:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4c94:	0f 5f       	rla	r15		
    4c96:	1f 53       	inc	r15		
    4c98:	1e 44 b8 fe 	mov	-328(r4),r14	;0xfeb8(r4)
    4c9c:	0f 5f       	rla	r15		
    4c9e:	0f 5f       	rla	r15		
    4ca0:	0f 5f       	rla	r15		
    4ca2:	0f 5e       	add	r14,	r15	
    4ca4:	2c 4f       	mov	@r15,	r12	
    4ca6:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4caa:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4cae:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4cb2:	0c e8       	xor	r8,	r12	
    4cb4:	0d e9       	xor	r9,	r13	
    4cb6:	0e ea       	xor	r10,	r14	
    4cb8:	0f eb       	xor	r11,	r15	
    4cba:	84 4c c2 ff 	mov	r12,	-62(r4)	;0xffc2(r4)
    4cbe:	84 4d c4 ff 	mov	r13,	-60(r4)	;0xffc4(r4)
    4cc2:	84 4e c6 ff 	mov	r14,	-58(r4)	;0xffc6(r4)
    4cc6:	84 4f c8 ff 	mov	r15,	-56(r4)	;0xffc8(r4)
  for(i=0;i<80;++i)
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;

  for(i=rounds-1;i>=0;--i) {
    4cca:	b4 53 b2 fe 	add	#-1,	-334(r4);r3 As==11, 0xfeb2(r4)
    4cce:	84 93 b2 fe 	tst	-334(r4)	;0xfeb2(r4)
    4cd2:	02 38       	jl	$+6      	;abs 0x4cd8
    4cd4:	30 40 10 4a 	br	#0x4a10	
    
    L1[X1_32] = fa ^ L1[X2_32] ^ (L1[X3_32] & L1[X4_32]) ^ (L1[X5_32] & IR[i])     ^ k[2*i];
    L2[Y1_32] = fb ^ L2[Y2_32] ^ (L2[Y3_32] & L2[Y4_32]) ^ (L2[Y5_32] & L2[Y6_32]) ^ k[2*i+1];
  }
  
  for(i=0;i<19;++i) 
    4cd8:	84 43 b2 fe 	mov	#0,	-334(r4);r3 As==00, 0xfeb2(r4)
    4cdc:	24 3c       	jmp	$+74     	;abs 0x4d26
    plain[i] = L2[i];
    4cde:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4ce2:	0f 5f       	rla	r15		
    4ce4:	0f 5f       	rla	r15		
    4ce6:	0f 5f       	rla	r15		
    4ce8:	1b 44 cc ff 	mov	-52(r4),r11	;0xffcc(r4)
    4cec:	0b 5f       	add	r15,	r11	
    4cee:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4cf2:	0f 5f       	rla	r15		
    4cf4:	0f 5f       	rla	r15		
    4cf6:	0f 5f       	rla	r15		
    4cf8:	3e 40 b2 fe 	mov	#-334,	r14	;#0xfeb2
    4cfc:	0e 54       	add	r4,	r14	
    4cfe:	0f 5e       	add	r14,	r15	
    4d00:	3f 50 80 00 	add	#128,	r15	;#0x0080
    4d04:	2c 4f       	mov	@r15,	r12	
    4d06:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4d0a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4d0e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4d12:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4d16:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4d1a:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4d1e:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    
    L1[X1_32] = fa ^ L1[X2_32] ^ (L1[X3_32] & L1[X4_32]) ^ (L1[X5_32] & IR[i])     ^ k[2*i];
    L2[Y1_32] = fb ^ L2[Y2_32] ^ (L2[Y3_32] & L2[Y4_32]) ^ (L2[Y5_32] & L2[Y6_32]) ^ k[2*i+1];
  }
  
  for(i=0;i<19;++i) 
    4d22:	94 53 b2 fe 	inc	-334(r4)	;0xfeb2(r4)
    4d26:	b4 90 13 00 	cmp	#19,	-334(r4);#0x0013, 0xfeb2(r4)
    4d2a:	b2 fe 
    4d2c:	d8 3b       	jl	$-78     	;abs 0x4cde
    plain[i] = L2[i];
  for(i=0;i<13;++i) 
    4d2e:	84 43 b2 fe 	mov	#0,	-334(r4);r3 As==00, 0xfeb2(r4)
    4d32:	26 3c       	jmp	$+78     	;abs 0x4d80
    plain[i+19] = L1[i];
    4d34:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4d38:	3f 50 13 00 	add	#19,	r15	;#0x0013
    4d3c:	0f 5f       	rla	r15		
    4d3e:	0f 5f       	rla	r15		
    4d40:	0f 5f       	rla	r15		
    4d42:	1b 44 cc ff 	mov	-52(r4),r11	;0xffcc(r4)
    4d46:	0b 5f       	add	r15,	r11	
    4d48:	1f 44 b2 fe 	mov	-334(r4),r15	;0xfeb2(r4)
    4d4c:	0f 5f       	rla	r15		
    4d4e:	0f 5f       	rla	r15		
    4d50:	0f 5f       	rla	r15		
    4d52:	3a 40 b2 fe 	mov	#-334,	r10	;#0xfeb2
    4d56:	0a 54       	add	r4,	r10	
    4d58:	0f 5a       	add	r10,	r15	
    4d5a:	3f 50 18 00 	add	#24,	r15	;#0x0018
    4d5e:	2c 4f       	mov	@r15,	r12	
    4d60:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4d64:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4d68:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4d6c:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4d70:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4d74:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4d78:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    L2[Y1_32] = fb ^ L2[Y2_32] ^ (L2[Y3_32] & L2[Y4_32]) ^ (L2[Y5_32] & L2[Y6_32]) ^ k[2*i+1];
  }
  
  for(i=0;i<19;++i) 
    plain[i] = L2[i];
  for(i=0;i<13;++i) 
    4d7c:	94 53 b2 fe 	inc	-334(r4)	;0xfeb2(r4)
    4d80:	b4 90 0d 00 	cmp	#13,	-334(r4);#0x000d, 0xfeb2(r4)
    4d84:	b2 fe 
    4d86:	d6 3b       	jl	$-82     	;abs 0x4d34
    4d88:	01 46       	mov	r6,	r1	
    plain[i+19] = L1[i];
  
}
    4d8a:	01 47       	mov	r7,	r1	
    4d8c:	31 50 40 01 	add	#320,	r1	;#0x0140
    4d90:	34 41       	pop	r4		
    4d92:	36 41       	pop	r6		
    4d94:	37 41       	pop	r7		
    4d96:	38 41       	pop	r8		
    4d98:	39 41       	pop	r9		
    4d9a:	3a 41       	pop	r10		
    4d9c:	3b 41       	pop	r11		
    4d9e:	30 41       	ret			

00004da0 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4da0:	04 12       	push	r4		
    4da2:	04 41       	mov	r1,	r4	
    4da4:	24 53       	incd	r4		
    4da6:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4daa:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4dae:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4db2:	0d 3c       	jmp	$+28     	;abs 0x4dce
    {
      for (i = 0; i<d; i++) 
    4db4:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4db8:	04 3c       	jmp	$+10     	;abs 0x4dc2
	{
	  nop();
    4dba:	03 43       	nop			
	  nop();
    4dbc:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4dbe:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4dc2:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4dc6:	f8 ff 
    4dc8:	f8 2b       	jnc	$-14     	;abs 0x4dba
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4dca:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4dce:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4dd2:	fa ff 
    4dd4:	ef 2b       	jnc	$-32     	;abs 0x4db4
	{
	  nop();
	  nop();
	}
    }
}
    4dd6:	31 50 06 00 	add	#6,	r1	;#0x0006
    4dda:	34 41       	pop	r4		
    4ddc:	30 41       	ret			

00004dde <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4dde:	04 12       	push	r4		
    4de0:	04 41       	mov	r1,	r4	
    4de2:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4de4:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4de8:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4dea:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4dee:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4df2:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4df6:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4dfa:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4dfe:	5f 42 05 00 	mov.b	&0x0005,r15	
    4e02:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4e06:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4e0a:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4e0e:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4e12:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4e14:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4e18:	79 00 
  U1RCTL = 0;
    4e1a:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4e1e:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4e22:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4e26:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4e28:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4e2c:	7b 00 

  delay(0x800);
    4e2e:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4e32:	b0 12 a0 4d 	call	#0x4da0	
  return 0;
    4e36:	0f 43       	clr	r15		
}
    4e38:	34 41       	pop	r4		
    4e3a:	30 41       	ret			

00004e3c <uart1_putchar>:

int uart1_putchar(int c)
{
    4e3c:	04 12       	push	r4		
    4e3e:	04 41       	mov	r1,	r4	
    4e40:	24 53       	incd	r4		
    4e42:	21 83       	decd	r1		
    4e44:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4e48:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4e4c:	4f 4f       	mov.b	r15,	r15	
    4e4e:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4e52:	03 43       	nop			
    4e54:	5f 42 79 00 	mov.b	&0x0079,r15	
    4e58:	4f 4f       	mov.b	r15,	r15	
    4e5a:	1f f3       	and	#1,	r15	;r3 As==01
    4e5c:	0f 93       	tst	r15		
    4e5e:	fa 27       	jz	$-10     	;abs 0x4e54
  return (unsigned char)c;
    4e60:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4e64:	4f 4f       	mov.b	r15,	r15	
    4e66:	4f 4f       	mov.b	r15,	r15	
}
    4e68:	21 53       	incd	r1		
    4e6a:	34 41       	pop	r4		
    4e6c:	30 41       	ret			

00004e6e <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4e6e:	04 12       	push	r4		
    4e70:	04 41       	mov	r1,	r4	
    4e72:	24 53       	incd	r4		
    4e74:	21 83       	decd	r1		
    4e76:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4e7a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4e7e:	b0 12 3c 4e 	call	#0x4e3c	
}
    4e82:	21 53       	incd	r1		
    4e84:	34 41       	pop	r4		
    4e86:	30 41       	ret			

00004e88 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4e88:	04 12       	push	r4		
    4e8a:	04 41       	mov	r1,	r4	
    4e8c:	24 53       	incd	r4		
  ;
}
    4e8e:	34 41       	pop	r4		
    4e90:	30 41       	ret			

00004e92 <start_decrypt>:
void
start_decrypt()
{
    4e92:	04 12       	push	r4		
    4e94:	04 41       	mov	r1,	r4	
    4e96:	24 53       	incd	r4		
  ;
}
    4e98:	34 41       	pop	r4		
    4e9a:	30 41       	ret			

00004e9c <end_expe>:


void
end_expe()
{
    4e9c:	04 12       	push	r4		
    4e9e:	04 41       	mov	r1,	r4	
    4ea0:	24 53       	incd	r4		
  ;
}
    4ea2:	34 41       	pop	r4		
    4ea4:	30 41       	ret			

00004ea6 <_unexpected_>:
    4ea6:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	00 41 00 41 00 41 00 41 00 41 00 41 00 41 00 41     .A.A.A.A.A.A.A.A
    fff0:	00 41 00 41 00 41 00 41 00 41 00 41 00 41 00 40     .A.A.A.A.A.A.A.@
