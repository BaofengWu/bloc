
aes.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00004d42 l    d  .rodata	00000000 .rodata
00001100 l    d  .data	00000000 .data
00001110 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 aes.c
000040e2 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 aes-naive.c
00004d42 l     O .rodata	00000100 Logtable
00004e42 l     O .rodata	00000100 ALogtable
00004f42 l     O .rodata	00000100 SBox
00005042 l     O .rodata	00000100 InvSBox
00005142 l     O .rodata	0000000a rcon
00000000 l    df *ABS*	00000000 tools.c
00000000 l    df *ABS*	00000000 memcpy.c
00004bb2 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000010 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040e2  w      .text	00000000 __isr_14
000044aa g     F .text	0000010e InvShiftRows
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
00004bea g       .text	00000000 __ext_divmod16
000040e2  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000040e6 g     F .text	00000048 galois_mul
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
00004c24 g     F .text	00000000 __udivhi3
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
0000514c g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
000041a4 g     F .text	0000010e ShiftRows
0000001d g       *ABS*	00000000 __P4OUT
000045b8 g     F .text	00000180 InvMixColumns
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004b22 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040dc  w      .text	00000000 __stop_progExec__
00004c46 g     F .text	000000fa memcpy
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040e2  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004be0 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00004738 g     F .text	00000212 AES_init_variable_keylength
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040e2  w      .text	00000000 __isr_5
0000514c g       *ABS*	00000000 __data_load_start
000040e2 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040e2  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00004c1c g     F .text	00000000 __modhi3
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040e2  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000412e g     F .text	00000034 galois_mulinv
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001110 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040e2  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004c3e g     F .text	00000000 __umodhi3
000040e2  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
000042e2 g     F .text	00000138 MixColumns
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004d40  w      .text	00000000 _unexpected_
000040e2  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040e2  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004b80 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00004bea g     F .text	00000000 __divhi3
00004c24 g       .text	00000000 __ext_udivmod16
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040e2 g       .text	00000000 __ctors_start
000040e2  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00004162 g     F .text	00000042 SubBytes
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001110 g       .data	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	0000009e main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040e2  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00004970 g     F .text	000000b8 AES_encrypt
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
0000494a g     F .text	00000026 AES_init
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004ae4 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040e2  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040e2 g       .text	00000000 __dtors_start
000040e2  w      .text	00000000 __isr_6
000040e2 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040e2  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001110 g       .data	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001112 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004bcc g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040dc  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
000042b2 g     F .text	00000030 rj_Xtime
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004bd6 g     F .text	0000000a start_decrypt
00001100 g       .data	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00004468 g     F .text	00000042 InvSubBytes
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
0000441a g     F .text	0000004e AddRoundKey
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00004a28 g     F .text	000000bc AES_decrypt
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 10 11 	mov	r5,	&0x1110	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 10 11 	mov	&0x1110,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 4c 51 	mov	20812(r15),4352(r15);0x514c(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 10 11 	mov	&0x1110,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 10 11 	mov.b	#0,	4368(r15);r3 As==00, 0x1110(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
#include "aes-naive.h"
#include "tools.h"

int main (int argc, char ** argv)
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 da fd 	add	#-550,	r1	;#0xfdda
    4046:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    404a:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)

	AES_CTX ctx;
	u8 akey[16]={0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED};
    404e:	0f 44       	mov	r4,	r15	
    4050:	3f 50 ba ff 	add	#-70,	r15	;#0xffba
    4054:	3e 40 00 11 	mov	#4352,	r14	;#0x1100
    4058:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    405c:	b0 12 46 4c 	call	#0x4c46	
	u8 adata[16]={0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED,0xED};
    4060:	0f 44       	mov	r4,	r15	
    4062:	3f 50 ca ff 	add	#-54,	r15	;#0xffca
    4066:	3e 40 00 11 	mov	#4352,	r14	;#0x1100
    406a:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    406e:	b0 12 46 4c 	call	#0x4c46	
	
	u8 digest[16];
	u8 decrypt[16];

	START_ENCRYPT();
    4072:	b0 12 cc 4b 	call	#0x4bcc	
					
	AES_init(&ctx, akey);
    4076:	0f 44       	mov	r4,	r15	
    4078:	3f 50 ba ff 	add	#-70,	r15	;#0xffba
    407c:	0e 4f       	mov	r15,	r14	
    407e:	0f 44       	mov	r4,	r15	
    4080:	3f 50 d8 fd 	add	#-552,	r15	;#0xfdd8
    4084:	b0 12 4a 49 	call	#0x494a	
	AES_encrypt(&ctx, adata, digest);
    4088:	0e 44       	mov	r4,	r14	
    408a:	3e 50 da ff 	add	#-38,	r14	;#0xffda
    408e:	0f 44       	mov	r4,	r15	
    4090:	3f 50 ca ff 	add	#-54,	r15	;#0xffca
    4094:	0d 4e       	mov	r14,	r13	
    4096:	0e 4f       	mov	r15,	r14	
    4098:	0f 44       	mov	r4,	r15	
    409a:	3f 50 d8 fd 	add	#-552,	r15	;#0xfdd8
    409e:	b0 12 70 49 	call	#0x4970	

	START_DECRYPT();
    40a2:	b0 12 d6 4b 	call	#0x4bd6	

	AES_init(&ctx, akey);
    40a6:	0f 44       	mov	r4,	r15	
    40a8:	3f 50 ba ff 	add	#-70,	r15	;#0xffba
    40ac:	0e 4f       	mov	r15,	r14	
    40ae:	0f 44       	mov	r4,	r15	
    40b0:	3f 50 d8 fd 	add	#-552,	r15	;#0xfdd8
    40b4:	b0 12 4a 49 	call	#0x494a	
	AES_decrypt(&ctx, digest, decrypt);
    40b8:	0e 44       	mov	r4,	r14	
    40ba:	3e 50 ea ff 	add	#-22,	r14	;#0xffea
    40be:	0f 44       	mov	r4,	r15	
    40c0:	3f 50 da ff 	add	#-38,	r15	;#0xffda
    40c4:	0d 4e       	mov	r14,	r13	
    40c6:	0e 4f       	mov	r15,	r14	
    40c8:	0f 44       	mov	r4,	r15	
    40ca:	3f 50 d8 fd 	add	#-552,	r15	;#0xfdd8
    40ce:	b0 12 28 4a 	call	#0x4a28	

	END_EXPE();
    40d2:	b0 12 e0 4b 	call	#0x4be0	

	return 0;
    40d6:	0f 43       	clr	r15		
}
    40d8:	31 50 26 02 	add	#550,	r1	;#0x0226

000040dc <__stop_progExec__>:
    40dc:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40e0:	fd 3f       	jmp	$-4      	;abs 0x40dc

000040e2 <__ctors_end>:
    40e2:	30 40 40 4d 	br	#0x4d40	

000040e6 <galois_mul>:
#define ALOG(i) galois_alog(i) 

#endif

u8 galois_mul( u8 a, u8 b)
{
    40e6:	04 12       	push	r4		
    40e8:	04 41       	mov	r1,	r4	
    40ea:	24 53       	incd	r4		
    40ec:	21 83       	decd	r1		
    40ee:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    40f2:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
	if (a && b)
    40f6:	c4 93 fc ff 	tst.b	-4(r4)		;0xfffc(r4)
    40fa:	15 24       	jz	$+44     	;abs 0x4126
    40fc:	c4 93 fd ff 	tst.b	-3(r4)		;0xfffd(r4)
    4100:	12 24       	jz	$+38     	;abs 0x4126
	{
		return ALOG((LOG(a) + LOG(b)) % 255);
    4102:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    4106:	5f 4f 42 4d 	mov.b	19778(r15),r15	;0x4d42(r15)
    410a:	4e 4f       	mov.b	r15,	r14	
    410c:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    4110:	5f 4f 42 4d 	mov.b	19778(r15),r15	;0x4d42(r15)
    4114:	4f 4f       	mov.b	r15,	r15	
    4116:	0f 5e       	add	r14,	r15	
    4118:	3e 40 ff 00 	mov	#255,	r14	;#0x00ff
    411c:	b0 12 1c 4c 	call	#0x4c1c	
    4120:	5f 4f 42 4e 	mov.b	20034(r15),r15	;0x4e42(r15)
    4124:	01 3c       	jmp	$+4      	;abs 0x4128
	}
	else
		return 0;
    4126:	4f 43       	clr.b	r15		
}
    4128:	21 53       	incd	r1		
    412a:	34 41       	pop	r4		
    412c:	30 41       	ret			

0000412e <galois_mulinv>:

u8 galois_mulinv( u8 x ) // multiplicative inverse
{
    412e:	04 12       	push	r4		
    4130:	04 41       	mov	r1,	r4	
    4132:	24 53       	incd	r4		
    4134:	21 83       	decd	r1		
    4136:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    return (x) ? ALOG(255 - LOG(x)) : 0;
    413a:	c4 93 fc ff 	tst.b	-4(r4)		;0xfffc(r4)
    413e:	0d 24       	jz	$+28     	;abs 0x415a
    4140:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    4144:	5f 4f 42 4d 	mov.b	19778(r15),r15	;0x4d42(r15)
    4148:	4f 4f       	mov.b	r15,	r15	
    414a:	3e 40 ff 00 	mov	#255,	r14	;#0x00ff
    414e:	0d 4e       	mov	r14,	r13	
    4150:	0d 8f       	sub	r15,	r13	
    4152:	0f 4d       	mov	r13,	r15	
    4154:	5f 4f 42 4e 	mov.b	20034(r15),r15	;0x4e42(r15)
    4158:	01 3c       	jmp	$+4      	;abs 0x415c
    415a:	4f 43       	clr.b	r15		
}
    415c:	21 53       	incd	r1		
    415e:	34 41       	pop	r4		
    4160:	30 41       	ret			

00004162 <SubBytes>:

#ifdef INLINE
inline
#endif /* INLINE */
void SubBytes( u8 *state )
{
    4162:	04 12       	push	r4		
    4164:	04 41       	mov	r1,	r4	
    4166:	24 53       	incd	r4		
    4168:	21 82       	sub	#4,	r1	;r2 As==10
    416a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i;
	for( i = 0; i < AES_BLOCK_SIZE; ++i)
    416e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4172:	11 3c       	jmp	$+36     	;abs 0x4196
		state[i] = SBOX( state[i] );
    4174:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4178:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    417c:	0e 5f       	add	r15,	r14	
    417e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4182:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4186:	6f 4f       	mov.b	@r15,	r15	
    4188:	4f 4f       	mov.b	r15,	r15	
    418a:	5f 4f 42 4f 	mov.b	20290(r15),r15	;0x4f42(r15)
    418e:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
inline
#endif /* INLINE */
void SubBytes( u8 *state )
{
	int i;
	for( i = 0; i < AES_BLOCK_SIZE; ++i)
    4192:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4196:	b4 90 10 00 	cmp	#16,	-6(r4)	;#0x0010, 0xfffa(r4)
    419a:	fa ff 
    419c:	eb 3b       	jl	$-40     	;abs 0x4174
		state[i] = SBOX( state[i] );
}
    419e:	21 52       	add	#4,	r1	;r2 As==10
    41a0:	34 41       	pop	r4		
    41a2:	30 41       	ret			

000041a4 <ShiftRows>:

#ifdef INLINE
inline
#endif /* INLINE */
void ShiftRows( u8 *state )
{
    41a4:	04 12       	push	r4		
    41a6:	04 41       	mov	r1,	r4	
    41a8:	24 53       	incd	r4		
    41aa:	21 82       	sub	#4,	r1	;r2 As==10
    41ac:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
		state[4*i + ((4 - i + 1) % 4)] = state[4*i + ((3 + i) % 4]
		state[4*i + (4 - i)] = temp
	should work but take a load of int ops. So I unroll
	the 12 perms here. */
	u8 temp;
	temp 		= state[1];
    41b0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    41b4:	d4 4f 01 00 	mov.b	1(r15),	-6(r4)	;0x0001(r15), 0xfffa(r4)
    41b8:	fa ff 
	state[1] 	= state[5];
    41ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    41be:	1f 53       	inc	r15		
    41c0:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    41c4:	5e 4e 05 00 	mov.b	5(r14),	r14	;0x0005(r14)
    41c8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[5] 	= state[9];
    41cc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    41d0:	3f 50 05 00 	add	#5,	r15	;#0x0005
    41d4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    41d8:	5e 4e 09 00 	mov.b	9(r14),	r14	;0x0009(r14)
    41dc:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[9] 	= state[13];
    41e0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    41e4:	3f 50 09 00 	add	#9,	r15	;#0x0009
    41e8:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    41ec:	5e 4e 0d 00 	mov.b	13(r14),r14	;0x000d(r14)
    41f0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[13] 	= temp;
    41f4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    41f8:	3f 50 0d 00 	add	#13,	r15	;#0x000d
    41fc:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    4200:	00 00 
	temp 		= state[2];
    4202:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4206:	d4 4f 02 00 	mov.b	2(r15),	-6(r4)	;0x0002(r15), 0xfffa(r4)
    420a:	fa ff 
	state[2] 	= state[10];
    420c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4210:	2f 53       	incd	r15		
    4212:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4216:	5e 4e 0a 00 	mov.b	10(r14),r14	;0x000a(r14)
    421a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[10] 	= temp;
    421e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4222:	3f 50 0a 00 	add	#10,	r15	;#0x000a
    4226:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    422a:	00 00 
	temp 		= state[6];
    422c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4230:	d4 4f 06 00 	mov.b	6(r15),	-6(r4)	;0x0006(r15), 0xfffa(r4)
    4234:	fa ff 
	state[6] 	= state[14];
    4236:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    423a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    423e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4242:	5e 4e 0e 00 	mov.b	14(r14),r14	;0x000e(r14)
    4246:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[14] 	= temp;
    424a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    424e:	3f 50 0e 00 	add	#14,	r15	;#0x000e
    4252:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    4256:	00 00 
	temp 		= state[15];
    4258:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    425c:	d4 4f 0f 00 	mov.b	15(r15),-6(r4)	;0x000f(r15), 0xfffa(r4)
    4260:	fa ff 
	state[15] 	= state[11];
    4262:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4266:	3f 50 0f 00 	add	#15,	r15	;#0x000f
    426a:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    426e:	5e 4e 0b 00 	mov.b	11(r14),r14	;0x000b(r14)
    4272:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[11] 	= state[7];
    4276:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    427a:	3f 50 0b 00 	add	#11,	r15	;#0x000b
    427e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4282:	5e 4e 07 00 	mov.b	7(r14),	r14	;0x0007(r14)
    4286:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[7] 	= state[3];
    428a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    428e:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4292:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4296:	5e 4e 03 00 	mov.b	3(r14),	r14	;0x0003(r14)
    429a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[3] 	= temp;
    429e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    42a2:	3f 50 03 00 	add	#3,	r15	;#0x0003
    42a6:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    42aa:	00 00 
}
    42ac:	21 52       	add	#4,	r1	;r2 As==10
    42ae:	34 41       	pop	r4		
    42b0:	30 41       	ret			

000042b2 <rj_Xtime>:

u8 rj_Xtime( u8 x )
{
    42b2:	04 12       	push	r4		
    42b4:	04 41       	mov	r1,	r4	
    42b6:	24 53       	incd	r4		
    42b8:	21 83       	decd	r1		
    42ba:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return (x & 0x80) ? ((x << 1) ^ 0x1b) : (x << 1);
    42be:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    42c2:	4f 93       	tst.b	r15		
    42c4:	07 34       	jge	$+16     	;abs 0x42d4
    42c6:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    42ca:	0f 5f       	rla	r15		
    42cc:	4f 4f       	mov.b	r15,	r15	
    42ce:	7f e0 1b 00 	xor.b	#27,	r15	;#0x001b
    42d2:	04 3c       	jmp	$+10     	;abs 0x42dc
    42d4:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    42d8:	4f 4f       	mov.b	r15,	r15	
    42da:	4f 5f       	rla.b	r15		
}
    42dc:	21 53       	incd	r1		
    42de:	34 41       	pop	r4		
    42e0:	30 41       	ret			

000042e2 <MixColumns>:

#ifdef INLINE
inline
#endif /* INLINE */
void MixColumns( u8 *state )
{
    42e2:	0b 12       	push	r11		
    42e4:	0a 12       	push	r10		
    42e6:	04 12       	push	r4		
    42e8:	04 41       	mov	r1,	r4	
    42ea:	34 50 06 00 	add	#6,	r4	;#0x0006
    42ee:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    42f2:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
	u8 a, b, c, d, e;
	int i;
	for( i = 0; i < 16; i += 4 )
    42f6:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    42fa:	85 3c       	jmp	$+268    	;abs 0x4406
	{
		a = state[i  ];
    42fc:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4300:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4304:	e4 4f f2 ff 	mov.b	@r15,	-14(r4)	;0xfff2(r4)
		b = state[i+1];
    4308:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    430c:	1f 53       	inc	r15		
    430e:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4312:	e4 4f f3 ff 	mov.b	@r15,	-13(r4)	;0xfff3(r4)
		c = state[i+2];
    4316:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    431a:	2f 53       	incd	r15		
    431c:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4320:	e4 4f f4 ff 	mov.b	@r15,	-12(r4)	;0xfff4(r4)
		d = state[i+3];
    4324:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4328:	3f 50 03 00 	add	#3,	r15	;#0x0003
    432c:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4330:	e4 4f f5 ff 	mov.b	@r15,	-11(r4)	;0xfff5(r4)
		e = a ^ b ^ c ^ d;
    4334:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    4338:	5f e4 f3 ff 	xor.b	-13(r4),r15	;0xfff3(r4)
    433c:	5f e4 f4 ff 	xor.b	-12(r4),r15	;0xfff4(r4)
    4340:	4e 4f       	mov.b	r15,	r14	
    4342:	5e e4 f5 ff 	xor.b	-11(r4),r14	;0xfff5(r4)
    4346:	c4 4e f6 ff 	mov.b	r14,	-10(r4)	;0xfff6(r4)
		state[i  ] ^= e ^ rj_Xtime( a ^ b );
    434a:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    434e:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    4352:	0b 5f       	add	r15,	r11	
    4354:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4358:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    435c:	6a 4f       	mov.b	@r15,	r10	
    435e:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    4362:	5f e4 f3 ff 	xor.b	-13(r4),r15	;0xfff3(r4)
    4366:	b0 12 b2 42 	call	#0x42b2	
    436a:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    436e:	4f ea       	xor.b	r10,	r15	
    4370:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
		state[i+1] ^= e ^ rj_Xtime( b ^ c );
    4374:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4378:	1f 53       	inc	r15		
    437a:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    437e:	0b 5f       	add	r15,	r11	
    4380:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4384:	1f 53       	inc	r15		
    4386:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    438a:	6a 4f       	mov.b	@r15,	r10	
    438c:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    4390:	5f e4 f4 ff 	xor.b	-12(r4),r15	;0xfff4(r4)
    4394:	b0 12 b2 42 	call	#0x42b2	
    4398:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    439c:	4f ea       	xor.b	r10,	r15	
    439e:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
		state[i+2] ^= e ^ rj_Xtime( c ^ d );
    43a2:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    43a6:	2f 53       	incd	r15		
    43a8:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    43ac:	0b 5f       	add	r15,	r11	
    43ae:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    43b2:	2f 53       	incd	r15		
    43b4:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    43b8:	6a 4f       	mov.b	@r15,	r10	
    43ba:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    43be:	5f e4 f5 ff 	xor.b	-11(r4),r15	;0xfff5(r4)
    43c2:	b0 12 b2 42 	call	#0x42b2	
    43c6:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    43ca:	4f ea       	xor.b	r10,	r15	
    43cc:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
		state[i+3] ^= e ^ rj_Xtime( d ^ a );
    43d0:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    43d4:	3f 50 03 00 	add	#3,	r15	;#0x0003
    43d8:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    43dc:	0b 5f       	add	r15,	r11	
    43de:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    43e2:	3f 50 03 00 	add	#3,	r15	;#0x0003
    43e6:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    43ea:	6a 4f       	mov.b	@r15,	r10	
    43ec:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    43f0:	5f e4 f2 ff 	xor.b	-14(r4),r15	;0xfff2(r4)
    43f4:	b0 12 b2 42 	call	#0x42b2	
    43f8:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    43fc:	4f ea       	xor.b	r10,	r15	
    43fe:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
#endif /* INLINE */
void MixColumns( u8 *state )
{
	u8 a, b, c, d, e;
	int i;
	for( i = 0; i < 16; i += 4 )
    4402:	a4 52 f0 ff 	add	#4,	-16(r4)	;r2 As==10, 0xfff0(r4)
    4406:	b4 90 10 00 	cmp	#16,	-16(r4)	;#0x0010, 0xfff0(r4)
    440a:	f0 ff 
    440c:	77 3b       	jl	$-272    	;abs 0x42fc
		state[i  ] ^= e ^ rj_Xtime( a ^ b );
		state[i+1] ^= e ^ rj_Xtime( b ^ c );
		state[i+2] ^= e ^ rj_Xtime( c ^ d );
		state[i+3] ^= e ^ rj_Xtime( d ^ a );
	}
}
    440e:	31 50 0a 00 	add	#10,	r1	;#0x000a
    4412:	34 41       	pop	r4		
    4414:	3a 41       	pop	r10		
    4416:	3b 41       	pop	r11		
    4418:	30 41       	ret			

0000441a <AddRoundKey>:

#ifdef INLINE
inline
#endif /* INLINE */
void AddRoundKey( u8 *state, u8 *round_key )
{
    441a:	04 12       	push	r4		
    441c:	04 41       	mov	r1,	r4	
    441e:	24 53       	incd	r4		
    4420:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4424:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4428:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i;
	for( i = 0; i < AES_BLOCK_SIZE; ++i )
    442c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4430:	13 3c       	jmp	$+40     	;abs 0x4458
		state[i] ^= round_key[i];
    4432:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4436:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    443a:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    443e:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    4442:	6d 4e       	mov.b	@r14,	r13	
    4444:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4448:	1e 54 fc ff 	add	-4(r4),	r14	;0xfffc(r4)
    444c:	6e 4e       	mov.b	@r14,	r14	
    444e:	4e ed       	xor.b	r13,	r14	
    4450:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
inline
#endif /* INLINE */
void AddRoundKey( u8 *state, u8 *round_key )
{
	int i;
	for( i = 0; i < AES_BLOCK_SIZE; ++i )
    4454:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4458:	b4 90 10 00 	cmp	#16,	-8(r4)	;#0x0010, 0xfff8(r4)
    445c:	f8 ff 
    445e:	e9 3b       	jl	$-44     	;abs 0x4432
		state[i] ^= round_key[i];
}
    4460:	31 50 06 00 	add	#6,	r1	;#0x0006
    4464:	34 41       	pop	r4		
    4466:	30 41       	ret			

00004468 <InvSubBytes>:

#ifdef INLINE
inline
#endif /* INLINE */
void InvSubBytes( u8 *state )
{
    4468:	04 12       	push	r4		
    446a:	04 41       	mov	r1,	r4	
    446c:	24 53       	incd	r4		
    446e:	21 82       	sub	#4,	r1	;r2 As==10
    4470:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i;
	for( i = 0; i < AES_BLOCK_SIZE; ++i)
    4474:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4478:	11 3c       	jmp	$+36     	;abs 0x449c
		state[i] = INVSBOX( state[i] );
    447a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    447e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4482:	0e 5f       	add	r15,	r14	
    4484:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4488:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    448c:	6f 4f       	mov.b	@r15,	r15	
    448e:	4f 4f       	mov.b	r15,	r15	
    4490:	5f 4f 42 50 	mov.b	20546(r15),r15	;0x5042(r15)
    4494:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
inline
#endif /* INLINE */
void InvSubBytes( u8 *state )
{
	int i;
	for( i = 0; i < AES_BLOCK_SIZE; ++i)
    4498:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    449c:	b4 90 10 00 	cmp	#16,	-6(r4)	;#0x0010, 0xfffa(r4)
    44a0:	fa ff 
    44a2:	eb 3b       	jl	$-40     	;abs 0x447a
		state[i] = INVSBOX( state[i] );
}
    44a4:	21 52       	add	#4,	r1	;r2 As==10
    44a6:	34 41       	pop	r4		
    44a8:	30 41       	ret			

000044aa <InvShiftRows>:

#ifdef INLINE
inline
#endif /* INLINE */
void InvShiftRows( u8 *state )
{
    44aa:	04 12       	push	r4		
    44ac:	04 41       	mov	r1,	r4	
    44ae:	24 53       	incd	r4		
    44b0:	21 82       	sub	#4,	r1	;r2 As==10
    44b2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	u8 temp;
	temp 		= state[13];
    44b6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    44ba:	d4 4f 0d 00 	mov.b	13(r15),-6(r4)	;0x000d(r15), 0xfffa(r4)
    44be:	fa ff 
	state[13] 	= state[9];
    44c0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    44c4:	3f 50 0d 00 	add	#13,	r15	;#0x000d
    44c8:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    44cc:	5e 4e 09 00 	mov.b	9(r14),	r14	;0x0009(r14)
    44d0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[9] 	= state[5];
    44d4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    44d8:	3f 50 09 00 	add	#9,	r15	;#0x0009
    44dc:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    44e0:	5e 4e 05 00 	mov.b	5(r14),	r14	;0x0005(r14)
    44e4:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[5] 	= state[1];
    44e8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    44ec:	3f 50 05 00 	add	#5,	r15	;#0x0005
    44f0:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    44f4:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    44f8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[1] 	= temp;
    44fc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4500:	1f 53       	inc	r15		
    4502:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    4506:	00 00 
	temp 		= state[2];
    4508:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    450c:	d4 4f 02 00 	mov.b	2(r15),	-6(r4)	;0x0002(r15), 0xfffa(r4)
    4510:	fa ff 
	state[2] 	= state[10];
    4512:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4516:	2f 53       	incd	r15		
    4518:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    451c:	5e 4e 0a 00 	mov.b	10(r14),r14	;0x000a(r14)
    4520:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[10] 	= temp;
    4524:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4528:	3f 50 0a 00 	add	#10,	r15	;#0x000a
    452c:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    4530:	00 00 
	temp 		= state[6];
    4532:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4536:	d4 4f 06 00 	mov.b	6(r15),	-6(r4)	;0x0006(r15), 0xfffa(r4)
    453a:	fa ff 
	state[6] 	= state[14];
    453c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4540:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4544:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4548:	5e 4e 0e 00 	mov.b	14(r14),r14	;0x000e(r14)
    454c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[14] 	= temp;
    4550:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4554:	3f 50 0e 00 	add	#14,	r15	;#0x000e
    4558:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    455c:	00 00 
	temp 		= state[3];
    455e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4562:	d4 4f 03 00 	mov.b	3(r15),	-6(r4)	;0x0003(r15), 0xfffa(r4)
    4566:	fa ff 
	state[3] 	= state[7];
    4568:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    456c:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4570:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4574:	5e 4e 07 00 	mov.b	7(r14),	r14	;0x0007(r14)
    4578:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[7] 	= state[11];
    457c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4580:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4584:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4588:	5e 4e 0b 00 	mov.b	11(r14),r14	;0x000b(r14)
    458c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[11] 	= state[15];
    4590:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4594:	3f 50 0b 00 	add	#11,	r15	;#0x000b
    4598:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    459c:	5e 4e 0f 00 	mov.b	15(r14),r14	;0x000f(r14)
    45a0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[15] 	= temp;
    45a4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    45a8:	3f 50 0f 00 	add	#15,	r15	;#0x000f
    45ac:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    45b0:	00 00 
}
    45b2:	21 52       	add	#4,	r1	;r2 As==10
    45b4:	34 41       	pop	r4		
    45b6:	30 41       	ret			

000045b8 <InvMixColumns>:

#ifdef INLINE
inline
#endif /* INLINE */
void InvMixColumns( u8 *state )
{
    45b8:	0b 12       	push	r11		
    45ba:	0a 12       	push	r10		
    45bc:	04 12       	push	r4		
    45be:	04 41       	mov	r1,	r4	
    45c0:	34 50 06 00 	add	#6,	r4	;#0x0006
    45c4:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    45c8:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
	int i;
	u8 a, b, c, d, e, x, y, z;
	for( i = 0; i < 16; i += 4 )
    45cc:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    45d0:	a9 3c       	jmp	$+340    	;abs 0x4724
	{
		a = state[i  ];
    45d2:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    45d6:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    45da:	e4 4f f0 ff 	mov.b	@r15,	-16(r4)	;0xfff0(r4)
		b = state[i+1];
    45de:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    45e2:	1f 53       	inc	r15		
    45e4:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    45e8:	e4 4f f1 ff 	mov.b	@r15,	-15(r4)	;0xfff1(r4)
		c = state[i+2];
    45ec:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    45f0:	2f 53       	incd	r15		
    45f2:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    45f6:	e4 4f f2 ff 	mov.b	@r15,	-14(r4)	;0xfff2(r4)
		d = state[i+3];
    45fa:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    45fe:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4602:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4606:	e4 4f f3 ff 	mov.b	@r15,	-13(r4)	;0xfff3(r4)
		e = a ^ b ^ c ^ d;
    460a:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    460e:	5f e4 f1 ff 	xor.b	-15(r4),r15	;0xfff1(r4)
    4612:	5f e4 f2 ff 	xor.b	-14(r4),r15	;0xfff2(r4)
    4616:	4e 4f       	mov.b	r15,	r14	
    4618:	5e e4 f3 ff 	xor.b	-13(r4),r14	;0xfff3(r4)
    461c:	c4 4e f4 ff 	mov.b	r14,	-12(r4)	;0xfff4(r4)
		
		z = rj_Xtime(e);
    4620:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    4624:	b0 12 b2 42 	call	#0x42b2	
    4628:	c4 4f f5 ff 	mov.b	r15,	-11(r4)	;0xfff5(r4)
		x = e ^ rj_Xtime( rj_Xtime( z ^ a ^ c ) );
    462c:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    4630:	5f e4 f0 ff 	xor.b	-16(r4),r15	;0xfff0(r4)
    4634:	5f e4 f2 ff 	xor.b	-14(r4),r15	;0xfff2(r4)
    4638:	b0 12 b2 42 	call	#0x42b2	
    463c:	b0 12 b2 42 	call	#0x42b2	
    4640:	4e 4f       	mov.b	r15,	r14	
    4642:	5e e4 f4 ff 	xor.b	-12(r4),r14	;0xfff4(r4)
    4646:	c4 4e f6 ff 	mov.b	r14,	-10(r4)	;0xfff6(r4)
		y = e ^ rj_Xtime( rj_Xtime( z ^ b ^ d ) );
    464a:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    464e:	5f e4 f1 ff 	xor.b	-15(r4),r15	;0xfff1(r4)
    4652:	5f e4 f3 ff 	xor.b	-13(r4),r15	;0xfff3(r4)
    4656:	b0 12 b2 42 	call	#0x42b2	
    465a:	b0 12 b2 42 	call	#0x42b2	
    465e:	4e 4f       	mov.b	r15,	r14	
    4660:	5e e4 f4 ff 	xor.b	-12(r4),r14	;0xfff4(r4)
    4664:	c4 4e f7 ff 	mov.b	r14,	-9(r4)	;0xfff7(r4)
		
		state[i  ] ^= x ^ rj_Xtime( a ^ b );
    4668:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    466c:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    4670:	0b 5f       	add	r15,	r11	
    4672:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4676:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    467a:	6a 4f       	mov.b	@r15,	r10	
    467c:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    4680:	5f e4 f1 ff 	xor.b	-15(r4),r15	;0xfff1(r4)
    4684:	b0 12 b2 42 	call	#0x42b2	
    4688:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    468c:	4f ea       	xor.b	r10,	r15	
    468e:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
		state[i+1] ^= y ^ rj_Xtime( b ^ c );
    4692:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4696:	1f 53       	inc	r15		
    4698:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    469c:	0b 5f       	add	r15,	r11	
    469e:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    46a2:	1f 53       	inc	r15		
    46a4:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    46a8:	6a 4f       	mov.b	@r15,	r10	
    46aa:	5f 44 f1 ff 	mov.b	-15(r4),r15	;0xfff1(r4)
    46ae:	5f e4 f2 ff 	xor.b	-14(r4),r15	;0xfff2(r4)
    46b2:	b0 12 b2 42 	call	#0x42b2	
    46b6:	5f e4 f7 ff 	xor.b	-9(r4),	r15	;0xfff7(r4)
    46ba:	4f ea       	xor.b	r10,	r15	
    46bc:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
		state[i+2] ^= x ^ rj_Xtime( c ^ d );
    46c0:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    46c4:	2f 53       	incd	r15		
    46c6:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    46ca:	0b 5f       	add	r15,	r11	
    46cc:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    46d0:	2f 53       	incd	r15		
    46d2:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    46d6:	6a 4f       	mov.b	@r15,	r10	
    46d8:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    46dc:	5f e4 f3 ff 	xor.b	-13(r4),r15	;0xfff3(r4)
    46e0:	b0 12 b2 42 	call	#0x42b2	
    46e4:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    46e8:	4f ea       	xor.b	r10,	r15	
    46ea:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
		state[i+3] ^= y ^ rj_Xtime( d ^ a );
    46ee:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    46f2:	3f 50 03 00 	add	#3,	r15	;#0x0003
    46f6:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    46fa:	0b 5f       	add	r15,	r11	
    46fc:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4700:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4704:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4708:	6a 4f       	mov.b	@r15,	r10	
    470a:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    470e:	5f e4 f0 ff 	xor.b	-16(r4),r15	;0xfff0(r4)
    4712:	b0 12 b2 42 	call	#0x42b2	
    4716:	5f e4 f7 ff 	xor.b	-9(r4),	r15	;0xfff7(r4)
    471a:	4f ea       	xor.b	r10,	r15	
    471c:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
#endif /* INLINE */
void InvMixColumns( u8 *state )
{
	int i;
	u8 a, b, c, d, e, x, y, z;
	for( i = 0; i < 16; i += 4 )
    4720:	a4 52 ee ff 	add	#4,	-18(r4)	;r2 As==10, 0xffee(r4)
    4724:	b4 90 10 00 	cmp	#16,	-18(r4)	;#0x0010, 0xffee(r4)
    4728:	ee ff 
    472a:	53 3b       	jl	$-344    	;abs 0x45d2
		state[i  ] ^= x ^ rj_Xtime( a ^ b );
		state[i+1] ^= y ^ rj_Xtime( b ^ c );
		state[i+2] ^= x ^ rj_Xtime( c ^ d );
		state[i+3] ^= y ^ rj_Xtime( d ^ a );
	}
}
    472c:	31 50 0c 00 	add	#12,	r1	;#0x000c
    4730:	34 41       	pop	r4		
    4732:	3a 41       	pop	r10		
    4734:	3b 41       	pop	r11		
    4736:	30 41       	ret			

00004738 <AES_init_variable_keylength>:

void AES_init_variable_keylength( AES_CTX *ctx, u8 *key, int klen)
{
    4738:	04 12       	push	r4		
    473a:	04 41       	mov	r1,	r4	
    473c:	24 53       	incd	r4		
    473e:	31 50 ee ff 	add	#-18,	r1	;#0xffee
    4742:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    4746:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    474a:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	int i = 0;
    474e:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
	int klen_b = (klen >> 3);
    4752:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4756:	0f 11       	rra	r15		
    4758:	0f 11       	rra	r15		
    475a:	0f 11       	rra	r15		
    475c:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
	u8 * wcKey;
	u8 * wcKey_minus; /* key_schedule[i - 1] in word counts */
	u8 * wcKey_minus_klen; /* key_schedule[i - klen] in word counts */
	int rcon_index = 0;
    4760:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)

	if (klen == 128)
    4764:	b4 90 80 00 	cmp	#128,	-4(r4)	;#0x0080, 0xfffc(r4)
    4768:	fc ff 
    476a:	06 20       	jnz	$+14     	;abs 0x4778
	{
		ctx->rounds = 10;
    476c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4770:	ff 40 0a 00 	mov.b	#10,	480(r15);#0x000a, 0x01e0(r15)
    4774:	e0 01 
    4776:	0f 3c       	jmp	$+32     	;abs 0x4796
	}
	else if (klen == 192)
    4778:	b4 90 c0 00 	cmp	#192,	-4(r4)	;#0x00c0, 0xfffc(r4)
    477c:	fc ff 
    477e:	06 20       	jnz	$+14     	;abs 0x478c
	{
		ctx->rounds = 12;
    4780:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4784:	ff 40 0c 00 	mov.b	#12,	480(r15);#0x000c, 0x01e0(r15)
    4788:	e0 01 
    478a:	05 3c       	jmp	$+12     	;abs 0x4796
	}
	else /* if (klen == 256)*/
	{
		ctx->rounds = 14;
    478c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4790:	ff 40 0e 00 	mov.b	#14,	480(r15);#0x000e, 0x01e0(r15)
    4794:	e0 01 
	}
	
	for (i = 0; i < klen_b; ++i)
    4796:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    479a:	0d 3c       	jmp	$+28     	;abs 0x47b6
	{
		ctx->enc_ks[i] = key[i];
    479c:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    47a0:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    47a4:	6e 4f       	mov.b	@r15,	r14	
    47a6:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    47aa:	1f 54 ec ff 	add	-20(r4),r15	;0xffec(r4)
    47ae:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	else /* if (klen == 256)*/
	{
		ctx->rounds = 14;
	}
	
	for (i = 0; i < klen_b; ++i)
    47b2:	94 53 ec ff 	inc	-20(r4)	;0xffec(r4)
    47b6:	94 94 f0 ff 	cmp	-16(r4),-20(r4)	;0xfff0(r4), 0xffec(r4)
    47ba:	ec ff 
    47bc:	ef 3b       	jl	$-32     	;abs 0x479c
	{
		ctx->enc_ks[i] = key[i];
//		ctx->dec_ks[ctx->rounds - i] = key[klen_b - i];
	}
	
	for(i = klen_b; i < (ctx->rounds + 1) * klen_b; i += 4)
    47be:	94 44 f0 ff 	mov	-16(r4),-20(r4)	;0xfff0(r4), 0xffec(r4)
    47c2:	ec ff 
    47c4:	aa 3c       	jmp	$+342    	;abs 0x491a
	{
		wcKey = &ctx->enc_ks[i]; 
    47c6:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    47ca:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    47ce:	0d 4e       	mov	r14,	r13	
    47d0:	0d 5f       	add	r15,	r13	
    47d2:	84 4d f2 ff 	mov	r13,	-14(r4)	;0xfff2(r4)
		wcKey_minus = &ctx->enc_ks[i - 4];
    47d6:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    47da:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    47de:	2f 82       	sub	#4,	r15	;r2 As==10
    47e0:	0d 4e       	mov	r14,	r13	
    47e2:	0d 5f       	add	r15,	r13	
    47e4:	84 4d f4 ff 	mov	r13,	-12(r4)	;0xfff4(r4)
		wcKey_minus_klen = &ctx->enc_ks[i - klen_b];
    47e8:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    47ec:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    47f0:	1f 84 f0 ff 	sub	-16(r4),r15	;0xfff0(r4)
    47f4:	0d 4e       	mov	r14,	r13	
    47f6:	0d 5f       	add	r15,	r13	
    47f8:	84 4d f6 ff 	mov	r13,	-10(r4)	;0xfff6(r4)
		if (i % klen_b == 0)
    47fc:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    4800:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    4804:	b0 12 1c 4c 	call	#0x4c1c	
    4808:	0f 93       	tst	r15		
    480a:	4d 20       	jnz	$+156    	;abs 0x48a6
		{
			
			wcKey[0] = SBOX(wcKey_minus[1]) ^ rcon[rcon_index++] ^ wcKey_minus_klen[0];
    480c:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4810:	1f 53       	inc	r15		
    4812:	6f 4f       	mov.b	@r15,	r15	
    4814:	4f 4f       	mov.b	r15,	r15	
    4816:	5e 4f 42 4f 	mov.b	20290(r15),r14	;0x4f42(r15)
    481a:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    481e:	3f 50 42 51 	add	#20802,	r15	;#0x5142
    4822:	6f 4f       	mov.b	@r15,	r15	
    4824:	4e ef       	xor.b	r15,	r14	
    4826:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    482a:	6f 4f       	mov.b	@r15,	r15	
    482c:	4e ef       	xor.b	r15,	r14	
    482e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4832:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    4836:	94 53 ee ff 	inc	-18(r4)	;0xffee(r4)
			wcKey[1] = SBOX(wcKey_minus[2]) ^ wcKey_minus_klen[1];
    483a:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    483e:	1e 53       	inc	r14		
    4840:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4844:	2f 53       	incd	r15		
    4846:	6f 4f       	mov.b	@r15,	r15	
    4848:	4f 4f       	mov.b	r15,	r15	
    484a:	5d 4f 42 4f 	mov.b	20290(r15),r13	;0x4f42(r15)
    484e:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4852:	1f 53       	inc	r15		
    4854:	6f 4f       	mov.b	@r15,	r15	
    4856:	4f ed       	xor.b	r13,	r15	
    4858:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
			wcKey[2] = SBOX(wcKey_minus[3]) ^ wcKey_minus_klen[2];
    485c:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    4860:	2e 53       	incd	r14		
    4862:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4866:	3f 50 03 00 	add	#3,	r15	;#0x0003
    486a:	6f 4f       	mov.b	@r15,	r15	
    486c:	4f 4f       	mov.b	r15,	r15	
    486e:	5d 4f 42 4f 	mov.b	20290(r15),r13	;0x4f42(r15)
    4872:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4876:	2f 53       	incd	r15		
    4878:	6f 4f       	mov.b	@r15,	r15	
    487a:	4f ed       	xor.b	r13,	r15	
    487c:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
			wcKey[3] = SBOX(wcKey_minus[0]) ^ wcKey_minus_klen[3];
    4880:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    4884:	3e 50 03 00 	add	#3,	r14	;#0x0003
    4888:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    488c:	6f 4f       	mov.b	@r15,	r15	
    488e:	4f 4f       	mov.b	r15,	r15	
    4890:	5d 4f 42 4f 	mov.b	20290(r15),r13	;0x4f42(r15)
    4894:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4898:	3f 50 03 00 	add	#3,	r15	;#0x0003
    489c:	6f 4f       	mov.b	@r15,	r15	
    489e:	4f ed       	xor.b	r13,	r15	
    48a0:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
    48a4:	38 3c       	jmp	$+114    	;abs 0x4916
		}
		else
		{
			wcKey[0] = wcKey_minus_klen[0] ^ wcKey_minus[0];
    48a6:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    48aa:	6e 4f       	mov.b	@r15,	r14	
    48ac:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    48b0:	6f 4f       	mov.b	@r15,	r15	
    48b2:	4e ef       	xor.b	r15,	r14	
    48b4:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    48b8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			wcKey[1] = wcKey_minus_klen[1] ^ wcKey_minus[1];
    48bc:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    48c0:	1f 53       	inc	r15		
    48c2:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    48c6:	1e 53       	inc	r14		
    48c8:	6d 4e       	mov.b	@r14,	r13	
    48ca:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    48ce:	1e 53       	inc	r14		
    48d0:	6e 4e       	mov.b	@r14,	r14	
    48d2:	4e ed       	xor.b	r13,	r14	
    48d4:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			wcKey[2] = wcKey_minus_klen[2] ^ wcKey_minus[2];
    48d8:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    48dc:	2f 53       	incd	r15		
    48de:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    48e2:	2e 53       	incd	r14		
    48e4:	6d 4e       	mov.b	@r14,	r13	
    48e6:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    48ea:	2e 53       	incd	r14		
    48ec:	6e 4e       	mov.b	@r14,	r14	
    48ee:	4e ed       	xor.b	r13,	r14	
    48f0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			wcKey[3] = wcKey_minus_klen[3] ^ wcKey_minus[3];
    48f4:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    48f8:	3f 50 03 00 	add	#3,	r15	;#0x0003
    48fc:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    4900:	3e 50 03 00 	add	#3,	r14	;#0x0003
    4904:	6d 4e       	mov.b	@r14,	r13	
    4906:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    490a:	3e 50 03 00 	add	#3,	r14	;#0x0003
    490e:	6e 4e       	mov.b	@r14,	r14	
    4910:	4e ed       	xor.b	r13,	r14	
    4912:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	{
		ctx->enc_ks[i] = key[i];
//		ctx->dec_ks[ctx->rounds - i] = key[klen_b - i];
	}
	
	for(i = klen_b; i < (ctx->rounds + 1) * klen_b; i += 4)
    4916:	a4 52 ec ff 	add	#4,	-20(r4)	;r2 As==10, 0xffec(r4)
    491a:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    491e:	5f 4f e0 01 	mov.b	480(r15),r15	;0x01e0(r15)
    4922:	4f 4f       	mov.b	r15,	r15	
    4924:	1f 53       	inc	r15		
    4926:	02 12       	push	r2		
    4928:	32 c2       	dint			
    492a:	03 43       	nop			
    492c:	82 4f 32 01 	mov	r15,	&0x0132	
    4930:	92 44 f0 ff 	mov	-16(r4),&0x0138	;0xfff0(r4)
    4934:	38 01 
    4936:	1f 42 3a 01 	mov	&0x013a,r15	
    493a:	32 41       	pop	r2		
    493c:	84 9f ec ff 	cmp	r15,	-20(r4)	;0xffec(r4)
    4940:	42 3b       	jl	$-378    	;abs 0x47c6
			wcKey[2] = wcKey_minus_klen[2] ^ wcKey_minus[2];
			wcKey[3] = wcKey_minus_klen[3] ^ wcKey_minus[3];
		}
	}
	
}
    4942:	31 50 12 00 	add	#18,	r1	;#0x0012
    4946:	34 41       	pop	r4		
    4948:	30 41       	ret			

0000494a <AES_init>:

void AES_init( AES_CTX *ctx, u8 *key )
{
    494a:	04 12       	push	r4		
    494c:	04 41       	mov	r1,	r4	
    494e:	24 53       	incd	r4		
    4950:	21 82       	sub	#4,	r1	;r2 As==10
    4952:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4956:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	AES_init_variable_keylength( ctx, key, 128 );
    495a:	3d 40 80 00 	mov	#128,	r13	;#0x0080
    495e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4962:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4966:	b0 12 38 47 	call	#0x4738	
}
    496a:	21 52       	add	#4,	r1	;r2 As==10
    496c:	34 41       	pop	r4		
    496e:	30 41       	ret			

00004970 <AES_encrypt>:



void AES_encrypt( AES_CTX *ctx, u8 *in, u8 *out)
{
    4970:	04 12       	push	r4		
    4972:	04 41       	mov	r1,	r4	
    4974:	24 53       	incd	r4		
    4976:	31 82       	sub	#8,	r1	;r2 As==11
    4978:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    497c:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    4980:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	memcpy(out, in, AES_BLOCK_SIZE);
    4984:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4988:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    498c:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    4990:	b0 12 46 4c 	call	#0x4c46	
	int i;
	AddRoundKey( out, &ctx->enc_ks[0] );
    4994:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4998:	0e 4f       	mov	r15,	r14	
    499a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    499e:	b0 12 1a 44 	call	#0x441a	
	for( i = 1; i < ctx->rounds; ++i)
    49a2:	94 43 f6 ff 	mov	#1,	-10(r4)	;r3 As==01, 0xfff6(r4)
    49a6:	1c 3c       	jmp	$+58     	;abs 0x49e0
	{
		SubBytes(out);
    49a8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    49ac:	b0 12 62 41 	call	#0x4162	
		ShiftRows(out);
    49b0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    49b4:	b0 12 a4 41 	call	#0x41a4	
		MixColumns(out);
    49b8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    49bc:	b0 12 e2 42 	call	#0x42e2	
		AddRoundKey(out, &ctx->enc_ks[AES_BLOCK_SIZE * i]);
    49c0:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    49c4:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    49c8:	0f 5f       	rla	r15		
    49ca:	0f 5f       	rla	r15		
    49cc:	0f 5f       	rla	r15		
    49ce:	0f 5f       	rla	r15		
    49d0:	0f 5e       	add	r14,	r15	
    49d2:	0e 4f       	mov	r15,	r14	
    49d4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    49d8:	b0 12 1a 44 	call	#0x441a	
void AES_encrypt( AES_CTX *ctx, u8 *in, u8 *out)
{
	memcpy(out, in, AES_BLOCK_SIZE);
	int i;
	AddRoundKey( out, &ctx->enc_ks[0] );
	for( i = 1; i < ctx->rounds; ++i)
    49dc:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    49e0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    49e4:	5f 4f e0 01 	mov.b	480(r15),r15	;0x01e0(r15)
    49e8:	4f 4f       	mov.b	r15,	r15	
    49ea:	84 9f f6 ff 	cmp	r15,	-10(r4)	;0xfff6(r4)
    49ee:	dc 3b       	jl	$-70     	;abs 0x49a8
		SubBytes(out);
		ShiftRows(out);
		MixColumns(out);
		AddRoundKey(out, &ctx->enc_ks[AES_BLOCK_SIZE * i]);
	}
	SubBytes(out);
    49f0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    49f4:	b0 12 62 41 	call	#0x4162	
	ShiftRows(out);
    49f8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    49fc:	b0 12 a4 41 	call	#0x41a4	
	AddRoundKey(out, &ctx->enc_ks[AES_BLOCK_SIZE * ctx->rounds]);
    4a00:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4a04:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a08:	5f 4f e0 01 	mov.b	480(r15),r15	;0x01e0(r15)
    4a0c:	4f 4f       	mov.b	r15,	r15	
    4a0e:	0f 5f       	rla	r15		
    4a10:	0f 5f       	rla	r15		
    4a12:	0f 5f       	rla	r15		
    4a14:	0f 5f       	rla	r15		
    4a16:	0f 5e       	add	r14,	r15	
    4a18:	0e 4f       	mov	r15,	r14	
    4a1a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a1e:	b0 12 1a 44 	call	#0x441a	
}
    4a22:	31 52       	add	#8,	r1	;r2 As==11
    4a24:	34 41       	pop	r4		
    4a26:	30 41       	ret			

00004a28 <AES_decrypt>:

void AES_decrypt( AES_CTX *ctx, u8 *in, u8 *out)
{
    4a28:	04 12       	push	r4		
    4a2a:	04 41       	mov	r1,	r4	
    4a2c:	24 53       	incd	r4		
    4a2e:	31 82       	sub	#8,	r1	;r2 As==11
    4a30:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    4a34:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    4a38:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	memcpy(out, in, AES_BLOCK_SIZE);
    4a3c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a40:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4a44:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    4a48:	b0 12 46 4c 	call	#0x4c46	
	int i;
	AddRoundKey( out, &ctx->enc_ks[AES_BLOCK_SIZE * ctx->rounds] );
    4a4c:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4a50:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a54:	5f 4f e0 01 	mov.b	480(r15),r15	;0x01e0(r15)
    4a58:	4f 4f       	mov.b	r15,	r15	
    4a5a:	0f 5f       	rla	r15		
    4a5c:	0f 5f       	rla	r15		
    4a5e:	0f 5f       	rla	r15		
    4a60:	0f 5f       	rla	r15		
    4a62:	0f 5e       	add	r14,	r15	
    4a64:	0e 4f       	mov	r15,	r14	
    4a66:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a6a:	b0 12 1a 44 	call	#0x441a	
	for( i = ctx->rounds - 1; i > 0; --i)
    4a6e:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a72:	5f 4f e0 01 	mov.b	480(r15),r15	;0x01e0(r15)
    4a76:	4f 4f       	mov.b	r15,	r15	
    4a78:	0e 4f       	mov	r15,	r14	
    4a7a:	3e 53       	add	#-1,	r14	;r3 As==11
    4a7c:	84 4e f6 ff 	mov	r14,	-10(r4)	;0xfff6(r4)
    4a80:	1c 3c       	jmp	$+58     	;abs 0x4aba
	{
		InvShiftRows(out);
    4a82:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a86:	b0 12 aa 44 	call	#0x44aa	
		InvSubBytes(out);
    4a8a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a8e:	b0 12 68 44 	call	#0x4468	
		AddRoundKey(out, &ctx->enc_ks[AES_BLOCK_SIZE * i]);
    4a92:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4a96:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4a9a:	0f 5f       	rla	r15		
    4a9c:	0f 5f       	rla	r15		
    4a9e:	0f 5f       	rla	r15		
    4aa0:	0f 5f       	rla	r15		
    4aa2:	0f 5e       	add	r14,	r15	
    4aa4:	0e 4f       	mov	r15,	r14	
    4aa6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4aaa:	b0 12 1a 44 	call	#0x441a	
		InvMixColumns(out);
    4aae:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4ab2:	b0 12 b8 45 	call	#0x45b8	
void AES_decrypt( AES_CTX *ctx, u8 *in, u8 *out)
{
	memcpy(out, in, AES_BLOCK_SIZE);
	int i;
	AddRoundKey( out, &ctx->enc_ks[AES_BLOCK_SIZE * ctx->rounds] );
	for( i = ctx->rounds - 1; i > 0; --i)
    4ab6:	b4 53 f6 ff 	add	#-1,	-10(r4)	;r3 As==11, 0xfff6(r4)
    4aba:	94 93 f6 ff 	cmp	#1,	-10(r4)	;r3 As==01, 0xfff6(r4)
    4abe:	e1 37       	jge	$-60     	;abs 0x4a82
		InvShiftRows(out);
		InvSubBytes(out);
		AddRoundKey(out, &ctx->enc_ks[AES_BLOCK_SIZE * i]);
		InvMixColumns(out);
	}
	InvShiftRows(out);
    4ac0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4ac4:	b0 12 aa 44 	call	#0x44aa	
	InvSubBytes(out);
    4ac8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4acc:	b0 12 68 44 	call	#0x4468	
	AddRoundKey(out, &ctx->enc_ks[0]);
    4ad0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4ad4:	0e 4f       	mov	r15,	r14	
    4ad6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4ada:	b0 12 1a 44 	call	#0x441a	
}
    4ade:	31 52       	add	#8,	r1	;r2 As==11
    4ae0:	34 41       	pop	r4		
    4ae2:	30 41       	ret			

00004ae4 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4ae4:	04 12       	push	r4		
    4ae6:	04 41       	mov	r1,	r4	
    4ae8:	24 53       	incd	r4		
    4aea:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4aee:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4af2:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4af6:	0d 3c       	jmp	$+28     	;abs 0x4b12
    {
      for (i = 0; i<d; i++) 
    4af8:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4afc:	04 3c       	jmp	$+10     	;abs 0x4b06
	{
	  nop();
    4afe:	03 43       	nop			
	  nop();
    4b00:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4b02:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4b06:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4b0a:	f8 ff 
    4b0c:	f8 2b       	jnc	$-14     	;abs 0x4afe
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b0e:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4b12:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4b16:	fa ff 
    4b18:	ef 2b       	jnc	$-32     	;abs 0x4af8
	{
	  nop();
	  nop();
	}
    }
}
    4b1a:	31 50 06 00 	add	#6,	r1	;#0x0006
    4b1e:	34 41       	pop	r4		
    4b20:	30 41       	ret			

00004b22 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4b22:	04 12       	push	r4		
    4b24:	04 41       	mov	r1,	r4	
    4b26:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4b28:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4b2c:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4b2e:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4b32:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4b36:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4b3a:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4b3e:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4b42:	5f 42 05 00 	mov.b	&0x0005,r15	
    4b46:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4b4a:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4b4e:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4b52:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4b56:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4b58:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4b5c:	79 00 
  U1RCTL = 0;
    4b5e:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4b62:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4b66:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4b6a:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4b6c:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4b70:	7b 00 

  delay(0x800);
    4b72:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4b76:	b0 12 e4 4a 	call	#0x4ae4	
  return 0;
    4b7a:	0f 43       	clr	r15		
}
    4b7c:	34 41       	pop	r4		
    4b7e:	30 41       	ret			

00004b80 <uart1_putchar>:

int uart1_putchar(int c)
{
    4b80:	04 12       	push	r4		
    4b82:	04 41       	mov	r1,	r4	
    4b84:	24 53       	incd	r4		
    4b86:	21 83       	decd	r1		
    4b88:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4b8c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4b90:	4f 4f       	mov.b	r15,	r15	
    4b92:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4b96:	03 43       	nop			
    4b98:	5f 42 79 00 	mov.b	&0x0079,r15	
    4b9c:	4f 4f       	mov.b	r15,	r15	
    4b9e:	1f f3       	and	#1,	r15	;r3 As==01
    4ba0:	0f 93       	tst	r15		
    4ba2:	fa 27       	jz	$-10     	;abs 0x4b98
  return (unsigned char)c;
    4ba4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4ba8:	4f 4f       	mov.b	r15,	r15	
    4baa:	4f 4f       	mov.b	r15,	r15	
}
    4bac:	21 53       	incd	r1		
    4bae:	34 41       	pop	r4		
    4bb0:	30 41       	ret			

00004bb2 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4bb2:	04 12       	push	r4		
    4bb4:	04 41       	mov	r1,	r4	
    4bb6:	24 53       	incd	r4		
    4bb8:	21 83       	decd	r1		
    4bba:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4bbe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4bc2:	b0 12 80 4b 	call	#0x4b80	
}
    4bc6:	21 53       	incd	r1		
    4bc8:	34 41       	pop	r4		
    4bca:	30 41       	ret			

00004bcc <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4bcc:	04 12       	push	r4		
    4bce:	04 41       	mov	r1,	r4	
    4bd0:	24 53       	incd	r4		
  ;
}
    4bd2:	34 41       	pop	r4		
    4bd4:	30 41       	ret			

00004bd6 <start_decrypt>:
void
start_decrypt()
{
    4bd6:	04 12       	push	r4		
    4bd8:	04 41       	mov	r1,	r4	
    4bda:	24 53       	incd	r4		
  ;
}
    4bdc:	34 41       	pop	r4		
    4bde:	30 41       	ret			

00004be0 <end_expe>:


void
end_expe()
{
    4be0:	04 12       	push	r4		
    4be2:	04 41       	mov	r1,	r4	
    4be4:	24 53       	incd	r4		
  ;
}
    4be6:	34 41       	pop	r4		
    4be8:	30 41       	ret			

00004bea <__divhi3>:
    4bea:	0d 43       	clr	r13		
    4bec:	0f 93       	tst	r15		
    4bee:	04 34       	jge	$+10     	;abs 0x4bf8
    4bf0:	3d 40 03 00 	mov	#3,	r13	;#0x0003
    4bf4:	3f e3       	inv	r15		
    4bf6:	1f 53       	inc	r15		
    4bf8:	0e 93       	tst	r14		
    4bfa:	03 34       	jge	$+8      	;abs 0x4c02
    4bfc:	5d e3       	xor.b	#1,	r13	;r3 As==01
    4bfe:	3e e3       	inv	r14		
    4c00:	1e 53       	inc	r14		
    4c02:	0d 12       	push	r13		
    4c04:	b0 12 24 4c 	call	#0x4c24	
    4c08:	3d 41       	pop	r13		
    4c0a:	6d b3       	bit.b	#2,	r13	;r3 As==10
    4c0c:	02 24       	jz	$+6      	;abs 0x4c12
    4c0e:	3e e3       	inv	r14		
    4c10:	1e 53       	inc	r14		
    4c12:	5d b3       	bit.b	#1,	r13	;r3 As==01
    4c14:	02 24       	jz	$+6      	;abs 0x4c1a
    4c16:	3f e3       	inv	r15		
    4c18:	1f 53       	inc	r15		
    4c1a:	30 41       	ret			

00004c1c <__modhi3>:
    4c1c:	b0 12 ea 4b 	call	#0x4bea	
    4c20:	0f 4e       	mov	r14,	r15	
    4c22:	30 41       	ret			

00004c24 <__udivhi3>:
    4c24:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    4c28:	0d 4e       	mov	r14,	r13	
    4c2a:	0e 43       	clr	r14		
    4c2c:	0f 5f       	rla	r15		
    4c2e:	0e 6e       	rlc	r14		
    4c30:	0e 9d       	cmp	r13,	r14	
    4c32:	02 28       	jnc	$+6      	;abs 0x4c38
    4c34:	0e 8d       	sub	r13,	r14	
    4c36:	1f d3       	bis	#1,	r15	;r3 As==01
    4c38:	1c 83       	dec	r12		
    4c3a:	f8 23       	jnz	$-14     	;abs 0x4c2c
    4c3c:	30 41       	ret			

00004c3e <__umodhi3>:
    4c3e:	b0 12 24 4c 	call	#0x4c24	
    4c42:	0f 4e       	mov	r14,	r15	
    4c44:	30 41       	ret			

00004c46 <memcpy>:
    4c46:	0b 12       	push	r11		
    4c48:	0a 12       	push	r10		
    4c4a:	09 12       	push	r9		
    4c4c:	08 12       	push	r8		
    4c4e:	07 12       	push	r7		
    4c50:	0d 93       	tst	r13		
    4c52:	70 24       	jz	$+226    	;abs 0x4d34
    4c54:	0f 9e       	cmp	r14,	r15	
    4c56:	6e 24       	jz	$+222    	;abs 0x4d34
    4c58:	34 2c       	jc	$+106    	;abs 0x4cc2
    4c5a:	0c 4e       	mov	r14,	r12	
    4c5c:	0c df       	bis	r15,	r12	
    4c5e:	1c f3       	and	#1,	r12	;r3 As==01
    4c60:	1b 24       	jz	$+56     	;abs 0x4c98
    4c62:	0c 4e       	mov	r14,	r12	
    4c64:	0c ef       	xor	r15,	r12	
    4c66:	1c f3       	and	#1,	r12	;r3 As==01
    4c68:	07 20       	jnz	$+16     	;abs 0x4c78
    4c6a:	2d 93       	cmp	#2,	r13	;r3 As==10
    4c6c:	07 28       	jnc	$+16     	;abs 0x4c7c
    4c6e:	0b 4e       	mov	r14,	r11	
    4c70:	1b f3       	and	#1,	r11	;r3 As==01
    4c72:	2c 43       	mov	#2,	r12	;r3 As==10
    4c74:	0c 8b       	sub	r11,	r12	
    4c76:	03 3c       	jmp	$+8      	;abs 0x4c7e
    4c78:	0c 4d       	mov	r13,	r12	
    4c7a:	01 3c       	jmp	$+4      	;abs 0x4c7e
    4c7c:	1c 43       	mov	#1,	r12	;r3 As==01
    4c7e:	0d 8c       	sub	r12,	r13	
    4c80:	0a 4c       	mov	r12,	r10	
    4c82:	09 4e       	mov	r14,	r9	
    4c84:	0b 4f       	mov	r15,	r11	
    4c86:	fb 49 00 00 	mov.b	@r9+,	0(r11)	;0x0000(r11)
    4c8a:	1b 53       	inc	r11		
    4c8c:	3a 53       	add	#-1,	r10	;r3 As==11
    4c8e:	fb 23       	jnz	$-8      	;abs 0x4c86
    4c90:	0a 4f       	mov	r15,	r10	
    4c92:	0a 5c       	add	r12,	r10	
    4c94:	0e 5c       	add	r12,	r14	
    4c96:	01 3c       	jmp	$+4      	;abs 0x4c9a
    4c98:	0a 4f       	mov	r15,	r10	
    4c9a:	0b 4d       	mov	r13,	r11	
    4c9c:	12 c3       	clrc			
    4c9e:	0b 10       	rrc	r11		
    4ca0:	0b 24       	jz	$+24     	;abs 0x4cb8
    4ca2:	09 4b       	mov	r11,	r9	
    4ca4:	08 4e       	mov	r14,	r8	
    4ca6:	0c 4a       	mov	r10,	r12	
    4ca8:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    4cac:	2c 53       	incd	r12		
    4cae:	39 53       	add	#-1,	r9	;r3 As==11
    4cb0:	fb 23       	jnz	$-8      	;abs 0x4ca8
    4cb2:	0b 5b       	rla	r11		
    4cb4:	0e 5b       	add	r11,	r14	
    4cb6:	0a 5b       	add	r11,	r10	
    4cb8:	1d f3       	and	#1,	r13	;r3 As==01
    4cba:	3c 24       	jz	$+122    	;abs 0x4d34
    4cbc:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    4cc0:	39 3c       	jmp	$+116    	;abs 0x4d34
    4cc2:	0e 5d       	add	r13,	r14	
    4cc4:	0c 4f       	mov	r15,	r12	
    4cc6:	0c 5d       	add	r13,	r12	
    4cc8:	0b 4c       	mov	r12,	r11	
    4cca:	0b de       	bis	r14,	r11	
    4ccc:	1b f3       	and	#1,	r11	;r3 As==01
    4cce:	1b 24       	jz	$+56     	;abs 0x4d06
    4cd0:	0b 4c       	mov	r12,	r11	
    4cd2:	0b ee       	xor	r14,	r11	
    4cd4:	1b f3       	and	#1,	r11	;r3 As==01
    4cd6:	06 20       	jnz	$+14     	;abs 0x4ce4
    4cd8:	3d 90 03 00 	cmp	#3,	r13	;#0x0003
    4cdc:	03 28       	jnc	$+8      	;abs 0x4ce4
    4cde:	0b 4e       	mov	r14,	r11	
    4ce0:	1b f3       	and	#1,	r11	;r3 As==01
    4ce2:	01 3c       	jmp	$+4      	;abs 0x4ce6
    4ce4:	0b 4d       	mov	r13,	r11	
    4ce6:	0d 8b       	sub	r11,	r13	
    4ce8:	09 4e       	mov	r14,	r9	
    4cea:	0a 4c       	mov	r12,	r10	
    4cec:	08 4b       	mov	r11,	r8	
    4cee:	08 8c       	sub	r12,	r8	
    4cf0:	3a 53       	add	#-1,	r10	;r3 As==11
    4cf2:	39 53       	add	#-1,	r9	;r3 As==11
    4cf4:	ea 49 00 00 	mov.b	@r9,	0(r10)	;0x0000(r10)
    4cf8:	07 4a       	mov	r10,	r7	
    4cfa:	07 58       	add	r8,	r7	
    4cfc:	f9 23       	jnz	$-12     	;abs 0x4cf0
    4cfe:	3b e3       	inv	r11		
    4d00:	1b 53       	inc	r11		
    4d02:	0c 5b       	add	r11,	r12	
    4d04:	0e 5b       	add	r11,	r14	
    4d06:	0b 4d       	mov	r13,	r11	
    4d08:	12 c3       	clrc			
    4d0a:	0b 10       	rrc	r11		
    4d0c:	0e 24       	jz	$+30     	;abs 0x4d2a
    4d0e:	0a 4b       	mov	r11,	r10	
    4d10:	08 4e       	mov	r14,	r8	
    4d12:	09 4c       	mov	r12,	r9	
    4d14:	28 83       	decd	r8		
    4d16:	29 83       	decd	r9		
    4d18:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    4d1c:	3a 53       	add	#-1,	r10	;r3 As==11
    4d1e:	fa 23       	jnz	$-10     	;abs 0x4d14
    4d20:	0a 8b       	sub	r11,	r10	
    4d22:	0b 4a       	mov	r10,	r11	
    4d24:	0b 5b       	rla	r11		
    4d26:	0e 5b       	add	r11,	r14	
    4d28:	0c 5b       	add	r11,	r12	
    4d2a:	1d f3       	and	#1,	r13	;r3 As==01
    4d2c:	03 24       	jz	$+8      	;abs 0x4d34
    4d2e:	dc 4e ff ff 	mov.b	-1(r14),-1(r12)	;0xffff(r14), 0xffff(r12)
    4d32:	ff ff 
    4d34:	37 41       	pop	r7		
    4d36:	38 41       	pop	r8		
    4d38:	39 41       	pop	r9		
    4d3a:	3a 41       	pop	r10		
    4d3c:	3b 41       	pop	r11		
    4d3e:	30 41       	ret			

00004d40 <_unexpected_>:
    4d40:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	e2 40 e2 40 e2 40 e2 40 e2 40 e2 40 e2 40 e2 40     .@.@.@.@.@.@.@.@
    fff0:	e2 40 e2 40 e2 40 e2 40 e2 40 e2 40 e2 40 00 40     .@.@.@.@.@.@.@.@
