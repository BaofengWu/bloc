
twine.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00004836 l    d  .rodata	00000000 .rodata
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 twine128.c
00004836 l     O .rodata	00000010 S
00004846 l     O .rodata	00000010 Pi
00004856 l     O .rodata	00000010 Pi_Inv
00004866 l     O .rodata	00000023 CON
000040e2 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
000047fc g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040e2  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040e2  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
00004692 g     F .text	0000009c Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
00004456 g     F .text	000000ce OneRound
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
000045c4 g     F .text	000000ce OneRound_Inv
0000488a g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
0000476c g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040dc  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040e2  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
0000482a g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040e2  w      .text	00000000 __isr_5
0000488a g       *ABS*	00000000 __data_load_start
000040e2 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040e2  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040e2  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040e2  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040e2  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004834  w      .text	00000000 _unexpected_
000040e2  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040e2  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
000047ca g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040e2 g       .text	00000000 __ctors_start
000040e2  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .rodata	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	0000009e main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040e2  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
0000472e g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040e2  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040e2 g       .text	00000000 __dtors_start
000040e2  w      .text	00000000 __isr_6
000040e2 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040e2  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .rodata	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004816 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040dc  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004820 g     F .text	0000000a start_decrypt
00001100 g       .rodata	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
000040e6 g     F .text	00000370 KeySch
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00004524 g     F .text	000000a0 Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 8a 48 	mov	18570(r15),4352(r15);0x488a(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
    }
}


int main()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 8e fe 	add	#-370,	r1	;#0xfe8e
  KEY[2] = 0x5544;
  KEY[3] = 0x7766;
  KEY[4] = 0x9988;

#elif KSIZE == 128
  KEY[0] = 0x1100;
    4046:	b4 40 00 11 	mov	#4352,	-66(r4)	;#0x1100, 0xffbe(r4)
    404a:	be ff 
  KEY[1] = 0x3322;
    404c:	b4 40 22 33 	mov	#13090,	-64(r4)	;#0x3322, 0xffc0(r4)
    4050:	c0 ff 
  KEY[2] = 0x5544;
    4052:	b4 40 44 55 	mov	#21828,	-62(r4)	;#0x5544, 0xffc2(r4)
    4056:	c2 ff 
  KEY[3] = 0x7766;
    4058:	b4 40 66 77 	mov	#30566,	-60(r4)	;#0x7766, 0xffc4(r4)
    405c:	c4 ff 
  KEY[4] = 0x9988;
    405e:	b4 40 88 99 	mov	#-26232,-58(r4)	;#0x9988, 0xffc6(r4)
    4062:	c6 ff 
  KEY[5] = 0xBBAA;
    4064:	b4 40 aa bb 	mov	#-17494,-56(r4)	;#0xbbaa, 0xffc8(r4)
    4068:	c8 ff 
  KEY[6] = 0xDDCC;
    406a:	b4 40 cc dd 	mov	#-8756,	-54(r4)	;#0xddcc, 0xffca(r4)
    406e:	ca ff 
  KEY[7] = 0xFFEE;
    4070:	b4 40 ee ff 	mov	#-18,	-52(r4)	;#0xffee, 0xffcc(r4)
    4074:	cc ff 
#endif
  
  for(i=0;i<16;i++)
    4076:	c4 43 8c fe 	mov.b	#0,	-372(r4);r3 As==00, 0xfe8c(r4)
    407a:	0b 3c       	jmp	$+24     	;abs 0x4092
  {
  Plain[i] = i;
    407c:	5f 44 8c fe 	mov.b	-372(r4),r15	;0xfe8c(r4)
    4080:	0e 44       	mov	r4,	r14	
    4082:	3e 50 8d fe 	add	#-371,	r14	;#0xfe8d
    4086:	0f 5e       	add	r14,	r15	
    4088:	df 44 8c fe 	mov.b	-372(r4),0(r15)	;0xfe8c(r4), 0x0000(r15)
    408c:	00 00 
  KEY[5] = 0xBBAA;
  KEY[6] = 0xDDCC;
  KEY[7] = 0xFFEE;
#endif
  
  for(i=0;i<16;i++)
    408e:	d4 53 8c fe 	inc.b	-372(r4)	;0xfe8c(r4)
    4092:	f4 90 10 00 	cmp.b	#16,	-372(r4);#0x0010, 0xfe8c(r4)
    4096:	8c fe 
    4098:	f1 2b       	jnc	$-28     	;abs 0x407c
	printf("%X ",Plain[i]); 
	}
	printf("\n"); 
	#endif

	START_ENCRYPT();
    409a:	b0 12 16 48 	call	#0x4816	

    KeySch(KEY, SubK);
    409e:	0e 44       	mov	r4,	r14	
    40a0:	3e 50 9d fe 	add	#-355,	r14	;#0xfe9d
    40a4:	0f 44       	mov	r4,	r15	
    40a6:	3f 50 be ff 	add	#-66,	r15	;#0xffbe
    40aa:	b0 12 e6 40 	call	#0x40e6	
    Encrypt(Plain,SubK);
    40ae:	0e 44       	mov	r4,	r14	
    40b0:	3e 50 9d fe 	add	#-355,	r14	;#0xfe9d
    40b4:	0f 44       	mov	r4,	r15	
    40b6:	3f 50 8d fe 	add	#-371,	r15	;#0xfe8d
    40ba:	b0 12 24 45 	call	#0x4524	
	}
	printf("\n");
	#endif


    START_DECRYPT();
    40be:	b0 12 20 48 	call	#0x4820	
    Decrypt(Plain,SubK);
    40c2:	0e 44       	mov	r4,	r14	
    40c4:	3e 50 9d fe 	add	#-355,	r14	;#0xfe9d
    40c8:	0f 44       	mov	r4,	r15	
    40ca:	3f 50 8d fe 	add	#-371,	r15	;#0xfe8d
    40ce:	b0 12 92 46 	call	#0x4692	
	printf("%X ",Plain[i]); 
	}
	printf("\n"); 
	#endif

    END_EXPE();
    40d2:	b0 12 2a 48 	call	#0x482a	

 return 0;  
    40d6:	0f 43       	clr	r15		
 
} 
    40d8:	31 50 72 01 	add	#370,	r1	;#0x0172

000040dc <__stop_progExec__>:
    40dc:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40e0:	fd 3f       	jmp	$-4      	;abs 0x40dc

000040e2 <__ctors_end>:
    40e2:	30 40 34 48 	br	#0x4834	

000040e6 <KeySch>:

void OneRound(u8 x[16], u8 k[8]);
void OneRound_Inv(u8 x[16], u8 k[8]);

 void KeySch(const u16 *key, u8 output[36][8])
{
    40e6:	04 12       	push	r4		
    40e8:	04 41       	mov	r1,	r4	
    40ea:	24 53       	incd	r4		
    40ec:	31 50 d6 ff 	add	#-42,	r1	;#0xffd6
    40f0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    40f4:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
     int i;
     u8 KeyR[KSIZE/4],temp, temp1, temp2, temp3;
          
      for(i=0;i<(KSIZE/4);i++)
    40f8:	84 43 d4 ff 	mov	#0,	-44(r4)	;r3 As==00, 0xffd4(r4)
    40fc:	29 3c       	jmp	$+84     	;abs 0x4150
     {
       KeyR[i] = (key[(i/4)]>>(4*(i&0x03))) & 0x0F;
    40fe:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4102:	0f 93       	tst	r15		
    4104:	02 34       	jge	$+6      	;abs 0x410a
    4106:	3f 50 03 00 	add	#3,	r15	;#0x0003
    410a:	0f 11       	rra	r15		
    410c:	0f 11       	rra	r15		
    410e:	0f 5f       	rla	r15		
    4110:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4114:	2e 4f       	mov	@r15,	r14	
    4116:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    411a:	3f f0 03 00 	and	#3,	r15	;#0x0003
    411e:	0f 5f       	rla	r15		
    4120:	0f 5f       	rla	r15		
    4122:	4f 4f       	mov.b	r15,	r15	
    4124:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    4128:	4f 93       	tst.b	r15		
    412a:	05 24       	jz	$+12     	;abs 0x4136
    412c:	12 c3       	clrc			
    412e:	0e 10       	rrc	r14		
    4130:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4132:	4f 93       	tst.b	r15		
    4134:	fb 23       	jnz	$-8      	;abs 0x412c
    4136:	4f 4e       	mov.b	r14,	r15	
    4138:	4e 4f       	mov.b	r15,	r14	
    413a:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    413e:	0f 44       	mov	r4,	r15	
    4140:	3f 50 da ff 	add	#-38,	r15	;#0xffda
    4144:	1f 54 d4 ff 	add	-44(r4),r15	;0xffd4(r4)
    4148:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
 void KeySch(const u16 *key, u8 output[36][8])
{
     int i;
     u8 KeyR[KSIZE/4],temp, temp1, temp2, temp3;
          
      for(i=0;i<(KSIZE/4);i++)
    414c:	94 53 d4 ff 	inc	-44(r4)	;0xffd4(r4)
    4150:	b4 90 20 00 	cmp	#32,	-44(r4)	;#0x0020, 0xffd4(r4)
    4154:	d4 ff 
    4156:	d3 3b       	jl	$-88     	;abs 0x40fe
     {
       KeyR[i] = (key[(i/4)]>>(4*(i&0x03))) & 0x0F;
     }

     for(i=0;i<35;i++)
    4158:	84 43 d4 ff 	mov	#0,	-44(r4)	;r3 As==00, 0xffd4(r4)
    415c:	30 40 c2 43 	br	#0x43c2	
      KeyR[17]=temp1;      
      KeyR[18]=temp2;      
      KeyR[19]=temp3;     
      
#elif KSIZE == 128
output[i][0] = KeyR[2];
    4160:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4164:	0f 5f       	rla	r15		
    4166:	0f 5f       	rla	r15		
    4168:	0f 5f       	rla	r15		
    416a:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    416e:	5e 44 dc ff 	mov.b	-36(r4),r14	;0xffdc(r4)
    4172:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
      output[i][1] = KeyR[3];
    4176:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    417a:	0f 5f       	rla	r15		
    417c:	0f 5f       	rla	r15		
    417e:	0f 5f       	rla	r15		
    4180:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4184:	5e 44 dd ff 	mov.b	-35(r4),r14	;0xffdd(r4)
    4188:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
      output[i][2] = KeyR[12];
    418c:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4190:	0f 5f       	rla	r15		
    4192:	0f 5f       	rla	r15		
    4194:	0f 5f       	rla	r15		
    4196:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    419a:	5e 44 e6 ff 	mov.b	-26(r4),r14	;0xffe6(r4)
    419e:	cf 4e 02 00 	mov.b	r14,	2(r15)	;0x0002(r15)
      output[i][3] = KeyR[15];
    41a2:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    41a6:	0f 5f       	rla	r15		
    41a8:	0f 5f       	rla	r15		
    41aa:	0f 5f       	rla	r15		
    41ac:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    41b0:	5e 44 e9 ff 	mov.b	-23(r4),r14	;0xffe9(r4)
    41b4:	cf 4e 03 00 	mov.b	r14,	3(r15)	;0x0003(r15)
      output[i][4] = KeyR[17];
    41b8:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    41bc:	0f 5f       	rla	r15		
    41be:	0f 5f       	rla	r15		
    41c0:	0f 5f       	rla	r15		
    41c2:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    41c6:	5e 44 eb ff 	mov.b	-21(r4),r14	;0xffeb(r4)
    41ca:	cf 4e 04 00 	mov.b	r14,	4(r15)	;0x0004(r15)
      output[i][5] = KeyR[18];
    41ce:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    41d2:	0f 5f       	rla	r15		
    41d4:	0f 5f       	rla	r15		
    41d6:	0f 5f       	rla	r15		
    41d8:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    41dc:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    41e0:	cf 4e 05 00 	mov.b	r14,	5(r15)	;0x0005(r15)
      output[i][6] = KeyR[28];
    41e4:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    41e8:	0f 5f       	rla	r15		
    41ea:	0f 5f       	rla	r15		
    41ec:	0f 5f       	rla	r15		
    41ee:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    41f2:	5e 44 f6 ff 	mov.b	-10(r4),r14	;0xfff6(r4)
    41f6:	cf 4e 06 00 	mov.b	r14,	6(r15)	;0x0006(r15)
      output[i][7] = KeyR[31];        
    41fa:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    41fe:	0f 5f       	rla	r15		
    4200:	0f 5f       	rla	r15		
    4202:	0f 5f       	rla	r15		
    4204:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4208:	5e 44 f9 ff 	mov.b	-7(r4),	r14	;0xfff9(r4)
    420c:	cf 4e 07 00 	mov.b	r14,	7(r15)	;0x0007(r15)
      
      KeyR[1]=KeyR[1] ^S[KeyR[0]];
    4210:	5e 44 db ff 	mov.b	-37(r4),r14	;0xffdb(r4)
    4214:	5f 44 da ff 	mov.b	-38(r4),r15	;0xffda(r4)
    4218:	4f 4f       	mov.b	r15,	r15	
    421a:	5f 4f 36 48 	mov.b	18486(r15),r15	;0x4836(r15)
    421e:	4f ee       	xor.b	r14,	r15	
    4220:	c4 4f db ff 	mov.b	r15,	-37(r4)	;0xffdb(r4)
      KeyR[4]=KeyR[4] ^S[KeyR[16]];
    4224:	5e 44 de ff 	mov.b	-34(r4),r14	;0xffde(r4)
    4228:	5f 44 ea ff 	mov.b	-22(r4),r15	;0xffea(r4)
    422c:	4f 4f       	mov.b	r15,	r15	
    422e:	5f 4f 36 48 	mov.b	18486(r15),r15	;0x4836(r15)
    4232:	4f ee       	xor.b	r14,	r15	
    4234:	c4 4f de ff 	mov.b	r15,	-34(r4)	;0xffde(r4)
      KeyR[23]=KeyR[23] ^S[KeyR[30]];
    4238:	5e 44 f1 ff 	mov.b	-15(r4),r14	;0xfff1(r4)
    423c:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4240:	4f 4f       	mov.b	r15,	r15	
    4242:	5f 4f 36 48 	mov.b	18486(r15),r15	;0x4836(r15)
    4246:	4f ee       	xor.b	r14,	r15	
    4248:	c4 4f f1 ff 	mov.b	r15,	-15(r4)	;0xfff1(r4)
      
      KeyR[7]=KeyR[7] ^(CON[i]>>3);
    424c:	5e 44 e1 ff 	mov.b	-31(r4),r14	;0xffe1(r4)
    4250:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4254:	3f 50 66 48 	add	#18534,	r15	;#0x4866
    4258:	6f 4f       	mov.b	@r15,	r15	
    425a:	4f 4f       	mov.b	r15,	r15	
    425c:	4f 4f       	mov.b	r15,	r15	
    425e:	12 c3       	clrc			
    4260:	4f 10       	rrc.b	r15		
    4262:	12 c3       	clrc			
    4264:	4f 10       	rrc.b	r15		
    4266:	12 c3       	clrc			
    4268:	4f 10       	rrc.b	r15		
    426a:	4f ee       	xor.b	r14,	r15	
    426c:	c4 4f e1 ff 	mov.b	r15,	-31(r4)	;0xffe1(r4)
      KeyR[19]=KeyR[19] ^(CON[i]&0x07);
    4270:	5f 44 ed ff 	mov.b	-19(r4),r15	;0xffed(r4)
    4274:	4e 4f       	mov.b	r15,	r14	
    4276:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    427a:	3f 50 66 48 	add	#18534,	r15	;#0x4866
    427e:	6f 4f       	mov.b	@r15,	r15	
    4280:	7f f0 07 00 	and.b	#7,	r15	;#0x0007
    4284:	4f ee       	xor.b	r14,	r15	
    4286:	c4 4f ed ff 	mov.b	r15,	-19(r4)	;0xffed(r4)
      
      temp=KeyR[0];
    428a:	d4 44 da ff 	mov.b	-38(r4),-42(r4)	;0xffda(r4), 0xffd6(r4)
    428e:	d6 ff 
      KeyR[0]=KeyR[1];
    4290:	5f 44 db ff 	mov.b	-37(r4),r15	;0xffdb(r4)
    4294:	c4 4f da ff 	mov.b	r15,	-38(r4)	;0xffda(r4)
      KeyR[1]=KeyR[2];      
    4298:	5f 44 dc ff 	mov.b	-36(r4),r15	;0xffdc(r4)
    429c:	c4 4f db ff 	mov.b	r15,	-37(r4)	;0xffdb(r4)
      KeyR[2]=KeyR[3];      
    42a0:	5f 44 dd ff 	mov.b	-35(r4),r15	;0xffdd(r4)
    42a4:	c4 4f dc ff 	mov.b	r15,	-36(r4)	;0xffdc(r4)
      KeyR[3]=temp;  
    42a8:	d4 44 d6 ff 	mov.b	-42(r4),-35(r4)	;0xffd6(r4), 0xffdd(r4)
    42ac:	dd ff 
                
      temp=KeyR[0];
    42ae:	d4 44 da ff 	mov.b	-38(r4),-42(r4)	;0xffda(r4), 0xffd6(r4)
    42b2:	d6 ff 
      temp1=KeyR[1];
    42b4:	d4 44 db ff 	mov.b	-37(r4),-41(r4)	;0xffdb(r4), 0xffd7(r4)
    42b8:	d7 ff 
      temp2=KeyR[2];
    42ba:	d4 44 dc ff 	mov.b	-36(r4),-40(r4)	;0xffdc(r4), 0xffd8(r4)
    42be:	d8 ff 
      temp3=KeyR[3];
    42c0:	d4 44 dd ff 	mov.b	-35(r4),-39(r4)	;0xffdd(r4), 0xffd9(r4)
    42c4:	d9 ff 
      
      KeyR[0]=KeyR[4];
    42c6:	5f 44 de ff 	mov.b	-34(r4),r15	;0xffde(r4)
    42ca:	c4 4f da ff 	mov.b	r15,	-38(r4)	;0xffda(r4)
      KeyR[1]=KeyR[5];      
    42ce:	5f 44 df ff 	mov.b	-33(r4),r15	;0xffdf(r4)
    42d2:	c4 4f db ff 	mov.b	r15,	-37(r4)	;0xffdb(r4)
      KeyR[2]=KeyR[6];      
    42d6:	5f 44 e0 ff 	mov.b	-32(r4),r15	;0xffe0(r4)
    42da:	c4 4f dc ff 	mov.b	r15,	-36(r4)	;0xffdc(r4)
      KeyR[3]=KeyR[7];            
    42de:	5f 44 e1 ff 	mov.b	-31(r4),r15	;0xffe1(r4)
    42e2:	c4 4f dd ff 	mov.b	r15,	-35(r4)	;0xffdd(r4)
      
      KeyR[4]=KeyR[8];
    42e6:	5f 44 e2 ff 	mov.b	-30(r4),r15	;0xffe2(r4)
    42ea:	c4 4f de ff 	mov.b	r15,	-34(r4)	;0xffde(r4)
      KeyR[5]=KeyR[9];      
    42ee:	5f 44 e3 ff 	mov.b	-29(r4),r15	;0xffe3(r4)
    42f2:	c4 4f df ff 	mov.b	r15,	-33(r4)	;0xffdf(r4)
      KeyR[6]=KeyR[10];      
    42f6:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    42fa:	c4 4f e0 ff 	mov.b	r15,	-32(r4)	;0xffe0(r4)
      KeyR[7]=KeyR[11];           
    42fe:	5f 44 e5 ff 	mov.b	-27(r4),r15	;0xffe5(r4)
    4302:	c4 4f e1 ff 	mov.b	r15,	-31(r4)	;0xffe1(r4)
      
      KeyR[8]=KeyR[12];
    4306:	5f 44 e6 ff 	mov.b	-26(r4),r15	;0xffe6(r4)
    430a:	c4 4f e2 ff 	mov.b	r15,	-30(r4)	;0xffe2(r4)
      KeyR[9]=KeyR[13];      
    430e:	5f 44 e7 ff 	mov.b	-25(r4),r15	;0xffe7(r4)
    4312:	c4 4f e3 ff 	mov.b	r15,	-29(r4)	;0xffe3(r4)
      KeyR[10]=KeyR[14];      
    4316:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    431a:	c4 4f e4 ff 	mov.b	r15,	-28(r4)	;0xffe4(r4)
      KeyR[11]=KeyR[15];     
    431e:	5f 44 e9 ff 	mov.b	-23(r4),r15	;0xffe9(r4)
    4322:	c4 4f e5 ff 	mov.b	r15,	-27(r4)	;0xffe5(r4)

      KeyR[12]=KeyR[16];
    4326:	5f 44 ea ff 	mov.b	-22(r4),r15	;0xffea(r4)
    432a:	c4 4f e6 ff 	mov.b	r15,	-26(r4)	;0xffe6(r4)
      KeyR[13]=KeyR[17];      
    432e:	5f 44 eb ff 	mov.b	-21(r4),r15	;0xffeb(r4)
    4332:	c4 4f e7 ff 	mov.b	r15,	-25(r4)	;0xffe7(r4)
      KeyR[14]=KeyR[18];      
    4336:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    433a:	c4 4f e8 ff 	mov.b	r15,	-24(r4)	;0xffe8(r4)
      KeyR[15]=KeyR[19];
    433e:	5f 44 ed ff 	mov.b	-19(r4),r15	;0xffed(r4)
    4342:	c4 4f e9 ff 	mov.b	r15,	-23(r4)	;0xffe9(r4)

      KeyR[16]=KeyR[20];
    4346:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    434a:	c4 4f ea ff 	mov.b	r15,	-22(r4)	;0xffea(r4)
      KeyR[17]=KeyR[21];      
    434e:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4352:	c4 4f eb ff 	mov.b	r15,	-21(r4)	;0xffeb(r4)
      KeyR[18]=KeyR[22];      
    4356:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    435a:	c4 4f ec ff 	mov.b	r15,	-20(r4)	;0xffec(r4)
      KeyR[19]=KeyR[23];
    435e:	5f 44 f1 ff 	mov.b	-15(r4),r15	;0xfff1(r4)
    4362:	c4 4f ed ff 	mov.b	r15,	-19(r4)	;0xffed(r4)
      
      KeyR[20]=KeyR[24];
    4366:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    436a:	c4 4f ee ff 	mov.b	r15,	-18(r4)	;0xffee(r4)
      KeyR[21]=KeyR[25];      
    436e:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    4372:	c4 4f ef ff 	mov.b	r15,	-17(r4)	;0xffef(r4)
      KeyR[22]=KeyR[26];      
    4376:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    437a:	c4 4f f0 ff 	mov.b	r15,	-16(r4)	;0xfff0(r4)
      KeyR[23]=KeyR[27];
    437e:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    4382:	c4 4f f1 ff 	mov.b	r15,	-15(r4)	;0xfff1(r4)

      KeyR[24]=KeyR[28];
    4386:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    438a:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
      KeyR[25]=KeyR[29];      
    438e:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    4392:	c4 4f f3 ff 	mov.b	r15,	-13(r4)	;0xfff3(r4)
      KeyR[26]=KeyR[30];      
    4396:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    439a:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
      KeyR[27]=KeyR[31];
    439e:	5f 44 f9 ff 	mov.b	-7(r4),	r15	;0xfff9(r4)
    43a2:	c4 4f f5 ff 	mov.b	r15,	-11(r4)	;0xfff5(r4)

      KeyR[28]=temp;
    43a6:	d4 44 d6 ff 	mov.b	-42(r4),-10(r4)	;0xffd6(r4), 0xfff6(r4)
    43aa:	f6 ff 
      KeyR[29]=temp1;      
    43ac:	d4 44 d7 ff 	mov.b	-41(r4),-9(r4)	;0xffd7(r4), 0xfff7(r4)
    43b0:	f7 ff 
      KeyR[30]=temp2;      
    43b2:	d4 44 d8 ff 	mov.b	-40(r4),-8(r4)	;0xffd8(r4), 0xfff8(r4)
    43b6:	f8 ff 
      KeyR[31]=temp3;          
    43b8:	d4 44 d9 ff 	mov.b	-39(r4),-7(r4)	;0xffd9(r4), 0xfff9(r4)
    43bc:	f9 ff 
      for(i=0;i<(KSIZE/4);i++)
     {
       KeyR[i] = (key[(i/4)]>>(4*(i&0x03))) & 0x0F;
     }

     for(i=0;i<35;i++)
    43be:	94 53 d4 ff 	inc	-44(r4)	;0xffd4(r4)
    43c2:	b4 90 23 00 	cmp	#35,	-44(r4)	;#0x0023, 0xffd4(r4)
    43c6:	d4 ff 
    43c8:	02 34       	jge	$+6      	;abs 0x43ce
    43ca:	30 40 60 41 	br	#0x4160	
      output[35][4] = KeyR[13];
      output[35][5] = KeyR[14];
      output[35][6] = KeyR[15];
      output[35][7] = KeyR[16];    
#elif KSIZE == 128
      output[35][0] = KeyR[2];
    43ce:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    43d2:	3f 50 18 01 	add	#280,	r15	;#0x0118
    43d6:	5e 44 dc ff 	mov.b	-36(r4),r14	;0xffdc(r4)
    43da:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
      output[35][1] = KeyR[3];
    43de:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    43e2:	3f 50 18 01 	add	#280,	r15	;#0x0118
    43e6:	5e 44 dd ff 	mov.b	-35(r4),r14	;0xffdd(r4)
    43ea:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
      output[35][2] = KeyR[12];
    43ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    43f2:	3f 50 18 01 	add	#280,	r15	;#0x0118
    43f6:	5e 44 e6 ff 	mov.b	-26(r4),r14	;0xffe6(r4)
    43fa:	cf 4e 02 00 	mov.b	r14,	2(r15)	;0x0002(r15)
      output[35][3] = KeyR[15];
    43fe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4402:	3f 50 18 01 	add	#280,	r15	;#0x0118
    4406:	5e 44 e9 ff 	mov.b	-23(r4),r14	;0xffe9(r4)
    440a:	cf 4e 03 00 	mov.b	r14,	3(r15)	;0x0003(r15)
      output[35][4] = KeyR[17];
    440e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4412:	3f 50 18 01 	add	#280,	r15	;#0x0118
    4416:	5e 44 eb ff 	mov.b	-21(r4),r14	;0xffeb(r4)
    441a:	cf 4e 04 00 	mov.b	r14,	4(r15)	;0x0004(r15)
      output[35][5] = KeyR[18];
    441e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4422:	3f 50 18 01 	add	#280,	r15	;#0x0118
    4426:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    442a:	cf 4e 05 00 	mov.b	r14,	5(r15)	;0x0005(r15)
      output[35][6] = KeyR[28];
    442e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4432:	3f 50 18 01 	add	#280,	r15	;#0x0118
    4436:	5e 44 f6 ff 	mov.b	-10(r4),r14	;0xfff6(r4)
    443a:	cf 4e 06 00 	mov.b	r14,	6(r15)	;0x0006(r15)
      output[35][7] = KeyR[31];  
    443e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4442:	3f 50 18 01 	add	#280,	r15	;#0x0118
    4446:	5e 44 f9 ff 	mov.b	-7(r4),	r14	;0xfff9(r4)
    444a:	cf 4e 07 00 	mov.b	r14,	7(r15)	;0x0007(r15)
#endif         

}     
    444e:	31 50 2a 00 	add	#42,	r1	;#0x002a
    4452:	34 41       	pop	r4		
    4454:	30 41       	ret			

00004456 <OneRound>:

 void OneRound(u8 x[16], u8 k[8])
{
    4456:	04 12       	push	r4		
    4458:	04 41       	mov	r1,	r4	
    445a:	24 53       	incd	r4		
    445c:	31 50 ea ff 	add	#-22,	r1	;#0xffea
    4460:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4464:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
  u8 t[16];
  u8 i;

    for(i=0;i<8;i++)
    4468:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    446c:	25 3c       	jmp	$+76     	;abs 0x44b8
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    446e:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4472:	0f 5f       	rla	r15		
    4474:	1f 53       	inc	r15		
    4476:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    447a:	0e 5f       	add	r15,	r14	
    447c:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4480:	0f 5f       	rla	r15		
    4482:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4486:	6d 4f       	mov.b	@r15,	r13	
    4488:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    448c:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4490:	6f 4f       	mov.b	@r15,	r15	
    4492:	4f ed       	xor.b	r13,	r15	
    4494:	4f 4f       	mov.b	r15,	r15	
    4496:	5f 4f 36 48 	mov.b	18486(r15),r15	;0x4836(r15)
    449a:	4d 4f       	mov.b	r15,	r13	
    449c:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    44a0:	0f 5f       	rla	r15		
    44a2:	1f 53       	inc	r15		
    44a4:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    44a8:	6f 4f       	mov.b	@r15,	r15	
    44aa:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    44ae:	4f ed       	xor.b	r13,	r15	
    44b0:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
 void OneRound(u8 x[16], u8 k[8])
{
  u8 t[16];
  u8 i;

    for(i=0;i<8;i++)
    44b4:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    44b8:	f4 92 e8 ff 	cmp.b	#8,	-24(r4)	;r2 As==11, 0xffe8(r4)
    44bc:	d8 2b       	jnc	$-78     	;abs 0x446e
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    }

    for(i=0;i<16;i++)
    44be:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    44c2:	12 3c       	jmp	$+38     	;abs 0x44e8
    {
      t[Pi[i]]=x[i];
    44c4:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    44c8:	5f 4f 46 48 	mov.b	18502(r15),r15	;0x4846(r15)
    44cc:	4f 4f       	mov.b	r15,	r15	
    44ce:	5e 44 e8 ff 	mov.b	-24(r4),r14	;0xffe8(r4)
    44d2:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    44d6:	6e 4e       	mov.b	@r14,	r14	
    44d8:	0d 44       	mov	r4,	r13	
    44da:	3d 50 e9 ff 	add	#-23,	r13	;#0xffe9
    44de:	0f 5d       	add	r13,	r15	
    44e0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    for(i=0;i<8;i++)
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    }

    for(i=0;i<16;i++)
    44e4:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    44e8:	f4 90 10 00 	cmp.b	#16,	-24(r4)	;#0x0010, 0xffe8(r4)
    44ec:	e8 ff 
    44ee:	ea 2b       	jnc	$-42     	;abs 0x44c4
    {
      t[Pi[i]]=x[i];
    }
  
    for(i=0;i<16;i++)
    44f0:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    44f4:	0f 3c       	jmp	$+32     	;abs 0x4514
    {
    x[i]=t[i];
    44f6:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    44fa:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    44fe:	5e 44 e8 ff 	mov.b	-24(r4),r14	;0xffe8(r4)
    4502:	0d 44       	mov	r4,	r13	
    4504:	3d 50 e9 ff 	add	#-23,	r13	;#0xffe9
    4508:	0e 5d       	add	r13,	r14	
    450a:	6e 4e       	mov.b	@r14,	r14	
    450c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    for(i=0;i<16;i++)
    {
      t[Pi[i]]=x[i];
    }
  
    for(i=0;i<16;i++)
    4510:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    4514:	f4 90 10 00 	cmp.b	#16,	-24(r4)	;#0x0010, 0xffe8(r4)
    4518:	e8 ff 
    451a:	ed 2b       	jnc	$-36     	;abs 0x44f6
    {
    x[i]=t[i];
    }
}
    451c:	31 50 16 00 	add	#22,	r1	;#0x0016
    4520:	34 41       	pop	r4		
    4522:	30 41       	ret			

00004524 <Encrypt>:

 void Encrypt(u8 x[16], u8 Subkey[36][8])
{
    4524:	04 12       	push	r4		
    4526:	04 41       	mov	r1,	r4	
    4528:	24 53       	incd	r4		
    452a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    452e:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4532:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
     u8 i;
     // 35 TOURS
     for(i=0;i<35;i++)
    4536:	c4 43 f8 ff 	mov.b	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    453a:	0e 3c       	jmp	$+30     	;abs 0x4558
    {
      OneRound(x,Subkey[i]);
    453c:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4540:	0f 5f       	rla	r15		
    4542:	0f 5f       	rla	r15		
    4544:	0f 5f       	rla	r15		
    4546:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    454a:	0e 4f       	mov	r15,	r14	
    454c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4550:	b0 12 56 44 	call	#0x4456	

 void Encrypt(u8 x[16], u8 Subkey[36][8])
{
     u8 i;
     // 35 TOURS
     for(i=0;i<35;i++)
    4554:	d4 53 f8 ff 	inc.b	-8(r4)		;0xfff8(r4)
    4558:	f4 90 23 00 	cmp.b	#35,	-8(r4)	;#0x0023, 0xfff8(r4)
    455c:	f8 ff 
    455e:	ee 2b       	jnc	$-34     	;abs 0x453c
    {
      OneRound(x,Subkey[i]);
    }
    // DERNIER TOUR
    for(i=0;i<8;i++)
    4560:	c4 43 f8 ff 	mov.b	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4564:	28 3c       	jmp	$+82     	;abs 0x45b6
    {
      x[2*i+1]=S[x[2*i]^Subkey[35][i]]^x[2*i+1] & 0x0F;
    4566:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    456a:	0f 5f       	rla	r15		
    456c:	1f 53       	inc	r15		
    456e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4572:	0e 5f       	add	r15,	r14	
    4574:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4578:	0f 5f       	rla	r15		
    457a:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    457e:	6d 4f       	mov.b	@r15,	r13	
    4580:	1c 44 fc ff 	mov	-4(r4),	r12	;0xfffc(r4)
    4584:	3c 50 18 01 	add	#280,	r12	;#0x0118
    4588:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    458c:	0f 5c       	add	r12,	r15	
    458e:	6f 4f       	mov.b	@r15,	r15	
    4590:	4f ed       	xor.b	r13,	r15	
    4592:	4f 4f       	mov.b	r15,	r15	
    4594:	5f 4f 36 48 	mov.b	18486(r15),r15	;0x4836(r15)
    4598:	4d 4f       	mov.b	r15,	r13	
    459a:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    459e:	0f 5f       	rla	r15		
    45a0:	1f 53       	inc	r15		
    45a2:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    45a6:	6f 4f       	mov.b	@r15,	r15	
    45a8:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    45ac:	4f ed       	xor.b	r13,	r15	
    45ae:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
     for(i=0;i<35;i++)
    {
      OneRound(x,Subkey[i]);
    }
    // DERNIER TOUR
    for(i=0;i<8;i++)
    45b2:	d4 53 f8 ff 	inc.b	-8(r4)		;0xfff8(r4)
    45b6:	f4 92 f8 ff 	cmp.b	#8,	-8(r4)	;r2 As==11, 0xfff8(r4)
    45ba:	d5 2b       	jnc	$-84     	;abs 0x4566
    {
      x[2*i+1]=S[x[2*i]^Subkey[35][i]]^x[2*i+1] & 0x0F;
    }
}
    45bc:	31 50 06 00 	add	#6,	r1	;#0x0006
    45c0:	34 41       	pop	r4		
    45c2:	30 41       	ret			

000045c4 <OneRound_Inv>:

 void OneRound_Inv(u8 x[16], u8 k[8])
{
    45c4:	04 12       	push	r4		
    45c6:	04 41       	mov	r1,	r4	
    45c8:	24 53       	incd	r4		
    45ca:	31 50 ea ff 	add	#-22,	r1	;#0xffea
    45ce:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    45d2:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
  u8 t[16];
  u8 i;

   for(i=0;i<8;i++)
    45d6:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    45da:	25 3c       	jmp	$+76     	;abs 0x4626
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    45dc:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    45e0:	0f 5f       	rla	r15		
    45e2:	1f 53       	inc	r15		
    45e4:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    45e8:	0e 5f       	add	r15,	r14	
    45ea:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    45ee:	0f 5f       	rla	r15		
    45f0:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    45f4:	6d 4f       	mov.b	@r15,	r13	
    45f6:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    45fa:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    45fe:	6f 4f       	mov.b	@r15,	r15	
    4600:	4f ed       	xor.b	r13,	r15	
    4602:	4f 4f       	mov.b	r15,	r15	
    4604:	5f 4f 36 48 	mov.b	18486(r15),r15	;0x4836(r15)
    4608:	4d 4f       	mov.b	r15,	r13	
    460a:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    460e:	0f 5f       	rla	r15		
    4610:	1f 53       	inc	r15		
    4612:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4616:	6f 4f       	mov.b	@r15,	r15	
    4618:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    461c:	4f ed       	xor.b	r13,	r15	
    461e:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
 void OneRound_Inv(u8 x[16], u8 k[8])
{
  u8 t[16];
  u8 i;

   for(i=0;i<8;i++)
    4622:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    4626:	f4 92 e8 ff 	cmp.b	#8,	-24(r4)	;r2 As==11, 0xffe8(r4)
    462a:	d8 2b       	jnc	$-78     	;abs 0x45dc
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    }

    for(i=0;i<16;i++)
    462c:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    4630:	12 3c       	jmp	$+38     	;abs 0x4656
    {
    t[Pi_Inv[i]]=x[i];
    4632:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4636:	5f 4f 56 48 	mov.b	18518(r15),r15	;0x4856(r15)
    463a:	4f 4f       	mov.b	r15,	r15	
    463c:	5e 44 e8 ff 	mov.b	-24(r4),r14	;0xffe8(r4)
    4640:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    4644:	6e 4e       	mov.b	@r14,	r14	
    4646:	0d 44       	mov	r4,	r13	
    4648:	3d 50 e9 ff 	add	#-23,	r13	;#0xffe9
    464c:	0f 5d       	add	r13,	r15	
    464e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
   for(i=0;i<8;i++)
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    }

    for(i=0;i<16;i++)
    4652:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    4656:	f4 90 10 00 	cmp.b	#16,	-24(r4)	;#0x0010, 0xffe8(r4)
    465a:	e8 ff 
    465c:	ea 2b       	jnc	$-42     	;abs 0x4632
    {
    t[Pi_Inv[i]]=x[i];
    }

    for(i=0;i<16;i++)
    465e:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    4662:	0f 3c       	jmp	$+32     	;abs 0x4682
    {
    x[i]=t[i];
    4664:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4668:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    466c:	5e 44 e8 ff 	mov.b	-24(r4),r14	;0xffe8(r4)
    4670:	0d 44       	mov	r4,	r13	
    4672:	3d 50 e9 ff 	add	#-23,	r13	;#0xffe9
    4676:	0e 5d       	add	r13,	r14	
    4678:	6e 4e       	mov.b	@r14,	r14	
    467a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    for(i=0;i<16;i++)
    {
    t[Pi_Inv[i]]=x[i];
    }

    for(i=0;i<16;i++)
    467e:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    4682:	f4 90 10 00 	cmp.b	#16,	-24(r4)	;#0x0010, 0xffe8(r4)
    4686:	e8 ff 
    4688:	ed 2b       	jnc	$-36     	;abs 0x4664
    {
    x[i]=t[i];
    }	
}
    468a:	31 50 16 00 	add	#22,	r1	;#0x0016
    468e:	34 41       	pop	r4		
    4690:	30 41       	ret			

00004692 <Decrypt>:


 void Decrypt(u8 x[16], u8 Subkey[36][8])
{
    4692:	04 12       	push	r4		
    4694:	04 41       	mov	r1,	r4	
    4696:	24 53       	incd	r4		
    4698:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    469c:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    46a0:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
  u8 i;
  
  // 35 TOURS
  for(i=35;i>0;i--)
    46a4:	f4 40 23 00 	mov.b	#35,	-8(r4)	;#0x0023, 0xfff8(r4)
    46a8:	f8 ff 
    46aa:	0e 3c       	jmp	$+30     	;abs 0x46c8
    {
    OneRound_Inv(x,Subkey[i]);
    46ac:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    46b0:	0f 5f       	rla	r15		
    46b2:	0f 5f       	rla	r15		
    46b4:	0f 5f       	rla	r15		
    46b6:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    46ba:	0e 4f       	mov	r15,	r14	
    46bc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    46c0:	b0 12 c4 45 	call	#0x45c4	
 void Decrypt(u8 x[16], u8 Subkey[36][8])
{
  u8 i;
  
  // 35 TOURS
  for(i=35;i>0;i--)
    46c4:	f4 53 f8 ff 	add.b	#-1,	-8(r4)	;r3 As==11, 0xfff8(r4)
    46c8:	c4 93 f8 ff 	tst.b	-8(r4)		;0xfff8(r4)
    46cc:	ef 23       	jnz	$-32     	;abs 0x46ac
    {
    OneRound_Inv(x,Subkey[i]);
    }
        // DERNIER TOUR
    for(i=0;i<8;i++)
    46ce:	c4 43 f8 ff 	mov.b	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    46d2:	26 3c       	jmp	$+78     	;abs 0x4720
    {
    x[2*i+1]=S[x[2*i]^Subkey[0][i]]^x[2*i+1] & 0x0F;
    46d4:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    46d8:	0f 5f       	rla	r15		
    46da:	1f 53       	inc	r15		
    46dc:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    46e0:	0e 5f       	add	r15,	r14	
    46e2:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    46e6:	0f 5f       	rla	r15		
    46e8:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    46ec:	6d 4f       	mov.b	@r15,	r13	
    46ee:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    46f2:	1c 44 fc ff 	mov	-4(r4),	r12	;0xfffc(r4)
    46f6:	0f 5c       	add	r12,	r15	
    46f8:	6f 4f       	mov.b	@r15,	r15	
    46fa:	4f ed       	xor.b	r13,	r15	
    46fc:	4f 4f       	mov.b	r15,	r15	
    46fe:	5f 4f 36 48 	mov.b	18486(r15),r15	;0x4836(r15)
    4702:	4d 4f       	mov.b	r15,	r13	
    4704:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4708:	0f 5f       	rla	r15		
    470a:	1f 53       	inc	r15		
    470c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4710:	6f 4f       	mov.b	@r15,	r15	
    4712:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    4716:	4f ed       	xor.b	r13,	r15	
    4718:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  for(i=35;i>0;i--)
    {
    OneRound_Inv(x,Subkey[i]);
    }
        // DERNIER TOUR
    for(i=0;i<8;i++)
    471c:	d4 53 f8 ff 	inc.b	-8(r4)		;0xfff8(r4)
    4720:	f4 92 f8 ff 	cmp.b	#8,	-8(r4)	;r2 As==11, 0xfff8(r4)
    4724:	d7 2b       	jnc	$-80     	;abs 0x46d4
    {
    x[2*i+1]=S[x[2*i]^Subkey[0][i]]^x[2*i+1] & 0x0F;
    }
}
    4726:	31 50 06 00 	add	#6,	r1	;#0x0006
    472a:	34 41       	pop	r4		
    472c:	30 41       	ret			

0000472e <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    472e:	04 12       	push	r4		
    4730:	04 41       	mov	r1,	r4	
    4732:	24 53       	incd	r4		
    4734:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4738:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    473c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4740:	0d 3c       	jmp	$+28     	;abs 0x475c
    {
      for (i = 0; i<d; i++) 
    4742:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4746:	04 3c       	jmp	$+10     	;abs 0x4750
	{
	  nop();
    4748:	03 43       	nop			
	  nop();
    474a:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    474c:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4750:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4754:	f8 ff 
    4756:	f8 2b       	jnc	$-14     	;abs 0x4748
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4758:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    475c:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4760:	fa ff 
    4762:	ef 2b       	jnc	$-32     	;abs 0x4742
	{
	  nop();
	  nop();
	}
    }
}
    4764:	31 50 06 00 	add	#6,	r1	;#0x0006
    4768:	34 41       	pop	r4		
    476a:	30 41       	ret			

0000476c <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    476c:	04 12       	push	r4		
    476e:	04 41       	mov	r1,	r4	
    4770:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4772:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4776:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4778:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    477c:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4780:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4784:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4788:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    478c:	5f 42 05 00 	mov.b	&0x0005,r15	
    4790:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4794:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4798:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    479c:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    47a0:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    47a2:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    47a6:	79 00 
  U1RCTL = 0;
    47a8:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    47ac:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    47b0:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    47b4:	7c 00 
  U1MCTL = U1MCTL_INIT;
    47b6:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    47ba:	7b 00 

  delay(0x800);
    47bc:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    47c0:	b0 12 2e 47 	call	#0x472e	
  return 0;
    47c4:	0f 43       	clr	r15		
}
    47c6:	34 41       	pop	r4		
    47c8:	30 41       	ret			

000047ca <uart1_putchar>:

int uart1_putchar(int c)
{
    47ca:	04 12       	push	r4		
    47cc:	04 41       	mov	r1,	r4	
    47ce:	24 53       	incd	r4		
    47d0:	21 83       	decd	r1		
    47d2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    47d6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    47da:	4f 4f       	mov.b	r15,	r15	
    47dc:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    47e0:	03 43       	nop			
    47e2:	5f 42 79 00 	mov.b	&0x0079,r15	
    47e6:	4f 4f       	mov.b	r15,	r15	
    47e8:	1f f3       	and	#1,	r15	;r3 As==01
    47ea:	0f 93       	tst	r15		
    47ec:	fa 27       	jz	$-10     	;abs 0x47e2
  return (unsigned char)c;
    47ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    47f2:	4f 4f       	mov.b	r15,	r15	
    47f4:	4f 4f       	mov.b	r15,	r15	
}
    47f6:	21 53       	incd	r1		
    47f8:	34 41       	pop	r4		
    47fa:	30 41       	ret			

000047fc <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    47fc:	04 12       	push	r4		
    47fe:	04 41       	mov	r1,	r4	
    4800:	24 53       	incd	r4		
    4802:	21 83       	decd	r1		
    4804:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4808:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    480c:	b0 12 ca 47 	call	#0x47ca	
}
    4810:	21 53       	incd	r1		
    4812:	34 41       	pop	r4		
    4814:	30 41       	ret			

00004816 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4816:	04 12       	push	r4		
    4818:	04 41       	mov	r1,	r4	
    481a:	24 53       	incd	r4		
  ;
}
    481c:	34 41       	pop	r4		
    481e:	30 41       	ret			

00004820 <start_decrypt>:
void
start_decrypt()
{
    4820:	04 12       	push	r4		
    4822:	04 41       	mov	r1,	r4	
    4824:	24 53       	incd	r4		
  ;
}
    4826:	34 41       	pop	r4		
    4828:	30 41       	ret			

0000482a <end_expe>:


void
end_expe()
{
    482a:	04 12       	push	r4		
    482c:	04 41       	mov	r1,	r4	
    482e:	24 53       	incd	r4		
  ;
}
    4830:	34 41       	pop	r4		
    4832:	30 41       	ret			

00004834 <_unexpected_>:
    4834:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	e2 40 e2 40 e2 40 e2 40 e2 40 e2 40 e2 40 e2 40     .@.@.@.@.@.@.@.@
    fff0:	e2 40 e2 40 e2 40 e2 40 e2 40 e2 40 e2 40 00 40     .@.@.@.@.@.@.@.@
