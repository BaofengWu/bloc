
led.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
000047a8 l    d  .rodata	00000000 .rodata
00001100 l    d  .data	00000000 .data
00001130 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 LED128_tdur.c
000047a8 l     O .rodata	00000010 invSbox
000047b8 l     O .rodata	00000080 Table
00004838 l     O .rodata	00000080 invTable
000040e0 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00000000 l    df *ABS*	00000000 memcpy.c
00004674 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000030 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040e0  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040e0  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
000048b8 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
000045e4 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040da  w      .text	00000000 __stop_progExec__
000046ac g     F .text	000000fa memcpy
0000443c g     F .text	000000f0 invSCShRMCS
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040e0  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
000046a2 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040e0  w      .text	00000000 __isr_5
000048b8 g       *ABS*	00000000 __data_load_start
000040e0 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040e0  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040e0  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001130 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040e0  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040e0  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
000040e4 g     F .text	000000ea AddKey
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
0000452c g     F .text	0000007a invLEDRound
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
000047a6  w      .text	00000000 _unexpected_
000040e0  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040e0  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004642 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000042da g     F .text	000000ea SCShRMCS
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040e0 g       .text	00000000 __ctors_start
000040e0  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001130 g       .data	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	0000009c main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040e0  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
000045a6 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040e0  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040e0 g       .text	00000000 __dtors_start
000040e0  w      .text	00000000 __isr_6
000040e0 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040e0  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001130 g       .data	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
000043c4 g     F .text	00000078 LEDRound
00001132 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
0000468e g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040da  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004698 g     F .text	0000000a start_decrypt
00001100 g       .data	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT
000041ce g     F .text	0000010c AddConstants



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 30 11 	mov	r5,	&0x1130	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 30 11 	mov	&0x1130,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f b8 48 	mov	18616(r15),4352(r15);0x48b8(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 30 11 	mov	&0x1130,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 30 11 	mov.b	#0,	4400(r15);r3 As==00, 0x1130(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
	



int main(int argc, char*argv[])
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 c8 ff 	add	#-56,	r1	;#0xffc8
    4046:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    404a:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i,j;

	u8 state[4][4];
	u8 keys[128/4];

	START_ENCRYPT();
    404e:	b0 12 8e 46 	call	#0x468e	

	for(i = 0; i < 4; i++)
    4052:	84 43 c6 ff 	mov	#0,	-58(r4)	;r3 As==00, 0xffc6(r4)
    4056:	17 3c       	jmp	$+48     	;abs 0x4086
		for(j = 0; j < 4; j++)
    4058:	84 43 c8 ff 	mov	#0,	-56(r4)	;r3 As==00, 0xffc8(r4)
    405c:	0f 3c       	jmp	$+32     	;abs 0x407c
			state[i][j] = 0;
    405e:	1f 44 c6 ff 	mov	-58(r4),r15	;0xffc6(r4)
    4062:	0f 5f       	rla	r15		
    4064:	0f 5f       	rla	r15		
    4066:	3e 40 c6 ff 	mov	#-58,	r14	;#0xffc6
    406a:	0e 54       	add	r4,	r14	
    406c:	0f 5e       	add	r14,	r15	
    406e:	1f 54 c8 ff 	add	-56(r4),r15	;0xffc8(r4)
    4072:	2f 52       	add	#4,	r15	;r2 As==10
    4074:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
	u8 keys[128/4];

	START_ENCRYPT();

	for(i = 0; i < 4; i++)
		for(j = 0; j < 4; j++)
    4078:	94 53 c8 ff 	inc	-56(r4)	;0xffc8(r4)
    407c:	a4 92 c8 ff 	cmp	#4,	-56(r4)	;r2 As==10, 0xffc8(r4)
    4080:	ee 3b       	jl	$-34     	;abs 0x405e
	u8 state[4][4];
	u8 keys[128/4];

	START_ENCRYPT();

	for(i = 0; i < 4; i++)
    4082:	94 53 c6 ff 	inc	-58(r4)	;0xffc6(r4)
    4086:	a4 92 c6 ff 	cmp	#4,	-58(r4)	;r2 As==10, 0xffc6(r4)
    408a:	e6 3b       	jl	$-50     	;abs 0x4058
		for(j = 0; j < 4; j++)
			state[i][j] = 0;
	for(i=0; i < 32; i++) keys[i] = 0;
    408c:	84 43 c6 ff 	mov	#0,	-58(r4)	;r3 As==00, 0xffc6(r4)
    4090:	09 3c       	jmp	$+20     	;abs 0x40a4
    4092:	0f 44       	mov	r4,	r15	
    4094:	3f 50 da ff 	add	#-38,	r15	;#0xffda
    4098:	1f 54 c6 ff 	add	-58(r4),r15	;0xffc6(r4)
    409c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a0:	94 53 c6 ff 	inc	-58(r4)	;0xffc6(r4)
    40a4:	b4 90 20 00 	cmp	#32,	-58(r4)	;#0x0020, 0xffc6(r4)
    40a8:	c6 ff 
    40aa:	f3 3b       	jl	$-24     	;abs 0x4092
	

	LEDRound(state, keys);
    40ac:	0e 44       	mov	r4,	r14	
    40ae:	3e 50 da ff 	add	#-38,	r14	;#0xffda
    40b2:	0f 44       	mov	r4,	r15	
    40b4:	3f 50 ca ff 	add	#-54,	r15	;#0xffca
    40b8:	b0 12 c4 43 	call	#0x43c4	
			printf("%X ",state[i][j]);
		printf("\n");}
		
		printf("\n");
#endif
  START_DECRYPT();
    40bc:	b0 12 98 46 	call	#0x4698	

	invLEDRound(state, keys);
    40c0:	0e 44       	mov	r4,	r14	
    40c2:	3e 50 da ff 	add	#-38,	r14	;#0xffda
    40c6:	0f 44       	mov	r4,	r15	
    40c8:	3f 50 ca ff 	add	#-54,	r15	;#0xffca
    40cc:	b0 12 2c 45 	call	#0x452c	
			printf("%X ",state[i][j]);
		printf("\n");}
		
		printf("\n");
#endif
		END_EXPE();
    40d0:	b0 12 a2 46 	call	#0x46a2	
	return 0;
    40d4:	0f 43       	clr	r15		
}
    40d6:	31 50 38 00 	add	#56,	r1	;#0x0038

000040da <__stop_progExec__>:
    40da:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40de:	fd 3f       	jmp	$-4      	;abs 0x40da

000040e0 <__ctors_end>:
    40e0:	30 40 a6 47 	br	#0x47a6	

000040e4 <AddKey>:

static const u8 invSbox[16] = {5, 14, 15, 8, 12, 1, 2, 13,11,4,6,3,0,7,9,10};


 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
    40e4:	04 12       	push	r4		
    40e6:	04 41       	mov	r1,	r4	
    40e8:	24 53       	incd	r4		
    40ea:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    40ee:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    40f2:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    40f6:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	int i, j;
	if((half&1) == 0){
    40fa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    40fe:	1f f3       	and	#1,	r15	;r3 As==01
    4100:	0f 93       	tst	r15		
    4102:	30 20       	jnz	$+98     	;abs 0x4164
		for(i = 0; i < 4; i++)
    4104:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    4108:	29 3c       	jmp	$+84     	;abs 0x415c
			for(j = 0; j < 4; j++)
    410a:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    410e:	21 3c       	jmp	$+68     	;abs 0x4152
				state[i][j] ^= keyBytes[4*i+j];
    4110:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4114:	0f 5f       	rla	r15		
    4116:	0f 5f       	rla	r15		
    4118:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    411c:	0d 5f       	add	r15,	r13	
    411e:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4122:	0f 5f       	rla	r15		
    4124:	0f 5f       	rla	r15		
    4126:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    412a:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    412e:	6e 4f       	mov.b	@r15,	r14	
    4130:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4134:	0f 5f       	rla	r15		
    4136:	0f 5f       	rla	r15		
    4138:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    413c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4140:	6f 4f       	mov.b	@r15,	r15	
    4142:	4e ef       	xor.b	r15,	r14	
    4144:	0f 4d       	mov	r13,	r15	
    4146:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    414a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
	int i, j;
	if((half&1) == 0){
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
    414e:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    4152:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    4156:	dc 3b       	jl	$-70     	;abs 0x4110

 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
	int i, j;
	if((half&1) == 0){
		for(i = 0; i < 4; i++)
    4158:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    415c:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    4160:	d4 3b       	jl	$-86     	;abs 0x410a
    4162:	31 3c       	jmp	$+100    	;abs 0x41c6
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
    4164:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    4168:	2b 3c       	jmp	$+88     	;abs 0x41c0
			for(j = 0; j < 4; j++)
    416a:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    416e:	23 3c       	jmp	$+72     	;abs 0x41b6
				state[i][j] ^= keyBytes[4*i+j+((LED-64)>>2)];
    4170:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4174:	0f 5f       	rla	r15		
    4176:	0f 5f       	rla	r15		
    4178:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    417c:	0d 5f       	add	r15,	r13	
    417e:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4182:	0f 5f       	rla	r15		
    4184:	0f 5f       	rla	r15		
    4186:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    418a:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    418e:	6e 4f       	mov.b	@r15,	r14	
    4190:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4194:	0f 5f       	rla	r15		
    4196:	0f 5f       	rla	r15		
    4198:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    419c:	3f 50 10 00 	add	#16,	r15	;#0x0010
    41a0:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    41a4:	6f 4f       	mov.b	@r15,	r15	
    41a6:	4e ef       	xor.b	r15,	r14	
    41a8:	0f 4d       	mov	r13,	r15	
    41aa:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    41ae:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
    41b2:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    41b6:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    41ba:	da 3b       	jl	$-74     	;abs 0x4170
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
    41bc:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    41c0:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    41c4:	d2 3b       	jl	$-90     	;abs 0x416a
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j+((LED-64)>>2)];
	}
}
    41c6:	31 50 0a 00 	add	#10,	r1	;#0x000a
    41ca:	34 41       	pop	r4		
    41cc:	30 41       	ret			

000041ce <AddConstants>:

 void AddConstants(u8 state[4][4], int r)
{
    41ce:	04 12       	push	r4		
    41d0:	04 41       	mov	r1,	r4	
    41d2:	24 53       	incd	r4		
    41d4:	31 50 ca ff 	add	#-54,	r1	;#0xffca
    41d8:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    41dc:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	const u8 RC[48] = {
    41e0:	0f 44       	mov	r4,	r15	
    41e2:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    41e6:	3e 40 00 11 	mov	#4352,	r14	;#0x1100
    41ea:	3d 40 30 00 	mov	#48,	r13	;#0x0030
    41ee:	b0 12 ac 46 	call	#0x46ac	
		0x1E, 0x3C, 0x39, 0x33, 0x27, 0x0E, 0x1D, 0x3A, 0x35, 0x2B,
		0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0B, 0x17, 0x2E,
		0x1C, 0x38, 0x31, 0x23, 0x06, 0x0D, 0x1B, 0x36, 0x2D, 0x1A,
		0x34, 0x29, 0x12, 0x24, 0x08, 0x11, 0x22, 0x04
	};
	state[1][0] ^= 1;
    41f2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    41f6:	2f 52       	add	#4,	r15	;r2 As==10
    41f8:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    41fc:	2e 52       	add	#4,	r14	;r2 As==10
    41fe:	6e 4e       	mov.b	@r14,	r14	
    4200:	5e e3       	xor.b	#1,	r14	;r3 As==01
    4202:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[2][0] ^= 2;
    4206:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    420a:	3f 52       	add	#8,	r15	;r2 As==11
    420c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4210:	3e 52       	add	#8,	r14	;r2 As==11
    4212:	6e 4e       	mov.b	@r14,	r14	
    4214:	6e e3       	xor.b	#2,	r14	;r3 As==10
    4216:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[3][0] ^= 3;
    421a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    421e:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    4222:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4226:	3e 50 0c 00 	add	#12,	r14	;#0x000c
    422a:	6e 4e       	mov.b	@r14,	r14	
    422c:	7e e0 03 00 	xor.b	#3,	r14	;#0x0003
    4230:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

	u8 tmp = (RC[r] >> 3) & 7;
    4234:	0f 44       	mov	r4,	r15	
    4236:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    423a:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    423e:	6f 4f       	mov.b	@r15,	r15	
    4240:	4f 4f       	mov.b	r15,	r15	
    4242:	4f 4f       	mov.b	r15,	r15	
    4244:	12 c3       	clrc			
    4246:	4f 10       	rrc.b	r15		
    4248:	12 c3       	clrc			
    424a:	4f 10       	rrc.b	r15		
    424c:	12 c3       	clrc			
    424e:	4f 10       	rrc.b	r15		
    4250:	4e 4f       	mov.b	r15,	r14	
    4252:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    4256:	c4 4e c8 ff 	mov.b	r14,	-56(r4)	;0xffc8(r4)
	state[0][1] ^= tmp;
    425a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    425e:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    4262:	4e 4f       	mov.b	r15,	r14	
    4264:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    4268:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    426c:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	state[2][1] ^= tmp;
    4270:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4274:	3f 52       	add	#8,	r15	;r2 As==11
    4276:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    427a:	3e 52       	add	#8,	r14	;r2 As==11
    427c:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    4280:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    4284:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	tmp =  RC[r] & 7;
    4288:	0f 44       	mov	r4,	r15	
    428a:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    428e:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4292:	6f 4f       	mov.b	@r15,	r15	
    4294:	4e 4f       	mov.b	r15,	r14	
    4296:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    429a:	c4 4e c8 ff 	mov.b	r14,	-56(r4)	;0xffc8(r4)
	state[1][1] ^= tmp;
    429e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42a2:	2f 52       	add	#4,	r15	;r2 As==10
    42a4:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    42a8:	2e 52       	add	#4,	r14	;r2 As==10
    42aa:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    42ae:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    42b2:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	state[3][1] ^= tmp;
    42b6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42ba:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    42be:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    42c2:	3e 50 0c 00 	add	#12,	r14	;#0x000c
    42c6:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    42ca:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    42ce:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
}
    42d2:	31 50 36 00 	add	#54,	r1	;#0x0036
    42d6:	34 41       	pop	r4		
    42d8:	30 41       	ret			

000042da <SCShRMCS>:
{0x0,0xD429,0x9841,0x4C68,0x1382,0xC7AB,0x8BC3,0x5FEA,0x2634,0xF21D,0xBE75,0x6A5C,0x35B6,0xE19F,0xADF7,0x79DE},
{0x0,0x45ED,0x8AF9,0xCF14,0x37D1,0x723C,0xBD28,0xF8C5,0x6E92,0x2B7F,0xE46B,0xA186,0x5943,0x1CAE,0xD3BA,0x9657}
};

 void SCShRMCS(u8 state[4][4])
{
    42da:	04 12       	push	r4		
    42dc:	04 41       	mov	r1,	r4	
    42de:	24 53       	incd	r4		
    42e0:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    42e4:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int c,r;
	u16 v;
	u8 os[4][4];
	memcpy(os, state, 4*4);
    42e8:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    42ec:	0f 44       	mov	r4,	r15	
    42ee:	3f 50 ec ff 	add	#-20,	r15	;#0xffec
    42f2:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    42f6:	b0 12 ac 46 	call	#0x46ac	

	for(c = 0; c < 4; c++){
    42fa:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    42fe:	5b 3c       	jmp	$+184    	;abs 0x43b6
		v = 0;
    4300:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
		for(r = 0; r < 4; r++)
    4304:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    4308:	29 3c       	jmp	$+84     	;abs 0x435c
			v ^= Table[r][os[r][(r+c)%4]];
    430a:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    430e:	1f 54 e6 ff 	add	-26(r4),r15	;0xffe6(r4)
    4312:	3f f0 03 80 	and	#-32765,r15	;#0x8003
    4316:	0f 93       	tst	r15		
    4318:	04 34       	jge	$+10     	;abs 0x4322
    431a:	3f 53       	add	#-1,	r15	;r3 As==11
    431c:	3f d0 fc ff 	bis	#-4,	r15	;#0xfffc
    4320:	1f 53       	inc	r15		
    4322:	0e 4f       	mov	r15,	r14	
    4324:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4328:	0f 5f       	rla	r15		
    432a:	0f 5f       	rla	r15		
    432c:	3d 40 e6 ff 	mov	#-26,	r13	;#0xffe6
    4330:	0d 54       	add	r4,	r13	
    4332:	0f 5d       	add	r13,	r15	
    4334:	0f 5e       	add	r14,	r15	
    4336:	3f 50 06 00 	add	#6,	r15	;#0x0006
    433a:	6f 4f       	mov.b	@r15,	r15	
    433c:	4e 4f       	mov.b	r15,	r14	
    433e:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4342:	0f 5f       	rla	r15		
    4344:	0f 5f       	rla	r15		
    4346:	0f 5f       	rla	r15		
    4348:	0f 5f       	rla	r15		
    434a:	0f 5e       	add	r14,	r15	
    434c:	0f 5f       	rla	r15		
    434e:	3f 50 b8 47 	add	#18360,	r15	;#0x47b8
    4352:	2f 4f       	mov	@r15,	r15	
    4354:	84 ef ea ff 	xor	r15,	-22(r4)	;0xffea(r4)
	u8 os[4][4];
	memcpy(os, state, 4*4);

	for(c = 0; c < 4; c++){
		v = 0;
		for(r = 0; r < 4; r++)
    4358:	94 53 e8 ff 	inc	-24(r4)	;0xffe8(r4)
    435c:	a4 92 e8 ff 	cmp	#4,	-24(r4)	;r2 As==10, 0xffe8(r4)
    4360:	d4 3b       	jl	$-86     	;abs 0x430a
			v ^= Table[r][os[r][(r+c)%4]];

		for(r = 1; r <= 4; r++){
    4362:	94 43 e8 ff 	mov	#1,	-24(r4)	;r3 As==01, 0xffe8(r4)
    4366:	21 3c       	jmp	$+68     	;abs 0x43aa
			state[4-r][c] = (u8)v & WORDFILTER;
    4368:	2f 42       	mov	#4,	r15	;r2 As==10
    436a:	1f 84 e8 ff 	sub	-24(r4),r15	;0xffe8(r4)
    436e:	0f 5f       	rla	r15		
    4370:	0f 5f       	rla	r15		
    4372:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    4376:	0d 5f       	add	r15,	r13	
    4378:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    437c:	4f 4f       	mov.b	r15,	r15	
    437e:	4e 4f       	mov.b	r15,	r14	
    4380:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    4384:	0f 4d       	mov	r13,	r15	
    4386:	1f 54 e6 ff 	add	-26(r4),r15	;0xffe6(r4)
    438a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			v >>= 4;
    438e:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4392:	12 c3       	clrc			
    4394:	0f 10       	rrc	r15		
    4396:	12 c3       	clrc			
    4398:	0f 10       	rrc	r15		
    439a:	12 c3       	clrc			
    439c:	0f 10       	rrc	r15		
    439e:	12 c3       	clrc			
    43a0:	0f 10       	rrc	r15		
    43a2:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
	for(c = 0; c < 4; c++){
		v = 0;
		for(r = 0; r < 4; r++)
			v ^= Table[r][os[r][(r+c)%4]];

		for(r = 1; r <= 4; r++){
    43a6:	94 53 e8 ff 	inc	-24(r4)	;0xffe8(r4)
    43aa:	b4 90 05 00 	cmp	#5,	-24(r4)	;#0x0005, 0xffe8(r4)
    43ae:	e8 ff 
    43b0:	db 3b       	jl	$-72     	;abs 0x4368
	int c,r;
	u16 v;
	u8 os[4][4];
	memcpy(os, state, 4*4);

	for(c = 0; c < 4; c++){
    43b2:	94 53 e6 ff 	inc	-26(r4)	;0xffe6(r4)
    43b6:	a4 92 e6 ff 	cmp	#4,	-26(r4)	;r2 As==10, 0xffe6(r4)
    43ba:	a2 3b       	jl	$-186    	;abs 0x4300
		for(r = 1; r <= 4; r++){
			state[4-r][c] = (u8)v & WORDFILTER;
			v >>= 4;
		}
	}
}
    43bc:	31 50 18 00 	add	#24,	r1	;#0x0018
    43c0:	34 41       	pop	r4		
    43c2:	30 41       	ret			

000043c4 <LEDRound>:

 void LEDRound(u8 state[4][4], u8* keyBytes)
{
    43c4:	04 12       	push	r4		
    43c6:	04 41       	mov	r1,	r4	
    43c8:	24 53       	incd	r4		
    43ca:	31 82       	sub	#8,	r1	;r2 As==11
    43cc:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    43d0:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i,j;
	AddKey(state, keyBytes, 0);
    43d4:	0d 43       	clr	r13		
    43d6:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    43da:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    43de:	b0 12 e4 40 	call	#0x40e4	
	for(i = 0; i < RN/4; i++){
    43e2:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    43e6:	23 3c       	jmp	$+72     	;abs 0x442e
		for(j = 0; j < 4; j++)
    43e8:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    43ec:	11 3c       	jmp	$+36     	;abs 0x4410
		{
			AddConstants(state, i*4+j);
    43ee:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    43f2:	0f 5f       	rla	r15		
    43f4:	0f 5f       	rla	r15		
    43f6:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    43fa:	0e 4f       	mov	r15,	r14	
    43fc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4400:	b0 12 ce 41 	call	#0x41ce	
			SCShRMCS(state);
    4404:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4408:	b0 12 da 42 	call	#0x42da	
 void LEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	AddKey(state, keyBytes, 0);
	for(i = 0; i < RN/4; i++){
		for(j = 0; j < 4; j++)
    440c:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4410:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    4414:	ec 3b       	jl	$-38     	;abs 0x43ee
		{
			AddConstants(state, i*4+j);
			SCShRMCS(state);
		}
		AddKey(state, keyBytes, i+1);
    4416:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    441a:	1f 53       	inc	r15		
    441c:	0d 4f       	mov	r15,	r13	
    441e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4422:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4426:	b0 12 e4 40 	call	#0x40e4	

 void LEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	AddKey(state, keyBytes, 0);
	for(i = 0; i < RN/4; i++){
    442a:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    442e:	b4 90 0c 00 	cmp	#12,	-10(r4)	;#0x000c, 0xfff6(r4)
    4432:	f6 ff 
    4434:	d9 3b       	jl	$-76     	;abs 0x43e8
			AddConstants(state, i*4+j);
			SCShRMCS(state);
		}
		AddKey(state, keyBytes, i+1);
	}
}
    4436:	31 52       	add	#8,	r1	;r2 As==11
    4438:	34 41       	pop	r4		
    443a:	30 41       	ret			

0000443c <invSCShRMCS>:

 void invSCShRMCS(u8 state[4][4])
{
    443c:	04 12       	push	r4		
    443e:	04 41       	mov	r1,	r4	
    4440:	24 53       	incd	r4		
    4442:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    4446:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int c,r;
	u16 v;
	u8 os[4][4];
	memcpy(os, state, 4*4);
    444a:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    444e:	0f 44       	mov	r4,	r15	
    4450:	3f 50 ec ff 	add	#-20,	r15	;#0xffec
    4454:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    4458:	b0 12 ac 46 	call	#0x46ac	

	for(c = 0; c < 4; c++){
    445c:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    4460:	5e 3c       	jmp	$+190    	;abs 0x451e
		v = 0;
    4462:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
		for(r = 0; r < 4; r++)
    4466:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    446a:	1d 3c       	jmp	$+60     	;abs 0x44a6
			v ^= invTable[r][os[r][c]];
    446c:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4470:	0f 5f       	rla	r15		
    4472:	0f 5f       	rla	r15		
    4474:	3e 40 e6 ff 	mov	#-26,	r14	;#0xffe6
    4478:	0e 54       	add	r4,	r14	
    447a:	0f 5e       	add	r14,	r15	
    447c:	1f 54 e6 ff 	add	-26(r4),r15	;0xffe6(r4)
    4480:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4484:	6f 4f       	mov.b	@r15,	r15	
    4486:	4e 4f       	mov.b	r15,	r14	
    4488:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    448c:	0f 5f       	rla	r15		
    448e:	0f 5f       	rla	r15		
    4490:	0f 5f       	rla	r15		
    4492:	0f 5f       	rla	r15		
    4494:	0f 5e       	add	r14,	r15	
    4496:	0f 5f       	rla	r15		
    4498:	3f 50 38 48 	add	#18488,	r15	;#0x4838
    449c:	2f 4f       	mov	@r15,	r15	
    449e:	84 ef ea ff 	xor	r15,	-22(r4)	;0xffea(r4)
	u8 os[4][4];
	memcpy(os, state, 4*4);

	for(c = 0; c < 4; c++){
		v = 0;
		for(r = 0; r < 4; r++)
    44a2:	94 53 e8 ff 	inc	-24(r4)	;0xffe8(r4)
    44a6:	a4 92 e8 ff 	cmp	#4,	-24(r4)	;r2 As==10, 0xffe8(r4)
    44aa:	e0 3b       	jl	$-62     	;abs 0x446c
			v ^= invTable[r][os[r][c]];

		for(r = 1; r <= 4; r++){
    44ac:	94 43 e8 ff 	mov	#1,	-24(r4)	;r3 As==01, 0xffe8(r4)
    44b0:	30 3c       	jmp	$+98     	;abs 0x4512
			state[4-r][(c+(4-r))%4] = invSbox[(u8)v & WORDFILTER];
    44b2:	2f 42       	mov	#4,	r15	;r2 As==10
    44b4:	1f 84 e8 ff 	sub	-24(r4),r15	;0xffe8(r4)
    44b8:	0f 5f       	rla	r15		
    44ba:	0f 5f       	rla	r15		
    44bc:	1c 44 fc ff 	mov	-4(r4),	r12	;0xfffc(r4)
    44c0:	0c 5f       	add	r15,	r12	
    44c2:	2f 42       	mov	#4,	r15	;r2 As==10
    44c4:	1f 84 e8 ff 	sub	-24(r4),r15	;0xffe8(r4)
    44c8:	1f 54 e6 ff 	add	-26(r4),r15	;0xffe6(r4)
    44cc:	3f f0 03 80 	and	#-32765,r15	;#0x8003
    44d0:	0f 93       	tst	r15		
    44d2:	04 34       	jge	$+10     	;abs 0x44dc
    44d4:	3f 53       	add	#-1,	r15	;r3 As==11
    44d6:	3f d0 fc ff 	bis	#-4,	r15	;#0xfffc
    44da:	1f 53       	inc	r15		
    44dc:	0d 4f       	mov	r15,	r13	
    44de:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    44e2:	4f 4f       	mov.b	r15,	r15	
    44e4:	4f 4f       	mov.b	r15,	r15	
    44e6:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    44ea:	5e 4f a8 47 	mov.b	18344(r15),r14	;0x47a8(r15)
    44ee:	0f 4c       	mov	r12,	r15	
    44f0:	0f 5d       	add	r13,	r15	
    44f2:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			v >>= 4;
    44f6:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    44fa:	12 c3       	clrc			
    44fc:	0f 10       	rrc	r15		
    44fe:	12 c3       	clrc			
    4500:	0f 10       	rrc	r15		
    4502:	12 c3       	clrc			
    4504:	0f 10       	rrc	r15		
    4506:	12 c3       	clrc			
    4508:	0f 10       	rrc	r15		
    450a:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
	for(c = 0; c < 4; c++){
		v = 0;
		for(r = 0; r < 4; r++)
			v ^= invTable[r][os[r][c]];

		for(r = 1; r <= 4; r++){
    450e:	94 53 e8 ff 	inc	-24(r4)	;0xffe8(r4)
    4512:	b4 90 05 00 	cmp	#5,	-24(r4)	;#0x0005, 0xffe8(r4)
    4516:	e8 ff 
    4518:	cc 3b       	jl	$-102    	;abs 0x44b2
	int c,r;
	u16 v;
	u8 os[4][4];
	memcpy(os, state, 4*4);

	for(c = 0; c < 4; c++){
    451a:	94 53 e6 ff 	inc	-26(r4)	;0xffe6(r4)
    451e:	a4 92 e6 ff 	cmp	#4,	-26(r4)	;r2 As==10, 0xffe6(r4)
    4522:	9f 3b       	jl	$-192    	;abs 0x4462
		for(r = 1; r <= 4; r++){
			state[4-r][(c+(4-r))%4] = invSbox[(u8)v & WORDFILTER];
			v >>= 4;
		}
	}
}
    4524:	31 50 18 00 	add	#24,	r1	;#0x0018
    4528:	34 41       	pop	r4		
    452a:	30 41       	ret			

0000452c <invLEDRound>:

 void invLEDRound(u8 state[4][4], u8* keyBytes)
{
    452c:	04 12       	push	r4		
    452e:	04 41       	mov	r1,	r4	
    4530:	24 53       	incd	r4		
    4532:	31 82       	sub	#8,	r1	;r2 As==11
    4534:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4538:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i,j;
	for(i = (RN/4)-1; i >=0; i--)
    453c:	b4 40 0b 00 	mov	#11,	-10(r4)	;#0x000b, 0xfff6(r4)
    4540:	f6 ff 
    4542:	24 3c       	jmp	$+74     	;abs 0x458c
	{
		AddKey(state, keyBytes, i+1);
    4544:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4548:	1f 53       	inc	r15		
    454a:	0d 4f       	mov	r15,	r13	
    454c:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4550:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4554:	b0 12 e4 40 	call	#0x40e4	
		for(j = 3; j >= 0; j--)
    4558:	b4 40 03 00 	mov	#3,	-8(r4)	;#0x0003, 0xfff8(r4)
    455c:	f8 ff 
    455e:	11 3c       	jmp	$+36     	;abs 0x4582
		{
			invSCShRMCS(state);
    4560:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4564:	b0 12 3c 44 	call	#0x443c	
			AddConstants(state, i*4+j);
    4568:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    456c:	0f 5f       	rla	r15		
    456e:	0f 5f       	rla	r15		
    4570:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4574:	0e 4f       	mov	r15,	r14	
    4576:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    457a:	b0 12 ce 41 	call	#0x41ce	
{
	int i,j;
	for(i = (RN/4)-1; i >=0; i--)
	{
		AddKey(state, keyBytes, i+1);
		for(j = 3; j >= 0; j--)
    457e:	b4 53 f8 ff 	add	#-1,	-8(r4)	;r3 As==11, 0xfff8(r4)
    4582:	84 93 f8 ff 	tst	-8(r4)		;0xfff8(r4)
    4586:	ec 37       	jge	$-38     	;abs 0x4560
}

 void invLEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	for(i = (RN/4)-1; i >=0; i--)
    4588:	b4 53 f6 ff 	add	#-1,	-10(r4)	;r3 As==11, 0xfff6(r4)
    458c:	84 93 f6 ff 	tst	-10(r4)	;0xfff6(r4)
    4590:	d9 37       	jge	$-76     	;abs 0x4544
		{
			invSCShRMCS(state);
			AddConstants(state, i*4+j);
		}
	}
	AddKey(state, keyBytes, 0);
    4592:	0d 43       	clr	r13		
    4594:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4598:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    459c:	b0 12 e4 40 	call	#0x40e4	
}
    45a0:	31 52       	add	#8,	r1	;r2 As==11
    45a2:	34 41       	pop	r4		
    45a4:	30 41       	ret			

000045a6 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    45a6:	04 12       	push	r4		
    45a8:	04 41       	mov	r1,	r4	
    45aa:	24 53       	incd	r4		
    45ac:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    45b0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    45b4:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    45b8:	0d 3c       	jmp	$+28     	;abs 0x45d4
    {
      for (i = 0; i<d; i++) 
    45ba:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    45be:	04 3c       	jmp	$+10     	;abs 0x45c8
	{
	  nop();
    45c0:	03 43       	nop			
	  nop();
    45c2:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    45c4:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    45c8:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    45cc:	f8 ff 
    45ce:	f8 2b       	jnc	$-14     	;abs 0x45c0
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    45d0:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    45d4:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    45d8:	fa ff 
    45da:	ef 2b       	jnc	$-32     	;abs 0x45ba
	{
	  nop();
	  nop();
	}
    }
}
    45dc:	31 50 06 00 	add	#6,	r1	;#0x0006
    45e0:	34 41       	pop	r4		
    45e2:	30 41       	ret			

000045e4 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    45e4:	04 12       	push	r4		
    45e6:	04 41       	mov	r1,	r4	
    45e8:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    45ea:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    45ee:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    45f0:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    45f4:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    45f8:	5f 42 1b 00 	mov.b	&0x001b,r15	
    45fc:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4600:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4604:	5f 42 05 00 	mov.b	&0x0005,r15	
    4608:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    460c:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4610:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4614:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4618:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    461a:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    461e:	79 00 
  U1RCTL = 0;
    4620:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4624:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4628:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    462c:	7c 00 
  U1MCTL = U1MCTL_INIT;
    462e:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4632:	7b 00 

  delay(0x800);
    4634:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4638:	b0 12 a6 45 	call	#0x45a6	
  return 0;
    463c:	0f 43       	clr	r15		
}
    463e:	34 41       	pop	r4		
    4640:	30 41       	ret			

00004642 <uart1_putchar>:

int uart1_putchar(int c)
{
    4642:	04 12       	push	r4		
    4644:	04 41       	mov	r1,	r4	
    4646:	24 53       	incd	r4		
    4648:	21 83       	decd	r1		
    464a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    464e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4652:	4f 4f       	mov.b	r15,	r15	
    4654:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4658:	03 43       	nop			
    465a:	5f 42 79 00 	mov.b	&0x0079,r15	
    465e:	4f 4f       	mov.b	r15,	r15	
    4660:	1f f3       	and	#1,	r15	;r3 As==01
    4662:	0f 93       	tst	r15		
    4664:	fa 27       	jz	$-10     	;abs 0x465a
  return (unsigned char)c;
    4666:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    466a:	4f 4f       	mov.b	r15,	r15	
    466c:	4f 4f       	mov.b	r15,	r15	
}
    466e:	21 53       	incd	r1		
    4670:	34 41       	pop	r4		
    4672:	30 41       	ret			

00004674 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4674:	04 12       	push	r4		
    4676:	04 41       	mov	r1,	r4	
    4678:	24 53       	incd	r4		
    467a:	21 83       	decd	r1		
    467c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4680:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4684:	b0 12 42 46 	call	#0x4642	
}
    4688:	21 53       	incd	r1		
    468a:	34 41       	pop	r4		
    468c:	30 41       	ret			

0000468e <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    468e:	04 12       	push	r4		
    4690:	04 41       	mov	r1,	r4	
    4692:	24 53       	incd	r4		
  ;
}
    4694:	34 41       	pop	r4		
    4696:	30 41       	ret			

00004698 <start_decrypt>:
void
start_decrypt()
{
    4698:	04 12       	push	r4		
    469a:	04 41       	mov	r1,	r4	
    469c:	24 53       	incd	r4		
  ;
}
    469e:	34 41       	pop	r4		
    46a0:	30 41       	ret			

000046a2 <end_expe>:


void
end_expe()
{
    46a2:	04 12       	push	r4		
    46a4:	04 41       	mov	r1,	r4	
    46a6:	24 53       	incd	r4		
  ;
}
    46a8:	34 41       	pop	r4		
    46aa:	30 41       	ret			

000046ac <memcpy>:
    46ac:	0b 12       	push	r11		
    46ae:	0a 12       	push	r10		
    46b0:	09 12       	push	r9		
    46b2:	08 12       	push	r8		
    46b4:	07 12       	push	r7		
    46b6:	0d 93       	tst	r13		
    46b8:	70 24       	jz	$+226    	;abs 0x479a
    46ba:	0f 9e       	cmp	r14,	r15	
    46bc:	6e 24       	jz	$+222    	;abs 0x479a
    46be:	34 2c       	jc	$+106    	;abs 0x4728
    46c0:	0c 4e       	mov	r14,	r12	
    46c2:	0c df       	bis	r15,	r12	
    46c4:	1c f3       	and	#1,	r12	;r3 As==01
    46c6:	1b 24       	jz	$+56     	;abs 0x46fe
    46c8:	0c 4e       	mov	r14,	r12	
    46ca:	0c ef       	xor	r15,	r12	
    46cc:	1c f3       	and	#1,	r12	;r3 As==01
    46ce:	07 20       	jnz	$+16     	;abs 0x46de
    46d0:	2d 93       	cmp	#2,	r13	;r3 As==10
    46d2:	07 28       	jnc	$+16     	;abs 0x46e2
    46d4:	0b 4e       	mov	r14,	r11	
    46d6:	1b f3       	and	#1,	r11	;r3 As==01
    46d8:	2c 43       	mov	#2,	r12	;r3 As==10
    46da:	0c 8b       	sub	r11,	r12	
    46dc:	03 3c       	jmp	$+8      	;abs 0x46e4
    46de:	0c 4d       	mov	r13,	r12	
    46e0:	01 3c       	jmp	$+4      	;abs 0x46e4
    46e2:	1c 43       	mov	#1,	r12	;r3 As==01
    46e4:	0d 8c       	sub	r12,	r13	
    46e6:	0a 4c       	mov	r12,	r10	
    46e8:	09 4e       	mov	r14,	r9	
    46ea:	0b 4f       	mov	r15,	r11	
    46ec:	fb 49 00 00 	mov.b	@r9+,	0(r11)	;0x0000(r11)
    46f0:	1b 53       	inc	r11		
    46f2:	3a 53       	add	#-1,	r10	;r3 As==11
    46f4:	fb 23       	jnz	$-8      	;abs 0x46ec
    46f6:	0a 4f       	mov	r15,	r10	
    46f8:	0a 5c       	add	r12,	r10	
    46fa:	0e 5c       	add	r12,	r14	
    46fc:	01 3c       	jmp	$+4      	;abs 0x4700
    46fe:	0a 4f       	mov	r15,	r10	
    4700:	0b 4d       	mov	r13,	r11	
    4702:	12 c3       	clrc			
    4704:	0b 10       	rrc	r11		
    4706:	0b 24       	jz	$+24     	;abs 0x471e
    4708:	09 4b       	mov	r11,	r9	
    470a:	08 4e       	mov	r14,	r8	
    470c:	0c 4a       	mov	r10,	r12	
    470e:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    4712:	2c 53       	incd	r12		
    4714:	39 53       	add	#-1,	r9	;r3 As==11
    4716:	fb 23       	jnz	$-8      	;abs 0x470e
    4718:	0b 5b       	rla	r11		
    471a:	0e 5b       	add	r11,	r14	
    471c:	0a 5b       	add	r11,	r10	
    471e:	1d f3       	and	#1,	r13	;r3 As==01
    4720:	3c 24       	jz	$+122    	;abs 0x479a
    4722:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    4726:	39 3c       	jmp	$+116    	;abs 0x479a
    4728:	0e 5d       	add	r13,	r14	
    472a:	0c 4f       	mov	r15,	r12	
    472c:	0c 5d       	add	r13,	r12	
    472e:	0b 4c       	mov	r12,	r11	
    4730:	0b de       	bis	r14,	r11	
    4732:	1b f3       	and	#1,	r11	;r3 As==01
    4734:	1b 24       	jz	$+56     	;abs 0x476c
    4736:	0b 4c       	mov	r12,	r11	
    4738:	0b ee       	xor	r14,	r11	
    473a:	1b f3       	and	#1,	r11	;r3 As==01
    473c:	06 20       	jnz	$+14     	;abs 0x474a
    473e:	3d 90 03 00 	cmp	#3,	r13	;#0x0003
    4742:	03 28       	jnc	$+8      	;abs 0x474a
    4744:	0b 4e       	mov	r14,	r11	
    4746:	1b f3       	and	#1,	r11	;r3 As==01
    4748:	01 3c       	jmp	$+4      	;abs 0x474c
    474a:	0b 4d       	mov	r13,	r11	
    474c:	0d 8b       	sub	r11,	r13	
    474e:	09 4e       	mov	r14,	r9	
    4750:	0a 4c       	mov	r12,	r10	
    4752:	08 4b       	mov	r11,	r8	
    4754:	08 8c       	sub	r12,	r8	
    4756:	3a 53       	add	#-1,	r10	;r3 As==11
    4758:	39 53       	add	#-1,	r9	;r3 As==11
    475a:	ea 49 00 00 	mov.b	@r9,	0(r10)	;0x0000(r10)
    475e:	07 4a       	mov	r10,	r7	
    4760:	07 58       	add	r8,	r7	
    4762:	f9 23       	jnz	$-12     	;abs 0x4756
    4764:	3b e3       	inv	r11		
    4766:	1b 53       	inc	r11		
    4768:	0c 5b       	add	r11,	r12	
    476a:	0e 5b       	add	r11,	r14	
    476c:	0b 4d       	mov	r13,	r11	
    476e:	12 c3       	clrc			
    4770:	0b 10       	rrc	r11		
    4772:	0e 24       	jz	$+30     	;abs 0x4790
    4774:	0a 4b       	mov	r11,	r10	
    4776:	08 4e       	mov	r14,	r8	
    4778:	09 4c       	mov	r12,	r9	
    477a:	28 83       	decd	r8		
    477c:	29 83       	decd	r9		
    477e:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    4782:	3a 53       	add	#-1,	r10	;r3 As==11
    4784:	fa 23       	jnz	$-10     	;abs 0x477a
    4786:	0a 8b       	sub	r11,	r10	
    4788:	0b 4a       	mov	r10,	r11	
    478a:	0b 5b       	rla	r11		
    478c:	0e 5b       	add	r11,	r14	
    478e:	0c 5b       	add	r11,	r12	
    4790:	1d f3       	and	#1,	r13	;r3 As==01
    4792:	03 24       	jz	$+8      	;abs 0x479a
    4794:	dc 4e ff ff 	mov.b	-1(r14),-1(r12)	;0xffff(r14), 0xffff(r12)
    4798:	ff ff 
    479a:	37 41       	pop	r7		
    479c:	38 41       	pop	r8		
    479e:	39 41       	pop	r9		
    47a0:	3a 41       	pop	r10		
    47a2:	3b 41       	pop	r11		
    47a4:	30 41       	ret			

000047a6 <_unexpected_>:
    47a6:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	e0 40 e0 40 e0 40 e0 40 e0 40 e0 40 e0 40 e0 40     .@.@.@.@.@.@.@.@
    fff0:	e0 40 e0 40 e0 40 e0 40 e0 40 e0 40 e0 40 00 40     .@.@.@.@.@.@.@.@
