
sea.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 sea.c
000040f4 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004a9a g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040f4  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
0000440e g     F .text	000000ae fk
000040f4  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
00004808 g     F .text	000000e2 Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004ad4 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004a0a g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040ee  w      .text	00000000 __stop_progExec__
000043b8 g     F .text	00000056 Add
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040f4  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004ac8 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040f4  w      .text	00000000 __isr_5
00004570 g     F .text	000000b4 fd
00004ad4 g       *ABS*	00000000 __data_load_start
000040f4 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040f4  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040f4  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00004624 g     F .text	000001e4 KeySchedul
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
000042cc g     F .text	00000058 InvWordRot
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040f4  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004324 g     F .text	00000094 BitRot
000040f4  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004ad2  w      .text	00000000 _unexpected_
000040f4  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040f4  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004a68 g     F .text	00000032 uart1_putchar
00004274 g     F .text	00000058 WordRot
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040f4 g       .text	00000000 __ctors_start
000040f4  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
0000414e g     F .text	00000126 Sub
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
000044bc g     F .text	000000b4 fe
00001100 g       .text	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	000000b0 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040f4  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
000049cc g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040f4  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040f4 g       .text	00000000 __dtors_start
000040f4  w      .text	00000000 __isr_6
000040f4 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040f4  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .text	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004ab4 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040ee  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004abe g     F .text	0000000a start_decrypt
00001100 g       .text	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
000048ea g     F .text	000000e2 Encrypt
000040f8 g     F .text	00000056 XOR
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f d4 4a 	mov	19156(r15),4352(r15);0x4ad4(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
	return;
}


int main()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 82 fd 	add	#-638,	r1	;#0xfd82
	u16 state[2*NB];
	u16 mkey[2*NB];
	u16 rkey[NBROUND][2*NB];
	
	
	for(i=0;i<2*NB;i++) state[i]=i;
    4046:	84 43 80 fd 	mov	#0,	-640(r4);r3 As==00, 0xfd80(r4)
    404a:	0d 3c       	jmp	$+28     	;abs 0x4066
    404c:	1f 44 80 fd 	mov	-640(r4),r15	;0xfd80(r4)
    4050:	0f 5f       	rla	r15		
    4052:	3d 40 80 fd 	mov	#-640,	r13	;#0xfd80
    4056:	0d 54       	add	r4,	r13	
    4058:	0f 5d       	add	r13,	r15	
    405a:	2f 53       	incd	r15		
    405c:	9f 44 80 fd 	mov	-640(r4),0(r15)	;0xfd80(r4), 0x0000(r15)
    4060:	00 00 
    4062:	94 53 80 fd 	inc	-640(r4)	;0xfd80(r4)
    4066:	b4 90 06 00 	cmp	#6,	-640(r4);#0x0006, 0xfd80(r4)
    406a:	80 fd 
    406c:	ef 2b       	jnc	$-32     	;abs 0x404c
	for(i=0;i<2*NB;i++) mkey[i]=2*i;
    406e:	84 43 80 fd 	mov	#0,	-640(r4);r3 As==00, 0xfd80(r4)
    4072:	10 3c       	jmp	$+34     	;abs 0x4094
    4074:	1f 44 80 fd 	mov	-640(r4),r15	;0xfd80(r4)
    4078:	0f 5f       	rla	r15		
    407a:	1e 44 80 fd 	mov	-640(r4),r14	;0xfd80(r4)
    407e:	0e 5e       	rla	r14		
    4080:	3d 40 80 fd 	mov	#-640,	r13	;#0xfd80
    4084:	0d 54       	add	r4,	r13	
    4086:	0e 5d       	add	r13,	r14	
    4088:	3e 50 0e 00 	add	#14,	r14	;#0x000e
    408c:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
    4090:	94 53 80 fd 	inc	-640(r4)	;0xfd80(r4)
    4094:	b4 90 06 00 	cmp	#6,	-640(r4);#0x0006, 0xfd80(r4)
    4098:	80 fd 
    409a:	ec 2b       	jnc	$-38     	;abs 0x4074
	for(j=1;j<=2*NB;j++) printf("%4X ",state[2*NB - j]);printf("\n\n");
	printf("----------Fin Depart----------\n\n");
	printf("----------Encryption----------\n\n");
#endif

	START_ENCRYPT();
    409c:	b0 12 b4 4a 	call	#0x4ab4	
	KeySchedul(mkey,rkey);
    40a0:	0e 44       	mov	r4,	r14	
    40a2:	3e 50 9a fd 	add	#-614,	r14	;#0xfd9a
    40a6:	0f 44       	mov	r4,	r15	
    40a8:	3f 50 8e fd 	add	#-626,	r15	;#0xfd8e
    40ac:	b0 12 24 46 	call	#0x4624	
	Encrypt(state,rkey);
    40b0:	0e 44       	mov	r4,	r14	
    40b2:	3e 50 9a fd 	add	#-614,	r14	;#0xfd9a
    40b6:	0f 44       	mov	r4,	r15	
    40b8:	3f 50 82 fd 	add	#-638,	r15	;#0xfd82
    40bc:	b0 12 ea 48 	call	#0x48ea	
#ifdef PRINT
	for(j=1;j<=2*NB;j++) printf("%4X ",state[2*NB - j]);printf("\n\n");
	printf("----------Fin Encryption----------\n\n");
	printf("----------Decryption----------\n\n");
#endif
	START_DECRYPT();
    40c0:	b0 12 be 4a 	call	#0x4abe	
	KeySchedul(mkey,rkey);
    40c4:	0e 44       	mov	r4,	r14	
    40c6:	3e 50 9a fd 	add	#-614,	r14	;#0xfd9a
    40ca:	0f 44       	mov	r4,	r15	
    40cc:	3f 50 8e fd 	add	#-626,	r15	;#0xfd8e
    40d0:	b0 12 24 46 	call	#0x4624	
	Decrypt(state,rkey);
    40d4:	0e 44       	mov	r4,	r14	
    40d6:	3e 50 9a fd 	add	#-614,	r14	;#0xfd9a
    40da:	0f 44       	mov	r4,	r15	
    40dc:	3f 50 82 fd 	add	#-638,	r15	;#0xfd82
    40e0:	b0 12 08 48 	call	#0x4808	
#ifdef PRINT
	for(j=1;j<=2*NB;j++) printf("%4X ",state[2*NB - j]);printf("\n\n");
	printf("----------Fin Decryption----------\n\n");
#endif
	END_EXPE();
    40e4:	b0 12 c8 4a 	call	#0x4ac8	
	return 0;
    40e8:	0f 43       	clr	r15		
}
    40ea:	31 50 7e 02 	add	#638,	r1	;#0x027e

000040ee <__stop_progExec__>:
    40ee:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40f2:	fd 3f       	jmp	$-4      	;abs 0x40ee

000040f4 <__ctors_end>:
    40f4:	30 40 d2 4a 	br	#0x4ad2	

000040f8 <XOR>:

#define MASK 0xFFFF

/**********************************************************************/
 void XOR(u16 x[NB],u16 y[NB])
{
    40f8:	04 12       	push	r4		
    40fa:	04 41       	mov	r1,	r4	
    40fc:	24 53       	incd	r4		
    40fe:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4102:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4106:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	u16 i;
	for(i=0;i<NB;i++)
    410a:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    410e:	17 3c       	jmp	$+48     	;abs 0x413e
	{
		x[i]^=y[i];
    4110:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4114:	0f 5f       	rla	r15		
    4116:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    411a:	0e 5f       	add	r15,	r14	
    411c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4120:	0f 5f       	rla	r15		
    4122:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4126:	2d 4f       	mov	@r15,	r13	
    4128:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    412c:	0f 5f       	rla	r15		
    412e:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4132:	2f 4f       	mov	@r15,	r15	
    4134:	0f ed       	xor	r13,	r15	
    4136:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)

/**********************************************************************/
 void XOR(u16 x[NB],u16 y[NB])
{
	u16 i;
	for(i=0;i<NB;i++)
    413a:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    413e:	b4 90 03 00 	cmp	#3,	-8(r4)	;#0x0003, 0xfff8(r4)
    4142:	f8 ff 
    4144:	e5 2b       	jnc	$-52     	;abs 0x4110
	{
		x[i]^=y[i];
	}
	return;
}
    4146:	31 50 06 00 	add	#6,	r1	;#0x0006
    414a:	34 41       	pop	r4		
    414c:	30 41       	ret			

0000414e <Sub>:

 void Sub(u16 x[NB])
{
    414e:	0b 12       	push	r11		
    4150:	04 12       	push	r4		
    4152:	04 41       	mov	r1,	r4	
    4154:	24 52       	add	#4,	r4	;r2 As==10
    4156:	21 82       	sub	#4,	r1	;r2 As==10
    4158:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
	u16 i;
	for(i=0;i<(SIZE/(6*B));i++)
    415c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4160:	82 3c       	jmp	$+262    	;abs 0x4266
	{
		x[3*i]   ^= x[3*i+1] & x[3*i+2];
    4162:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4166:	0f 4e       	mov	r14,	r15	
    4168:	0f 5f       	rla	r15		
    416a:	0f 5e       	add	r14,	r15	
    416c:	0f 5f       	rla	r15		
    416e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4172:	0e 5f       	add	r15,	r14	
    4174:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    4178:	0f 4d       	mov	r13,	r15	
    417a:	0f 5f       	rla	r15		
    417c:	0f 5d       	add	r13,	r15	
    417e:	0f 5f       	rla	r15		
    4180:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4184:	2c 4f       	mov	@r15,	r12	
    4186:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    418a:	0f 4d       	mov	r13,	r15	
    418c:	0f 5f       	rla	r15		
    418e:	0f 5d       	add	r13,	r15	
    4190:	0f 5f       	rla	r15		
    4192:	2f 53       	incd	r15		
    4194:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4198:	2b 4f       	mov	@r15,	r11	
    419a:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    419e:	0f 4d       	mov	r13,	r15	
    41a0:	0f 5f       	rla	r15		
    41a2:	0f 5d       	add	r13,	r15	
    41a4:	0f 5f       	rla	r15		
    41a6:	2f 52       	add	#4,	r15	;r2 As==10
    41a8:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    41ac:	2f 4f       	mov	@r15,	r15	
    41ae:	0f fb       	and	r11,	r15	
    41b0:	0f ec       	xor	r12,	r15	
    41b2:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		x[3*i+1] ^= x[3*i]   & x[3*i+2];
    41b6:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    41ba:	0f 4e       	mov	r14,	r15	
    41bc:	0f 5f       	rla	r15		
    41be:	0f 5e       	add	r14,	r15	
    41c0:	0f 5f       	rla	r15		
    41c2:	2f 53       	incd	r15		
    41c4:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    41c8:	0e 5f       	add	r15,	r14	
    41ca:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    41ce:	0f 4d       	mov	r13,	r15	
    41d0:	0f 5f       	rla	r15		
    41d2:	0f 5d       	add	r13,	r15	
    41d4:	0f 5f       	rla	r15		
    41d6:	2f 53       	incd	r15		
    41d8:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    41dc:	2c 4f       	mov	@r15,	r12	
    41de:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    41e2:	0f 4d       	mov	r13,	r15	
    41e4:	0f 5f       	rla	r15		
    41e6:	0f 5d       	add	r13,	r15	
    41e8:	0f 5f       	rla	r15		
    41ea:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    41ee:	2b 4f       	mov	@r15,	r11	
    41f0:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    41f4:	0f 4d       	mov	r13,	r15	
    41f6:	0f 5f       	rla	r15		
    41f8:	0f 5d       	add	r13,	r15	
    41fa:	0f 5f       	rla	r15		
    41fc:	2f 52       	add	#4,	r15	;r2 As==10
    41fe:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4202:	2f 4f       	mov	@r15,	r15	
    4204:	0f fb       	and	r11,	r15	
    4206:	0f ec       	xor	r12,	r15	
    4208:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		x[3*i+2] ^= x[3*i+1] | x[3*i];
    420c:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4210:	0f 4e       	mov	r14,	r15	
    4212:	0f 5f       	rla	r15		
    4214:	0f 5e       	add	r14,	r15	
    4216:	0f 5f       	rla	r15		
    4218:	2f 52       	add	#4,	r15	;r2 As==10
    421a:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    421e:	0e 5f       	add	r15,	r14	
    4220:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    4224:	0f 4d       	mov	r13,	r15	
    4226:	0f 5f       	rla	r15		
    4228:	0f 5d       	add	r13,	r15	
    422a:	0f 5f       	rla	r15		
    422c:	2f 52       	add	#4,	r15	;r2 As==10
    422e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4232:	2c 4f       	mov	@r15,	r12	
    4234:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    4238:	0f 4d       	mov	r13,	r15	
    423a:	0f 5f       	rla	r15		
    423c:	0f 5d       	add	r13,	r15	
    423e:	0f 5f       	rla	r15		
    4240:	2f 53       	incd	r15		
    4242:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4246:	2b 4f       	mov	@r15,	r11	
    4248:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    424c:	0f 4d       	mov	r13,	r15	
    424e:	0f 5f       	rla	r15		
    4250:	0f 5d       	add	r13,	r15	
    4252:	0f 5f       	rla	r15		
    4254:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4258:	2f 4f       	mov	@r15,	r15	
    425a:	0f db       	bis	r11,	r15	
    425c:	0f ec       	xor	r12,	r15	
    425e:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
}

 void Sub(u16 x[NB])
{
	u16 i;
	for(i=0;i<(SIZE/(6*B));i++)
    4262:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4266:	84 93 f8 ff 	tst	-8(r4)		;0xfff8(r4)
    426a:	7b 27       	jz	$-264    	;abs 0x4162
		x[3*i]   ^= x[3*i+1] & x[3*i+2];
		x[3*i+1] ^= x[3*i]   & x[3*i+2];
		x[3*i+2] ^= x[3*i+1] | x[3*i];
	}
	return;
}
    426c:	21 52       	add	#4,	r1	;r2 As==10
    426e:	34 41       	pop	r4		
    4270:	3b 41       	pop	r11		
    4272:	30 41       	ret			

00004274 <WordRot>:

 void WordRot(u16 x[NB])
{
    4274:	04 12       	push	r4		
    4276:	04 41       	mov	r1,	r4	
    4278:	24 53       	incd	r4		
    427a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    427e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	u16 i;
	u16 temp=x[NB-1];
    4282:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4286:	94 4f 04 00 	mov	4(r15),	-6(r4)	;0x0004(r15), 0xfffa(r4)
    428a:	fa ff 
	for(i=NB-1;i>0;i--)
    428c:	a4 43 f8 ff 	mov	#2,	-8(r4)	;r3 As==10, 0xfff8(r4)
    4290:	11 3c       	jmp	$+36     	;abs 0x42b4
	{
		x[i]=x[i-1];
    4292:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4296:	0f 5f       	rla	r15		
    4298:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    429c:	0e 5f       	add	r15,	r14	
    429e:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    42a2:	3f 53       	add	#-1,	r15	;r3 As==11
    42a4:	0f 5f       	rla	r15		
    42a6:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    42aa:	2f 4f       	mov	@r15,	r15	
    42ac:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)

 void WordRot(u16 x[NB])
{
	u16 i;
	u16 temp=x[NB-1];
	for(i=NB-1;i>0;i--)
    42b0:	b4 53 f8 ff 	add	#-1,	-8(r4)	;r3 As==11, 0xfff8(r4)
    42b4:	84 93 f8 ff 	tst	-8(r4)		;0xfff8(r4)
    42b8:	ec 23       	jnz	$-38     	;abs 0x4292
	{
		x[i]=x[i-1];
	}
	x[0]=temp;
    42ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    42be:	9f 44 fa ff 	mov	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    42c2:	00 00 
	return;
}
    42c4:	31 50 06 00 	add	#6,	r1	;#0x0006
    42c8:	34 41       	pop	r4		
    42ca:	30 41       	ret			

000042cc <InvWordRot>:

 void InvWordRot(u16 x[NB])
{
    42cc:	04 12       	push	r4		
    42ce:	04 41       	mov	r1,	r4	
    42d0:	24 53       	incd	r4		
    42d2:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    42d6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	u16 i;
	u16 temp=x[0];
    42da:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    42de:	a4 4f fa ff 	mov	@r15,	-6(r4)	;0xfffa(r4)
	for(i=0;i<NB-1;i++)
    42e2:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    42e6:	11 3c       	jmp	$+36     	;abs 0x430a
	{
		x[i]=x[i+1];
    42e8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    42ec:	0f 5f       	rla	r15		
    42ee:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    42f2:	0e 5f       	add	r15,	r14	
    42f4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    42f8:	1f 53       	inc	r15		
    42fa:	0f 5f       	rla	r15		
    42fc:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4300:	2f 4f       	mov	@r15,	r15	
    4302:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)

 void InvWordRot(u16 x[NB])
{
	u16 i;
	u16 temp=x[0];
	for(i=0;i<NB-1;i++)
    4306:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    430a:	a4 93 f8 ff 	cmp	#2,	-8(r4)	;r3 As==10, 0xfff8(r4)
    430e:	ec 2b       	jnc	$-38     	;abs 0x42e8
	{
		x[i]=x[i+1];
	}
	x[NB-1]=temp;
    4310:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4314:	2f 52       	add	#4,	r15	;r2 As==10
    4316:	9f 44 fa ff 	mov	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    431a:	00 00 
	return;
}
    431c:	31 50 06 00 	add	#6,	r1	;#0x0006
    4320:	34 41       	pop	r4		
    4322:	30 41       	ret			

00004324 <BitRot>:

 void BitRot(u16 x[NB])
{
    4324:	04 12       	push	r4		
    4326:	04 41       	mov	r1,	r4	
    4328:	24 53       	incd	r4		
    432a:	21 82       	sub	#4,	r1	;r2 As==10
    432c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	u16 i;
	for(i=0;i<NB/3;i++)
    4330:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4334:	3b 3c       	jmp	$+120    	;abs 0x43ac
	{
		x[3*i]=(x[3*i]>>1)^(x[3*i]<<(B-1));
    4336:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    433a:	0f 4e       	mov	r14,	r15	
    433c:	0f 5f       	rla	r15		
    433e:	0f 5e       	add	r14,	r15	
    4340:	0f 5f       	rla	r15		
    4342:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4346:	0e 5f       	add	r15,	r14	
    4348:	1d 44 fa ff 	mov	-6(r4),	r13	;0xfffa(r4)
    434c:	0f 4d       	mov	r13,	r15	
    434e:	0f 5f       	rla	r15		
    4350:	0f 5d       	add	r13,	r15	
    4352:	0f 5f       	rla	r15		
    4354:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4358:	2d 4f       	mov	@r15,	r13	
    435a:	0f 4d       	mov	r13,	r15	
    435c:	0f 11       	rra	r15		
    435e:	0f 43       	clr	r15		
    4360:	0f 10       	rrc	r15		
    4362:	0c 4f       	mov	r15,	r12	
    4364:	0f 4d       	mov	r13,	r15	
    4366:	12 c3       	clrc			
    4368:	0f 10       	rrc	r15		
    436a:	0f dc       	bis	r12,	r15	
    436c:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		x[3*i+2]=(x[3*i+2]<<1)^(x[3*i+2]>>(B-1));
    4370:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4374:	0f 4e       	mov	r14,	r15	
    4376:	0f 5f       	rla	r15		
    4378:	0f 5e       	add	r14,	r15	
    437a:	0f 5f       	rla	r15		
    437c:	2f 52       	add	#4,	r15	;r2 As==10
    437e:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    4382:	0d 5f       	add	r15,	r13	
    4384:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4388:	0f 4e       	mov	r14,	r15	
    438a:	0f 5f       	rla	r15		
    438c:	0f 5e       	add	r14,	r15	
    438e:	0f 5f       	rla	r15		
    4390:	2f 52       	add	#4,	r15	;r2 As==10
    4392:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4396:	2f 4f       	mov	@r15,	r15	
    4398:	0e 4f       	mov	r15,	r14	
    439a:	0e 5e       	rla	r14		
    439c:	0f 5f       	rla	r15		
    439e:	0f 43       	clr	r15		
    43a0:	0f 6f       	rlc	r15		
    43a2:	0f de       	bis	r14,	r15	
    43a4:	8d 4f 00 00 	mov	r15,	0(r13)	;0x0000(r13)
}

 void BitRot(u16 x[NB])
{
	u16 i;
	for(i=0;i<NB/3;i++)
    43a8:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    43ac:	84 93 fa ff 	tst	-6(r4)		;0xfffa(r4)
    43b0:	c2 27       	jz	$-122    	;abs 0x4336
	{
		x[3*i]=(x[3*i]>>1)^(x[3*i]<<(B-1));
		x[3*i+2]=(x[3*i+2]<<1)^(x[3*i+2]>>(B-1));
	}
	return;
}
    43b2:	21 52       	add	#4,	r1	;r2 As==10
    43b4:	34 41       	pop	r4		
    43b6:	30 41       	ret			

000043b8 <Add>:

 void Add(u16 x[NB],u16 y[NB])
{
    43b8:	04 12       	push	r4		
    43ba:	04 41       	mov	r1,	r4	
    43bc:	24 53       	incd	r4		
    43be:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    43c2:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    43c6:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	u16 i;
	for(i=0;i<NB;i++)
    43ca:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    43ce:	17 3c       	jmp	$+48     	;abs 0x43fe
	{
		x[i]=(x[i]+y[i])&MASK;
    43d0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    43d4:	0f 5f       	rla	r15		
    43d6:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    43da:	0e 5f       	add	r15,	r14	
    43dc:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    43e0:	0f 5f       	rla	r15		
    43e2:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    43e6:	2d 4f       	mov	@r15,	r13	
    43e8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    43ec:	0f 5f       	rla	r15		
    43ee:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    43f2:	2f 4f       	mov	@r15,	r15	
    43f4:	0f 5d       	add	r13,	r15	
    43f6:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
}

 void Add(u16 x[NB],u16 y[NB])
{
	u16 i;
	for(i=0;i<NB;i++)
    43fa:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    43fe:	b4 90 03 00 	cmp	#3,	-8(r4)	;#0x0003, 0xfff8(r4)
    4402:	f8 ff 
    4404:	e5 2b       	jnc	$-52     	;abs 0x43d0
	{
		x[i]=(x[i]+y[i])&MASK;
	}
	return;
}
    4406:	31 50 06 00 	add	#6,	r1	;#0x0006
    440a:	34 41       	pop	r4		
    440c:	30 41       	ret			

0000440e <fk>:

/**********************************************************************/
 void fk(u16 kr[NB],u16 kl[NB],u16 krDest[NB],u16 klDest[NB],u16 c[NB])
{
    440e:	04 12       	push	r4		
    4410:	04 41       	mov	r1,	r4	
    4412:	24 53       	incd	r4		
    4414:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    4418:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    441c:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    4420:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
    4424:	84 4c fc ff 	mov	r12,	-4(r4)	;0xfffc(r4)
	u16 i;
	for(i=0;i<NB;i++) krDest[i]=kr[i];
    4428:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    442c:	10 3c       	jmp	$+34     	;abs 0x444e
    442e:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4432:	0f 5f       	rla	r15		
    4434:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4438:	0e 5f       	add	r15,	r14	
    443a:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    443e:	0f 5f       	rla	r15		
    4440:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4444:	2f 4f       	mov	@r15,	r15	
    4446:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
    444a:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    444e:	b4 90 03 00 	cmp	#3,	-12(r4)	;#0x0003, 0xfff4(r4)
    4452:	f4 ff 
    4454:	ec 2b       	jnc	$-38     	;abs 0x442e
	for(i=0;i<NB;i++) klDest[i]=kr[i];
    4456:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    445a:	10 3c       	jmp	$+34     	;abs 0x447c
    445c:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4460:	0f 5f       	rla	r15		
    4462:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4466:	0e 5f       	add	r15,	r14	
    4468:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    446c:	0f 5f       	rla	r15		
    446e:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4472:	2f 4f       	mov	@r15,	r15	
    4474:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
    4478:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    447c:	b4 90 03 00 	cmp	#3,	-12(r4)	;#0x0003, 0xfff4(r4)
    4480:	f4 ff 
    4482:	ec 2b       	jnc	$-38     	;abs 0x445c

	Add(krDest,c);
    4484:	1e 44 02 00 	mov	2(r4),	r14	;0x0002(r4)
    4488:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    448c:	b0 12 b8 43 	call	#0x43b8	
	Sub(krDest);
    4490:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4494:	b0 12 4e 41 	call	#0x414e	
	BitRot(krDest);
    4498:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    449c:	b0 12 24 43 	call	#0x4324	
	WordRot(krDest);
    44a0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    44a4:	b0 12 74 42 	call	#0x4274	
	XOR(krDest,kl);
    44a8:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    44ac:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    44b0:	b0 12 f8 40 	call	#0x40f8	
	return;
}
    44b4:	31 50 0a 00 	add	#10,	r1	;#0x000a
    44b8:	34 41       	pop	r4		
    44ba:	30 41       	ret			

000044bc <fe>:

 void fe(u16 r[NB],u16 l[NB],u16 k[NB])
{
    44bc:	04 12       	push	r4		
    44be:	04 41       	mov	r1,	r4	
    44c0:	24 53       	incd	r4		
    44c2:	31 50 f2 ff 	add	#-14,	r1	;#0xfff2
    44c6:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    44ca:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    44ce:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	u16 temp[NB],i;
	for(i=0;i<NB;i++) temp[i]=r[i];
    44d2:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    44d6:	12 3c       	jmp	$+38     	;abs 0x44fc
    44d8:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    44dc:	0f 5f       	rla	r15		
    44de:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    44e2:	2e 4f       	mov	@r15,	r14	
    44e4:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    44e8:	0f 5f       	rla	r15		
    44ea:	3d 40 f0 ff 	mov	#-16,	r13	;#0xfff0
    44ee:	0d 54       	add	r4,	r13	
    44f0:	0f 5d       	add	r13,	r15	
    44f2:	2f 53       	incd	r15		
    44f4:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
    44f8:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    44fc:	b4 90 03 00 	cmp	#3,	-16(r4)	;#0x0003, 0xfff0(r4)
    4500:	f0 ff 
    4502:	ea 2b       	jnc	$-42     	;abs 0x44d8

	Add(r,k);
    4504:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4508:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    450c:	b0 12 b8 43 	call	#0x43b8	
	Sub(r);
    4510:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4514:	b0 12 4e 41 	call	#0x414e	
	BitRot(r);
    4518:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    451c:	b0 12 24 43 	call	#0x4324	
	WordRot(l);
    4520:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4524:	b0 12 74 42 	call	#0x4274	
	XOR(r,l);
    4528:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    452c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4530:	b0 12 f8 40 	call	#0x40f8	

	for(i=0;i<NB;i++) l[i]=temp[i];
    4534:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    4538:	13 3c       	jmp	$+40     	;abs 0x4560
    453a:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    453e:	0f 5f       	rla	r15		
    4540:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4544:	0e 5f       	add	r15,	r14	
    4546:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    454a:	0f 5f       	rla	r15		
    454c:	3d 40 f0 ff 	mov	#-16,	r13	;#0xfff0
    4550:	0d 54       	add	r4,	r13	
    4552:	0f 5d       	add	r13,	r15	
    4554:	2f 53       	incd	r15		
    4556:	2f 4f       	mov	@r15,	r15	
    4558:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
    455c:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    4560:	b4 90 03 00 	cmp	#3,	-16(r4)	;#0x0003, 0xfff0(r4)
    4564:	f0 ff 
    4566:	e9 2b       	jnc	$-44     	;abs 0x453a

	return;
}
    4568:	31 50 0e 00 	add	#14,	r1	;#0x000e
    456c:	34 41       	pop	r4		
    456e:	30 41       	ret			

00004570 <fd>:

 void fd(u16 r[NB],u16 l[NB],u16 k[NB])
{
    4570:	04 12       	push	r4		
    4572:	04 41       	mov	r1,	r4	
    4574:	24 53       	incd	r4		
    4576:	31 50 f2 ff 	add	#-14,	r1	;#0xfff2
    457a:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    457e:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    4582:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	u16 temp[NB],i;
	for(i=0;i<NB;i++) temp[i]=r[i];
    4586:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    458a:	12 3c       	jmp	$+38     	;abs 0x45b0
    458c:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4590:	0f 5f       	rla	r15		
    4592:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4596:	2e 4f       	mov	@r15,	r14	
    4598:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    459c:	0f 5f       	rla	r15		
    459e:	3d 40 f0 ff 	mov	#-16,	r13	;#0xfff0
    45a2:	0d 54       	add	r4,	r13	
    45a4:	0f 5d       	add	r13,	r15	
    45a6:	2f 53       	incd	r15		
    45a8:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
    45ac:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    45b0:	b4 90 03 00 	cmp	#3,	-16(r4)	;#0x0003, 0xfff0(r4)
    45b4:	f0 ff 
    45b6:	ea 2b       	jnc	$-42     	;abs 0x458c

	Add(r,k);
    45b8:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    45bc:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45c0:	b0 12 b8 43 	call	#0x43b8	
	Sub(r);
    45c4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45c8:	b0 12 4e 41 	call	#0x414e	
	BitRot(r);
    45cc:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45d0:	b0 12 24 43 	call	#0x4324	
	XOR(r,l);
    45d4:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    45d8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45dc:	b0 12 f8 40 	call	#0x40f8	
	InvWordRot(r);
    45e0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45e4:	b0 12 cc 42 	call	#0x42cc	
	for(i=0;i<NB;i++) l[i]=temp[i];
    45e8:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    45ec:	13 3c       	jmp	$+40     	;abs 0x4614
    45ee:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    45f2:	0f 5f       	rla	r15		
    45f4:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    45f8:	0e 5f       	add	r15,	r14	
    45fa:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    45fe:	0f 5f       	rla	r15		
    4600:	3d 40 f0 ff 	mov	#-16,	r13	;#0xfff0
    4604:	0d 54       	add	r4,	r13	
    4606:	0f 5d       	add	r13,	r15	
    4608:	2f 53       	incd	r15		
    460a:	2f 4f       	mov	@r15,	r15	
    460c:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
    4610:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    4614:	b4 90 03 00 	cmp	#3,	-16(r4)	;#0x0003, 0xfff0(r4)
    4618:	f0 ff 
    461a:	e9 2b       	jnc	$-44     	;abs 0x45ee

	return;
}
    461c:	31 50 0e 00 	add	#14,	r1	;#0x000e
    4620:	34 41       	pop	r4		
    4622:	30 41       	ret			

00004624 <KeySchedul>:

 void KeySchedul(u16 mkey[2*NB],u16 rkey[NBROUND][2*NB])
{
    4624:	0b 12       	push	r11		
    4626:	04 12       	push	r4		
    4628:	04 41       	mov	r1,	r4	
    462a:	24 52       	add	#4,	r4	;r2 As==10
    462c:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    4630:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    4634:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
	u16 i,j,temp,c[NB];
	for(i=1;i<NB;i++) c[i]=0;
    4638:	94 43 ec ff 	mov	#1,	-20(r4)	;r3 As==01, 0xffec(r4)
    463c:	0d 3c       	jmp	$+28     	;abs 0x4658
    463e:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    4642:	0f 5f       	rla	r15		
    4644:	3e 40 ec ff 	mov	#-20,	r14	;#0xffec
    4648:	0e 54       	add	r4,	r14	
    464a:	0f 5e       	add	r14,	r15	
    464c:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4650:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4654:	94 53 ec ff 	inc	-20(r4)	;0xffec(r4)
    4658:	b4 90 03 00 	cmp	#3,	-20(r4)	;#0x0003, 0xffec(r4)
    465c:	ec ff 
    465e:	ef 2b       	jnc	$-32     	;abs 0x463e
	for(i=0;i<2*NB;i++) rkey[0][i]=mkey[i];
    4660:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    4664:	10 3c       	jmp	$+34     	;abs 0x4686
    4666:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    466a:	0f 5f       	rla	r15		
    466c:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4670:	2e 4f       	mov	@r15,	r14	
    4672:	1d 44 fa ff 	mov	-6(r4),	r13	;0xfffa(r4)
    4676:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    467a:	0f 5f       	rla	r15		
    467c:	0f 5d       	add	r13,	r15	
    467e:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
    4682:	94 53 ec ff 	inc	-20(r4)	;0xffec(r4)
    4686:	b4 90 06 00 	cmp	#6,	-20(r4)	;#0x0006, 0xffec(r4)
    468a:	ec ff 
    468c:	ec 2b       	jnc	$-38     	;abs 0x4666
	for(i=1;i<=(NBROUND>>2);i++)
    468e:	94 43 ec ff 	mov	#1,	-20(r4)	;r3 As==01, 0xffec(r4)
    4692:	3a 3c       	jmp	$+118    	;abs 0x4708
	{
		c[0]=i;
    4694:	94 44 ec ff 	mov	-20(r4),-14(r4)	;0xffec(r4), 0xfff2(r4)
    4698:	f2 ff 
		//[KLi , KRi ] = FK (KLi−1 , KRi−1 , C(i));
		fk(rkey[i-1],rkey[i-1]+3,rkey[i],rkey[i]+3,c);
    469a:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    469e:	0f 4e       	mov	r14,	r15	
    46a0:	0f 5f       	rla	r15		
    46a2:	0f 5e       	add	r14,	r15	
    46a4:	0f 5f       	rla	r15		
    46a6:	0f 5f       	rla	r15		
    46a8:	3f 50 06 00 	add	#6,	r15	;#0x0006
    46ac:	1c 44 fa ff 	mov	-6(r4),	r12	;0xfffa(r4)
    46b0:	0c 5f       	add	r15,	r12	
    46b2:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    46b6:	0f 4e       	mov	r14,	r15	
    46b8:	0f 5f       	rla	r15		
    46ba:	0f 5e       	add	r14,	r15	
    46bc:	0f 5f       	rla	r15		
    46be:	0f 5f       	rla	r15		
    46c0:	1d 44 fa ff 	mov	-6(r4),	r13	;0xfffa(r4)
    46c4:	0d 5f       	add	r15,	r13	
    46c6:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    46ca:	3e 53       	add	#-1,	r14	;r3 As==11
    46cc:	0f 4e       	mov	r14,	r15	
    46ce:	0f 5f       	rla	r15		
    46d0:	0f 5e       	add	r14,	r15	
    46d2:	0f 5f       	rla	r15		
    46d4:	0f 5f       	rla	r15		
    46d6:	3f 50 06 00 	add	#6,	r15	;#0x0006
    46da:	1b 44 fa ff 	mov	-6(r4),	r11	;0xfffa(r4)
    46de:	0b 5f       	add	r15,	r11	
    46e0:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    46e4:	3e 53       	add	#-1,	r14	;r3 As==11
    46e6:	0f 4e       	mov	r14,	r15	
    46e8:	0f 5f       	rla	r15		
    46ea:	0f 5e       	add	r14,	r15	
    46ec:	0f 5f       	rla	r15		
    46ee:	0f 5f       	rla	r15		
    46f0:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    46f4:	0e 44       	mov	r4,	r14	
    46f6:	3e 50 f2 ff 	add	#-14,	r14	;#0xfff2
    46fa:	0e 12       	push	r14		
    46fc:	0e 4b       	mov	r11,	r14	
    46fe:	b0 12 0e 44 	call	#0x440e	
    4702:	21 53       	incd	r1		
 void KeySchedul(u16 mkey[2*NB],u16 rkey[NBROUND][2*NB])
{
	u16 i,j,temp,c[NB];
	for(i=1;i<NB;i++) c[i]=0;
	for(i=0;i<2*NB;i++) rkey[0][i]=mkey[i];
	for(i=1;i<=(NBROUND>>2);i++)
    4704:	94 53 ec ff 	inc	-20(r4)	;0xffec(r4)
    4708:	b4 90 0d 00 	cmp	#13,	-20(r4)	;#0x000d, 0xffec(r4)
    470c:	ec ff 
    470e:	c2 2b       	jnc	$-122    	;abs 0x4694
		c[0]=i;
		//[KLi , KRi ] = FK (KLi−1 , KRi−1 , C(i));
		fk(rkey[i-1],rkey[i-1]+3,rkey[i],rkey[i]+3,c);
	}
	
	for(j=0;j<NB;j++)
    4710:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    4714:	2e 3c       	jmp	$+94     	;abs 0x4772
	{
		temp=rkey[NBROUND>>2][j];
    4716:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    471a:	3e 50 90 00 	add	#144,	r14	;#0x0090
    471e:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4722:	0f 5f       	rla	r15		
    4724:	0f 5e       	add	r14,	r15	
    4726:	a4 4f f0 ff 	mov	@r15,	-16(r4)	;0xfff0(r4)
		rkey[NBROUND>>2][j]=rkey[NBROUND>>2][j+3];
    472a:	1d 44 fa ff 	mov	-6(r4),	r13	;0xfffa(r4)
    472e:	3d 50 90 00 	add	#144,	r13	;#0x0090
    4732:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4736:	3e 50 90 00 	add	#144,	r14	;#0x0090
    473a:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    473e:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4742:	0f 5f       	rla	r15		
    4744:	0f 5e       	add	r14,	r15	
    4746:	2e 4f       	mov	@r15,	r14	
    4748:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    474c:	0f 5f       	rla	r15		
    474e:	0f 5d       	add	r13,	r15	
    4750:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		rkey[NBROUND>>2][j+3]=temp;
    4754:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4758:	3e 50 90 00 	add	#144,	r14	;#0x0090
    475c:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4760:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4764:	0f 5f       	rla	r15		
    4766:	0f 5e       	add	r14,	r15	
    4768:	9f 44 f0 ff 	mov	-16(r4),0(r15)	;0xfff0(r4), 0x0000(r15)
    476c:	00 00 
		c[0]=i;
		//[KLi , KRi ] = FK (KLi−1 , KRi−1 , C(i));
		fk(rkey[i-1],rkey[i-1]+3,rkey[i],rkey[i]+3,c);
	}
	
	for(j=0;j<NB;j++)
    476e:	94 53 ee ff 	inc	-18(r4)	;0xffee(r4)
    4772:	b4 90 03 00 	cmp	#3,	-18(r4)	;#0x0003, 0xffee(r4)
    4776:	ee ff 
    4778:	ce 2b       	jnc	$-98     	;abs 0x4716
		temp=rkey[NBROUND>>2][j];
		rkey[NBROUND>>2][j]=rkey[NBROUND>>2][j+3];
		rkey[NBROUND>>2][j+3]=temp;
	}
	
	for(;i<NBROUND;i++)
    477a:	3d 3c       	jmp	$+124    	;abs 0x47f6
	{
		c[0]=NBROUND-i;
    477c:	3f 40 33 00 	mov	#51,	r15	;#0x0033
    4780:	1f 84 ec ff 	sub	-20(r4),r15	;0xffec(r4)
    4784:	84 4f f2 ff 	mov	r15,	-14(r4)	;0xfff2(r4)
		//[KLi , KRi ] = FK (KLi−1 , KRi−1 , C(r − i));
		fk(rkey[i-1],rkey[i-1]+3,rkey[i],rkey[i]+3,c);
    4788:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    478c:	0f 4e       	mov	r14,	r15	
    478e:	0f 5f       	rla	r15		
    4790:	0f 5e       	add	r14,	r15	
    4792:	0f 5f       	rla	r15		
    4794:	0f 5f       	rla	r15		
    4796:	3f 50 06 00 	add	#6,	r15	;#0x0006
    479a:	1c 44 fa ff 	mov	-6(r4),	r12	;0xfffa(r4)
    479e:	0c 5f       	add	r15,	r12	
    47a0:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    47a4:	0f 4e       	mov	r14,	r15	
    47a6:	0f 5f       	rla	r15		
    47a8:	0f 5e       	add	r14,	r15	
    47aa:	0f 5f       	rla	r15		
    47ac:	0f 5f       	rla	r15		
    47ae:	1d 44 fa ff 	mov	-6(r4),	r13	;0xfffa(r4)
    47b2:	0d 5f       	add	r15,	r13	
    47b4:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    47b8:	3e 53       	add	#-1,	r14	;r3 As==11
    47ba:	0f 4e       	mov	r14,	r15	
    47bc:	0f 5f       	rla	r15		
    47be:	0f 5e       	add	r14,	r15	
    47c0:	0f 5f       	rla	r15		
    47c2:	0f 5f       	rla	r15		
    47c4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    47c8:	1b 44 fa ff 	mov	-6(r4),	r11	;0xfffa(r4)
    47cc:	0b 5f       	add	r15,	r11	
    47ce:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    47d2:	3e 53       	add	#-1,	r14	;r3 As==11
    47d4:	0f 4e       	mov	r14,	r15	
    47d6:	0f 5f       	rla	r15		
    47d8:	0f 5e       	add	r14,	r15	
    47da:	0f 5f       	rla	r15		
    47dc:	0f 5f       	rla	r15		
    47de:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    47e2:	0e 44       	mov	r4,	r14	
    47e4:	3e 50 f2 ff 	add	#-14,	r14	;#0xfff2
    47e8:	0e 12       	push	r14		
    47ea:	0e 4b       	mov	r11,	r14	
    47ec:	b0 12 0e 44 	call	#0x440e	
    47f0:	21 53       	incd	r1		
		temp=rkey[NBROUND>>2][j];
		rkey[NBROUND>>2][j]=rkey[NBROUND>>2][j+3];
		rkey[NBROUND>>2][j+3]=temp;
	}
	
	for(;i<NBROUND;i++)
    47f2:	94 53 ec ff 	inc	-20(r4)	;0xffec(r4)
    47f6:	b4 90 33 00 	cmp	#51,	-20(r4)	;#0x0033, 0xffec(r4)
    47fa:	ec ff 
    47fc:	bf 2b       	jnc	$-128    	;abs 0x477c
		c[0]=NBROUND-i;
		//[KLi , KRi ] = FK (KLi−1 , KRi−1 , C(r − i));
		fk(rkey[i-1],rkey[i-1]+3,rkey[i],rkey[i]+3,c);
	}
	return;
}
    47fe:	31 50 10 00 	add	#16,	r1	;#0x0010
    4802:	34 41       	pop	r4		
    4804:	3b 41       	pop	r11		
    4806:	30 41       	ret			

00004808 <Decrypt>:

 void Decrypt(u16 state[2*NB],u16 rkey[NBROUND][2*NB])
{
    4808:	04 12       	push	r4		
    480a:	04 41       	mov	r1,	r4	
    480c:	24 53       	incd	r4		
    480e:	31 82       	sub	#8,	r1	;r2 As==11
    4810:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4814:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	u16 i,temp;
	
	for(i=NBROUND;i>((NBROUND+1)>>2);i--)
    4818:	b4 40 33 00 	mov	#51,	-10(r4)	;#0x0033, 0xfff6(r4)
    481c:	f6 ff 
    481e:	19 3c       	jmp	$+52     	;abs 0x4852
	{
		fd(state,state+3,rkey[i-1]+3);
    4820:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    4824:	3e 53       	add	#-1,	r14	;r3 As==11
    4826:	0f 4e       	mov	r14,	r15	
    4828:	0f 5f       	rla	r15		
    482a:	0f 5e       	add	r14,	r15	
    482c:	0f 5f       	rla	r15		
    482e:	0f 5f       	rla	r15		
    4830:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4834:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4838:	0e 5f       	add	r15,	r14	
    483a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    483e:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4842:	0d 4e       	mov	r14,	r13	
    4844:	0e 4f       	mov	r15,	r14	
    4846:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    484a:	b0 12 70 45 	call	#0x4570	

 void Decrypt(u16 state[2*NB],u16 rkey[NBROUND][2*NB])
{
	u16 i,temp;
	
	for(i=NBROUND;i>((NBROUND+1)>>2);i--)
    484e:	b4 53 f6 ff 	add	#-1,	-10(r4)	;r3 As==11, 0xfff6(r4)
    4852:	b4 90 0e 00 	cmp	#14,	-10(r4)	;#0x000e, 0xfff6(r4)
    4856:	f6 ff 
    4858:	e3 2f       	jc	$-56     	;abs 0x4820
	{
		fd(state,state+3,rkey[i-1]+3);
	}
	for(;i>=1;i--)
    485a:	17 3c       	jmp	$+48     	;abs 0x488a
	{
		fd(state,state+3,rkey[i-1]);
    485c:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    4860:	3e 53       	add	#-1,	r14	;r3 As==11
    4862:	0f 4e       	mov	r14,	r15	
    4864:	0f 5f       	rla	r15		
    4866:	0f 5e       	add	r14,	r15	
    4868:	0f 5f       	rla	r15		
    486a:	0f 5f       	rla	r15		
    486c:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4870:	0e 5f       	add	r15,	r14	
    4872:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4876:	3f 50 06 00 	add	#6,	r15	;#0x0006
    487a:	0d 4e       	mov	r14,	r13	
    487c:	0e 4f       	mov	r15,	r14	
    487e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4882:	b0 12 70 45 	call	#0x4570	
	
	for(i=NBROUND;i>((NBROUND+1)>>2);i--)
	{
		fd(state,state+3,rkey[i-1]+3);
	}
	for(;i>=1;i--)
    4886:	b4 53 f6 ff 	add	#-1,	-10(r4)	;r3 As==11, 0xfff6(r4)
    488a:	84 93 f6 ff 	tst	-10(r4)	;0xfff6(r4)
    488e:	e6 23       	jnz	$-50     	;abs 0x485c
	{
		fd(state,state+3,rkey[i-1]);
	}
	for(i=0;i<NB;i++)
    4890:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    4894:	23 3c       	jmp	$+72     	;abs 0x48dc
	{
		temp=state[i];
    4896:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    489a:	0f 5f       	rla	r15		
    489c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    48a0:	a4 4f f8 ff 	mov	@r15,	-8(r4)	;0xfff8(r4)
		state[i]=state[i+3];
    48a4:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    48a8:	0f 5f       	rla	r15		
    48aa:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    48ae:	0e 5f       	add	r15,	r14	
    48b0:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    48b4:	3f 50 03 00 	add	#3,	r15	;#0x0003
    48b8:	0f 5f       	rla	r15		
    48ba:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    48be:	2f 4f       	mov	@r15,	r15	
    48c0:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		state[i+3]=temp;
    48c4:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    48c8:	3f 50 03 00 	add	#3,	r15	;#0x0003
    48cc:	0f 5f       	rla	r15		
    48ce:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    48d2:	9f 44 f8 ff 	mov	-8(r4),	0(r15)	;0xfff8(r4), 0x0000(r15)
    48d6:	00 00 
	}
	for(;i>=1;i--)
	{
		fd(state,state+3,rkey[i-1]);
	}
	for(i=0;i<NB;i++)
    48d8:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    48dc:	b4 90 03 00 	cmp	#3,	-10(r4)	;#0x0003, 0xfff6(r4)
    48e0:	f6 ff 
    48e2:	d9 2b       	jnc	$-76     	;abs 0x4896
		state[i]=state[i+3];
		state[i+3]=temp;
	}

	return;
}
    48e4:	31 52       	add	#8,	r1	;r2 As==11
    48e6:	34 41       	pop	r4		
    48e8:	30 41       	ret			

000048ea <Encrypt>:

 void Encrypt(u16 state[2*NB],u16 rkey[NBROUND][2*NB])
{
    48ea:	04 12       	push	r4		
    48ec:	04 41       	mov	r1,	r4	
    48ee:	24 53       	incd	r4		
    48f0:	31 82       	sub	#8,	r1	;r2 As==11
    48f2:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    48f6:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	u16 i,temp;
	for(i=1;i<=((NBROUND+1)>>2);i++)
    48fa:	94 43 f6 ff 	mov	#1,	-10(r4)	;r3 As==01, 0xfff6(r4)
    48fe:	17 3c       	jmp	$+48     	;abs 0x492e
	{
		fe(state,state+3,rkey[i-1]);	
    4900:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    4904:	3e 53       	add	#-1,	r14	;r3 As==11
    4906:	0f 4e       	mov	r14,	r15	
    4908:	0f 5f       	rla	r15		
    490a:	0f 5e       	add	r14,	r15	
    490c:	0f 5f       	rla	r15		
    490e:	0f 5f       	rla	r15		
    4910:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4914:	0e 5f       	add	r15,	r14	
    4916:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    491a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    491e:	0d 4e       	mov	r14,	r13	
    4920:	0e 4f       	mov	r15,	r14	
    4922:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4926:	b0 12 bc 44 	call	#0x44bc	
}

 void Encrypt(u16 state[2*NB],u16 rkey[NBROUND][2*NB])
{
	u16 i,temp;
	for(i=1;i<=((NBROUND+1)>>2);i++)
    492a:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    492e:	b4 90 0e 00 	cmp	#14,	-10(r4)	;#0x000e, 0xfff6(r4)
    4932:	f6 ff 
    4934:	e5 2b       	jnc	$-52     	;abs 0x4900
	{
		fe(state,state+3,rkey[i-1]);	
	}
	for(;i<=NBROUND;i++)
    4936:	19 3c       	jmp	$+52     	;abs 0x496a
	{
		fe(state,state+3,rkey[i-1]+3);		
    4938:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    493c:	3e 53       	add	#-1,	r14	;r3 As==11
    493e:	0f 4e       	mov	r14,	r15	
    4940:	0f 5f       	rla	r15		
    4942:	0f 5e       	add	r14,	r15	
    4944:	0f 5f       	rla	r15		
    4946:	0f 5f       	rla	r15		
    4948:	3f 50 06 00 	add	#6,	r15	;#0x0006
    494c:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4950:	0e 5f       	add	r15,	r14	
    4952:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4956:	3f 50 06 00 	add	#6,	r15	;#0x0006
    495a:	0d 4e       	mov	r14,	r13	
    495c:	0e 4f       	mov	r15,	r14	
    495e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4962:	b0 12 bc 44 	call	#0x44bc	
	u16 i,temp;
	for(i=1;i<=((NBROUND+1)>>2);i++)
	{
		fe(state,state+3,rkey[i-1]);	
	}
	for(;i<=NBROUND;i++)
    4966:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    496a:	b4 90 34 00 	cmp	#52,	-10(r4)	;#0x0034, 0xfff6(r4)
    496e:	f6 ff 
    4970:	e3 2b       	jnc	$-56     	;abs 0x4938
	{
		fe(state,state+3,rkey[i-1]+3);		
	}
		
	for(i=0;i<NB;i++)
    4972:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    4976:	23 3c       	jmp	$+72     	;abs 0x49be
	{
		temp=state[i];
    4978:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    497c:	0f 5f       	rla	r15		
    497e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4982:	a4 4f f8 ff 	mov	@r15,	-8(r4)	;0xfff8(r4)
		state[i]=state[i+3];
    4986:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    498a:	0f 5f       	rla	r15		
    498c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4990:	0e 5f       	add	r15,	r14	
    4992:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4996:	3f 50 03 00 	add	#3,	r15	;#0x0003
    499a:	0f 5f       	rla	r15		
    499c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    49a0:	2f 4f       	mov	@r15,	r15	
    49a2:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		state[i+3]=temp;
    49a6:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    49aa:	3f 50 03 00 	add	#3,	r15	;#0x0003
    49ae:	0f 5f       	rla	r15		
    49b0:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    49b4:	9f 44 f8 ff 	mov	-8(r4),	0(r15)	;0xfff8(r4), 0x0000(r15)
    49b8:	00 00 
	for(;i<=NBROUND;i++)
	{
		fe(state,state+3,rkey[i-1]+3);		
	}
		
	for(i=0;i<NB;i++)
    49ba:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    49be:	b4 90 03 00 	cmp	#3,	-10(r4)	;#0x0003, 0xfff6(r4)
    49c2:	f6 ff 
    49c4:	d9 2b       	jnc	$-76     	;abs 0x4978
		temp=state[i];
		state[i]=state[i+3];
		state[i+3]=temp;
	}	
	return;
}
    49c6:	31 52       	add	#8,	r1	;r2 As==11
    49c8:	34 41       	pop	r4		
    49ca:	30 41       	ret			

000049cc <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    49cc:	04 12       	push	r4		
    49ce:	04 41       	mov	r1,	r4	
    49d0:	24 53       	incd	r4		
    49d2:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    49d6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    49da:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    49de:	0d 3c       	jmp	$+28     	;abs 0x49fa
    {
      for (i = 0; i<d; i++) 
    49e0:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    49e4:	04 3c       	jmp	$+10     	;abs 0x49ee
	{
	  nop();
    49e6:	03 43       	nop			
	  nop();
    49e8:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    49ea:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    49ee:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    49f2:	f8 ff 
    49f4:	f8 2b       	jnc	$-14     	;abs 0x49e6
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    49f6:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    49fa:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    49fe:	fa ff 
    4a00:	ef 2b       	jnc	$-32     	;abs 0x49e0
	{
	  nop();
	  nop();
	}
    }
}
    4a02:	31 50 06 00 	add	#6,	r1	;#0x0006
    4a06:	34 41       	pop	r4		
    4a08:	30 41       	ret			

00004a0a <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4a0a:	04 12       	push	r4		
    4a0c:	04 41       	mov	r1,	r4	
    4a0e:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4a10:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4a14:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4a16:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4a1a:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4a1e:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4a22:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4a26:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4a2a:	5f 42 05 00 	mov.b	&0x0005,r15	
    4a2e:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4a32:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4a36:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4a3a:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4a3e:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4a40:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4a44:	79 00 
  U1RCTL = 0;
    4a46:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4a4a:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4a4e:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4a52:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4a54:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4a58:	7b 00 

  delay(0x800);
    4a5a:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4a5e:	b0 12 cc 49 	call	#0x49cc	
  return 0;
    4a62:	0f 43       	clr	r15		
}
    4a64:	34 41       	pop	r4		
    4a66:	30 41       	ret			

00004a68 <uart1_putchar>:

int uart1_putchar(int c)
{
    4a68:	04 12       	push	r4		
    4a6a:	04 41       	mov	r1,	r4	
    4a6c:	24 53       	incd	r4		
    4a6e:	21 83       	decd	r1		
    4a70:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4a74:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a78:	4f 4f       	mov.b	r15,	r15	
    4a7a:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4a7e:	03 43       	nop			
    4a80:	5f 42 79 00 	mov.b	&0x0079,r15	
    4a84:	4f 4f       	mov.b	r15,	r15	
    4a86:	1f f3       	and	#1,	r15	;r3 As==01
    4a88:	0f 93       	tst	r15		
    4a8a:	fa 27       	jz	$-10     	;abs 0x4a80
  return (unsigned char)c;
    4a8c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a90:	4f 4f       	mov.b	r15,	r15	
    4a92:	4f 4f       	mov.b	r15,	r15	
}
    4a94:	21 53       	incd	r1		
    4a96:	34 41       	pop	r4		
    4a98:	30 41       	ret			

00004a9a <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4a9a:	04 12       	push	r4		
    4a9c:	04 41       	mov	r1,	r4	
    4a9e:	24 53       	incd	r4		
    4aa0:	21 83       	decd	r1		
    4aa2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4aa6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4aaa:	b0 12 68 4a 	call	#0x4a68	
}
    4aae:	21 53       	incd	r1		
    4ab0:	34 41       	pop	r4		
    4ab2:	30 41       	ret			

00004ab4 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4ab4:	04 12       	push	r4		
    4ab6:	04 41       	mov	r1,	r4	
    4ab8:	24 53       	incd	r4		
  ;
}
    4aba:	34 41       	pop	r4		
    4abc:	30 41       	ret			

00004abe <start_decrypt>:
void
start_decrypt()
{
    4abe:	04 12       	push	r4		
    4ac0:	04 41       	mov	r1,	r4	
    4ac2:	24 53       	incd	r4		
  ;
}
    4ac4:	34 41       	pop	r4		
    4ac6:	30 41       	ret			

00004ac8 <end_expe>:


void
end_expe()
{
    4ac8:	04 12       	push	r4		
    4aca:	04 41       	mov	r1,	r4	
    4acc:	24 53       	incd	r4		
  ;
}
    4ace:	34 41       	pop	r4		
    4ad0:	30 41       	ret			

00004ad2 <_unexpected_>:
    4ad2:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	f4 40 f4 40 f4 40 f4 40 f4 40 f4 40 f4 40 f4 40     .@.@.@.@.@.@.@.@
    fff0:	f4 40 f4 40 f4 40 f4 40 f4 40 f4 40 f4 40 00 40     .@.@.@.@.@.@.@.@
