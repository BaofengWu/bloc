
klein.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00005566 l    d  .rodata	00000000 .rodata
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 klein80.c
00005566 l     O .rodata	00000010 sBox
000040f4 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
0000552c g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040f4  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040f4  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
000047e2 g     F .text	00000c7c Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00005576 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
0000549c g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040ee  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040f4  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
0000555a g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040f4  w      .text	00000000 __isr_5
00005576 g       *ABS*	00000000 __data_load_start
000040f4 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040f4  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040f4  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040f4  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040f4  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
000040f8 g     F .text	000001b0 KeySetup
00005564  w      .text	00000000 _unexpected_
000040f4  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040f4  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
000054fa g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040f4 g       .text	00000000 __ctors_start
000040f4  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .rodata	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	000000b0 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040f4  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
0000545e g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040f4  w      .text	00000000 __isr_9
000042a8 g     F .text	000001ac InvKeySetup
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040f4 g       .text	00000000 __dtors_start
000040f4  w      .text	00000000 __isr_6
000040f4 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040f4  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .rodata	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00005546 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040ee  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00005550 g     F .text	0000000a start_decrypt
00001100 g       .rodata	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00004454 g     F .text	0000038e Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 76 55 	mov	21878(r15),4352(r15);0x5576(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:

}


int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 e6 ff 	add	#-26,	r1	;#0xffe6
	#ifdef PRINT
	uart1_init();
	u8 i;
	#endif

    u8 text[8] = {0};
    4046:	0f 44       	mov	r4,	r15	
    4048:	3f 50 e4 ff 	add	#-28,	r15	;#0xffe4
    404c:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4050:	2f 53       	incd	r15		
    4052:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4056:	2f 53       	incd	r15		
    4058:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    405c:	2f 53       	incd	r15		
    405e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4062:	2f 53       	incd	r15		
    u8 crypt[8] = {0};
    4064:	0f 44       	mov	r4,	r15	
    4066:	3f 50 ec ff 	add	#-20,	r15	;#0xffec
    406a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    406e:	2f 53       	incd	r15		
    4070:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4074:	2f 53       	incd	r15		
    4076:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    407a:	2f 53       	incd	r15		
    407c:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4080:	2f 53       	incd	r15		
    u8 k[10] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
    4082:	f4 43 f4 ff 	mov.b	#-1,	-12(r4)	;r3 As==11, 0xfff4(r4)
    4086:	f4 43 f5 ff 	mov.b	#-1,	-11(r4)	;r3 As==11, 0xfff5(r4)
    408a:	f4 43 f6 ff 	mov.b	#-1,	-10(r4)	;r3 As==11, 0xfff6(r4)
    408e:	f4 43 f7 ff 	mov.b	#-1,	-9(r4)	;r3 As==11, 0xfff7(r4)
    4092:	f4 43 f8 ff 	mov.b	#-1,	-8(r4)	;r3 As==11, 0xfff8(r4)
    4096:	f4 43 f9 ff 	mov.b	#-1,	-7(r4)	;r3 As==11, 0xfff9(r4)
    409a:	f4 43 fa ff 	mov.b	#-1,	-6(r4)	;r3 As==11, 0xfffa(r4)
    409e:	f4 43 fb ff 	mov.b	#-1,	-5(r4)	;r3 As==11, 0xfffb(r4)
    40a2:	f4 43 fc ff 	mov.b	#-1,	-4(r4)	;r3 As==11, 0xfffc(r4)
    40a6:	f4 43 fd ff 	mov.b	#-1,	-3(r4)	;r3 As==11, 0xfffd(r4)

	START_ENCRYPT();
    40aa:	b0 12 46 55 	call	#0x5546	
    Encrypt ( text, crypt, k );
    40ae:	0e 44       	mov	r4,	r14	
    40b0:	3e 50 f4 ff 	add	#-12,	r14	;#0xfff4
    40b4:	0f 44       	mov	r4,	r15	
    40b6:	3f 50 ec ff 	add	#-20,	r15	;#0xffec
    40ba:	0d 4e       	mov	r14,	r13	
    40bc:	0e 4f       	mov	r15,	r14	
    40be:	0f 44       	mov	r4,	r15	
    40c0:	3f 50 e4 ff 	add	#-28,	r15	;#0xffe4
    40c4:	b0 12 54 44 	call	#0x4454	
	START_DECRYPT();
    40c8:	b0 12 50 55 	call	#0x5550	
    Decrypt (crypt, text, k );
    40cc:	0e 44       	mov	r4,	r14	
    40ce:	3e 50 f4 ff 	add	#-12,	r14	;#0xfff4
    40d2:	0f 44       	mov	r4,	r15	
    40d4:	3f 50 ec ff 	add	#-20,	r15	;#0xffec
    40d8:	0d 4e       	mov	r14,	r13	
    40da:	0e 44       	mov	r4,	r14	
    40dc:	3e 50 e4 ff 	add	#-28,	r14	;#0xffe4
    40e0:	b0 12 e2 47 	call	#0x47e2	
	END_EXPE();
    40e4:	b0 12 5a 55 	call	#0x555a	
    {
        printf("%x ",text[i]);
    }
	#endif

    return 0;
    40e8:	0f 43       	clr	r15		
}
    40ea:	31 50 1a 00 	add	#26,	r1	;#0x001a

000040ee <__stop_progExec__>:
    40ee:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40f2:	fd 3f       	jmp	$-4      	;abs 0x40ee

000040f4 <__ctors_end>:
    40f4:	30 40 64 55 	br	#0x5564	

000040f8 <KeySetup>:
    x ^= 0x1B & h;
}
#endif

 void KeySetup ( u8 k[], u8 r )
{
    40f8:	04 12       	push	r4		
    40fa:	04 41       	mov	r1,	r4	
    40fc:	24 53       	incd	r4		
    40fe:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    4102:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4106:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    u8 i;

    u8 tmp[10] =
    410a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    410e:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    4112:	c4 4f ef ff 	mov.b	r15,	-17(r4)	;0xffef(r4)
    4116:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    411a:	5f 4f 02 00 	mov.b	2(r15),	r15	;0x0002(r15)
    411e:	c4 4f f0 ff 	mov.b	r15,	-16(r4)	;0xfff0(r4)
    4122:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4126:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    412a:	c4 4f f1 ff 	mov.b	r15,	-15(r4)	;0xfff1(r4)
    412e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4132:	5f 4f 04 00 	mov.b	4(r15),	r15	;0x0004(r15)
    4136:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    {k[1],k[2],k[3],k[4],k[0],
    413a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    413e:	6f 4f       	mov.b	@r15,	r15	

 void KeySetup ( u8 k[], u8 r )
{
    u8 i;

    u8 tmp[10] =
    4140:	c4 4f f3 ff 	mov.b	r15,	-13(r4)	;0xfff3(r4)
    4144:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4148:	5f 4f 06 00 	mov.b	6(r15),	r15	;0x0006(r15)
    414c:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    4150:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4154:	5f 4f 07 00 	mov.b	7(r15),	r15	;0x0007(r15)
    4158:	c4 4f f5 ff 	mov.b	r15,	-11(r4)	;0xfff5(r4)
    415c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4160:	5f 4f 08 00 	mov.b	8(r15),	r15	;0x0008(r15)
    4164:	c4 4f f6 ff 	mov.b	r15,	-10(r4)	;0xfff6(r4)
    4168:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    416c:	5f 4f 09 00 	mov.b	9(r15),	r15	;0x0009(r15)
    4170:	c4 4f f7 ff 	mov.b	r15,	-9(r4)	;0xfff7(r4)
    4174:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4178:	5f 4f 05 00 	mov.b	5(r15),	r15	;0x0005(r15)
    417c:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    {k[1],k[2],k[3],k[4],k[0],
    k[6],k[7],k[8],k[9],k[5]};

    for (i=0 ; i<5 ; i++)
    4180:	c4 43 ee ff 	mov.b	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    4184:	2a 3c       	jmp	$+86     	;abs 0x41da
    {
        k[i] = tmp[i+5];
    4186:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    418a:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    418e:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    4192:	3e 50 05 00 	add	#5,	r14	;#0x0005
    4196:	0d 44       	mov	r4,	r13	
    4198:	3d 50 ef ff 	add	#-17,	r13	;#0xffef
    419c:	0e 5d       	add	r13,	r14	
    419e:	6e 4e       	mov.b	@r14,	r14	
    41a0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
        k[i+5] = tmp[i] ^ tmp[i+5];
    41a4:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    41a8:	3f 50 05 00 	add	#5,	r15	;#0x0005
    41ac:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    41b0:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    41b4:	0d 44       	mov	r4,	r13	
    41b6:	3d 50 ef ff 	add	#-17,	r13	;#0xffef
    41ba:	0e 5d       	add	r13,	r14	
    41bc:	6d 4e       	mov.b	@r14,	r13	
    41be:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    41c2:	3e 50 05 00 	add	#5,	r14	;#0x0005
    41c6:	0c 44       	mov	r4,	r12	
    41c8:	3c 50 ef ff 	add	#-17,	r12	;#0xffef
    41cc:	0e 5c       	add	r12,	r14	
    41ce:	6e 4e       	mov.b	@r14,	r14	
    41d0:	4e ed       	xor.b	r13,	r14	
    41d2:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

    u8 tmp[10] =
    {k[1],k[2],k[3],k[4],k[0],
    k[6],k[7],k[8],k[9],k[5]};

    for (i=0 ; i<5 ; i++)
    41d6:	d4 53 ee ff 	inc.b	-18(r4)	;0xffee(r4)
    41da:	f4 90 05 00 	cmp.b	#5,	-18(r4)	;#0x0005, 0xffee(r4)
    41de:	ee ff 
    41e0:	d2 2b       	jnc	$-90     	;abs 0x4186
    {
        k[i] = tmp[i+5];
        k[i+5] = tmp[i] ^ tmp[i+5];
    }

    k[2] = k[2] ^ r;
    41e2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    41e6:	2f 53       	incd	r15		
    41e8:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    41ec:	2e 53       	incd	r14		
    41ee:	6e 4e       	mov.b	@r14,	r14	
    41f0:	5e e4 fc ff 	xor.b	-4(r4),	r14	;0xfffc(r4)
    41f4:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    k[6] = (sBox[k[6]&0x0f]) | (sBox[k[6]>>4] << 4);
    41f8:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    41fc:	3e 50 06 00 	add	#6,	r14	;#0x0006
    4200:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4204:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4208:	6f 4f       	mov.b	@r15,	r15	
    420a:	4f 4f       	mov.b	r15,	r15	
    420c:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    4210:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    4214:	4d 4f       	mov.b	r15,	r13	
    4216:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    421a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    421e:	6f 4f       	mov.b	@r15,	r15	
    4220:	4f 4f       	mov.b	r15,	r15	
    4222:	4f 4f       	mov.b	r15,	r15	
    4224:	12 c3       	clrc			
    4226:	4f 10       	rrc.b	r15		
    4228:	12 c3       	clrc			
    422a:	4f 10       	rrc.b	r15		
    422c:	12 c3       	clrc			
    422e:	4f 10       	rrc.b	r15		
    4230:	12 c3       	clrc			
    4232:	4f 10       	rrc.b	r15		
    4234:	4f 4f       	mov.b	r15,	r15	
    4236:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    423a:	4f 4f       	mov.b	r15,	r15	
    423c:	0f 5f       	rla	r15		
    423e:	0f 5f       	rla	r15		
    4240:	0f 5f       	rla	r15		
    4242:	0f 5f       	rla	r15		
    4244:	4f 4f       	mov.b	r15,	r15	
    4246:	4f dd       	bis.b	r13,	r15	
    4248:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
    k[7] = (sBox[k[7]&0x0f]) | (sBox[k[7]>>4] << 4);
    424c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4250:	3e 50 07 00 	add	#7,	r14	;#0x0007
    4254:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4258:	3f 50 07 00 	add	#7,	r15	;#0x0007
    425c:	6f 4f       	mov.b	@r15,	r15	
    425e:	4f 4f       	mov.b	r15,	r15	
    4260:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    4264:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    4268:	4d 4f       	mov.b	r15,	r13	
    426a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    426e:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4272:	6f 4f       	mov.b	@r15,	r15	
    4274:	4f 4f       	mov.b	r15,	r15	
    4276:	4f 4f       	mov.b	r15,	r15	
    4278:	12 c3       	clrc			
    427a:	4f 10       	rrc.b	r15		
    427c:	12 c3       	clrc			
    427e:	4f 10       	rrc.b	r15		
    4280:	12 c3       	clrc			
    4282:	4f 10       	rrc.b	r15		
    4284:	12 c3       	clrc			
    4286:	4f 10       	rrc.b	r15		
    4288:	4f 4f       	mov.b	r15,	r15	
    428a:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    428e:	4f 4f       	mov.b	r15,	r15	
    4290:	0f 5f       	rla	r15		
    4292:	0f 5f       	rla	r15		
    4294:	0f 5f       	rla	r15		
    4296:	0f 5f       	rla	r15		
    4298:	4f 4f       	mov.b	r15,	r15	
    429a:	4f dd       	bis.b	r13,	r15	
    429c:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
}
    42a0:	31 50 10 00 	add	#16,	r1	;#0x0010
    42a4:	34 41       	pop	r4		
    42a6:	30 41       	ret			

000042a8 <InvKeySetup>:

 void InvKeySetup ( u8 k[], u8 r )
{
    42a8:	04 12       	push	r4		
    42aa:	04 41       	mov	r1,	r4	
    42ac:	24 53       	incd	r4		
    42ae:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    42b2:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    42b6:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    u8 i;
    u8 tmp[10];

    k[2] = k[2] ^ r;
    42ba:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42be:	2f 53       	incd	r15		
    42c0:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    42c4:	2e 53       	incd	r14		
    42c6:	6e 4e       	mov.b	@r14,	r14	
    42c8:	5e e4 fc ff 	xor.b	-4(r4),	r14	;0xfffc(r4)
    42cc:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    k[6] = (sBox[k[6]&0x0f]) | (sBox[k[6]>>4] << 4);
    42d0:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    42d4:	3e 50 06 00 	add	#6,	r14	;#0x0006
    42d8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42dc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    42e0:	6f 4f       	mov.b	@r15,	r15	
    42e2:	4f 4f       	mov.b	r15,	r15	
    42e4:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    42e8:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    42ec:	4d 4f       	mov.b	r15,	r13	
    42ee:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42f2:	3f 50 06 00 	add	#6,	r15	;#0x0006
    42f6:	6f 4f       	mov.b	@r15,	r15	
    42f8:	4f 4f       	mov.b	r15,	r15	
    42fa:	4f 4f       	mov.b	r15,	r15	
    42fc:	12 c3       	clrc			
    42fe:	4f 10       	rrc.b	r15		
    4300:	12 c3       	clrc			
    4302:	4f 10       	rrc.b	r15		
    4304:	12 c3       	clrc			
    4306:	4f 10       	rrc.b	r15		
    4308:	12 c3       	clrc			
    430a:	4f 10       	rrc.b	r15		
    430c:	4f 4f       	mov.b	r15,	r15	
    430e:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    4312:	4f 4f       	mov.b	r15,	r15	
    4314:	0f 5f       	rla	r15		
    4316:	0f 5f       	rla	r15		
    4318:	0f 5f       	rla	r15		
    431a:	0f 5f       	rla	r15		
    431c:	4f 4f       	mov.b	r15,	r15	
    431e:	4f dd       	bis.b	r13,	r15	
    4320:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
    k[7] = (sBox[k[7]&0x0f]) | (sBox[k[7]>>4] << 4);
    4324:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4328:	3e 50 07 00 	add	#7,	r14	;#0x0007
    432c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4330:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4334:	6f 4f       	mov.b	@r15,	r15	
    4336:	4f 4f       	mov.b	r15,	r15	
    4338:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    433c:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    4340:	4d 4f       	mov.b	r15,	r13	
    4342:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4346:	3f 50 07 00 	add	#7,	r15	;#0x0007
    434a:	6f 4f       	mov.b	@r15,	r15	
    434c:	4f 4f       	mov.b	r15,	r15	
    434e:	4f 4f       	mov.b	r15,	r15	
    4350:	12 c3       	clrc			
    4352:	4f 10       	rrc.b	r15		
    4354:	12 c3       	clrc			
    4356:	4f 10       	rrc.b	r15		
    4358:	12 c3       	clrc			
    435a:	4f 10       	rrc.b	r15		
    435c:	12 c3       	clrc			
    435e:	4f 10       	rrc.b	r15		
    4360:	4f 4f       	mov.b	r15,	r15	
    4362:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    4366:	4f 4f       	mov.b	r15,	r15	
    4368:	0f 5f       	rla	r15		
    436a:	0f 5f       	rla	r15		
    436c:	0f 5f       	rla	r15		
    436e:	0f 5f       	rla	r15		
    4370:	4f 4f       	mov.b	r15,	r15	
    4372:	4f dd       	bis.b	r13,	r15	
    4374:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)

    tmp[0] = k[4]; tmp[1] = k[0]; tmp[2] = k[1]; tmp[3] = k[2]; tmp[4] = k[3];
    4378:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    437c:	5f 4f 04 00 	mov.b	4(r15),	r15	;0x0004(r15)
    4380:	c4 4f ef ff 	mov.b	r15,	-17(r4)	;0xffef(r4)
    4384:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4388:	6f 4f       	mov.b	@r15,	r15	
    438a:	c4 4f f0 ff 	mov.b	r15,	-16(r4)	;0xfff0(r4)
    438e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4392:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    4396:	c4 4f f1 ff 	mov.b	r15,	-15(r4)	;0xfff1(r4)
    439a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    439e:	5f 4f 02 00 	mov.b	2(r15),	r15	;0x0002(r15)
    43a2:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    43a6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    43aa:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    43ae:	c4 4f f3 ff 	mov.b	r15,	-13(r4)	;0xfff3(r4)
    tmp[5] = k[9]; tmp[6] = k[5]; tmp[7] = k[6]; tmp[8] = k[7]; tmp[9] = k[8];
    43b2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    43b6:	5f 4f 09 00 	mov.b	9(r15),	r15	;0x0009(r15)
    43ba:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    43be:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    43c2:	5f 4f 05 00 	mov.b	5(r15),	r15	;0x0005(r15)
    43c6:	c4 4f f5 ff 	mov.b	r15,	-11(r4)	;0xfff5(r4)
    43ca:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    43ce:	5f 4f 06 00 	mov.b	6(r15),	r15	;0x0006(r15)
    43d2:	c4 4f f6 ff 	mov.b	r15,	-10(r4)	;0xfff6(r4)
    43d6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    43da:	5f 4f 07 00 	mov.b	7(r15),	r15	;0x0007(r15)
    43de:	c4 4f f7 ff 	mov.b	r15,	-9(r4)	;0xfff7(r4)
    43e2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    43e6:	5f 4f 08 00 	mov.b	8(r15),	r15	;0x0008(r15)
    43ea:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)

    for (i=0 ; i<5 ; i++)
    43ee:	c4 43 ee ff 	mov.b	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    43f2:	28 3c       	jmp	$+82     	;abs 0x4444
    {
        k[i] = tmp[i] ^ tmp[i+5];
    43f4:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    43f8:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    43fc:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    4400:	0d 44       	mov	r4,	r13	
    4402:	3d 50 ef ff 	add	#-17,	r13	;#0xffef
    4406:	0e 5d       	add	r13,	r14	
    4408:	6d 4e       	mov.b	@r14,	r13	
    440a:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    440e:	3e 50 05 00 	add	#5,	r14	;#0x0005
    4412:	0c 44       	mov	r4,	r12	
    4414:	3c 50 ef ff 	add	#-17,	r12	;#0xffef
    4418:	0e 5c       	add	r12,	r14	
    441a:	6e 4e       	mov.b	@r14,	r14	
    441c:	4e ed       	xor.b	r13,	r14	
    441e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
        k[i+5] = tmp[i];
    4422:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4426:	3f 50 05 00 	add	#5,	r15	;#0x0005
    442a:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    442e:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    4432:	0d 44       	mov	r4,	r13	
    4434:	3d 50 ef ff 	add	#-17,	r13	;#0xffef
    4438:	0e 5d       	add	r13,	r14	
    443a:	6e 4e       	mov.b	@r14,	r14	
    443c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    k[7] = (sBox[k[7]&0x0f]) | (sBox[k[7]>>4] << 4);

    tmp[0] = k[4]; tmp[1] = k[0]; tmp[2] = k[1]; tmp[3] = k[2]; tmp[4] = k[3];
    tmp[5] = k[9]; tmp[6] = k[5]; tmp[7] = k[6]; tmp[8] = k[7]; tmp[9] = k[8];

    for (i=0 ; i<5 ; i++)
    4440:	d4 53 ee ff 	inc.b	-18(r4)	;0xffee(r4)
    4444:	f4 90 05 00 	cmp.b	#5,	-18(r4)	;#0x0005, 0xffee(r4)
    4448:	ee ff 
    444a:	d4 2b       	jnc	$-86     	;abs 0x43f4
    {
        k[i] = tmp[i] ^ tmp[i+5];
        k[i+5] = tmp[i];
    }
}
    444c:	31 50 10 00 	add	#16,	r1	;#0x0010
    4450:	34 41       	pop	r4		
    4452:	30 41       	ret			

00004454 <Encrypt>:


 void Encrypt ( u8 text[], u8 crypt[], u8 key[] )
{
    4454:	04 12       	push	r4		
    4456:	04 41       	mov	r1,	r4	
    4458:	24 53       	incd	r4		
    445a:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    445e:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    4462:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    4466:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
    u8 i;
    for (i=0 ; i<8 ; i++)
    446a:	c4 43 ee ff 	mov.b	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    446e:	0d 3c       	jmp	$+28     	;abs 0x448a
    {
        crypt[i] = text[i];
    4470:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4474:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4478:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    447c:	1e 54 f8 ff 	add	-8(r4),	r14	;0xfff8(r4)
    4480:	6e 4e       	mov.b	@r14,	r14	
    4482:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)


 void Encrypt ( u8 text[], u8 crypt[], u8 key[] )
{
    u8 i;
    for (i=0 ; i<8 ; i++)
    4486:	d4 53 ee ff 	inc.b	-18(r4)	;0xffee(r4)
    448a:	f4 92 ee ff 	cmp.b	#8,	-18(r4)	;r2 As==11, 0xffee(r4)
    448e:	f0 2b       	jnc	$-30     	;abs 0x4470
        crypt[i] = text[i];
    }

    u8 t[8];
    u8 r;
    for (r=1 ; r<17 ; r++)
    4490:	d4 43 ef ff 	mov.b	#1,	-17(r4)	;r3 As==01, 0xffef(r4)
    4494:	30 40 9c 47 	br	#0x479c	
    {

        for (i=0 ; i<8 ; i++)
    4498:	c4 43 ee ff 	mov.b	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    449c:	13 3c       	jmp	$+40     	;abs 0x44c4
        {
            crypt[i] = crypt[i] ^ key[i];
    449e:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    44a2:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    44a6:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    44aa:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    44ae:	6d 4e       	mov.b	@r14,	r13	
    44b0:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    44b4:	1e 54 fc ff 	add	-4(r4),	r14	;0xfffc(r4)
    44b8:	6e 4e       	mov.b	@r14,	r14	
    44ba:	4e ed       	xor.b	r13,	r14	
    44bc:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    u8 t[8];
    u8 r;
    for (r=1 ; r<17 ; r++)
    {

        for (i=0 ; i<8 ; i++)
    44c0:	d4 53 ee ff 	inc.b	-18(r4)	;0xffee(r4)
    44c4:	f4 92 ee ff 	cmp.b	#8,	-18(r4)	;r2 As==11, 0xffee(r4)
    44c8:	ea 2b       	jnc	$-42     	;abs 0x449e
        {
            crypt[i] = crypt[i] ^ key[i];
        }

        for (i=0 ; i<8 ; i++)
    44ca:	c4 43 ee ff 	mov.b	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    44ce:	2d 3c       	jmp	$+92     	;abs 0x452a
        {
            crypt[i] = (sBox[crypt[i]&0xf]) | (sBox[crypt[i]>>4] << 4);
    44d0:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    44d4:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    44d8:	0e 5f       	add	r15,	r14	
    44da:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    44de:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    44e2:	6f 4f       	mov.b	@r15,	r15	
    44e4:	4f 4f       	mov.b	r15,	r15	
    44e6:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    44ea:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    44ee:	4d 4f       	mov.b	r15,	r13	
    44f0:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    44f4:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    44f8:	6f 4f       	mov.b	@r15,	r15	
    44fa:	4f 4f       	mov.b	r15,	r15	
    44fc:	4f 4f       	mov.b	r15,	r15	
    44fe:	12 c3       	clrc			
    4500:	4f 10       	rrc.b	r15		
    4502:	12 c3       	clrc			
    4504:	4f 10       	rrc.b	r15		
    4506:	12 c3       	clrc			
    4508:	4f 10       	rrc.b	r15		
    450a:	12 c3       	clrc			
    450c:	4f 10       	rrc.b	r15		
    450e:	4f 4f       	mov.b	r15,	r15	
    4510:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    4514:	4f 4f       	mov.b	r15,	r15	
    4516:	0f 5f       	rla	r15		
    4518:	0f 5f       	rla	r15		
    451a:	0f 5f       	rla	r15		
    451c:	0f 5f       	rla	r15		
    451e:	4f 4f       	mov.b	r15,	r15	
    4520:	4f dd       	bis.b	r13,	r15	
    4522:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
        for (i=0 ; i<8 ; i++)
        {
            crypt[i] = crypt[i] ^ key[i];
        }

        for (i=0 ; i<8 ; i++)
    4526:	d4 53 ee ff 	inc.b	-18(r4)	;0xffee(r4)
    452a:	f4 92 ee ff 	cmp.b	#8,	-18(r4)	;r2 As==11, 0xffee(r4)
    452e:	d0 2b       	jnc	$-94     	;abs 0x44d0
        {
            crypt[i] = (sBox[crypt[i]&0xf]) | (sBox[crypt[i]>>4] << 4);
        }

        for (i=0 ; i<8 ; i++)
    4530:	c4 43 ee ff 	mov.b	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    4534:	14 3c       	jmp	$+42     	;abs 0x455e
        {
            t[(i+6)&0x7] = crypt[i];
    4536:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    453a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    453e:	0d 4f       	mov	r15,	r13	
    4540:	3d f0 07 00 	and	#7,	r13	;#0x0007
    4544:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4548:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    454c:	6e 4f       	mov.b	@r15,	r14	
    454e:	0f 44       	mov	r4,	r15	
    4550:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    4554:	0f 5d       	add	r13,	r15	
    4556:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
        for (i=0 ; i<8 ; i++)
        {
            crypt[i] = (sBox[crypt[i]&0xf]) | (sBox[crypt[i]>>4] << 4);
        }

        for (i=0 ; i<8 ; i++)
    455a:	d4 53 ee ff 	inc.b	-18(r4)	;0xffee(r4)
    455e:	f4 92 ee ff 	cmp.b	#8,	-18(r4)	;r2 As==11, 0xffee(r4)
    4562:	e9 2b       	jnc	$-44     	;abs 0x4536
        {
            t[(i+6)&0x7] = crypt[i];

        }

        crypt[0] = L(t[0] ^ t[1]) ^ t[1] ^ t[2] ^ t[3];
    4564:	5e 44 f0 ff 	mov.b	-16(r4),r14	;0xfff0(r4)
    4568:	5f 44 f1 ff 	mov.b	-15(r4),r15	;0xfff1(r4)
    456c:	4f ee       	xor.b	r14,	r15	
    456e:	4f 4f       	mov.b	r15,	r15	
    4570:	0f 5f       	rla	r15		
    4572:	4e 4f       	mov.b	r15,	r14	
    4574:	5d 44 f0 ff 	mov.b	-16(r4),r13	;0xfff0(r4)
    4578:	5f 44 f1 ff 	mov.b	-15(r4),r15	;0xfff1(r4)
    457c:	4f ed       	xor.b	r13,	r15	
    457e:	4f 4f       	mov.b	r15,	r15	
    4580:	8f 11       	sxt	r15		
    4582:	8f 10       	swpb	r15		
    4584:	4f 4f       	mov.b	r15,	r15	
    4586:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    458a:	4e ef       	xor.b	r15,	r14	
    458c:	5f 44 f1 ff 	mov.b	-15(r4),r15	;0xfff1(r4)
    4590:	4e ef       	xor.b	r15,	r14	
    4592:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    4596:	4e ef       	xor.b	r15,	r14	
    4598:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    459c:	4f ee       	xor.b	r14,	r15	
    459e:	4e 4f       	mov.b	r15,	r14	
    45a0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    45a4:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
        crypt[1] = L(t[1] ^ t[2]) ^ t[0] ^ t[2] ^ t[3];
    45a8:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    45ac:	1e 53       	inc	r14		
    45ae:	5d 44 f1 ff 	mov.b	-15(r4),r13	;0xfff1(r4)
    45b2:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    45b6:	4f ed       	xor.b	r13,	r15	
    45b8:	4f 4f       	mov.b	r15,	r15	
    45ba:	0f 5f       	rla	r15		
    45bc:	4d 4f       	mov.b	r15,	r13	
    45be:	5c 44 f1 ff 	mov.b	-15(r4),r12	;0xfff1(r4)
    45c2:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    45c6:	4f ec       	xor.b	r12,	r15	
    45c8:	4f 4f       	mov.b	r15,	r15	
    45ca:	8f 11       	sxt	r15		
    45cc:	8f 10       	swpb	r15		
    45ce:	4f 4f       	mov.b	r15,	r15	
    45d0:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    45d4:	4d ef       	xor.b	r15,	r13	
    45d6:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    45da:	4d ef       	xor.b	r15,	r13	
    45dc:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    45e0:	4d ef       	xor.b	r15,	r13	
    45e2:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    45e6:	4f ed       	xor.b	r13,	r15	
    45e8:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
        crypt[2] = L(t[2] ^ t[3]) ^ t[0] ^ t[1] ^ t[3];
    45ec:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    45f0:	2e 53       	incd	r14		
    45f2:	5d 44 f2 ff 	mov.b	-14(r4),r13	;0xfff2(r4)
    45f6:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    45fa:	4f ed       	xor.b	r13,	r15	
    45fc:	4f 4f       	mov.b	r15,	r15	
    45fe:	0f 5f       	rla	r15		
    4600:	4d 4f       	mov.b	r15,	r13	
    4602:	5c 44 f2 ff 	mov.b	-14(r4),r12	;0xfff2(r4)
    4606:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    460a:	4f ec       	xor.b	r12,	r15	
    460c:	4f 4f       	mov.b	r15,	r15	
    460e:	8f 11       	sxt	r15		
    4610:	8f 10       	swpb	r15		
    4612:	4f 4f       	mov.b	r15,	r15	
    4614:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4618:	4d ef       	xor.b	r15,	r13	
    461a:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    461e:	4d ef       	xor.b	r15,	r13	
    4620:	5f 44 f1 ff 	mov.b	-15(r4),r15	;0xfff1(r4)
    4624:	4d ef       	xor.b	r15,	r13	
    4626:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    462a:	4f ed       	xor.b	r13,	r15	
    462c:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
        crypt[3] = L(t[3] ^ t[0]) ^ t[0] ^ t[1] ^ t[2];
    4630:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4634:	3e 50 03 00 	add	#3,	r14	;#0x0003
    4638:	5d 44 f3 ff 	mov.b	-13(r4),r13	;0xfff3(r4)
    463c:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    4640:	4f ed       	xor.b	r13,	r15	
    4642:	4f 4f       	mov.b	r15,	r15	
    4644:	0f 5f       	rla	r15		
    4646:	4d 4f       	mov.b	r15,	r13	
    4648:	5c 44 f3 ff 	mov.b	-13(r4),r12	;0xfff3(r4)
    464c:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    4650:	4f ec       	xor.b	r12,	r15	
    4652:	4f 4f       	mov.b	r15,	r15	
    4654:	8f 11       	sxt	r15		
    4656:	8f 10       	swpb	r15		
    4658:	4f 4f       	mov.b	r15,	r15	
    465a:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    465e:	4d ef       	xor.b	r15,	r13	
    4660:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    4664:	4d ef       	xor.b	r15,	r13	
    4666:	5f 44 f1 ff 	mov.b	-15(r4),r15	;0xfff1(r4)
    466a:	4d ef       	xor.b	r15,	r13	
    466c:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    4670:	4f ed       	xor.b	r13,	r15	
    4672:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
        crypt[4] = L(t[4] ^ t[5]) ^ t[5] ^ t[6] ^ t[7];
    4676:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    467a:	2e 52       	add	#4,	r14	;r2 As==10
    467c:	5d 44 f4 ff 	mov.b	-12(r4),r13	;0xfff4(r4)
    4680:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    4684:	4f ed       	xor.b	r13,	r15	
    4686:	4f 4f       	mov.b	r15,	r15	
    4688:	0f 5f       	rla	r15		
    468a:	4d 4f       	mov.b	r15,	r13	
    468c:	5c 44 f4 ff 	mov.b	-12(r4),r12	;0xfff4(r4)
    4690:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    4694:	4f ec       	xor.b	r12,	r15	
    4696:	4f 4f       	mov.b	r15,	r15	
    4698:	8f 11       	sxt	r15		
    469a:	8f 10       	swpb	r15		
    469c:	4f 4f       	mov.b	r15,	r15	
    469e:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    46a2:	4d ef       	xor.b	r15,	r13	
    46a4:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    46a8:	4d ef       	xor.b	r15,	r13	
    46aa:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    46ae:	4d ef       	xor.b	r15,	r13	
    46b0:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    46b4:	4f ed       	xor.b	r13,	r15	
    46b6:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
        crypt[5] = L(t[5] ^ t[6]) ^ t[4] ^ t[6] ^ t[7];
    46ba:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    46be:	3e 50 05 00 	add	#5,	r14	;#0x0005
    46c2:	5d 44 f5 ff 	mov.b	-11(r4),r13	;0xfff5(r4)
    46c6:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    46ca:	4f ed       	xor.b	r13,	r15	
    46cc:	4f 4f       	mov.b	r15,	r15	
    46ce:	0f 5f       	rla	r15		
    46d0:	4d 4f       	mov.b	r15,	r13	
    46d2:	5c 44 f5 ff 	mov.b	-11(r4),r12	;0xfff5(r4)
    46d6:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    46da:	4f ec       	xor.b	r12,	r15	
    46dc:	4f 4f       	mov.b	r15,	r15	
    46de:	8f 11       	sxt	r15		
    46e0:	8f 10       	swpb	r15		
    46e2:	4f 4f       	mov.b	r15,	r15	
    46e4:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    46e8:	4d ef       	xor.b	r15,	r13	
    46ea:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    46ee:	4d ef       	xor.b	r15,	r13	
    46f0:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    46f4:	4d ef       	xor.b	r15,	r13	
    46f6:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    46fa:	4f ed       	xor.b	r13,	r15	
    46fc:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
        crypt[6] = L(t[6] ^ t[7]) ^ t[4] ^ t[5] ^ t[7];
    4700:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4704:	3e 50 06 00 	add	#6,	r14	;#0x0006
    4708:	5d 44 f6 ff 	mov.b	-10(r4),r13	;0xfff6(r4)
    470c:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    4710:	4f ed       	xor.b	r13,	r15	
    4712:	4f 4f       	mov.b	r15,	r15	
    4714:	0f 5f       	rla	r15		
    4716:	4d 4f       	mov.b	r15,	r13	
    4718:	5c 44 f6 ff 	mov.b	-10(r4),r12	;0xfff6(r4)
    471c:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    4720:	4f ec       	xor.b	r12,	r15	
    4722:	4f 4f       	mov.b	r15,	r15	
    4724:	8f 11       	sxt	r15		
    4726:	8f 10       	swpb	r15		
    4728:	4f 4f       	mov.b	r15,	r15	
    472a:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    472e:	4d ef       	xor.b	r15,	r13	
    4730:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    4734:	4d ef       	xor.b	r15,	r13	
    4736:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    473a:	4d ef       	xor.b	r15,	r13	
    473c:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    4740:	4f ed       	xor.b	r13,	r15	
    4742:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
        crypt[7] = L(t[7] ^ t[4]) ^ t[4] ^ t[5] ^ t[6];
    4746:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    474a:	3e 50 07 00 	add	#7,	r14	;#0x0007
    474e:	5d 44 f7 ff 	mov.b	-9(r4),	r13	;0xfff7(r4)
    4752:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    4756:	4f ed       	xor.b	r13,	r15	
    4758:	4f 4f       	mov.b	r15,	r15	
    475a:	0f 5f       	rla	r15		
    475c:	4d 4f       	mov.b	r15,	r13	
    475e:	5c 44 f7 ff 	mov.b	-9(r4),	r12	;0xfff7(r4)
    4762:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    4766:	4f ec       	xor.b	r12,	r15	
    4768:	4f 4f       	mov.b	r15,	r15	
    476a:	8f 11       	sxt	r15		
    476c:	8f 10       	swpb	r15		
    476e:	4f 4f       	mov.b	r15,	r15	
    4770:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4774:	4d ef       	xor.b	r15,	r13	
    4776:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    477a:	4d ef       	xor.b	r15,	r13	
    477c:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    4780:	4d ef       	xor.b	r15,	r13	
    4782:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    4786:	4f ed       	xor.b	r13,	r15	
    4788:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)

        KeySetup(key,r);
    478c:	5e 44 ef ff 	mov.b	-17(r4),r14	;0xffef(r4)
    4790:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4794:	b0 12 f8 40 	call	#0x40f8	
        crypt[i] = text[i];
    }

    u8 t[8];
    u8 r;
    for (r=1 ; r<17 ; r++)
    4798:	d4 53 ef ff 	inc.b	-17(r4)	;0xffef(r4)
    479c:	f4 90 11 00 	cmp.b	#17,	-17(r4)	;#0x0011, 0xffef(r4)
    47a0:	ef ff 
    47a2:	02 2c       	jc	$+6      	;abs 0x47a8
    47a4:	30 40 98 44 	br	#0x4498	
        crypt[7] = L(t[7] ^ t[4]) ^ t[4] ^ t[5] ^ t[6];

        KeySetup(key,r);
    }

    for (i=0 ; i<8 ; i++)
    47a8:	c4 43 ee ff 	mov.b	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    47ac:	13 3c       	jmp	$+40     	;abs 0x47d4
    {
        crypt[i] = crypt[i] ^ key[i];
    47ae:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    47b2:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    47b6:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    47ba:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    47be:	6d 4e       	mov.b	@r14,	r13	
    47c0:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    47c4:	1e 54 fc ff 	add	-4(r4),	r14	;0xfffc(r4)
    47c8:	6e 4e       	mov.b	@r14,	r14	
    47ca:	4e ed       	xor.b	r13,	r14	
    47cc:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
        crypt[7] = L(t[7] ^ t[4]) ^ t[4] ^ t[5] ^ t[6];

        KeySetup(key,r);
    }

    for (i=0 ; i<8 ; i++)
    47d0:	d4 53 ee ff 	inc.b	-18(r4)	;0xffee(r4)
    47d4:	f4 92 ee ff 	cmp.b	#8,	-18(r4)	;r2 As==11, 0xffee(r4)
    47d8:	ea 2b       	jnc	$-42     	;abs 0x47ae
    {
        crypt[i] = crypt[i] ^ key[i];
    }

}
    47da:	31 50 10 00 	add	#16,	r1	;#0x0010
    47de:	34 41       	pop	r4		
    47e0:	30 41       	ret			

000047e2 <Decrypt>:


 void Decrypt ( u8 text[], u8 crypt[], u8 key[] )
{
    47e2:	04 12       	push	r4		
    47e4:	04 41       	mov	r1,	r4	
    47e6:	24 53       	incd	r4		
    47e8:	31 50 ee ff 	add	#-18,	r1	;#0xffee
    47ec:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    47f0:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    47f4:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
    u8 i;
    for (i=0 ; i<8 ; i++)
    47f8:	c4 43 ec ff 	mov.b	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    47fc:	0d 3c       	jmp	$+28     	;abs 0x4818
    {
        crypt[i] = text[i];
    47fe:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    4802:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4806:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    480a:	1e 54 f8 ff 	add	-8(r4),	r14	;0xfff8(r4)
    480e:	6e 4e       	mov.b	@r14,	r14	
    4810:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)


 void Decrypt ( u8 text[], u8 crypt[], u8 key[] )
{
    u8 i;
    for (i=0 ; i<8 ; i++)
    4814:	d4 53 ec ff 	inc.b	-20(r4)	;0xffec(r4)
    4818:	f4 92 ec ff 	cmp.b	#8,	-20(r4)	;r2 As==11, 0xffec(r4)
    481c:	f0 2b       	jnc	$-30     	;abs 0x47fe
    {
        crypt[i] = text[i];
    }

    for (i=0 ; i<8 ; i++)
    481e:	c4 43 ec ff 	mov.b	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    4822:	13 3c       	jmp	$+40     	;abs 0x484a
    {
        crypt[i] = crypt[i] ^ key[i];
    4824:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    4828:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    482c:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    4830:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    4834:	6d 4e       	mov.b	@r14,	r13	
    4836:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    483a:	1e 54 fc ff 	add	-4(r4),	r14	;0xfffc(r4)
    483e:	6e 4e       	mov.b	@r14,	r14	
    4840:	4e ed       	xor.b	r13,	r14	
    4842:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    for (i=0 ; i<8 ; i++)
    {
        crypt[i] = text[i];
    }

    for (i=0 ; i<8 ; i++)
    4846:	d4 53 ec ff 	inc.b	-20(r4)	;0xffec(r4)
    484a:	f4 92 ec ff 	cmp.b	#8,	-20(r4)	;r2 As==11, 0xffec(r4)
    484e:	ea 2b       	jnc	$-42     	;abs 0x4824
        crypt[i] = crypt[i] ^ key[i];
    }

    u8 t[8];
    u8 r;
    for (r=16 ; r>0 ; r--)
    4850:	f4 40 10 00 	mov.b	#16,	-19(r4)	;#0x0010, 0xffed(r4)
    4854:	ed ff 
    4856:	30 40 4c 54 	br	#0x544c	
    {
        u8 var1 = crypt[3]^crypt[1]^crypt[2]^crypt[0];
    485a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    485e:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4862:	6e 4f       	mov.b	@r15,	r14	
    4864:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4868:	1f 53       	inc	r15		
    486a:	6f 4f       	mov.b	@r15,	r15	
    486c:	4e ef       	xor.b	r15,	r14	
    486e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4872:	2f 53       	incd	r15		
    4874:	6f 4f       	mov.b	@r15,	r15	
    4876:	4e ef       	xor.b	r15,	r14	
    4878:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    487c:	6f 4f       	mov.b	@r15,	r15	
    487e:	4d 4e       	mov.b	r14,	r13	
    4880:	4d ef       	xor.b	r15,	r13	
    4882:	c4 4d ee ff 	mov.b	r13,	-18(r4)	;0xffee(r4)
        u8 var2 = crypt[7]^crypt[6]^crypt[5]^crypt[4];
    4886:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    488a:	3f 50 07 00 	add	#7,	r15	;#0x0007
    488e:	6e 4f       	mov.b	@r15,	r14	
    4890:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4894:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4898:	6f 4f       	mov.b	@r15,	r15	
    489a:	4e ef       	xor.b	r15,	r14	
    489c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48a0:	3f 50 05 00 	add	#5,	r15	;#0x0005
    48a4:	6f 4f       	mov.b	@r15,	r15	
    48a6:	4e ef       	xor.b	r15,	r14	
    48a8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48ac:	2f 52       	add	#4,	r15	;r2 As==10
    48ae:	6f 4f       	mov.b	@r15,	r15	
    48b0:	4d 4e       	mov.b	r14,	r13	
    48b2:	4d ef       	xor.b	r15,	r13	
    48b4:	c4 4d ef ff 	mov.b	r13,	-17(r4)	;0xffef(r4)

        t[0] = L(L(L(var1)^crypt[2]^crypt[0])^crypt[1]^crypt[0])^crypt[3]^crypt[1]^crypt[2];
    48b8:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    48bc:	0e 4f       	mov	r15,	r14	
    48be:	0e 5e       	rla	r14		
    48c0:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    48c4:	4f 4f       	mov.b	r15,	r15	
    48c6:	8f 11       	sxt	r15		
    48c8:	8f 10       	swpb	r15		
    48ca:	4f 4f       	mov.b	r15,	r15	
    48cc:	4f 4f       	mov.b	r15,	r15	
    48ce:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    48d2:	0e ef       	xor	r15,	r14	
    48d4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48d8:	2f 53       	incd	r15		
    48da:	6f 4f       	mov.b	@r15,	r15	
    48dc:	4f 4f       	mov.b	r15,	r15	
    48de:	0e ef       	xor	r15,	r14	
    48e0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48e4:	6f 4f       	mov.b	@r15,	r15	
    48e6:	4f 4f       	mov.b	r15,	r15	
    48e8:	0f ee       	xor	r14,	r15	
    48ea:	0e 4f       	mov	r15,	r14	
    48ec:	0e 5e       	rla	r14		
    48ee:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    48f2:	0f 5f       	rla	r15		
    48f4:	4d 4f       	mov.b	r15,	r13	
    48f6:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    48fa:	4f 4f       	mov.b	r15,	r15	
    48fc:	8f 11       	sxt	r15		
    48fe:	8f 10       	swpb	r15		
    4900:	4f 4f       	mov.b	r15,	r15	
    4902:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4906:	4d ef       	xor.b	r15,	r13	
    4908:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    490c:	2f 53       	incd	r15		
    490e:	6f 4f       	mov.b	@r15,	r15	
    4910:	4d ef       	xor.b	r15,	r13	
    4912:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4916:	6f 4f       	mov.b	@r15,	r15	
    4918:	4f ed       	xor.b	r13,	r15	
    491a:	4f 4f       	mov.b	r15,	r15	
    491c:	8f 11       	sxt	r15		
    491e:	8f 10       	swpb	r15		
    4920:	4f 4f       	mov.b	r15,	r15	
    4922:	4f 4f       	mov.b	r15,	r15	
    4924:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4928:	0e ef       	xor	r15,	r14	
    492a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    492e:	1f 53       	inc	r15		
    4930:	6f 4f       	mov.b	@r15,	r15	
    4932:	4f 4f       	mov.b	r15,	r15	
    4934:	0e ef       	xor	r15,	r14	
    4936:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    493a:	6f 4f       	mov.b	@r15,	r15	
    493c:	4f 4f       	mov.b	r15,	r15	
    493e:	0f ee       	xor	r14,	r15	
    4940:	0f 5f       	rla	r15		
    4942:	4d 4f       	mov.b	r15,	r13	
    4944:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4948:	0e 4f       	mov	r15,	r14	
    494a:	0e 5e       	rla	r14		
    494c:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4950:	4f 4f       	mov.b	r15,	r15	
    4952:	8f 11       	sxt	r15		
    4954:	8f 10       	swpb	r15		
    4956:	4f 4f       	mov.b	r15,	r15	
    4958:	4f 4f       	mov.b	r15,	r15	
    495a:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    495e:	0e ef       	xor	r15,	r14	
    4960:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4964:	2f 53       	incd	r15		
    4966:	6f 4f       	mov.b	@r15,	r15	
    4968:	4f 4f       	mov.b	r15,	r15	
    496a:	0e ef       	xor	r15,	r14	
    496c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4970:	6f 4f       	mov.b	@r15,	r15	
    4972:	4f 4f       	mov.b	r15,	r15	
    4974:	0f ee       	xor	r14,	r15	
    4976:	0f 5f       	rla	r15		
    4978:	4e 4f       	mov.b	r15,	r14	
    497a:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    497e:	0f 5f       	rla	r15		
    4980:	4c 4f       	mov.b	r15,	r12	
    4982:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4986:	4f 4f       	mov.b	r15,	r15	
    4988:	8f 11       	sxt	r15		
    498a:	8f 10       	swpb	r15		
    498c:	4f 4f       	mov.b	r15,	r15	
    498e:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4992:	4c ef       	xor.b	r15,	r12	
    4994:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4998:	2f 53       	incd	r15		
    499a:	6f 4f       	mov.b	@r15,	r15	
    499c:	4c ef       	xor.b	r15,	r12	
    499e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    49a2:	6f 4f       	mov.b	@r15,	r15	
    49a4:	4f ec       	xor.b	r12,	r15	
    49a6:	4f 4f       	mov.b	r15,	r15	
    49a8:	8f 11       	sxt	r15		
    49aa:	8f 10       	swpb	r15		
    49ac:	4f 4f       	mov.b	r15,	r15	
    49ae:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    49b2:	4e ef       	xor.b	r15,	r14	
    49b4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    49b8:	1f 53       	inc	r15		
    49ba:	6f 4f       	mov.b	@r15,	r15	
    49bc:	4e ef       	xor.b	r15,	r14	
    49be:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    49c2:	6f 4f       	mov.b	@r15,	r15	
    49c4:	4f ee       	xor.b	r14,	r15	
    49c6:	4f 4f       	mov.b	r15,	r15	
    49c8:	8f 11       	sxt	r15		
    49ca:	8f 10       	swpb	r15		
    49cc:	4f 4f       	mov.b	r15,	r15	
    49ce:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    49d2:	4e 4d       	mov.b	r13,	r14	
    49d4:	4e ef       	xor.b	r15,	r14	
    49d6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    49da:	3f 50 03 00 	add	#3,	r15	;#0x0003
    49de:	6f 4f       	mov.b	@r15,	r15	
    49e0:	4e ef       	xor.b	r15,	r14	
    49e2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    49e6:	1f 53       	inc	r15		
    49e8:	6f 4f       	mov.b	@r15,	r15	
    49ea:	4e ef       	xor.b	r15,	r14	
    49ec:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    49f0:	2f 53       	incd	r15		
    49f2:	6f 4f       	mov.b	@r15,	r15	
    49f4:	4f ee       	xor.b	r14,	r15	
    49f6:	c4 4f f0 ff 	mov.b	r15,	-16(r4)	;0xfff0(r4)
        t[1] = L(L(L(var1)^crypt[3]^crypt[1])^crypt[2]^crypt[1])^crypt[0]^crypt[2]^crypt[3];
    49fa:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    49fe:	0e 4f       	mov	r15,	r14	
    4a00:	0e 5e       	rla	r14		
    4a02:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4a06:	4f 4f       	mov.b	r15,	r15	
    4a08:	8f 11       	sxt	r15		
    4a0a:	8f 10       	swpb	r15		
    4a0c:	4f 4f       	mov.b	r15,	r15	
    4a0e:	4f 4f       	mov.b	r15,	r15	
    4a10:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4a14:	0e ef       	xor	r15,	r14	
    4a16:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4a1a:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4a1e:	6f 4f       	mov.b	@r15,	r15	
    4a20:	4f 4f       	mov.b	r15,	r15	
    4a22:	0e ef       	xor	r15,	r14	
    4a24:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4a28:	1f 53       	inc	r15		
    4a2a:	6f 4f       	mov.b	@r15,	r15	
    4a2c:	4f 4f       	mov.b	r15,	r15	
    4a2e:	0f ee       	xor	r14,	r15	
    4a30:	0e 4f       	mov	r15,	r14	
    4a32:	0e 5e       	rla	r14		
    4a34:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4a38:	0f 5f       	rla	r15		
    4a3a:	4d 4f       	mov.b	r15,	r13	
    4a3c:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4a40:	4f 4f       	mov.b	r15,	r15	
    4a42:	8f 11       	sxt	r15		
    4a44:	8f 10       	swpb	r15		
    4a46:	4f 4f       	mov.b	r15,	r15	
    4a48:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4a4c:	4d ef       	xor.b	r15,	r13	
    4a4e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4a52:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4a56:	6f 4f       	mov.b	@r15,	r15	
    4a58:	4d ef       	xor.b	r15,	r13	
    4a5a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4a5e:	1f 53       	inc	r15		
    4a60:	6f 4f       	mov.b	@r15,	r15	
    4a62:	4f ed       	xor.b	r13,	r15	
    4a64:	4f 4f       	mov.b	r15,	r15	
    4a66:	8f 11       	sxt	r15		
    4a68:	8f 10       	swpb	r15		
    4a6a:	4f 4f       	mov.b	r15,	r15	
    4a6c:	4f 4f       	mov.b	r15,	r15	
    4a6e:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4a72:	0e ef       	xor	r15,	r14	
    4a74:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4a78:	2f 53       	incd	r15		
    4a7a:	6f 4f       	mov.b	@r15,	r15	
    4a7c:	4f 4f       	mov.b	r15,	r15	
    4a7e:	0e ef       	xor	r15,	r14	
    4a80:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4a84:	1f 53       	inc	r15		
    4a86:	6f 4f       	mov.b	@r15,	r15	
    4a88:	4f 4f       	mov.b	r15,	r15	
    4a8a:	0f ee       	xor	r14,	r15	
    4a8c:	0f 5f       	rla	r15		
    4a8e:	4d 4f       	mov.b	r15,	r13	
    4a90:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4a94:	0e 4f       	mov	r15,	r14	
    4a96:	0e 5e       	rla	r14		
    4a98:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4a9c:	4f 4f       	mov.b	r15,	r15	
    4a9e:	8f 11       	sxt	r15		
    4aa0:	8f 10       	swpb	r15		
    4aa2:	4f 4f       	mov.b	r15,	r15	
    4aa4:	4f 4f       	mov.b	r15,	r15	
    4aa6:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4aaa:	0e ef       	xor	r15,	r14	
    4aac:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4ab0:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4ab4:	6f 4f       	mov.b	@r15,	r15	
    4ab6:	4f 4f       	mov.b	r15,	r15	
    4ab8:	0e ef       	xor	r15,	r14	
    4aba:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4abe:	1f 53       	inc	r15		
    4ac0:	6f 4f       	mov.b	@r15,	r15	
    4ac2:	4f 4f       	mov.b	r15,	r15	
    4ac4:	0f ee       	xor	r14,	r15	
    4ac6:	0f 5f       	rla	r15		
    4ac8:	4e 4f       	mov.b	r15,	r14	
    4aca:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4ace:	0f 5f       	rla	r15		
    4ad0:	4c 4f       	mov.b	r15,	r12	
    4ad2:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4ad6:	4f 4f       	mov.b	r15,	r15	
    4ad8:	8f 11       	sxt	r15		
    4ada:	8f 10       	swpb	r15		
    4adc:	4f 4f       	mov.b	r15,	r15	
    4ade:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4ae2:	4c ef       	xor.b	r15,	r12	
    4ae4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4ae8:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4aec:	6f 4f       	mov.b	@r15,	r15	
    4aee:	4c ef       	xor.b	r15,	r12	
    4af0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4af4:	1f 53       	inc	r15		
    4af6:	6f 4f       	mov.b	@r15,	r15	
    4af8:	4f ec       	xor.b	r12,	r15	
    4afa:	4f 4f       	mov.b	r15,	r15	
    4afc:	8f 11       	sxt	r15		
    4afe:	8f 10       	swpb	r15		
    4b00:	4f 4f       	mov.b	r15,	r15	
    4b02:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4b06:	4e ef       	xor.b	r15,	r14	
    4b08:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b0c:	2f 53       	incd	r15		
    4b0e:	6f 4f       	mov.b	@r15,	r15	
    4b10:	4e ef       	xor.b	r15,	r14	
    4b12:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b16:	1f 53       	inc	r15		
    4b18:	6f 4f       	mov.b	@r15,	r15	
    4b1a:	4f ee       	xor.b	r14,	r15	
    4b1c:	4f 4f       	mov.b	r15,	r15	
    4b1e:	8f 11       	sxt	r15		
    4b20:	8f 10       	swpb	r15		
    4b22:	4f 4f       	mov.b	r15,	r15	
    4b24:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4b28:	4e 4d       	mov.b	r13,	r14	
    4b2a:	4e ef       	xor.b	r15,	r14	
    4b2c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b30:	6f 4f       	mov.b	@r15,	r15	
    4b32:	4e ef       	xor.b	r15,	r14	
    4b34:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b38:	2f 53       	incd	r15		
    4b3a:	6f 4f       	mov.b	@r15,	r15	
    4b3c:	4e ef       	xor.b	r15,	r14	
    4b3e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b42:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4b46:	6f 4f       	mov.b	@r15,	r15	
    4b48:	4f ee       	xor.b	r14,	r15	
    4b4a:	c4 4f f1 ff 	mov.b	r15,	-15(r4)	;0xfff1(r4)
        t[2] = L(L(L(var1)^crypt[0]^crypt[2])^crypt[3]^crypt[2])^crypt[1]^crypt[3]^crypt[0];
    4b4e:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4b52:	0e 4f       	mov	r15,	r14	
    4b54:	0e 5e       	rla	r14		
    4b56:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4b5a:	4f 4f       	mov.b	r15,	r15	
    4b5c:	8f 11       	sxt	r15		
    4b5e:	8f 10       	swpb	r15		
    4b60:	4f 4f       	mov.b	r15,	r15	
    4b62:	4f 4f       	mov.b	r15,	r15	
    4b64:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4b68:	0e ef       	xor	r15,	r14	
    4b6a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b6e:	6f 4f       	mov.b	@r15,	r15	
    4b70:	4f 4f       	mov.b	r15,	r15	
    4b72:	0e ef       	xor	r15,	r14	
    4b74:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b78:	2f 53       	incd	r15		
    4b7a:	6f 4f       	mov.b	@r15,	r15	
    4b7c:	4f 4f       	mov.b	r15,	r15	
    4b7e:	0f ee       	xor	r14,	r15	
    4b80:	0e 4f       	mov	r15,	r14	
    4b82:	0e 5e       	rla	r14		
    4b84:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4b88:	0f 5f       	rla	r15		
    4b8a:	4d 4f       	mov.b	r15,	r13	
    4b8c:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4b90:	4f 4f       	mov.b	r15,	r15	
    4b92:	8f 11       	sxt	r15		
    4b94:	8f 10       	swpb	r15		
    4b96:	4f 4f       	mov.b	r15,	r15	
    4b98:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4b9c:	4d ef       	xor.b	r15,	r13	
    4b9e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4ba2:	6f 4f       	mov.b	@r15,	r15	
    4ba4:	4d ef       	xor.b	r15,	r13	
    4ba6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4baa:	2f 53       	incd	r15		
    4bac:	6f 4f       	mov.b	@r15,	r15	
    4bae:	4f ed       	xor.b	r13,	r15	
    4bb0:	4f 4f       	mov.b	r15,	r15	
    4bb2:	8f 11       	sxt	r15		
    4bb4:	8f 10       	swpb	r15		
    4bb6:	4f 4f       	mov.b	r15,	r15	
    4bb8:	4f 4f       	mov.b	r15,	r15	
    4bba:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4bbe:	0e ef       	xor	r15,	r14	
    4bc0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4bc4:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4bc8:	6f 4f       	mov.b	@r15,	r15	
    4bca:	4f 4f       	mov.b	r15,	r15	
    4bcc:	0e ef       	xor	r15,	r14	
    4bce:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4bd2:	2f 53       	incd	r15		
    4bd4:	6f 4f       	mov.b	@r15,	r15	
    4bd6:	4f 4f       	mov.b	r15,	r15	
    4bd8:	0f ee       	xor	r14,	r15	
    4bda:	0f 5f       	rla	r15		
    4bdc:	4d 4f       	mov.b	r15,	r13	
    4bde:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4be2:	0e 4f       	mov	r15,	r14	
    4be4:	0e 5e       	rla	r14		
    4be6:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4bea:	4f 4f       	mov.b	r15,	r15	
    4bec:	8f 11       	sxt	r15		
    4bee:	8f 10       	swpb	r15		
    4bf0:	4f 4f       	mov.b	r15,	r15	
    4bf2:	4f 4f       	mov.b	r15,	r15	
    4bf4:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4bf8:	0e ef       	xor	r15,	r14	
    4bfa:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4bfe:	6f 4f       	mov.b	@r15,	r15	
    4c00:	4f 4f       	mov.b	r15,	r15	
    4c02:	0e ef       	xor	r15,	r14	
    4c04:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4c08:	2f 53       	incd	r15		
    4c0a:	6f 4f       	mov.b	@r15,	r15	
    4c0c:	4f 4f       	mov.b	r15,	r15	
    4c0e:	0f ee       	xor	r14,	r15	
    4c10:	0f 5f       	rla	r15		
    4c12:	4e 4f       	mov.b	r15,	r14	
    4c14:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4c18:	0f 5f       	rla	r15		
    4c1a:	4c 4f       	mov.b	r15,	r12	
    4c1c:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4c20:	4f 4f       	mov.b	r15,	r15	
    4c22:	8f 11       	sxt	r15		
    4c24:	8f 10       	swpb	r15		
    4c26:	4f 4f       	mov.b	r15,	r15	
    4c28:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4c2c:	4c ef       	xor.b	r15,	r12	
    4c2e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4c32:	6f 4f       	mov.b	@r15,	r15	
    4c34:	4c ef       	xor.b	r15,	r12	
    4c36:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4c3a:	2f 53       	incd	r15		
    4c3c:	6f 4f       	mov.b	@r15,	r15	
    4c3e:	4f ec       	xor.b	r12,	r15	
    4c40:	4f 4f       	mov.b	r15,	r15	
    4c42:	8f 11       	sxt	r15		
    4c44:	8f 10       	swpb	r15		
    4c46:	4f 4f       	mov.b	r15,	r15	
    4c48:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4c4c:	4e ef       	xor.b	r15,	r14	
    4c4e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4c52:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4c56:	6f 4f       	mov.b	@r15,	r15	
    4c58:	4e ef       	xor.b	r15,	r14	
    4c5a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4c5e:	2f 53       	incd	r15		
    4c60:	6f 4f       	mov.b	@r15,	r15	
    4c62:	4f ee       	xor.b	r14,	r15	
    4c64:	4f 4f       	mov.b	r15,	r15	
    4c66:	8f 11       	sxt	r15		
    4c68:	8f 10       	swpb	r15		
    4c6a:	4f 4f       	mov.b	r15,	r15	
    4c6c:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4c70:	4e 4d       	mov.b	r13,	r14	
    4c72:	4e ef       	xor.b	r15,	r14	
    4c74:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4c78:	1f 53       	inc	r15		
    4c7a:	6f 4f       	mov.b	@r15,	r15	
    4c7c:	4e ef       	xor.b	r15,	r14	
    4c7e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4c82:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4c86:	6f 4f       	mov.b	@r15,	r15	
    4c88:	4e ef       	xor.b	r15,	r14	
    4c8a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4c8e:	6f 4f       	mov.b	@r15,	r15	
    4c90:	4f ee       	xor.b	r14,	r15	
    4c92:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
        t[3] = L(L(L(var1)^crypt[1]^crypt[3])^crypt[0]^crypt[3])^crypt[2]^crypt[0]^crypt[1];
    4c96:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4c9a:	0e 4f       	mov	r15,	r14	
    4c9c:	0e 5e       	rla	r14		
    4c9e:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4ca2:	4f 4f       	mov.b	r15,	r15	
    4ca4:	8f 11       	sxt	r15		
    4ca6:	8f 10       	swpb	r15		
    4ca8:	4f 4f       	mov.b	r15,	r15	
    4caa:	4f 4f       	mov.b	r15,	r15	
    4cac:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4cb0:	0e ef       	xor	r15,	r14	
    4cb2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4cb6:	1f 53       	inc	r15		
    4cb8:	6f 4f       	mov.b	@r15,	r15	
    4cba:	4f 4f       	mov.b	r15,	r15	
    4cbc:	0e ef       	xor	r15,	r14	
    4cbe:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4cc2:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4cc6:	6f 4f       	mov.b	@r15,	r15	
    4cc8:	4f 4f       	mov.b	r15,	r15	
    4cca:	0f ee       	xor	r14,	r15	
    4ccc:	0e 4f       	mov	r15,	r14	
    4cce:	0e 5e       	rla	r14		
    4cd0:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4cd4:	0f 5f       	rla	r15		
    4cd6:	4d 4f       	mov.b	r15,	r13	
    4cd8:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4cdc:	4f 4f       	mov.b	r15,	r15	
    4cde:	8f 11       	sxt	r15		
    4ce0:	8f 10       	swpb	r15		
    4ce2:	4f 4f       	mov.b	r15,	r15	
    4ce4:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4ce8:	4d ef       	xor.b	r15,	r13	
    4cea:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4cee:	1f 53       	inc	r15		
    4cf0:	6f 4f       	mov.b	@r15,	r15	
    4cf2:	4d ef       	xor.b	r15,	r13	
    4cf4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4cf8:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4cfc:	6f 4f       	mov.b	@r15,	r15	
    4cfe:	4f ed       	xor.b	r13,	r15	
    4d00:	4f 4f       	mov.b	r15,	r15	
    4d02:	8f 11       	sxt	r15		
    4d04:	8f 10       	swpb	r15		
    4d06:	4f 4f       	mov.b	r15,	r15	
    4d08:	4f 4f       	mov.b	r15,	r15	
    4d0a:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4d0e:	0e ef       	xor	r15,	r14	
    4d10:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4d14:	6f 4f       	mov.b	@r15,	r15	
    4d16:	4f 4f       	mov.b	r15,	r15	
    4d18:	0e ef       	xor	r15,	r14	
    4d1a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4d1e:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4d22:	6f 4f       	mov.b	@r15,	r15	
    4d24:	4f 4f       	mov.b	r15,	r15	
    4d26:	0f ee       	xor	r14,	r15	
    4d28:	0f 5f       	rla	r15		
    4d2a:	4d 4f       	mov.b	r15,	r13	
    4d2c:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4d30:	0e 4f       	mov	r15,	r14	
    4d32:	0e 5e       	rla	r14		
    4d34:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4d38:	4f 4f       	mov.b	r15,	r15	
    4d3a:	8f 11       	sxt	r15		
    4d3c:	8f 10       	swpb	r15		
    4d3e:	4f 4f       	mov.b	r15,	r15	
    4d40:	4f 4f       	mov.b	r15,	r15	
    4d42:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4d46:	0e ef       	xor	r15,	r14	
    4d48:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4d4c:	1f 53       	inc	r15		
    4d4e:	6f 4f       	mov.b	@r15,	r15	
    4d50:	4f 4f       	mov.b	r15,	r15	
    4d52:	0e ef       	xor	r15,	r14	
    4d54:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4d58:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4d5c:	6f 4f       	mov.b	@r15,	r15	
    4d5e:	4f 4f       	mov.b	r15,	r15	
    4d60:	0f ee       	xor	r14,	r15	
    4d62:	0f 5f       	rla	r15		
    4d64:	4e 4f       	mov.b	r15,	r14	
    4d66:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4d6a:	0f 5f       	rla	r15		
    4d6c:	4c 4f       	mov.b	r15,	r12	
    4d6e:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    4d72:	4f 4f       	mov.b	r15,	r15	
    4d74:	8f 11       	sxt	r15		
    4d76:	8f 10       	swpb	r15		
    4d78:	4f 4f       	mov.b	r15,	r15	
    4d7a:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4d7e:	4c ef       	xor.b	r15,	r12	
    4d80:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4d84:	1f 53       	inc	r15		
    4d86:	6f 4f       	mov.b	@r15,	r15	
    4d88:	4c ef       	xor.b	r15,	r12	
    4d8a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4d8e:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4d92:	6f 4f       	mov.b	@r15,	r15	
    4d94:	4f ec       	xor.b	r12,	r15	
    4d96:	4f 4f       	mov.b	r15,	r15	
    4d98:	8f 11       	sxt	r15		
    4d9a:	8f 10       	swpb	r15		
    4d9c:	4f 4f       	mov.b	r15,	r15	
    4d9e:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4da2:	4e ef       	xor.b	r15,	r14	
    4da4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4da8:	6f 4f       	mov.b	@r15,	r15	
    4daa:	4e ef       	xor.b	r15,	r14	
    4dac:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4db0:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4db4:	6f 4f       	mov.b	@r15,	r15	
    4db6:	4f ee       	xor.b	r14,	r15	
    4db8:	4f 4f       	mov.b	r15,	r15	
    4dba:	8f 11       	sxt	r15		
    4dbc:	8f 10       	swpb	r15		
    4dbe:	4f 4f       	mov.b	r15,	r15	
    4dc0:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4dc4:	4e 4d       	mov.b	r13,	r14	
    4dc6:	4e ef       	xor.b	r15,	r14	
    4dc8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4dcc:	2f 53       	incd	r15		
    4dce:	6f 4f       	mov.b	@r15,	r15	
    4dd0:	4e ef       	xor.b	r15,	r14	
    4dd2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4dd6:	6f 4f       	mov.b	@r15,	r15	
    4dd8:	4e ef       	xor.b	r15,	r14	
    4dda:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4dde:	1f 53       	inc	r15		
    4de0:	6f 4f       	mov.b	@r15,	r15	
    4de2:	4f ee       	xor.b	r14,	r15	
    4de4:	c4 4f f3 ff 	mov.b	r15,	-13(r4)	;0xfff3(r4)

        t[4] = L(L(L(var2)^crypt[6]^crypt[4])^crypt[5]^crypt[4])^crypt[7]^crypt[5]^crypt[6];
    4de8:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4dec:	0e 4f       	mov	r15,	r14	
    4dee:	0e 5e       	rla	r14		
    4df0:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4df4:	4f 4f       	mov.b	r15,	r15	
    4df6:	8f 11       	sxt	r15		
    4df8:	8f 10       	swpb	r15		
    4dfa:	4f 4f       	mov.b	r15,	r15	
    4dfc:	4f 4f       	mov.b	r15,	r15	
    4dfe:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4e02:	0e ef       	xor	r15,	r14	
    4e04:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4e08:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4e0c:	6f 4f       	mov.b	@r15,	r15	
    4e0e:	4f 4f       	mov.b	r15,	r15	
    4e10:	0e ef       	xor	r15,	r14	
    4e12:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4e16:	2f 52       	add	#4,	r15	;r2 As==10
    4e18:	6f 4f       	mov.b	@r15,	r15	
    4e1a:	4f 4f       	mov.b	r15,	r15	
    4e1c:	0f ee       	xor	r14,	r15	
    4e1e:	0e 4f       	mov	r15,	r14	
    4e20:	0e 5e       	rla	r14		
    4e22:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4e26:	0f 5f       	rla	r15		
    4e28:	4d 4f       	mov.b	r15,	r13	
    4e2a:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4e2e:	4f 4f       	mov.b	r15,	r15	
    4e30:	8f 11       	sxt	r15		
    4e32:	8f 10       	swpb	r15		
    4e34:	4f 4f       	mov.b	r15,	r15	
    4e36:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4e3a:	4d ef       	xor.b	r15,	r13	
    4e3c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4e40:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4e44:	6f 4f       	mov.b	@r15,	r15	
    4e46:	4d ef       	xor.b	r15,	r13	
    4e48:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4e4c:	2f 52       	add	#4,	r15	;r2 As==10
    4e4e:	6f 4f       	mov.b	@r15,	r15	
    4e50:	4f ed       	xor.b	r13,	r15	
    4e52:	4f 4f       	mov.b	r15,	r15	
    4e54:	8f 11       	sxt	r15		
    4e56:	8f 10       	swpb	r15		
    4e58:	4f 4f       	mov.b	r15,	r15	
    4e5a:	4f 4f       	mov.b	r15,	r15	
    4e5c:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4e60:	0e ef       	xor	r15,	r14	
    4e62:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4e66:	3f 50 05 00 	add	#5,	r15	;#0x0005
    4e6a:	6f 4f       	mov.b	@r15,	r15	
    4e6c:	4f 4f       	mov.b	r15,	r15	
    4e6e:	0e ef       	xor	r15,	r14	
    4e70:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4e74:	2f 52       	add	#4,	r15	;r2 As==10
    4e76:	6f 4f       	mov.b	@r15,	r15	
    4e78:	4f 4f       	mov.b	r15,	r15	
    4e7a:	0f ee       	xor	r14,	r15	
    4e7c:	0f 5f       	rla	r15		
    4e7e:	4d 4f       	mov.b	r15,	r13	
    4e80:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4e84:	0e 4f       	mov	r15,	r14	
    4e86:	0e 5e       	rla	r14		
    4e88:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4e8c:	4f 4f       	mov.b	r15,	r15	
    4e8e:	8f 11       	sxt	r15		
    4e90:	8f 10       	swpb	r15		
    4e92:	4f 4f       	mov.b	r15,	r15	
    4e94:	4f 4f       	mov.b	r15,	r15	
    4e96:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4e9a:	0e ef       	xor	r15,	r14	
    4e9c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4ea0:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4ea4:	6f 4f       	mov.b	@r15,	r15	
    4ea6:	4f 4f       	mov.b	r15,	r15	
    4ea8:	0e ef       	xor	r15,	r14	
    4eaa:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4eae:	2f 52       	add	#4,	r15	;r2 As==10
    4eb0:	6f 4f       	mov.b	@r15,	r15	
    4eb2:	4f 4f       	mov.b	r15,	r15	
    4eb4:	0f ee       	xor	r14,	r15	
    4eb6:	0f 5f       	rla	r15		
    4eb8:	4e 4f       	mov.b	r15,	r14	
    4eba:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4ebe:	0f 5f       	rla	r15		
    4ec0:	4c 4f       	mov.b	r15,	r12	
    4ec2:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4ec6:	4f 4f       	mov.b	r15,	r15	
    4ec8:	8f 11       	sxt	r15		
    4eca:	8f 10       	swpb	r15		
    4ecc:	4f 4f       	mov.b	r15,	r15	
    4ece:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4ed2:	4c ef       	xor.b	r15,	r12	
    4ed4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4ed8:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4edc:	6f 4f       	mov.b	@r15,	r15	
    4ede:	4c ef       	xor.b	r15,	r12	
    4ee0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4ee4:	2f 52       	add	#4,	r15	;r2 As==10
    4ee6:	6f 4f       	mov.b	@r15,	r15	
    4ee8:	4f ec       	xor.b	r12,	r15	
    4eea:	4f 4f       	mov.b	r15,	r15	
    4eec:	8f 11       	sxt	r15		
    4eee:	8f 10       	swpb	r15		
    4ef0:	4f 4f       	mov.b	r15,	r15	
    4ef2:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4ef6:	4e ef       	xor.b	r15,	r14	
    4ef8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4efc:	3f 50 05 00 	add	#5,	r15	;#0x0005
    4f00:	6f 4f       	mov.b	@r15,	r15	
    4f02:	4e ef       	xor.b	r15,	r14	
    4f04:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4f08:	2f 52       	add	#4,	r15	;r2 As==10
    4f0a:	6f 4f       	mov.b	@r15,	r15	
    4f0c:	4f ee       	xor.b	r14,	r15	
    4f0e:	4f 4f       	mov.b	r15,	r15	
    4f10:	8f 11       	sxt	r15		
    4f12:	8f 10       	swpb	r15		
    4f14:	4f 4f       	mov.b	r15,	r15	
    4f16:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4f1a:	4e 4d       	mov.b	r13,	r14	
    4f1c:	4e ef       	xor.b	r15,	r14	
    4f1e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4f22:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4f26:	6f 4f       	mov.b	@r15,	r15	
    4f28:	4e ef       	xor.b	r15,	r14	
    4f2a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4f2e:	3f 50 05 00 	add	#5,	r15	;#0x0005
    4f32:	6f 4f       	mov.b	@r15,	r15	
    4f34:	4e ef       	xor.b	r15,	r14	
    4f36:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4f3a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4f3e:	6f 4f       	mov.b	@r15,	r15	
    4f40:	4f ee       	xor.b	r14,	r15	
    4f42:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
        t[5] = L(L(L(var2)^crypt[7]^crypt[5])^crypt[6]^crypt[5])^crypt[4]^crypt[6]^crypt[7];
    4f46:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4f4a:	0e 4f       	mov	r15,	r14	
    4f4c:	0e 5e       	rla	r14		
    4f4e:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4f52:	4f 4f       	mov.b	r15,	r15	
    4f54:	8f 11       	sxt	r15		
    4f56:	8f 10       	swpb	r15		
    4f58:	4f 4f       	mov.b	r15,	r15	
    4f5a:	4f 4f       	mov.b	r15,	r15	
    4f5c:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4f60:	0e ef       	xor	r15,	r14	
    4f62:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4f66:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4f6a:	6f 4f       	mov.b	@r15,	r15	
    4f6c:	4f 4f       	mov.b	r15,	r15	
    4f6e:	0e ef       	xor	r15,	r14	
    4f70:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4f74:	3f 50 05 00 	add	#5,	r15	;#0x0005
    4f78:	6f 4f       	mov.b	@r15,	r15	
    4f7a:	4f 4f       	mov.b	r15,	r15	
    4f7c:	0f ee       	xor	r14,	r15	
    4f7e:	0e 4f       	mov	r15,	r14	
    4f80:	0e 5e       	rla	r14		
    4f82:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4f86:	0f 5f       	rla	r15		
    4f88:	4d 4f       	mov.b	r15,	r13	
    4f8a:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4f8e:	4f 4f       	mov.b	r15,	r15	
    4f90:	8f 11       	sxt	r15		
    4f92:	8f 10       	swpb	r15		
    4f94:	4f 4f       	mov.b	r15,	r15	
    4f96:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    4f9a:	4d ef       	xor.b	r15,	r13	
    4f9c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4fa0:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4fa4:	6f 4f       	mov.b	@r15,	r15	
    4fa6:	4d ef       	xor.b	r15,	r13	
    4fa8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4fac:	3f 50 05 00 	add	#5,	r15	;#0x0005
    4fb0:	6f 4f       	mov.b	@r15,	r15	
    4fb2:	4f ed       	xor.b	r13,	r15	
    4fb4:	4f 4f       	mov.b	r15,	r15	
    4fb6:	8f 11       	sxt	r15		
    4fb8:	8f 10       	swpb	r15		
    4fba:	4f 4f       	mov.b	r15,	r15	
    4fbc:	4f 4f       	mov.b	r15,	r15	
    4fbe:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4fc2:	0e ef       	xor	r15,	r14	
    4fc4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4fc8:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4fcc:	6f 4f       	mov.b	@r15,	r15	
    4fce:	4f 4f       	mov.b	r15,	r15	
    4fd0:	0e ef       	xor	r15,	r14	
    4fd2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4fd6:	3f 50 05 00 	add	#5,	r15	;#0x0005
    4fda:	6f 4f       	mov.b	@r15,	r15	
    4fdc:	4f 4f       	mov.b	r15,	r15	
    4fde:	0f ee       	xor	r14,	r15	
    4fe0:	0f 5f       	rla	r15		
    4fe2:	4d 4f       	mov.b	r15,	r13	
    4fe4:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4fe8:	0e 4f       	mov	r15,	r14	
    4fea:	0e 5e       	rla	r14		
    4fec:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    4ff0:	4f 4f       	mov.b	r15,	r15	
    4ff2:	8f 11       	sxt	r15		
    4ff4:	8f 10       	swpb	r15		
    4ff6:	4f 4f       	mov.b	r15,	r15	
    4ff8:	4f 4f       	mov.b	r15,	r15	
    4ffa:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    4ffe:	0e ef       	xor	r15,	r14	
    5000:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5004:	3f 50 07 00 	add	#7,	r15	;#0x0007
    5008:	6f 4f       	mov.b	@r15,	r15	
    500a:	4f 4f       	mov.b	r15,	r15	
    500c:	0e ef       	xor	r15,	r14	
    500e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5012:	3f 50 05 00 	add	#5,	r15	;#0x0005
    5016:	6f 4f       	mov.b	@r15,	r15	
    5018:	4f 4f       	mov.b	r15,	r15	
    501a:	0f ee       	xor	r14,	r15	
    501c:	0f 5f       	rla	r15		
    501e:	4e 4f       	mov.b	r15,	r14	
    5020:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    5024:	0f 5f       	rla	r15		
    5026:	4c 4f       	mov.b	r15,	r12	
    5028:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    502c:	4f 4f       	mov.b	r15,	r15	
    502e:	8f 11       	sxt	r15		
    5030:	8f 10       	swpb	r15		
    5032:	4f 4f       	mov.b	r15,	r15	
    5034:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    5038:	4c ef       	xor.b	r15,	r12	
    503a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    503e:	3f 50 07 00 	add	#7,	r15	;#0x0007
    5042:	6f 4f       	mov.b	@r15,	r15	
    5044:	4c ef       	xor.b	r15,	r12	
    5046:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    504a:	3f 50 05 00 	add	#5,	r15	;#0x0005
    504e:	6f 4f       	mov.b	@r15,	r15	
    5050:	4f ec       	xor.b	r12,	r15	
    5052:	4f 4f       	mov.b	r15,	r15	
    5054:	8f 11       	sxt	r15		
    5056:	8f 10       	swpb	r15		
    5058:	4f 4f       	mov.b	r15,	r15	
    505a:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    505e:	4e ef       	xor.b	r15,	r14	
    5060:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5064:	3f 50 06 00 	add	#6,	r15	;#0x0006
    5068:	6f 4f       	mov.b	@r15,	r15	
    506a:	4e ef       	xor.b	r15,	r14	
    506c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5070:	3f 50 05 00 	add	#5,	r15	;#0x0005
    5074:	6f 4f       	mov.b	@r15,	r15	
    5076:	4f ee       	xor.b	r14,	r15	
    5078:	4f 4f       	mov.b	r15,	r15	
    507a:	8f 11       	sxt	r15		
    507c:	8f 10       	swpb	r15		
    507e:	4f 4f       	mov.b	r15,	r15	
    5080:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    5084:	4e 4d       	mov.b	r13,	r14	
    5086:	4e ef       	xor.b	r15,	r14	
    5088:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    508c:	2f 52       	add	#4,	r15	;r2 As==10
    508e:	6f 4f       	mov.b	@r15,	r15	
    5090:	4e ef       	xor.b	r15,	r14	
    5092:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5096:	3f 50 06 00 	add	#6,	r15	;#0x0006
    509a:	6f 4f       	mov.b	@r15,	r15	
    509c:	4e ef       	xor.b	r15,	r14	
    509e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    50a2:	3f 50 07 00 	add	#7,	r15	;#0x0007
    50a6:	6f 4f       	mov.b	@r15,	r15	
    50a8:	4f ee       	xor.b	r14,	r15	
    50aa:	c4 4f f5 ff 	mov.b	r15,	-11(r4)	;0xfff5(r4)
        t[6] = L(L(L(var2)^crypt[4]^crypt[6])^crypt[7]^crypt[6])^crypt[5]^crypt[7]^crypt[4];
    50ae:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    50b2:	0e 4f       	mov	r15,	r14	
    50b4:	0e 5e       	rla	r14		
    50b6:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    50ba:	4f 4f       	mov.b	r15,	r15	
    50bc:	8f 11       	sxt	r15		
    50be:	8f 10       	swpb	r15		
    50c0:	4f 4f       	mov.b	r15,	r15	
    50c2:	4f 4f       	mov.b	r15,	r15	
    50c4:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    50c8:	0e ef       	xor	r15,	r14	
    50ca:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    50ce:	2f 52       	add	#4,	r15	;r2 As==10
    50d0:	6f 4f       	mov.b	@r15,	r15	
    50d2:	4f 4f       	mov.b	r15,	r15	
    50d4:	0e ef       	xor	r15,	r14	
    50d6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    50da:	3f 50 06 00 	add	#6,	r15	;#0x0006
    50de:	6f 4f       	mov.b	@r15,	r15	
    50e0:	4f 4f       	mov.b	r15,	r15	
    50e2:	0f ee       	xor	r14,	r15	
    50e4:	0e 4f       	mov	r15,	r14	
    50e6:	0e 5e       	rla	r14		
    50e8:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    50ec:	0f 5f       	rla	r15		
    50ee:	4d 4f       	mov.b	r15,	r13	
    50f0:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    50f4:	4f 4f       	mov.b	r15,	r15	
    50f6:	8f 11       	sxt	r15		
    50f8:	8f 10       	swpb	r15		
    50fa:	4f 4f       	mov.b	r15,	r15	
    50fc:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    5100:	4d ef       	xor.b	r15,	r13	
    5102:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5106:	2f 52       	add	#4,	r15	;r2 As==10
    5108:	6f 4f       	mov.b	@r15,	r15	
    510a:	4d ef       	xor.b	r15,	r13	
    510c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5110:	3f 50 06 00 	add	#6,	r15	;#0x0006
    5114:	6f 4f       	mov.b	@r15,	r15	
    5116:	4f ed       	xor.b	r13,	r15	
    5118:	4f 4f       	mov.b	r15,	r15	
    511a:	8f 11       	sxt	r15		
    511c:	8f 10       	swpb	r15		
    511e:	4f 4f       	mov.b	r15,	r15	
    5120:	4f 4f       	mov.b	r15,	r15	
    5122:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    5126:	0e ef       	xor	r15,	r14	
    5128:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    512c:	3f 50 07 00 	add	#7,	r15	;#0x0007
    5130:	6f 4f       	mov.b	@r15,	r15	
    5132:	4f 4f       	mov.b	r15,	r15	
    5134:	0e ef       	xor	r15,	r14	
    5136:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    513a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    513e:	6f 4f       	mov.b	@r15,	r15	
    5140:	4f 4f       	mov.b	r15,	r15	
    5142:	0f ee       	xor	r14,	r15	
    5144:	0f 5f       	rla	r15		
    5146:	4d 4f       	mov.b	r15,	r13	
    5148:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    514c:	0e 4f       	mov	r15,	r14	
    514e:	0e 5e       	rla	r14		
    5150:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    5154:	4f 4f       	mov.b	r15,	r15	
    5156:	8f 11       	sxt	r15		
    5158:	8f 10       	swpb	r15		
    515a:	4f 4f       	mov.b	r15,	r15	
    515c:	4f 4f       	mov.b	r15,	r15	
    515e:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    5162:	0e ef       	xor	r15,	r14	
    5164:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5168:	2f 52       	add	#4,	r15	;r2 As==10
    516a:	6f 4f       	mov.b	@r15,	r15	
    516c:	4f 4f       	mov.b	r15,	r15	
    516e:	0e ef       	xor	r15,	r14	
    5170:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5174:	3f 50 06 00 	add	#6,	r15	;#0x0006
    5178:	6f 4f       	mov.b	@r15,	r15	
    517a:	4f 4f       	mov.b	r15,	r15	
    517c:	0f ee       	xor	r14,	r15	
    517e:	0f 5f       	rla	r15		
    5180:	4e 4f       	mov.b	r15,	r14	
    5182:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    5186:	0f 5f       	rla	r15		
    5188:	4c 4f       	mov.b	r15,	r12	
    518a:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    518e:	4f 4f       	mov.b	r15,	r15	
    5190:	8f 11       	sxt	r15		
    5192:	8f 10       	swpb	r15		
    5194:	4f 4f       	mov.b	r15,	r15	
    5196:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    519a:	4c ef       	xor.b	r15,	r12	
    519c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    51a0:	2f 52       	add	#4,	r15	;r2 As==10
    51a2:	6f 4f       	mov.b	@r15,	r15	
    51a4:	4c ef       	xor.b	r15,	r12	
    51a6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    51aa:	3f 50 06 00 	add	#6,	r15	;#0x0006
    51ae:	6f 4f       	mov.b	@r15,	r15	
    51b0:	4f ec       	xor.b	r12,	r15	
    51b2:	4f 4f       	mov.b	r15,	r15	
    51b4:	8f 11       	sxt	r15		
    51b6:	8f 10       	swpb	r15		
    51b8:	4f 4f       	mov.b	r15,	r15	
    51ba:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    51be:	4e ef       	xor.b	r15,	r14	
    51c0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    51c4:	3f 50 07 00 	add	#7,	r15	;#0x0007
    51c8:	6f 4f       	mov.b	@r15,	r15	
    51ca:	4e ef       	xor.b	r15,	r14	
    51cc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    51d0:	3f 50 06 00 	add	#6,	r15	;#0x0006
    51d4:	6f 4f       	mov.b	@r15,	r15	
    51d6:	4f ee       	xor.b	r14,	r15	
    51d8:	4f 4f       	mov.b	r15,	r15	
    51da:	8f 11       	sxt	r15		
    51dc:	8f 10       	swpb	r15		
    51de:	4f 4f       	mov.b	r15,	r15	
    51e0:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    51e4:	4e 4d       	mov.b	r13,	r14	
    51e6:	4e ef       	xor.b	r15,	r14	
    51e8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    51ec:	3f 50 05 00 	add	#5,	r15	;#0x0005
    51f0:	6f 4f       	mov.b	@r15,	r15	
    51f2:	4e ef       	xor.b	r15,	r14	
    51f4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    51f8:	3f 50 07 00 	add	#7,	r15	;#0x0007
    51fc:	6f 4f       	mov.b	@r15,	r15	
    51fe:	4e ef       	xor.b	r15,	r14	
    5200:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5204:	2f 52       	add	#4,	r15	;r2 As==10
    5206:	6f 4f       	mov.b	@r15,	r15	
    5208:	4f ee       	xor.b	r14,	r15	
    520a:	c4 4f f6 ff 	mov.b	r15,	-10(r4)	;0xfff6(r4)
        t[7] = L(L(L(var2)^crypt[5]^crypt[7])^crypt[4]^crypt[7])^crypt[6]^crypt[4]^crypt[5];
    520e:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    5212:	0e 4f       	mov	r15,	r14	
    5214:	0e 5e       	rla	r14		
    5216:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    521a:	4f 4f       	mov.b	r15,	r15	
    521c:	8f 11       	sxt	r15		
    521e:	8f 10       	swpb	r15		
    5220:	4f 4f       	mov.b	r15,	r15	
    5222:	4f 4f       	mov.b	r15,	r15	
    5224:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    5228:	0e ef       	xor	r15,	r14	
    522a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    522e:	3f 50 05 00 	add	#5,	r15	;#0x0005
    5232:	6f 4f       	mov.b	@r15,	r15	
    5234:	4f 4f       	mov.b	r15,	r15	
    5236:	0e ef       	xor	r15,	r14	
    5238:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    523c:	3f 50 07 00 	add	#7,	r15	;#0x0007
    5240:	6f 4f       	mov.b	@r15,	r15	
    5242:	4f 4f       	mov.b	r15,	r15	
    5244:	0f ee       	xor	r14,	r15	
    5246:	0e 4f       	mov	r15,	r14	
    5248:	0e 5e       	rla	r14		
    524a:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    524e:	0f 5f       	rla	r15		
    5250:	4d 4f       	mov.b	r15,	r13	
    5252:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    5256:	4f 4f       	mov.b	r15,	r15	
    5258:	8f 11       	sxt	r15		
    525a:	8f 10       	swpb	r15		
    525c:	4f 4f       	mov.b	r15,	r15	
    525e:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    5262:	4d ef       	xor.b	r15,	r13	
    5264:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5268:	3f 50 05 00 	add	#5,	r15	;#0x0005
    526c:	6f 4f       	mov.b	@r15,	r15	
    526e:	4d ef       	xor.b	r15,	r13	
    5270:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5274:	3f 50 07 00 	add	#7,	r15	;#0x0007
    5278:	6f 4f       	mov.b	@r15,	r15	
    527a:	4f ed       	xor.b	r13,	r15	
    527c:	4f 4f       	mov.b	r15,	r15	
    527e:	8f 11       	sxt	r15		
    5280:	8f 10       	swpb	r15		
    5282:	4f 4f       	mov.b	r15,	r15	
    5284:	4f 4f       	mov.b	r15,	r15	
    5286:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    528a:	0e ef       	xor	r15,	r14	
    528c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5290:	2f 52       	add	#4,	r15	;r2 As==10
    5292:	6f 4f       	mov.b	@r15,	r15	
    5294:	4f 4f       	mov.b	r15,	r15	
    5296:	0e ef       	xor	r15,	r14	
    5298:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    529c:	3f 50 07 00 	add	#7,	r15	;#0x0007
    52a0:	6f 4f       	mov.b	@r15,	r15	
    52a2:	4f 4f       	mov.b	r15,	r15	
    52a4:	0f ee       	xor	r14,	r15	
    52a6:	0f 5f       	rla	r15		
    52a8:	4d 4f       	mov.b	r15,	r13	
    52aa:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    52ae:	0e 4f       	mov	r15,	r14	
    52b0:	0e 5e       	rla	r14		
    52b2:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    52b6:	4f 4f       	mov.b	r15,	r15	
    52b8:	8f 11       	sxt	r15		
    52ba:	8f 10       	swpb	r15		
    52bc:	4f 4f       	mov.b	r15,	r15	
    52be:	4f 4f       	mov.b	r15,	r15	
    52c0:	3f f0 1b 00 	and	#27,	r15	;#0x001b
    52c4:	0e ef       	xor	r15,	r14	
    52c6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    52ca:	3f 50 05 00 	add	#5,	r15	;#0x0005
    52ce:	6f 4f       	mov.b	@r15,	r15	
    52d0:	4f 4f       	mov.b	r15,	r15	
    52d2:	0e ef       	xor	r15,	r14	
    52d4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    52d8:	3f 50 07 00 	add	#7,	r15	;#0x0007
    52dc:	6f 4f       	mov.b	@r15,	r15	
    52de:	4f 4f       	mov.b	r15,	r15	
    52e0:	0f ee       	xor	r14,	r15	
    52e2:	0f 5f       	rla	r15		
    52e4:	4e 4f       	mov.b	r15,	r14	
    52e6:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    52ea:	0f 5f       	rla	r15		
    52ec:	4c 4f       	mov.b	r15,	r12	
    52ee:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    52f2:	4f 4f       	mov.b	r15,	r15	
    52f4:	8f 11       	sxt	r15		
    52f6:	8f 10       	swpb	r15		
    52f8:	4f 4f       	mov.b	r15,	r15	
    52fa:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    52fe:	4c ef       	xor.b	r15,	r12	
    5300:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5304:	3f 50 05 00 	add	#5,	r15	;#0x0005
    5308:	6f 4f       	mov.b	@r15,	r15	
    530a:	4c ef       	xor.b	r15,	r12	
    530c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5310:	3f 50 07 00 	add	#7,	r15	;#0x0007
    5314:	6f 4f       	mov.b	@r15,	r15	
    5316:	4f ec       	xor.b	r12,	r15	
    5318:	4f 4f       	mov.b	r15,	r15	
    531a:	8f 11       	sxt	r15		
    531c:	8f 10       	swpb	r15		
    531e:	4f 4f       	mov.b	r15,	r15	
    5320:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    5324:	4e ef       	xor.b	r15,	r14	
    5326:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    532a:	2f 52       	add	#4,	r15	;r2 As==10
    532c:	6f 4f       	mov.b	@r15,	r15	
    532e:	4e ef       	xor.b	r15,	r14	
    5330:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5334:	3f 50 07 00 	add	#7,	r15	;#0x0007
    5338:	6f 4f       	mov.b	@r15,	r15	
    533a:	4f ee       	xor.b	r14,	r15	
    533c:	4f 4f       	mov.b	r15,	r15	
    533e:	8f 11       	sxt	r15		
    5340:	8f 10       	swpb	r15		
    5342:	4f 4f       	mov.b	r15,	r15	
    5344:	7f f0 1b 00 	and.b	#27,	r15	;#0x001b
    5348:	4e 4d       	mov.b	r13,	r14	
    534a:	4e ef       	xor.b	r15,	r14	
    534c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5350:	3f 50 06 00 	add	#6,	r15	;#0x0006
    5354:	6f 4f       	mov.b	@r15,	r15	
    5356:	4e ef       	xor.b	r15,	r14	
    5358:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    535c:	2f 52       	add	#4,	r15	;r2 As==10
    535e:	6f 4f       	mov.b	@r15,	r15	
    5360:	4e ef       	xor.b	r15,	r14	
    5362:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    5366:	3f 50 05 00 	add	#5,	r15	;#0x0005
    536a:	6f 4f       	mov.b	@r15,	r15	
    536c:	4f ee       	xor.b	r14,	r15	
    536e:	c4 4f f7 ff 	mov.b	r15,	-9(r4)	;0xfff7(r4)

        for (i=0 ; i<8 ; i++)
    5372:	c4 43 ec ff 	mov.b	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    5376:	13 3c       	jmp	$+40     	;abs 0x539e
        {
            crypt[i] = t[(i+6)&0x7];
    5378:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    537c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    5380:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    5384:	3e 50 06 00 	add	#6,	r14	;#0x0006
    5388:	3e f0 07 00 	and	#7,	r14	;#0x0007
    538c:	0d 44       	mov	r4,	r13	
    538e:	3d 50 f0 ff 	add	#-16,	r13	;#0xfff0
    5392:	0e 5d       	add	r13,	r14	
    5394:	6e 4e       	mov.b	@r14,	r14	
    5396:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
        t[4] = L(L(L(var2)^crypt[6]^crypt[4])^crypt[5]^crypt[4])^crypt[7]^crypt[5]^crypt[6];
        t[5] = L(L(L(var2)^crypt[7]^crypt[5])^crypt[6]^crypt[5])^crypt[4]^crypt[6]^crypt[7];
        t[6] = L(L(L(var2)^crypt[4]^crypt[6])^crypt[7]^crypt[6])^crypt[5]^crypt[7]^crypt[4];
        t[7] = L(L(L(var2)^crypt[5]^crypt[7])^crypt[4]^crypt[7])^crypt[6]^crypt[4]^crypt[5];

        for (i=0 ; i<8 ; i++)
    539a:	d4 53 ec ff 	inc.b	-20(r4)	;0xffec(r4)
    539e:	f4 92 ec ff 	cmp.b	#8,	-20(r4)	;r2 As==11, 0xffec(r4)
    53a2:	ea 2b       	jnc	$-42     	;abs 0x5378
        {
            crypt[i] = t[(i+6)&0x7];
        }

        for (i=0 ; i<8 ; i++)
    53a4:	c4 43 ec ff 	mov.b	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    53a8:	2d 3c       	jmp	$+92     	;abs 0x5404
        {
            crypt[i] = (sBox[crypt[i]&0xf]) | (sBox[crypt[i]>>4] << 4);
    53aa:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    53ae:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    53b2:	0e 5f       	add	r15,	r14	
    53b4:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    53b8:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    53bc:	6f 4f       	mov.b	@r15,	r15	
    53be:	4f 4f       	mov.b	r15,	r15	
    53c0:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    53c4:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    53c8:	4d 4f       	mov.b	r15,	r13	
    53ca:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    53ce:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    53d2:	6f 4f       	mov.b	@r15,	r15	
    53d4:	4f 4f       	mov.b	r15,	r15	
    53d6:	4f 4f       	mov.b	r15,	r15	
    53d8:	12 c3       	clrc			
    53da:	4f 10       	rrc.b	r15		
    53dc:	12 c3       	clrc			
    53de:	4f 10       	rrc.b	r15		
    53e0:	12 c3       	clrc			
    53e2:	4f 10       	rrc.b	r15		
    53e4:	12 c3       	clrc			
    53e6:	4f 10       	rrc.b	r15		
    53e8:	4f 4f       	mov.b	r15,	r15	
    53ea:	5f 4f 66 55 	mov.b	21862(r15),r15	;0x5566(r15)
    53ee:	4f 4f       	mov.b	r15,	r15	
    53f0:	0f 5f       	rla	r15		
    53f2:	0f 5f       	rla	r15		
    53f4:	0f 5f       	rla	r15		
    53f6:	0f 5f       	rla	r15		
    53f8:	4f 4f       	mov.b	r15,	r15	
    53fa:	4f dd       	bis.b	r13,	r15	
    53fc:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
        for (i=0 ; i<8 ; i++)
        {
            crypt[i] = t[(i+6)&0x7];
        }

        for (i=0 ; i<8 ; i++)
    5400:	d4 53 ec ff 	inc.b	-20(r4)	;0xffec(r4)
    5404:	f4 92 ec ff 	cmp.b	#8,	-20(r4)	;r2 As==11, 0xffec(r4)
    5408:	d0 2b       	jnc	$-94     	;abs 0x53aa
        {
            crypt[i] = (sBox[crypt[i]&0xf]) | (sBox[crypt[i]>>4] << 4);
        }

        InvKeySetup(key,r);
    540a:	5e 44 ed ff 	mov.b	-19(r4),r14	;0xffed(r4)
    540e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    5412:	b0 12 a8 42 	call	#0x42a8	

        for (i=0 ; i<8 ; i++)
    5416:	c4 43 ec ff 	mov.b	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    541a:	13 3c       	jmp	$+40     	;abs 0x5442
        {
            crypt[i] = crypt[i] ^ key[i];
    541c:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    5420:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    5424:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    5428:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    542c:	6d 4e       	mov.b	@r14,	r13	
    542e:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    5432:	1e 54 fc ff 	add	-4(r4),	r14	;0xfffc(r4)
    5436:	6e 4e       	mov.b	@r14,	r14	
    5438:	4e ed       	xor.b	r13,	r14	
    543a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
            crypt[i] = (sBox[crypt[i]&0xf]) | (sBox[crypt[i]>>4] << 4);
        }

        InvKeySetup(key,r);

        for (i=0 ; i<8 ; i++)
    543e:	d4 53 ec ff 	inc.b	-20(r4)	;0xffec(r4)
    5442:	f4 92 ec ff 	cmp.b	#8,	-20(r4)	;r2 As==11, 0xffec(r4)
    5446:	ea 2b       	jnc	$-42     	;abs 0x541c
        crypt[i] = crypt[i] ^ key[i];
    }

    u8 t[8];
    u8 r;
    for (r=16 ; r>0 ; r--)
    5448:	f4 53 ed ff 	add.b	#-1,	-19(r4)	;r3 As==11, 0xffed(r4)
    544c:	c4 93 ed ff 	tst.b	-19(r4)	;0xffed(r4)
    5450:	02 24       	jz	$+6      	;abs 0x5456
    5452:	30 40 5a 48 	br	#0x485a	
            crypt[i] = crypt[i] ^ key[i];
        }

    }

}
    5456:	31 50 12 00 	add	#18,	r1	;#0x0012
    545a:	34 41       	pop	r4		
    545c:	30 41       	ret			

0000545e <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    545e:	04 12       	push	r4		
    5460:	04 41       	mov	r1,	r4	
    5462:	24 53       	incd	r4		
    5464:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    5468:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    546c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    5470:	0d 3c       	jmp	$+28     	;abs 0x548c
    {
      for (i = 0; i<d; i++) 
    5472:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    5476:	04 3c       	jmp	$+10     	;abs 0x5480
	{
	  nop();
    5478:	03 43       	nop			
	  nop();
    547a:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    547c:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    5480:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    5484:	f8 ff 
    5486:	f8 2b       	jnc	$-14     	;abs 0x5478
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    5488:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    548c:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    5490:	fa ff 
    5492:	ef 2b       	jnc	$-32     	;abs 0x5472
	{
	  nop();
	  nop();
	}
    }
}
    5494:	31 50 06 00 	add	#6,	r1	;#0x0006
    5498:	34 41       	pop	r4		
    549a:	30 41       	ret			

0000549c <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    549c:	04 12       	push	r4		
    549e:	04 41       	mov	r1,	r4	
    54a0:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    54a2:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    54a6:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    54a8:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    54ac:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    54b0:	5f 42 1b 00 	mov.b	&0x001b,r15	
    54b4:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    54b8:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    54bc:	5f 42 05 00 	mov.b	&0x0005,r15	
    54c0:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    54c4:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    54c8:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    54cc:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    54d0:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    54d2:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    54d6:	79 00 
  U1RCTL = 0;
    54d8:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    54dc:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    54e0:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    54e4:	7c 00 
  U1MCTL = U1MCTL_INIT;
    54e6:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    54ea:	7b 00 

  delay(0x800);
    54ec:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    54f0:	b0 12 5e 54 	call	#0x545e	
  return 0;
    54f4:	0f 43       	clr	r15		
}
    54f6:	34 41       	pop	r4		
    54f8:	30 41       	ret			

000054fa <uart1_putchar>:

int uart1_putchar(int c)
{
    54fa:	04 12       	push	r4		
    54fc:	04 41       	mov	r1,	r4	
    54fe:	24 53       	incd	r4		
    5500:	21 83       	decd	r1		
    5502:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    5506:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    550a:	4f 4f       	mov.b	r15,	r15	
    550c:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    5510:	03 43       	nop			
    5512:	5f 42 79 00 	mov.b	&0x0079,r15	
    5516:	4f 4f       	mov.b	r15,	r15	
    5518:	1f f3       	and	#1,	r15	;r3 As==01
    551a:	0f 93       	tst	r15		
    551c:	fa 27       	jz	$-10     	;abs 0x5512
  return (unsigned char)c;
    551e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    5522:	4f 4f       	mov.b	r15,	r15	
    5524:	4f 4f       	mov.b	r15,	r15	
}
    5526:	21 53       	incd	r1		
    5528:	34 41       	pop	r4		
    552a:	30 41       	ret			

0000552c <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    552c:	04 12       	push	r4		
    552e:	04 41       	mov	r1,	r4	
    5530:	24 53       	incd	r4		
    5532:	21 83       	decd	r1		
    5534:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    5538:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    553c:	b0 12 fa 54 	call	#0x54fa	
}
    5540:	21 53       	incd	r1		
    5542:	34 41       	pop	r4		
    5544:	30 41       	ret			

00005546 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    5546:	04 12       	push	r4		
    5548:	04 41       	mov	r1,	r4	
    554a:	24 53       	incd	r4		
  ;
}
    554c:	34 41       	pop	r4		
    554e:	30 41       	ret			

00005550 <start_decrypt>:
void
start_decrypt()
{
    5550:	04 12       	push	r4		
    5552:	04 41       	mov	r1,	r4	
    5554:	24 53       	incd	r4		
  ;
}
    5556:	34 41       	pop	r4		
    5558:	30 41       	ret			

0000555a <end_expe>:


void
end_expe()
{
    555a:	04 12       	push	r4		
    555c:	04 41       	mov	r1,	r4	
    555e:	24 53       	incd	r4		
  ;
}
    5560:	34 41       	pop	r4		
    5562:	30 41       	ret			

00005564 <_unexpected_>:
    5564:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	f4 40 f4 40 f4 40 f4 40 f4 40 f4 40 f4 40 f4 40     .@.@.@.@.@.@.@.@
    fff0:	f4 40 f4 40 f4 40 f4 40 f4 40 f4 40 f4 40 00 40     .@.@.@.@.@.@.@.@
