
simon128_128.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .data	00000000 .data
0000113e l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 simon128_128.c
00001100 l     O .data	0000003e z
0000413a l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004aaa g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
0000003e g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
0000413a  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
0000413a  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
00004732 g     F .text	000002aa Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004ae4 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004a1a g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
00004134  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
0000413a  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004ad8 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000413e g     F .text	0000035a KeyExpansion
0000019e g       *ABS*	00000000 __TBCCR6
0000413a  w      .text	00000000 __isr_5
00004ae4 g       *ABS*	00000000 __data_load_start
0000413a g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
0000413a  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
0000413a  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
0000113e g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
0000413a  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
0000413a  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004ae2  w      .text	00000000 _unexpected_
0000413a  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
0000413a  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004a78 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
0000413a g       .text	00000000 __ctors_start
0000413a  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
0000113e g       .data	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	000000f6 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
0000413a  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
000049dc g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
0000413a  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
0000413a g       .text	00000000 __dtors_start
0000413a  w      .text	00000000 __isr_6
0000413a g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
0000413a  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
0000113e g       .data	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001140 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004ac4 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
00004134  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004ace g     F .text	0000000a start_decrypt
00001100 g       .data	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00004498 g     F .text	0000029a Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 3e 11 	mov	r5,	&0x113e	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 3e 11 	mov	&0x113e,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f e4 4a 	mov	19172(r15),4352(r15);0x4ae4(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 3e 11 	mov	&0x113e,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 3e 11 	mov.b	#0,	4414(r15);r3 As==00, 0x113e(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
        crypt[0] = tmp;
    }
}

int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 c0 fd 	add	#-576,	r1	;#0xfdc0

    u64 text[2];
    text[0] = 0x6373656420737265;
    4046:	b4 40 65 72 	mov	#29285,	-578(r4);#0x7265, 0xfdbe(r4)
    404a:	be fd 
    404c:	b4 40 73 20 	mov	#8307,	-576(r4);#0x2073, 0xfdc0(r4)
    4050:	c0 fd 
    4052:	b4 40 64 65 	mov	#25956,	-574(r4);#0x6564, 0xfdc2(r4)
    4056:	c2 fd 
    4058:	b4 40 73 63 	mov	#25459,	-572(r4);#0x6373, 0xfdc4(r4)
    405c:	c4 fd 
    text[1] = 0x6c6c657661727420;
    405e:	b4 40 20 74 	mov	#29728,	-570(r4);#0x7420, 0xfdc6(r4)
    4062:	c6 fd 
    4064:	b4 40 72 61 	mov	#24946,	-568(r4);#0x6172, 0xfdc8(r4)
    4068:	c8 fd 
    406a:	b4 40 76 65 	mov	#25974,	-566(r4);#0x6576, 0xfdca(r4)
    406e:	ca fd 
    4070:	b4 40 6c 6c 	mov	#27756,	-564(r4);#0x6c6c, 0xfdcc(r4)
    4074:	cc fd 
    u64 crypt[2] = {0};
    4076:	0f 44       	mov	r4,	r15	
    4078:	3f 50 ce fd 	add	#-562,	r15	;#0xfdce
    407c:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4080:	2f 53       	incd	r15		
    4082:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4086:	2f 53       	incd	r15		
    4088:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    408c:	2f 53       	incd	r15		
    408e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4092:	2f 53       	incd	r15		
    4094:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4098:	2f 53       	incd	r15		
    409a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    409e:	2f 53       	incd	r15		
    40a0:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a4:	2f 53       	incd	r15		
    40a6:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40aa:	2f 53       	incd	r15		
    u64 k[68];
    k[1] = 0x0f0e0d0c0b0a0908;
    40ac:	b4 40 08 09 	mov	#2312,	-538(r4);#0x0908, 0xfde6(r4)
    40b0:	e6 fd 
    40b2:	b4 40 0a 0b 	mov	#2826,	-536(r4);#0x0b0a, 0xfde8(r4)
    40b6:	e8 fd 
    40b8:	b4 40 0c 0d 	mov	#3340,	-534(r4);#0x0d0c, 0xfdea(r4)
    40bc:	ea fd 
    40be:	b4 40 0e 0f 	mov	#3854,	-532(r4);#0x0f0e, 0xfdec(r4)
    40c2:	ec fd 
    k[0] = 0x0706050403020100;
    40c4:	b4 40 00 01 	mov	#256,	-546(r4);#0x0100, 0xfdde(r4)
    40c8:	de fd 
    40ca:	b4 40 02 03 	mov	#770,	-544(r4);#0x0302, 0xfde0(r4)
    40ce:	e0 fd 
    40d0:	b4 40 04 05 	mov	#1284,	-542(r4);#0x0504, 0xfde2(r4)
    40d4:	e2 fd 
    40d6:	b4 40 06 07 	mov	#1798,	-540(r4);#0x0706, 0xfde4(r4)
    40da:	e4 fd 

	START_ENCRYPT();
    40dc:	b0 12 c4 4a 	call	#0x4ac4	
    KeyExpansion ( k );
    40e0:	0f 44       	mov	r4,	r15	
    40e2:	3f 50 de fd 	add	#-546,	r15	;#0xfdde
    40e6:	b0 12 3e 41 	call	#0x413e	
    Encrypt ( text, crypt, k );
    40ea:	0e 44       	mov	r4,	r14	
    40ec:	3e 50 de fd 	add	#-546,	r14	;#0xfdde
    40f0:	0f 44       	mov	r4,	r15	
    40f2:	3f 50 ce fd 	add	#-562,	r15	;#0xfdce
    40f6:	0d 4e       	mov	r14,	r13	
    40f8:	0e 4f       	mov	r15,	r14	
    40fa:	0f 44       	mov	r4,	r15	
    40fc:	3f 50 be fd 	add	#-578,	r15	;#0xfdbe
    4100:	b0 12 98 44 	call	#0x4498	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
    START_DECRYPT();
    4104:	b0 12 ce 4a 	call	#0x4ace	
	KeyExpansion ( k );
    4108:	0f 44       	mov	r4,	r15	
    410a:	3f 50 de fd 	add	#-546,	r15	;#0xfdde
    410e:	b0 12 3e 41 	call	#0x413e	
	Decrypt ( crypt, text, k );
    4112:	0e 44       	mov	r4,	r14	
    4114:	3e 50 de fd 	add	#-546,	r14	;#0xfdde
    4118:	0f 44       	mov	r4,	r15	
    411a:	3f 50 ce fd 	add	#-562,	r15	;#0xfdce
    411e:	0d 4e       	mov	r14,	r13	
    4120:	0e 44       	mov	r4,	r14	
    4122:	3e 50 be fd 	add	#-578,	r14	;#0xfdbe
    4126:	b0 12 32 47 	call	#0x4732	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	END_EXPE();
    412a:	b0 12 d8 4a 	call	#0x4ad8	

    return 0;
    412e:	0f 43       	clr	r15		
}
    4130:	31 50 40 02 	add	#576,	r1	;#0x0240

00004134 <__stop_progExec__>:
    4134:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    4138:	fd 3f       	jmp	$-4      	;abs 0x4134

0000413a <__ctors_end>:
    413a:	30 40 e2 4a 	br	#0x4ae2	

0000413e <KeyExpansion>:

static u8 z[62] =
{1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,0,0,1,1};

void KeyExpansion ( u64 k[] )
{
    413e:	0b 12       	push	r11		
    4140:	0a 12       	push	r10		
    4142:	09 12       	push	r9		
    4144:	08 12       	push	r8		
    4146:	07 12       	push	r7		
    4148:	06 12       	push	r6		
    414a:	05 12       	push	r5		
    414c:	04 12       	push	r4		
    414e:	04 41       	mov	r1,	r4	
    4150:	34 50 10 00 	add	#16,	r4	;#0x0010
    4154:	31 50 ca ff 	add	#-54,	r1	;#0xffca
    4158:	84 4f c4 ff 	mov	r15,	-60(r4)	;0xffc4(r4)
    u8 i;
    u64 tmp;
    for ( i=2 ; i<64 ; i++ )
    415c:	e4 43 ba ff 	mov.b	#2,	-70(r4)	;r3 As==10, 0xffba(r4)
    4160:	be 3c       	jmp	$+382    	;abs 0x42de
    {
        tmp = ROTATE_RIGHT_64(k[i-1],3);
    4162:	5f 44 ba ff 	mov.b	-70(r4),r15	;0xffba(r4)
    4166:	3f 53       	add	#-1,	r15	;r3 As==11
    4168:	0f 5f       	rla	r15		
    416a:	0f 5f       	rla	r15		
    416c:	0f 5f       	rla	r15		
    416e:	1f 54 c4 ff 	add	-60(r4),r15	;0xffc4(r4)
    4172:	2c 4f       	mov	@r15,	r12	
    4174:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4178:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    417c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4180:	0b 4c       	mov	r12,	r11	
    4182:	84 43 d6 ff 	mov	#0,	-42(r4)	;r3 As==00, 0xffd6(r4)
    4186:	05 43       	clr	r5		
    4188:	06 43       	clr	r6		
    418a:	4b 4b       	mov.b	r11,	r11	
    418c:	8b 10       	swpb	r11		
    418e:	0b 5b       	rla	r11		
    4190:	0b 5b       	rla	r11		
    4192:	0b 5b       	rla	r11		
    4194:	0b 5b       	rla	r11		
    4196:	0b 5b       	rla	r11		
    4198:	84 46 ce ff 	mov	r6,	-50(r4)	;0xffce(r4)
    419c:	84 45 d0 ff 	mov	r5,	-48(r4)	;0xffd0(r4)
    41a0:	94 44 d6 ff 	mov	-42(r4),-46(r4)	;0xffd6(r4), 0xffd2(r4)
    41a4:	d2 ff 
    41a6:	84 4b d4 ff 	mov	r11,	-44(r4)	;0xffd4(r4)
    41aa:	05 4c       	mov	r12,	r5	
    41ac:	06 4d       	mov	r13,	r6	
    41ae:	0b 4e       	mov	r14,	r11	
    41b0:	84 45 bc ff 	mov	r5,	-68(r4)	;0xffbc(r4)
    41b4:	84 46 be ff 	mov	r6,	-66(r4)	;0xffbe(r4)
    41b8:	84 4b c0 ff 	mov	r11,	-64(r4)	;0xffc0(r4)
    41bc:	84 4f c2 ff 	mov	r15,	-62(r4)	;0xffc2(r4)
    41c0:	12 c3       	clrc			
    41c2:	14 10 c2 ff 	rrc	-62(r4)	;0xffc2(r4)
    41c6:	14 10 c0 ff 	rrc	-64(r4)	;0xffc0(r4)
    41ca:	14 10 be ff 	rrc	-66(r4)	;0xffbe(r4)
    41ce:	14 10 bc ff 	rrc	-68(r4)	;0xffbc(r4)
    41d2:	12 c3       	clrc			
    41d4:	14 10 c2 ff 	rrc	-62(r4)	;0xffc2(r4)
    41d8:	14 10 c0 ff 	rrc	-64(r4)	;0xffc0(r4)
    41dc:	14 10 be ff 	rrc	-66(r4)	;0xffbe(r4)
    41e0:	14 10 bc ff 	rrc	-68(r4)	;0xffbc(r4)
    41e4:	12 c3       	clrc			
    41e6:	14 10 c2 ff 	rrc	-62(r4)	;0xffc2(r4)
    41ea:	14 10 c0 ff 	rrc	-64(r4)	;0xffc0(r4)
    41ee:	14 10 be ff 	rrc	-66(r4)	;0xffbe(r4)
    41f2:	14 10 bc ff 	rrc	-68(r4)	;0xffbc(r4)
    41f6:	94 d4 ce ff 	bis	-50(r4),-68(r4)	;0xffce(r4), 0xffbc(r4)
    41fa:	bc ff 
    41fc:	94 d4 d0 ff 	bis	-48(r4),-66(r4)	;0xffd0(r4), 0xffbe(r4)
    4200:	be ff 
    4202:	94 d4 d2 ff 	bis	-46(r4),-64(r4)	;0xffd2(r4), 0xffc0(r4)
    4206:	c0 ff 
    4208:	94 d4 d4 ff 	bis	-44(r4),-62(r4)	;0xffd4(r4), 0xffc2(r4)
    420c:	c2 ff 
        tmp = tmp ^ ROTATE_RIGHT_64(tmp,1);
    420e:	1c 44 bc ff 	mov	-68(r4),r12	;0xffbc(r4)
    4212:	1d 44 be ff 	mov	-66(r4),r13	;0xffbe(r4)
    4216:	1e 44 c0 ff 	mov	-64(r4),r14	;0xffc0(r4)
    421a:	1f 44 c2 ff 	mov	-62(r4),r15	;0xffc2(r4)
    421e:	0b 4c       	mov	r12,	r11	
    4220:	0b 11       	rra	r11		
    4222:	0b 43       	clr	r11		
    4224:	0b 10       	rrc	r11		
    4226:	84 43 d8 ff 	mov	#0,	-40(r4)	;r3 As==00, 0xffd8(r4)
    422a:	84 43 da ff 	mov	#0,	-38(r4)	;r3 As==00, 0xffda(r4)
    422e:	84 43 dc ff 	mov	#0,	-36(r4)	;r3 As==00, 0xffdc(r4)
    4232:	84 4b de ff 	mov	r11,	-34(r4)	;0xffde(r4)
    4236:	12 c3       	clrc			
    4238:	0f 10       	rrc	r15		
    423a:	0e 10       	rrc	r14		
    423c:	0d 10       	rrc	r13		
    423e:	0c 10       	rrc	r12		
    4240:	1c d4 d8 ff 	bis	-40(r4),r12	;0xffd8(r4)
    4244:	1d d4 da ff 	bis	-38(r4),r13	;0xffda(r4)
    4248:	1e d4 dc ff 	bis	-36(r4),r14	;0xffdc(r4)
    424c:	1f d4 de ff 	bis	-34(r4),r15	;0xffde(r4)
    4250:	84 ec bc ff 	xor	r12,	-68(r4)	;0xffbc(r4)
    4254:	84 ed be ff 	xor	r13,	-66(r4)	;0xffbe(r4)
    4258:	84 ee c0 ff 	xor	r14,	-64(r4)	;0xffc0(r4)
    425c:	84 ef c2 ff 	xor	r15,	-62(r4)	;0xffc2(r4)
        k[i] = ~k[i-2] ^ tmp ^ z[(i-2)] ^ 3;
    4260:	5f 44 ba ff 	mov.b	-70(r4),r15	;0xffba(r4)
    4264:	0f 5f       	rla	r15		
    4266:	0f 5f       	rla	r15		
    4268:	0f 5f       	rla	r15		
    426a:	16 44 c4 ff 	mov	-60(r4),r6	;0xffc4(r4)
    426e:	06 5f       	add	r15,	r6	
    4270:	5f 44 ba ff 	mov.b	-70(r4),r15	;0xffba(r4)
    4274:	2f 83       	decd	r15		
    4276:	0f 5f       	rla	r15		
    4278:	0f 5f       	rla	r15		
    427a:	0f 5f       	rla	r15		
    427c:	1f 54 c4 ff 	add	-60(r4),r15	;0xffc4(r4)
    4280:	2c 4f       	mov	@r15,	r12	
    4282:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4286:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    428a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    428e:	3c e3       	inv	r12		
    4290:	3d e3       	inv	r13		
    4292:	3e e3       	inv	r14		
    4294:	3f e3       	inv	r15		
    4296:	1c e4 bc ff 	xor	-68(r4),r12	;0xffbc(r4)
    429a:	1d e4 be ff 	xor	-66(r4),r13	;0xffbe(r4)
    429e:	1e e4 c0 ff 	xor	-64(r4),r14	;0xffc0(r4)
    42a2:	1f e4 c2 ff 	xor	-62(r4),r15	;0xffc2(r4)
    42a6:	5b 44 ba ff 	mov.b	-70(r4),r11	;0xffba(r4)
    42aa:	2b 83       	decd	r11		
    42ac:	5b 4b 00 11 	mov.b	4352(r11),r11	;0x1100(r11)
    42b0:	47 4b       	mov.b	r11,	r7	
    42b2:	08 43       	clr	r8		
    42b4:	09 43       	clr	r9		
    42b6:	0a 43       	clr	r10		
    42b8:	0c e7       	xor	r7,	r12	
    42ba:	0d e8       	xor	r8,	r13	
    42bc:	0e e9       	xor	r9,	r14	
    42be:	0f ea       	xor	r10,	r15	
    42c0:	3c e0 03 00 	xor	#3,	r12	;#0x0003
    42c4:	0d e3       	xor	#0,	r13	;r3 As==00
    42c6:	0e e3       	xor	#0,	r14	;r3 As==00
    42c8:	0f e3       	xor	#0,	r15	;r3 As==00
    42ca:	86 4c 00 00 	mov	r12,	0(r6)	;0x0000(r6)
    42ce:	86 4d 02 00 	mov	r13,	2(r6)	;0x0002(r6)
    42d2:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    42d6:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)

void KeyExpansion ( u64 k[] )
{
    u8 i;
    u64 tmp;
    for ( i=2 ; i<64 ; i++ )
    42da:	d4 53 ba ff 	inc.b	-70(r4)	;0xffba(r4)
    42de:	f4 90 40 00 	cmp.b	#64,	-70(r4)	;#0x0040, 0xffba(r4)
    42e2:	ba ff 
    42e4:	3e 2b       	jnc	$-386    	;abs 0x4162
    {
        tmp = ROTATE_RIGHT_64(k[i-1],3);
        tmp = tmp ^ ROTATE_RIGHT_64(tmp,1);
        k[i] = ~k[i-2] ^ tmp ^ z[(i-2)] ^ 3;
    }
    for ( i=64 ; i<68 ; i++ )
    42e6:	f4 40 40 00 	mov.b	#64,	-70(r4)	;#0x0040, 0xffba(r4)
    42ea:	ba ff 
    42ec:	c6 3c       	jmp	$+398    	;abs 0x447a
    {
        tmp = ROTATE_RIGHT_64(k[i-1],3);
    42ee:	5f 44 ba ff 	mov.b	-70(r4),r15	;0xffba(r4)
    42f2:	3f 53       	add	#-1,	r15	;r3 As==11
    42f4:	0f 5f       	rla	r15		
    42f6:	0f 5f       	rla	r15		
    42f8:	0f 5f       	rla	r15		
    42fa:	1f 54 c4 ff 	add	-60(r4),r15	;0xffc4(r4)
    42fe:	2c 4f       	mov	@r15,	r12	
    4300:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4304:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4308:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    430c:	0b 4c       	mov	r12,	r11	
    430e:	08 43       	clr	r8		
    4310:	09 43       	clr	r9		
    4312:	0a 43       	clr	r10		
    4314:	4b 4b       	mov.b	r11,	r11	
    4316:	8b 10       	swpb	r11		
    4318:	0b 5b       	rla	r11		
    431a:	0b 5b       	rla	r11		
    431c:	0b 5b       	rla	r11		
    431e:	0b 5b       	rla	r11		
    4320:	0b 5b       	rla	r11		
    4322:	84 4a e0 ff 	mov	r10,	-32(r4)	;0xffe0(r4)
    4326:	84 49 e2 ff 	mov	r9,	-30(r4)	;0xffe2(r4)
    432a:	84 48 e4 ff 	mov	r8,	-28(r4)	;0xffe4(r4)
    432e:	84 4b e6 ff 	mov	r11,	-26(r4)	;0xffe6(r4)
    4332:	09 4c       	mov	r12,	r9	
    4334:	0a 4d       	mov	r13,	r10	
    4336:	0b 4e       	mov	r14,	r11	
    4338:	84 49 bc ff 	mov	r9,	-68(r4)	;0xffbc(r4)
    433c:	84 4a be ff 	mov	r10,	-66(r4)	;0xffbe(r4)
    4340:	84 4b c0 ff 	mov	r11,	-64(r4)	;0xffc0(r4)
    4344:	84 4f c2 ff 	mov	r15,	-62(r4)	;0xffc2(r4)
    4348:	12 c3       	clrc			
    434a:	14 10 c2 ff 	rrc	-62(r4)	;0xffc2(r4)
    434e:	14 10 c0 ff 	rrc	-64(r4)	;0xffc0(r4)
    4352:	14 10 be ff 	rrc	-66(r4)	;0xffbe(r4)
    4356:	14 10 bc ff 	rrc	-68(r4)	;0xffbc(r4)
    435a:	12 c3       	clrc			
    435c:	14 10 c2 ff 	rrc	-62(r4)	;0xffc2(r4)
    4360:	14 10 c0 ff 	rrc	-64(r4)	;0xffc0(r4)
    4364:	14 10 be ff 	rrc	-66(r4)	;0xffbe(r4)
    4368:	14 10 bc ff 	rrc	-68(r4)	;0xffbc(r4)
    436c:	12 c3       	clrc			
    436e:	14 10 c2 ff 	rrc	-62(r4)	;0xffc2(r4)
    4372:	14 10 c0 ff 	rrc	-64(r4)	;0xffc0(r4)
    4376:	14 10 be ff 	rrc	-66(r4)	;0xffbe(r4)
    437a:	14 10 bc ff 	rrc	-68(r4)	;0xffbc(r4)
    437e:	94 d4 e0 ff 	bis	-32(r4),-68(r4)	;0xffe0(r4), 0xffbc(r4)
    4382:	bc ff 
    4384:	94 d4 e2 ff 	bis	-30(r4),-66(r4)	;0xffe2(r4), 0xffbe(r4)
    4388:	be ff 
    438a:	94 d4 e4 ff 	bis	-28(r4),-64(r4)	;0xffe4(r4), 0xffc0(r4)
    438e:	c0 ff 
    4390:	94 d4 e6 ff 	bis	-26(r4),-62(r4)	;0xffe6(r4), 0xffc2(r4)
    4394:	c2 ff 
        tmp = tmp ^ ROTATE_RIGHT_64(tmp,1);
    4396:	1c 44 bc ff 	mov	-68(r4),r12	;0xffbc(r4)
    439a:	1d 44 be ff 	mov	-66(r4),r13	;0xffbe(r4)
    439e:	1e 44 c0 ff 	mov	-64(r4),r14	;0xffc0(r4)
    43a2:	1f 44 c2 ff 	mov	-62(r4),r15	;0xffc2(r4)
    43a6:	0b 4c       	mov	r12,	r11	
    43a8:	0b 11       	rra	r11		
    43aa:	0b 43       	clr	r11		
    43ac:	0b 10       	rrc	r11		
    43ae:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    43b2:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
    43b6:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    43ba:	84 4b ee ff 	mov	r11,	-18(r4)	;0xffee(r4)
    43be:	12 c3       	clrc			
    43c0:	0f 10       	rrc	r15		
    43c2:	0e 10       	rrc	r14		
    43c4:	0d 10       	rrc	r13		
    43c6:	0c 10       	rrc	r12		
    43c8:	1c d4 e8 ff 	bis	-24(r4),r12	;0xffe8(r4)
    43cc:	1d d4 ea ff 	bis	-22(r4),r13	;0xffea(r4)
    43d0:	1e d4 ec ff 	bis	-20(r4),r14	;0xffec(r4)
    43d4:	1f d4 ee ff 	bis	-18(r4),r15	;0xffee(r4)
    43d8:	84 ec bc ff 	xor	r12,	-68(r4)	;0xffbc(r4)
    43dc:	84 ed be ff 	xor	r13,	-66(r4)	;0xffbe(r4)
    43e0:	84 ee c0 ff 	xor	r14,	-64(r4)	;0xffc0(r4)
    43e4:	84 ef c2 ff 	xor	r15,	-62(r4)	;0xffc2(r4)
        k[i] = ~k[i-2] ^ tmp ^ z[(i-2)-62] ^ 3;
    43e8:	5f 44 ba ff 	mov.b	-70(r4),r15	;0xffba(r4)
    43ec:	0f 5f       	rla	r15		
    43ee:	0f 5f       	rla	r15		
    43f0:	0f 5f       	rla	r15		
    43f2:	1a 44 c4 ff 	mov	-60(r4),r10	;0xffc4(r4)
    43f6:	0a 5f       	add	r15,	r10	
    43f8:	5f 44 ba ff 	mov.b	-70(r4),r15	;0xffba(r4)
    43fc:	2f 83       	decd	r15		
    43fe:	0f 5f       	rla	r15		
    4400:	0f 5f       	rla	r15		
    4402:	0f 5f       	rla	r15		
    4404:	1f 54 c4 ff 	add	-60(r4),r15	;0xffc4(r4)
    4408:	2c 4f       	mov	@r15,	r12	
    440a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    440e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4412:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4416:	3c e3       	inv	r12		
    4418:	3d e3       	inv	r13		
    441a:	3e e3       	inv	r14		
    441c:	3f e3       	inv	r15		
    441e:	1c e4 bc ff 	xor	-68(r4),r12	;0xffbc(r4)
    4422:	1d e4 be ff 	xor	-66(r4),r13	;0xffbe(r4)
    4426:	1e e4 c0 ff 	xor	-64(r4),r14	;0xffc0(r4)
    442a:	1f e4 c2 ff 	xor	-62(r4),r15	;0xffc2(r4)
    442e:	5b 44 ba ff 	mov.b	-70(r4),r11	;0xffba(r4)
    4432:	3b 50 c0 ff 	add	#-64,	r11	;#0xffc0
    4436:	5b 4b 00 11 	mov.b	4352(r11),r11	;0x1100(r11)
    443a:	4b 4b       	mov.b	r11,	r11	
    443c:	84 4b c6 ff 	mov	r11,	-58(r4)	;0xffc6(r4)
    4440:	84 43 c8 ff 	mov	#0,	-56(r4)	;r3 As==00, 0xffc8(r4)
    4444:	84 43 ca ff 	mov	#0,	-54(r4)	;r3 As==00, 0xffca(r4)
    4448:	84 43 cc ff 	mov	#0,	-52(r4)	;r3 As==00, 0xffcc(r4)
    444c:	1c e4 c6 ff 	xor	-58(r4),r12	;0xffc6(r4)
    4450:	1d e4 c8 ff 	xor	-56(r4),r13	;0xffc8(r4)
    4454:	1e e4 ca ff 	xor	-54(r4),r14	;0xffca(r4)
    4458:	1f e4 cc ff 	xor	-52(r4),r15	;0xffcc(r4)
    445c:	3c e0 03 00 	xor	#3,	r12	;#0x0003
    4460:	0d e3       	xor	#0,	r13	;r3 As==00
    4462:	0e e3       	xor	#0,	r14	;r3 As==00
    4464:	0f e3       	xor	#0,	r15	;r3 As==00
    4466:	8a 4c 00 00 	mov	r12,	0(r10)	;0x0000(r10)
    446a:	8a 4d 02 00 	mov	r13,	2(r10)	;0x0002(r10)
    446e:	8a 4e 04 00 	mov	r14,	4(r10)	;0x0004(r10)
    4472:	8a 4f 06 00 	mov	r15,	6(r10)	;0x0006(r10)
    {
        tmp = ROTATE_RIGHT_64(k[i-1],3);
        tmp = tmp ^ ROTATE_RIGHT_64(tmp,1);
        k[i] = ~k[i-2] ^ tmp ^ z[(i-2)] ^ 3;
    }
    for ( i=64 ; i<68 ; i++ )
    4476:	d4 53 ba ff 	inc.b	-70(r4)	;0xffba(r4)
    447a:	f4 90 44 00 	cmp.b	#68,	-70(r4)	;#0x0044, 0xffba(r4)
    447e:	ba ff 
    4480:	36 2b       	jnc	$-402    	;abs 0x42ee
    {
        tmp = ROTATE_RIGHT_64(k[i-1],3);
        tmp = tmp ^ ROTATE_RIGHT_64(tmp,1);
        k[i] = ~k[i-2] ^ tmp ^ z[(i-2)-62] ^ 3;
    }
}
    4482:	31 50 36 00 	add	#54,	r1	;#0x0036
    4486:	34 41       	pop	r4		
    4488:	35 41       	pop	r5		
    448a:	36 41       	pop	r6		
    448c:	37 41       	pop	r7		
    448e:	38 41       	pop	r8		
    4490:	39 41       	pop	r9		
    4492:	3a 41       	pop	r10		
    4494:	3b 41       	pop	r11		
    4496:	30 41       	ret			

00004498 <Encrypt>:

void Encrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    4498:	0b 12       	push	r11		
    449a:	0a 12       	push	r10		
    449c:	09 12       	push	r9		
    449e:	08 12       	push	r8		
    44a0:	04 12       	push	r4		
    44a2:	04 41       	mov	r1,	r4	
    44a4:	34 50 0a 00 	add	#10,	r4	;#0x000a
    44a8:	31 50 c8 ff 	add	#-56,	r1	;#0xffc8
    44ac:	84 4f c8 ff 	mov	r15,	-56(r4)	;0xffc8(r4)
    44b0:	84 4e ca ff 	mov	r14,	-54(r4)	;0xffca(r4)
    44b4:	84 4d cc ff 	mov	r13,	-52(r4)	;0xffcc(r4)
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    44b8:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    44bc:	2c 4f       	mov	@r15,	r12	
    44be:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    44c2:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    44c6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    44ca:	1b 44 ca ff 	mov	-54(r4),r11	;0xffca(r4)
    44ce:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    44d2:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    44d6:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    44da:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    44de:	1b 44 ca ff 	mov	-54(r4),r11	;0xffca(r4)
    44e2:	3b 52       	add	#8,	r11	;r2 As==11
    44e4:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    44e8:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    44ec:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    44f0:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    44f4:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    44f8:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    44fc:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4500:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4504:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<68 ; i++ )
    4508:	c4 43 be ff 	mov.b	#0,	-66(r4)	;r3 As==00, 0xffbe(r4)
    450c:	30 40 16 47 	br	#0x4716	
    {
        tmp = crypt[0];
    4510:	1f 44 ca ff 	mov	-54(r4),r15	;0xffca(r4)
    4514:	a4 4f c0 ff 	mov	@r15,	-64(r4)	;0xffc0(r4)
    4518:	94 4f 02 00 	mov	2(r15),	-62(r4)	;0x0002(r15), 0xffc2(r4)
    451c:	c2 ff 
    451e:	94 4f 04 00 	mov	4(r15),	-60(r4)	;0x0004(r15), 0xffc4(r4)
    4522:	c4 ff 
    4524:	94 4f 06 00 	mov	6(r15),	-58(r4)	;0x0006(r15), 0xffc6(r4)
    4528:	c6 ff 
        crypt[0] = crypt[1] ^ ((ROTATE_LEFT_64(crypt[0],1)) & (ROTATE_LEFT_64(crypt[0],8))) ^ (ROTATE_LEFT_64(crypt[0],2)) ^ key[i];
    452a:	1f 44 ca ff 	mov	-54(r4),r15	;0xffca(r4)
    452e:	3f 52       	add	#8,	r15	;r2 As==11
    4530:	a4 4f ce ff 	mov	@r15,	-50(r4)	;0xffce(r4)
    4534:	94 4f 02 00 	mov	2(r15),	-48(r4)	;0x0002(r15), 0xffd0(r4)
    4538:	d0 ff 
    453a:	94 4f 04 00 	mov	4(r15),	-46(r4)	;0x0004(r15), 0xffd2(r4)
    453e:	d2 ff 
    4540:	94 4f 06 00 	mov	6(r15),	-44(r4)	;0x0006(r15), 0xffd4(r4)
    4544:	d4 ff 
    4546:	1f 44 ca ff 	mov	-54(r4),r15	;0xffca(r4)
    454a:	2c 4f       	mov	@r15,	r12	
    454c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4550:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4554:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4558:	08 4c       	mov	r12,	r8	
    455a:	09 4d       	mov	r13,	r9	
    455c:	0a 4e       	mov	r14,	r10	
    455e:	0b 4f       	mov	r15,	r11	
    4560:	08 58       	rla	r8		
    4562:	09 69       	rlc	r9		
    4564:	0a 6a       	rlc	r10		
    4566:	0b 6b       	rlc	r11		
    4568:	0f 5f       	rla	r15		
    456a:	0f 43       	clr	r15		
    456c:	0f 6f       	rlc	r15		
    456e:	84 4f d6 ff 	mov	r15,	-42(r4)	;0xffd6(r4)
    4572:	84 43 d8 ff 	mov	#0,	-40(r4)	;r3 As==00, 0xffd8(r4)
    4576:	84 43 da ff 	mov	#0,	-38(r4)	;r3 As==00, 0xffda(r4)
    457a:	84 43 dc ff 	mov	#0,	-36(r4)	;r3 As==00, 0xffdc(r4)
    457e:	84 d8 d6 ff 	bis	r8,	-42(r4)	;0xffd6(r4)
    4582:	84 d9 d8 ff 	bis	r9,	-40(r4)	;0xffd8(r4)
    4586:	84 da da ff 	bis	r10,	-38(r4)	;0xffda(r4)
    458a:	84 db dc ff 	bis	r11,	-36(r4)	;0xffdc(r4)
    458e:	1f 44 ca ff 	mov	-54(r4),r15	;0xffca(r4)
    4592:	28 4f       	mov	@r15,	r8	
    4594:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    4598:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    459c:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    45a0:	0c 48       	mov	r8,	r12	
    45a2:	0d 49       	mov	r9,	r13	
    45a4:	0e 4a       	mov	r10,	r14	
    45a6:	0f 4b       	mov	r11,	r15	
    45a8:	4f ee       	xor.b	r14,	r15	
    45aa:	0f ee       	xor	r14,	r15	
    45ac:	8f 10       	swpb	r15		
    45ae:	4e ed       	xor.b	r13,	r14	
    45b0:	0e ed       	xor	r13,	r14	
    45b2:	8e 10       	swpb	r14		
    45b4:	4d ec       	xor.b	r12,	r13	
    45b6:	0d ec       	xor	r12,	r13	
    45b8:	8d 10       	swpb	r13		
    45ba:	4c 4c       	mov.b	r12,	r12	
    45bc:	8c 10       	swpb	r12		
    45be:	0a 43       	clr	r10		
    45c0:	08 4a       	mov	r10,	r8	
    45c2:	09 4a       	mov	r10,	r9	
    45c4:	8b 10       	swpb	r11		
    45c6:	4b 4b       	mov.b	r11,	r11	
    45c8:	84 4b de ff 	mov	r11,	-34(r4)	;0xffde(r4)
    45cc:	84 49 e0 ff 	mov	r9,	-32(r4)	;0xffe0(r4)
    45d0:	84 48 e2 ff 	mov	r8,	-30(r4)	;0xffe2(r4)
    45d4:	84 4a e4 ff 	mov	r10,	-28(r4)	;0xffe4(r4)
    45d8:	84 dc de ff 	bis	r12,	-34(r4)	;0xffde(r4)
    45dc:	84 dd e0 ff 	bis	r13,	-32(r4)	;0xffe0(r4)
    45e0:	84 de e2 ff 	bis	r14,	-30(r4)	;0xffe2(r4)
    45e4:	84 df e4 ff 	bis	r15,	-28(r4)	;0xffe4(r4)
    45e8:	1c 44 d6 ff 	mov	-42(r4),r12	;0xffd6(r4)
    45ec:	1d 44 d8 ff 	mov	-40(r4),r13	;0xffd8(r4)
    45f0:	1e 44 da ff 	mov	-38(r4),r14	;0xffda(r4)
    45f4:	1f 44 dc ff 	mov	-36(r4),r15	;0xffdc(r4)
    45f8:	1c f4 de ff 	and	-34(r4),r12	;0xffde(r4)
    45fc:	1d f4 e0 ff 	and	-32(r4),r13	;0xffe0(r4)
    4600:	1e f4 e2 ff 	and	-30(r4),r14	;0xffe2(r4)
    4604:	1f f4 e4 ff 	and	-28(r4),r15	;0xffe4(r4)
    4608:	18 44 ce ff 	mov	-50(r4),r8	;0xffce(r4)
    460c:	19 44 d0 ff 	mov	-48(r4),r9	;0xffd0(r4)
    4610:	1a 44 d2 ff 	mov	-46(r4),r10	;0xffd2(r4)
    4614:	1b 44 d4 ff 	mov	-44(r4),r11	;0xffd4(r4)
    4618:	08 ec       	xor	r12,	r8	
    461a:	09 ed       	xor	r13,	r9	
    461c:	0a ee       	xor	r14,	r10	
    461e:	0b ef       	xor	r15,	r11	
    4620:	84 48 e6 ff 	mov	r8,	-26(r4)	;0xffe6(r4)
    4624:	84 49 e8 ff 	mov	r9,	-24(r4)	;0xffe8(r4)
    4628:	84 4a ea ff 	mov	r10,	-22(r4)	;0xffea(r4)
    462c:	84 4b ec ff 	mov	r11,	-20(r4)	;0xffec(r4)
    4630:	1f 44 ca ff 	mov	-54(r4),r15	;0xffca(r4)
    4634:	2c 4f       	mov	@r15,	r12	
    4636:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    463a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    463e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4642:	08 4c       	mov	r12,	r8	
    4644:	09 4d       	mov	r13,	r9	
    4646:	0a 4e       	mov	r14,	r10	
    4648:	0b 4f       	mov	r15,	r11	
    464a:	08 58       	rla	r8		
    464c:	09 69       	rlc	r9		
    464e:	0a 6a       	rlc	r10		
    4650:	0b 6b       	rlc	r11		
    4652:	08 58       	rla	r8		
    4654:	09 69       	rlc	r9		
    4656:	0a 6a       	rlc	r10		
    4658:	0b 6b       	rlc	r11		
    465a:	0e 43       	clr	r14		
    465c:	0c 4e       	mov	r14,	r12	
    465e:	0d 4e       	mov	r14,	r13	
    4660:	8f 10       	swpb	r15		
    4662:	4f 4f       	mov.b	r15,	r15	
    4664:	12 c3       	clrc			
    4666:	0f 10       	rrc	r15		
    4668:	12 c3       	clrc			
    466a:	0f 10       	rrc	r15		
    466c:	12 c3       	clrc			
    466e:	0f 10       	rrc	r15		
    4670:	12 c3       	clrc			
    4672:	0f 10       	rrc	r15		
    4674:	12 c3       	clrc			
    4676:	0f 10       	rrc	r15		
    4678:	12 c3       	clrc			
    467a:	0f 10       	rrc	r15		
    467c:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    4680:	84 4d f0 ff 	mov	r13,	-16(r4)	;0xfff0(r4)
    4684:	84 4c f2 ff 	mov	r12,	-14(r4)	;0xfff2(r4)
    4688:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    468c:	84 d8 ee ff 	bis	r8,	-18(r4)	;0xffee(r4)
    4690:	84 d9 f0 ff 	bis	r9,	-16(r4)	;0xfff0(r4)
    4694:	84 da f2 ff 	bis	r10,	-14(r4)	;0xfff2(r4)
    4698:	84 db f4 ff 	bis	r11,	-12(r4)	;0xfff4(r4)
    469c:	18 44 e6 ff 	mov	-26(r4),r8	;0xffe6(r4)
    46a0:	19 44 e8 ff 	mov	-24(r4),r9	;0xffe8(r4)
    46a4:	1a 44 ea ff 	mov	-22(r4),r10	;0xffea(r4)
    46a8:	1b 44 ec ff 	mov	-20(r4),r11	;0xffec(r4)
    46ac:	18 e4 ee ff 	xor	-18(r4),r8	;0xffee(r4)
    46b0:	19 e4 f0 ff 	xor	-16(r4),r9	;0xfff0(r4)
    46b4:	1a e4 f2 ff 	xor	-14(r4),r10	;0xfff2(r4)
    46b8:	1b e4 f4 ff 	xor	-12(r4),r11	;0xfff4(r4)
    46bc:	5f 44 be ff 	mov.b	-66(r4),r15	;0xffbe(r4)
    46c0:	0f 5f       	rla	r15		
    46c2:	0f 5f       	rla	r15		
    46c4:	0f 5f       	rla	r15		
    46c6:	1f 54 cc ff 	add	-52(r4),r15	;0xffcc(r4)
    46ca:	2c 4f       	mov	@r15,	r12	
    46cc:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    46d0:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    46d4:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    46d8:	0c e8       	xor	r8,	r12	
    46da:	0d e9       	xor	r9,	r13	
    46dc:	0e ea       	xor	r10,	r14	
    46de:	0f eb       	xor	r11,	r15	
    46e0:	1b 44 ca ff 	mov	-54(r4),r11	;0xffca(r4)
    46e4:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    46e8:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    46ec:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    46f0:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        crypt[1] = tmp;
    46f4:	1f 44 ca ff 	mov	-54(r4),r15	;0xffca(r4)
    46f8:	3f 52       	add	#8,	r15	;r2 As==11
    46fa:	9f 44 c0 ff 	mov	-64(r4),0(r15)	;0xffc0(r4), 0x0000(r15)
    46fe:	00 00 
    4700:	9f 44 c2 ff 	mov	-62(r4),2(r15)	;0xffc2(r4), 0x0002(r15)
    4704:	02 00 
    4706:	9f 44 c4 ff 	mov	-60(r4),4(r15)	;0xffc4(r4), 0x0004(r15)
    470a:	04 00 
    470c:	9f 44 c6 ff 	mov	-58(r4),6(r15)	;0xffc6(r4), 0x0006(r15)
    4710:	06 00 
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<68 ; i++ )
    4712:	d4 53 be ff 	inc.b	-66(r4)	;0xffbe(r4)
    4716:	f4 90 44 00 	cmp.b	#68,	-66(r4)	;#0x0044, 0xffbe(r4)
    471a:	be ff 
    471c:	02 2c       	jc	$+6      	;abs 0x4722
    471e:	30 40 10 45 	br	#0x4510	
    {
        tmp = crypt[0];
        crypt[0] = crypt[1] ^ ((ROTATE_LEFT_64(crypt[0],1)) & (ROTATE_LEFT_64(crypt[0],8))) ^ (ROTATE_LEFT_64(crypt[0],2)) ^ key[i];
        crypt[1] = tmp;
    }
}
    4722:	31 50 38 00 	add	#56,	r1	;#0x0038
    4726:	34 41       	pop	r4		
    4728:	38 41       	pop	r8		
    472a:	39 41       	pop	r9		
    472c:	3a 41       	pop	r10		
    472e:	3b 41       	pop	r11		
    4730:	30 41       	ret			

00004732 <Decrypt>:

void Decrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    4732:	0b 12       	push	r11		
    4734:	0a 12       	push	r10		
    4736:	09 12       	push	r9		
    4738:	08 12       	push	r8		
    473a:	07 12       	push	r7		
    473c:	04 12       	push	r4		
    473e:	04 41       	mov	r1,	r4	
    4740:	34 50 0c 00 	add	#12,	r4	;#0x000c
    4744:	31 50 c8 ff 	add	#-56,	r1	;#0xffc8
    4748:	84 4f c6 ff 	mov	r15,	-58(r4)	;0xffc6(r4)
    474c:	84 4e c8 ff 	mov	r14,	-56(r4)	;0xffc8(r4)
    4750:	84 4d ca ff 	mov	r13,	-54(r4)	;0xffca(r4)
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    4754:	1f 44 c6 ff 	mov	-58(r4),r15	;0xffc6(r4)
    4758:	2c 4f       	mov	@r15,	r12	
    475a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    475e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4762:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4766:	1b 44 c8 ff 	mov	-56(r4),r11	;0xffc8(r4)
    476a:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    476e:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4772:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4776:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    477a:	1b 44 c8 ff 	mov	-56(r4),r11	;0xffc8(r4)
    477e:	3b 52       	add	#8,	r11	;r2 As==11
    4780:	1f 44 c6 ff 	mov	-58(r4),r15	;0xffc6(r4)
    4784:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    4788:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    478c:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    4790:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    4794:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4798:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    479c:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    47a0:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<68 ; i++ )
    47a4:	c4 43 bc ff 	mov.b	#0,	-68(r4)	;r3 As==00, 0xffbc(r4)
    47a8:	30 40 be 49 	br	#0x49be	
    {
        tmp = crypt[1];
    47ac:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    47b0:	94 4f 08 00 	mov	8(r15),	-66(r4)	;0x0008(r15), 0xffbe(r4)
    47b4:	be ff 
    47b6:	94 4f 0a 00 	mov	10(r15),-64(r4)	;0x000a(r15), 0xffc0(r4)
    47ba:	c0 ff 
    47bc:	94 4f 0c 00 	mov	12(r15),-62(r4)	;0x000c(r15), 0xffc2(r4)
    47c0:	c2 ff 
    47c2:	94 4f 0e 00 	mov	14(r15),-60(r4)	;0x000e(r15), 0xffc4(r4)
    47c6:	c4 ff 
        crypt[1] = crypt[0] ^ ((ROTATE_LEFT_64(crypt[1],1)) & (ROTATE_LEFT_64(crypt[1],8))) ^ (ROTATE_LEFT_64(crypt[1],2)) ^ key[67-i];
    47c8:	17 44 c8 ff 	mov	-56(r4),r7	;0xffc8(r4)
    47cc:	37 52       	add	#8,	r7	;r2 As==11
    47ce:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    47d2:	a4 4f cc ff 	mov	@r15,	-52(r4)	;0xffcc(r4)
    47d6:	94 4f 02 00 	mov	2(r15),	-50(r4)	;0x0002(r15), 0xffce(r4)
    47da:	ce ff 
    47dc:	94 4f 04 00 	mov	4(r15),	-48(r4)	;0x0004(r15), 0xffd0(r4)
    47e0:	d0 ff 
    47e2:	94 4f 06 00 	mov	6(r15),	-46(r4)	;0x0006(r15), 0xffd2(r4)
    47e6:	d2 ff 
    47e8:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    47ec:	3f 52       	add	#8,	r15	;r2 As==11
    47ee:	2c 4f       	mov	@r15,	r12	
    47f0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    47f4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    47f8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    47fc:	08 4c       	mov	r12,	r8	
    47fe:	09 4d       	mov	r13,	r9	
    4800:	0a 4e       	mov	r14,	r10	
    4802:	0b 4f       	mov	r15,	r11	
    4804:	08 58       	rla	r8		
    4806:	09 69       	rlc	r9		
    4808:	0a 6a       	rlc	r10		
    480a:	0b 6b       	rlc	r11		
    480c:	0f 5f       	rla	r15		
    480e:	0f 43       	clr	r15		
    4810:	0f 6f       	rlc	r15		
    4812:	84 4f d4 ff 	mov	r15,	-44(r4)	;0xffd4(r4)
    4816:	84 43 d6 ff 	mov	#0,	-42(r4)	;r3 As==00, 0xffd6(r4)
    481a:	84 43 d8 ff 	mov	#0,	-40(r4)	;r3 As==00, 0xffd8(r4)
    481e:	84 43 da ff 	mov	#0,	-38(r4)	;r3 As==00, 0xffda(r4)
    4822:	84 d8 d4 ff 	bis	r8,	-44(r4)	;0xffd4(r4)
    4826:	84 d9 d6 ff 	bis	r9,	-42(r4)	;0xffd6(r4)
    482a:	84 da d8 ff 	bis	r10,	-40(r4)	;0xffd8(r4)
    482e:	84 db da ff 	bis	r11,	-38(r4)	;0xffda(r4)
    4832:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    4836:	3f 52       	add	#8,	r15	;r2 As==11
    4838:	28 4f       	mov	@r15,	r8	
    483a:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    483e:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    4842:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    4846:	0c 48       	mov	r8,	r12	
    4848:	0d 49       	mov	r9,	r13	
    484a:	0e 4a       	mov	r10,	r14	
    484c:	0f 4b       	mov	r11,	r15	
    484e:	4f ee       	xor.b	r14,	r15	
    4850:	0f ee       	xor	r14,	r15	
    4852:	8f 10       	swpb	r15		
    4854:	4e ed       	xor.b	r13,	r14	
    4856:	0e ed       	xor	r13,	r14	
    4858:	8e 10       	swpb	r14		
    485a:	4d ec       	xor.b	r12,	r13	
    485c:	0d ec       	xor	r12,	r13	
    485e:	8d 10       	swpb	r13		
    4860:	4c 4c       	mov.b	r12,	r12	
    4862:	8c 10       	swpb	r12		
    4864:	0a 43       	clr	r10		
    4866:	08 4a       	mov	r10,	r8	
    4868:	09 4a       	mov	r10,	r9	
    486a:	8b 10       	swpb	r11		
    486c:	4b 4b       	mov.b	r11,	r11	
    486e:	84 4b dc ff 	mov	r11,	-36(r4)	;0xffdc(r4)
    4872:	84 49 de ff 	mov	r9,	-34(r4)	;0xffde(r4)
    4876:	84 48 e0 ff 	mov	r8,	-32(r4)	;0xffe0(r4)
    487a:	84 4a e2 ff 	mov	r10,	-30(r4)	;0xffe2(r4)
    487e:	84 dc dc ff 	bis	r12,	-36(r4)	;0xffdc(r4)
    4882:	84 dd de ff 	bis	r13,	-34(r4)	;0xffde(r4)
    4886:	84 de e0 ff 	bis	r14,	-32(r4)	;0xffe0(r4)
    488a:	84 df e2 ff 	bis	r15,	-30(r4)	;0xffe2(r4)
    488e:	1c 44 d4 ff 	mov	-44(r4),r12	;0xffd4(r4)
    4892:	1d 44 d6 ff 	mov	-42(r4),r13	;0xffd6(r4)
    4896:	1e 44 d8 ff 	mov	-40(r4),r14	;0xffd8(r4)
    489a:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    489e:	1c f4 dc ff 	and	-36(r4),r12	;0xffdc(r4)
    48a2:	1d f4 de ff 	and	-34(r4),r13	;0xffde(r4)
    48a6:	1e f4 e0 ff 	and	-32(r4),r14	;0xffe0(r4)
    48aa:	1f f4 e2 ff 	and	-30(r4),r15	;0xffe2(r4)
    48ae:	18 44 cc ff 	mov	-52(r4),r8	;0xffcc(r4)
    48b2:	19 44 ce ff 	mov	-50(r4),r9	;0xffce(r4)
    48b6:	1a 44 d0 ff 	mov	-48(r4),r10	;0xffd0(r4)
    48ba:	1b 44 d2 ff 	mov	-46(r4),r11	;0xffd2(r4)
    48be:	08 ec       	xor	r12,	r8	
    48c0:	09 ed       	xor	r13,	r9	
    48c2:	0a ee       	xor	r14,	r10	
    48c4:	0b ef       	xor	r15,	r11	
    48c6:	84 48 e4 ff 	mov	r8,	-28(r4)	;0xffe4(r4)
    48ca:	84 49 e6 ff 	mov	r9,	-26(r4)	;0xffe6(r4)
    48ce:	84 4a e8 ff 	mov	r10,	-24(r4)	;0xffe8(r4)
    48d2:	84 4b ea ff 	mov	r11,	-22(r4)	;0xffea(r4)
    48d6:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    48da:	3f 52       	add	#8,	r15	;r2 As==11
    48dc:	2c 4f       	mov	@r15,	r12	
    48de:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    48e2:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    48e6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    48ea:	08 4c       	mov	r12,	r8	
    48ec:	09 4d       	mov	r13,	r9	
    48ee:	0a 4e       	mov	r14,	r10	
    48f0:	0b 4f       	mov	r15,	r11	
    48f2:	08 58       	rla	r8		
    48f4:	09 69       	rlc	r9		
    48f6:	0a 6a       	rlc	r10		
    48f8:	0b 6b       	rlc	r11		
    48fa:	08 58       	rla	r8		
    48fc:	09 69       	rlc	r9		
    48fe:	0a 6a       	rlc	r10		
    4900:	0b 6b       	rlc	r11		
    4902:	0e 43       	clr	r14		
    4904:	0c 4e       	mov	r14,	r12	
    4906:	0d 4e       	mov	r14,	r13	
    4908:	8f 10       	swpb	r15		
    490a:	4f 4f       	mov.b	r15,	r15	
    490c:	12 c3       	clrc			
    490e:	0f 10       	rrc	r15		
    4910:	12 c3       	clrc			
    4912:	0f 10       	rrc	r15		
    4914:	12 c3       	clrc			
    4916:	0f 10       	rrc	r15		
    4918:	12 c3       	clrc			
    491a:	0f 10       	rrc	r15		
    491c:	12 c3       	clrc			
    491e:	0f 10       	rrc	r15		
    4920:	12 c3       	clrc			
    4922:	0f 10       	rrc	r15		
    4924:	84 4f ec ff 	mov	r15,	-20(r4)	;0xffec(r4)
    4928:	84 4d ee ff 	mov	r13,	-18(r4)	;0xffee(r4)
    492c:	84 4c f0 ff 	mov	r12,	-16(r4)	;0xfff0(r4)
    4930:	84 4e f2 ff 	mov	r14,	-14(r4)	;0xfff2(r4)
    4934:	84 d8 ec ff 	bis	r8,	-20(r4)	;0xffec(r4)
    4938:	84 d9 ee ff 	bis	r9,	-18(r4)	;0xffee(r4)
    493c:	84 da f0 ff 	bis	r10,	-16(r4)	;0xfff0(r4)
    4940:	84 db f2 ff 	bis	r11,	-14(r4)	;0xfff2(r4)
    4944:	18 44 e4 ff 	mov	-28(r4),r8	;0xffe4(r4)
    4948:	19 44 e6 ff 	mov	-26(r4),r9	;0xffe6(r4)
    494c:	1a 44 e8 ff 	mov	-24(r4),r10	;0xffe8(r4)
    4950:	1b 44 ea ff 	mov	-22(r4),r11	;0xffea(r4)
    4954:	18 e4 ec ff 	xor	-20(r4),r8	;0xffec(r4)
    4958:	19 e4 ee ff 	xor	-18(r4),r9	;0xffee(r4)
    495c:	1a e4 f0 ff 	xor	-16(r4),r10	;0xfff0(r4)
    4960:	1b e4 f2 ff 	xor	-14(r4),r11	;0xfff2(r4)
    4964:	5e 44 bc ff 	mov.b	-68(r4),r14	;0xffbc(r4)
    4968:	3f 40 43 00 	mov	#67,	r15	;#0x0043
    496c:	0f 8e       	sub	r14,	r15	
    496e:	0f 5f       	rla	r15		
    4970:	0f 5f       	rla	r15		
    4972:	0f 5f       	rla	r15		
    4974:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    4978:	2c 4f       	mov	@r15,	r12	
    497a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    497e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4982:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4986:	0c e8       	xor	r8,	r12	
    4988:	0d e9       	xor	r9,	r13	
    498a:	0e ea       	xor	r10,	r14	
    498c:	0f eb       	xor	r11,	r15	
    498e:	87 4c 00 00 	mov	r12,	0(r7)	;0x0000(r7)
    4992:	87 4d 02 00 	mov	r13,	2(r7)	;0x0002(r7)
    4996:	87 4e 04 00 	mov	r14,	4(r7)	;0x0004(r7)
    499a:	87 4f 06 00 	mov	r15,	6(r7)	;0x0006(r7)
        crypt[0] = tmp;
    499e:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    49a2:	9f 44 be ff 	mov	-66(r4),0(r15)	;0xffbe(r4), 0x0000(r15)
    49a6:	00 00 
    49a8:	9f 44 c0 ff 	mov	-64(r4),2(r15)	;0xffc0(r4), 0x0002(r15)
    49ac:	02 00 
    49ae:	9f 44 c2 ff 	mov	-62(r4),4(r15)	;0xffc2(r4), 0x0004(r15)
    49b2:	04 00 
    49b4:	9f 44 c4 ff 	mov	-60(r4),6(r15)	;0xffc4(r4), 0x0006(r15)
    49b8:	06 00 
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<68 ; i++ )
    49ba:	d4 53 bc ff 	inc.b	-68(r4)	;0xffbc(r4)
    49be:	f4 90 44 00 	cmp.b	#68,	-68(r4)	;#0x0044, 0xffbc(r4)
    49c2:	bc ff 
    49c4:	02 2c       	jc	$+6      	;abs 0x49ca
    49c6:	30 40 ac 47 	br	#0x47ac	
    {
        tmp = crypt[1];
        crypt[1] = crypt[0] ^ ((ROTATE_LEFT_64(crypt[1],1)) & (ROTATE_LEFT_64(crypt[1],8))) ^ (ROTATE_LEFT_64(crypt[1],2)) ^ key[67-i];
        crypt[0] = tmp;
    }
}
    49ca:	31 50 38 00 	add	#56,	r1	;#0x0038
    49ce:	34 41       	pop	r4		
    49d0:	37 41       	pop	r7		
    49d2:	38 41       	pop	r8		
    49d4:	39 41       	pop	r9		
    49d6:	3a 41       	pop	r10		
    49d8:	3b 41       	pop	r11		
    49da:	30 41       	ret			

000049dc <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    49dc:	04 12       	push	r4		
    49de:	04 41       	mov	r1,	r4	
    49e0:	24 53       	incd	r4		
    49e2:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    49e6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    49ea:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    49ee:	0d 3c       	jmp	$+28     	;abs 0x4a0a
    {
      for (i = 0; i<d; i++) 
    49f0:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    49f4:	04 3c       	jmp	$+10     	;abs 0x49fe
	{
	  nop();
    49f6:	03 43       	nop			
	  nop();
    49f8:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    49fa:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    49fe:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4a02:	f8 ff 
    4a04:	f8 2b       	jnc	$-14     	;abs 0x49f6
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4a06:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4a0a:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4a0e:	fa ff 
    4a10:	ef 2b       	jnc	$-32     	;abs 0x49f0
	{
	  nop();
	  nop();
	}
    }
}
    4a12:	31 50 06 00 	add	#6,	r1	;#0x0006
    4a16:	34 41       	pop	r4		
    4a18:	30 41       	ret			

00004a1a <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4a1a:	04 12       	push	r4		
    4a1c:	04 41       	mov	r1,	r4	
    4a1e:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4a20:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4a24:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4a26:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4a2a:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4a2e:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4a32:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4a36:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4a3a:	5f 42 05 00 	mov.b	&0x0005,r15	
    4a3e:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4a42:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4a46:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4a4a:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4a4e:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4a50:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4a54:	79 00 
  U1RCTL = 0;
    4a56:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4a5a:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4a5e:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4a62:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4a64:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4a68:	7b 00 

  delay(0x800);
    4a6a:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4a6e:	b0 12 dc 49 	call	#0x49dc	
  return 0;
    4a72:	0f 43       	clr	r15		
}
    4a74:	34 41       	pop	r4		
    4a76:	30 41       	ret			

00004a78 <uart1_putchar>:

int uart1_putchar(int c)
{
    4a78:	04 12       	push	r4		
    4a7a:	04 41       	mov	r1,	r4	
    4a7c:	24 53       	incd	r4		
    4a7e:	21 83       	decd	r1		
    4a80:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4a84:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a88:	4f 4f       	mov.b	r15,	r15	
    4a8a:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4a8e:	03 43       	nop			
    4a90:	5f 42 79 00 	mov.b	&0x0079,r15	
    4a94:	4f 4f       	mov.b	r15,	r15	
    4a96:	1f f3       	and	#1,	r15	;r3 As==01
    4a98:	0f 93       	tst	r15		
    4a9a:	fa 27       	jz	$-10     	;abs 0x4a90
  return (unsigned char)c;
    4a9c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4aa0:	4f 4f       	mov.b	r15,	r15	
    4aa2:	4f 4f       	mov.b	r15,	r15	
}
    4aa4:	21 53       	incd	r1		
    4aa6:	34 41       	pop	r4		
    4aa8:	30 41       	ret			

00004aaa <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4aaa:	04 12       	push	r4		
    4aac:	04 41       	mov	r1,	r4	
    4aae:	24 53       	incd	r4		
    4ab0:	21 83       	decd	r1		
    4ab2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4ab6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4aba:	b0 12 78 4a 	call	#0x4a78	
}
    4abe:	21 53       	incd	r1		
    4ac0:	34 41       	pop	r4		
    4ac2:	30 41       	ret			

00004ac4 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4ac4:	04 12       	push	r4		
    4ac6:	04 41       	mov	r1,	r4	
    4ac8:	24 53       	incd	r4		
  ;
}
    4aca:	34 41       	pop	r4		
    4acc:	30 41       	ret			

00004ace <start_decrypt>:
void
start_decrypt()
{
    4ace:	04 12       	push	r4		
    4ad0:	04 41       	mov	r1,	r4	
    4ad2:	24 53       	incd	r4		
  ;
}
    4ad4:	34 41       	pop	r4		
    4ad6:	30 41       	ret			

00004ad8 <end_expe>:


void
end_expe()
{
    4ad8:	04 12       	push	r4		
    4ada:	04 41       	mov	r1,	r4	
    4adc:	24 53       	incd	r4		
  ;
}
    4ade:	34 41       	pop	r4		
    4ae0:	30 41       	ret			

00004ae2 <_unexpected_>:
    4ae2:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	3a 41 3a 41 3a 41 3a 41 3a 41 3a 41 3a 41 3a 41     :A:A:A:A:A:A:A:A
    fff0:	3a 41 3a 41 3a 41 3a 41 3a 41 3a 41 3a 41 00 40     :A:A:A:A:A:A:A.@
