
mibs.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00004c62 l    d  .rodata	00000000 .rodata
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 mibs64.c
00004c62 l     O .rodata	00000020 sBox4
00004c82 l     O .rodata	00000020 sBox4Inv
000040c2 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004c28 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040c2  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040c2  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
00004aac g     F .text	000000ae Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000467e g     F .text	000001ec KeySchedule
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004ca2 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004b98 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040bc  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040c2  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004c56 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00004306 g     F .text	00000208 Mix
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
00004164 g     F .text	000001a2 Substitute
0000019e g       *ABS*	00000000 __TBCCR6
000040c2  w      .text	00000000 __isr_5
00004ca2 g       *ABS*	00000000 __data_load_start
000040c2 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
0000450e g     F .text	00000170 Permute
000040c2  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040c2  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040c2  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040c2  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
000040c6 g     F .text	00000012 pks
00000051 g       *ABS*	00000000 __I2CIFG
00004c60  w      .text	00000000 _unexpected_
000040c2  w      .text	00000000 __isr_8
0000491e g     F .text	0000018e InvKeySchedule
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040c2  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004bf6 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040c2 g       .text	00000000 __ctors_start
000040c2  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .rodata	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	0000007e main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040c2  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004b5a g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040c2  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040c2 g       .text	00000000 __dtors_start
000040c2  w      .text	00000000 __isr_6
000040c2 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040c2  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .rodata	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004c42 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040bc  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004c4c g     F .text	0000000a start_decrypt
00001100 g       .rodata	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
000040d8 g     F .text	0000008c AddRoundKey
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000486a g     F .text	000000b4 Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f a2 4c 	mov	19618(r15),4352(r15);0x4ca2(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
}



int main(void)
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
#ifdef PRINT
  uart1_init();
#endif
  // Input values
  u8 state[8]={0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    4046:	f4 40 fe ff 	mov.b	#-2,	-18(r4)	;#0xfffe, 0xffee(r4)
    404a:	ee ff 
    404c:	f4 43 ef ff 	mov.b	#-1,	-17(r4)	;r3 As==11, 0xffef(r4)
    4050:	f4 43 f0 ff 	mov.b	#-1,	-16(r4)	;r3 As==11, 0xfff0(r4)
    4054:	f4 43 f1 ff 	mov.b	#-1,	-15(r4)	;r3 As==11, 0xfff1(r4)
    4058:	f4 43 f2 ff 	mov.b	#-1,	-14(r4)	;r3 As==11, 0xfff2(r4)
    405c:	f4 43 f3 ff 	mov.b	#-1,	-13(r4)	;r3 As==11, 0xfff3(r4)
    4060:	f4 43 f4 ff 	mov.b	#-1,	-12(r4)	;r3 As==11, 0xfff4(r4)
    4064:	f4 43 f5 ff 	mov.b	#-1,	-11(r4)	;r3 As==11, 0xfff5(r4)
  //u8 state[8]={0x00};

  //u8 key[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
  u8 key[8]={0};
    4068:	0f 44       	mov	r4,	r15	
    406a:	3f 50 f6 ff 	add	#-10,	r15	;#0xfff6
    406e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4072:	2f 53       	incd	r15		
    4074:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4078:	2f 53       	incd	r15		
    407a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    407e:	2f 53       	incd	r15		
    4080:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4084:	2f 53       	incd	r15		

  
  START_ENCRYPT();
    4086:	b0 12 42 4c 	call	#0x4c42	
  Encrypt(state, key);
    408a:	0f 44       	mov	r4,	r15	
    408c:	3f 50 f6 ff 	add	#-10,	r15	;#0xfff6
    4090:	0e 4f       	mov	r15,	r14	
    4092:	0f 44       	mov	r4,	r15	
    4094:	3f 50 ee ff 	add	#-18,	r15	;#0xffee
    4098:	b0 12 6a 48 	call	#0x486a	
#ifdef PRINT
  printf("\n\nCiphered text :\n");
  pks(state);
#endif
  START_DECRYPT();
    409c:	b0 12 4c 4c 	call	#0x4c4c	
  Decrypt(state, key);
    40a0:	0f 44       	mov	r4,	r15	
    40a2:	3f 50 f6 ff 	add	#-10,	r15	;#0xfff6
    40a6:	0e 4f       	mov	r15,	r14	
    40a8:	0f 44       	mov	r4,	r15	
    40aa:	3f 50 ee ff 	add	#-18,	r15	;#0xffee
    40ae:	b0 12 ac 4a 	call	#0x4aac	
#ifdef PRINT
  printf("Deciphered text :\n");
  pks(state);
#endif
  END_EXPE();
    40b2:	b0 12 56 4c 	call	#0x4c56	

  return 0;
    40b6:	0f 43       	clr	r15		
}
    40b8:	31 50 10 00 	add	#16,	r1	;#0x0010

000040bc <__stop_progExec__>:
    40bc:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40c0:	fd 3f       	jmp	$-4      	;abs 0x40bc

000040c2 <__ctors_end>:
    40c2:	30 40 60 4c 	br	#0x4c60	

000040c6 <pks>:
  0x7, 0xE, 0xC, 0x2, 0x0, 0x9, 0xD, 0xA, 0x3, 0xF, 0x5, 0x8, 0x6, 0x4, 0xB, 0x1
};


void pks(u8 *state)
{
    40c6:	04 12       	push	r4		
    40c8:	04 41       	mov	r1,	r4	
    40ca:	24 53       	incd	r4		
    40cc:	21 83       	decd	r1		
    40ce:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  		printf("%x\n\n", state[7]);
		return;
#else
		;
#endif
}
    40d2:	21 53       	incd	r1		
    40d4:	34 41       	pop	r4		
    40d6:	30 41       	ret			

000040d8 <AddRoundKey>:


void
AddRoundKey(u8* state, u8* key)
{
    40d8:	04 12       	push	r4		
    40da:	04 41       	mov	r1,	r4	
    40dc:	24 53       	incd	r4		
    40de:	21 82       	sub	#4,	r1	;r2 As==10
    40e0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    40e4:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
  //	****************** addRoundkey *************************
  state[3] ^= key[7];
    40e8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    40ec:	3f 50 03 00 	add	#3,	r15	;#0x0003
    40f0:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    40f4:	3e 50 03 00 	add	#3,	r14	;#0x0003
    40f8:	6d 4e       	mov.b	@r14,	r13	
    40fa:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    40fe:	3e 50 07 00 	add	#7,	r14	;#0x0007
    4102:	6e 4e       	mov.b	@r14,	r14	
    4104:	4e ed       	xor.b	r13,	r14	
    4106:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
  state[2] ^= key[6];
    410a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    410e:	2f 53       	incd	r15		
    4110:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4114:	2e 53       	incd	r14		
    4116:	6d 4e       	mov.b	@r14,	r13	
    4118:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    411c:	3e 50 06 00 	add	#6,	r14	;#0x0006
    4120:	6e 4e       	mov.b	@r14,	r14	
    4122:	4e ed       	xor.b	r13,	r14	
    4124:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
  state[1] ^= key[5];
    4128:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    412c:	1f 53       	inc	r15		
    412e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4132:	1e 53       	inc	r14		
    4134:	6d 4e       	mov.b	@r14,	r13	
    4136:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    413a:	3e 50 05 00 	add	#5,	r14	;#0x0005
    413e:	6e 4e       	mov.b	@r14,	r14	
    4140:	4e ed       	xor.b	r13,	r14	
    4142:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
  state[0] ^= key[4];
    4146:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    414a:	6e 4f       	mov.b	@r15,	r14	
    414c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4150:	2f 52       	add	#4,	r15	;r2 As==10
    4152:	6f 4f       	mov.b	@r15,	r15	
    4154:	4e ef       	xor.b	r15,	r14	
    4156:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    415a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
  //	****************** addRoundkey End *********************
}
    415e:	21 52       	add	#4,	r1	;r2 As==10
    4160:	34 41       	pop	r4		
    4162:	30 41       	ret			

00004164 <Substitute>:

void
Substitute(u8* state)
{
    4164:	04 12       	push	r4		
    4166:	04 41       	mov	r1,	r4	
    4168:	24 53       	incd	r4		
    416a:	21 82       	sub	#4,	r1	;r2 As==10
    416c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	u8 temp_sBox;

	//	******************* sBox *******************************
	temp_sBox = 0;
    4170:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
	temp_sBox |= sBox4[(state[0] & 0xF)];
    4174:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4178:	6f 4f       	mov.b	@r15,	r15	
    417a:	4f 4f       	mov.b	r15,	r15	
    417c:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    4180:	0f 5f       	rla	r15		
    4182:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    4186:	2f 4f       	mov	@r15,	r15	
    4188:	4f 4f       	mov.b	r15,	r15	
    418a:	c4 df fa ff 	bis.b	r15,	-6(r4)	;0xfffa(r4)
	temp_sBox |= (sBox4[(state[0]>>4)]) << 4;
    418e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4192:	6f 4f       	mov.b	@r15,	r15	
    4194:	4f 4f       	mov.b	r15,	r15	
    4196:	4f 4f       	mov.b	r15,	r15	
    4198:	12 c3       	clrc			
    419a:	4f 10       	rrc.b	r15		
    419c:	12 c3       	clrc			
    419e:	4f 10       	rrc.b	r15		
    41a0:	12 c3       	clrc			
    41a2:	4f 10       	rrc.b	r15		
    41a4:	12 c3       	clrc			
    41a6:	4f 10       	rrc.b	r15		
    41a8:	4f 4f       	mov.b	r15,	r15	
    41aa:	0f 5f       	rla	r15		
    41ac:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    41b0:	2f 4f       	mov	@r15,	r15	
    41b2:	4f 4f       	mov.b	r15,	r15	
    41b4:	4f 4f       	mov.b	r15,	r15	
    41b6:	4f 4f       	mov.b	r15,	r15	
    41b8:	4f 5f       	rla.b	r15		
    41ba:	4f 5f       	rla.b	r15		
    41bc:	4f 5f       	rla.b	r15		
    41be:	4f 5f       	rla.b	r15		
    41c0:	c4 df fa ff 	bis.b	r15,	-6(r4)	;0xfffa(r4)
	state[0]=temp_sBox;
    41c4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    41c8:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    41cc:	00 00 

	temp_sBox = 0;
    41ce:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
	temp_sBox |= sBox4[(state[1] & 0xF)];
    41d2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    41d6:	1f 53       	inc	r15		
    41d8:	6f 4f       	mov.b	@r15,	r15	
    41da:	4f 4f       	mov.b	r15,	r15	
    41dc:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    41e0:	0f 5f       	rla	r15		
    41e2:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    41e6:	2f 4f       	mov	@r15,	r15	
    41e8:	4f 4f       	mov.b	r15,	r15	
    41ea:	c4 df fa ff 	bis.b	r15,	-6(r4)	;0xfffa(r4)
	temp_sBox |= (sBox4[(state[1]>>4)]) << 4;
    41ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    41f2:	1f 53       	inc	r15		
    41f4:	6f 4f       	mov.b	@r15,	r15	
    41f6:	4f 4f       	mov.b	r15,	r15	
    41f8:	4f 4f       	mov.b	r15,	r15	
    41fa:	12 c3       	clrc			
    41fc:	4f 10       	rrc.b	r15		
    41fe:	12 c3       	clrc			
    4200:	4f 10       	rrc.b	r15		
    4202:	12 c3       	clrc			
    4204:	4f 10       	rrc.b	r15		
    4206:	12 c3       	clrc			
    4208:	4f 10       	rrc.b	r15		
    420a:	4f 4f       	mov.b	r15,	r15	
    420c:	0f 5f       	rla	r15		
    420e:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    4212:	2f 4f       	mov	@r15,	r15	
    4214:	4f 4f       	mov.b	r15,	r15	
    4216:	4f 4f       	mov.b	r15,	r15	
    4218:	4f 4f       	mov.b	r15,	r15	
    421a:	4f 5f       	rla.b	r15		
    421c:	4f 5f       	rla.b	r15		
    421e:	4f 5f       	rla.b	r15		
    4220:	4f 5f       	rla.b	r15		
    4222:	c4 df fa ff 	bis.b	r15,	-6(r4)	;0xfffa(r4)
	state[1]=temp_sBox;
    4226:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    422a:	1f 53       	inc	r15		
    422c:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    4230:	00 00 

	temp_sBox = 0;
    4232:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
	temp_sBox |= sBox4[(state[2] & 0xF)];
    4236:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    423a:	2f 53       	incd	r15		
    423c:	6f 4f       	mov.b	@r15,	r15	
    423e:	4f 4f       	mov.b	r15,	r15	
    4240:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    4244:	0f 5f       	rla	r15		
    4246:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    424a:	2f 4f       	mov	@r15,	r15	
    424c:	4f 4f       	mov.b	r15,	r15	
    424e:	c4 df fa ff 	bis.b	r15,	-6(r4)	;0xfffa(r4)
	temp_sBox |= (sBox4[(state[2]>>4)]) << 4;
    4252:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4256:	2f 53       	incd	r15		
    4258:	6f 4f       	mov.b	@r15,	r15	
    425a:	4f 4f       	mov.b	r15,	r15	
    425c:	4f 4f       	mov.b	r15,	r15	
    425e:	12 c3       	clrc			
    4260:	4f 10       	rrc.b	r15		
    4262:	12 c3       	clrc			
    4264:	4f 10       	rrc.b	r15		
    4266:	12 c3       	clrc			
    4268:	4f 10       	rrc.b	r15		
    426a:	12 c3       	clrc			
    426c:	4f 10       	rrc.b	r15		
    426e:	4f 4f       	mov.b	r15,	r15	
    4270:	0f 5f       	rla	r15		
    4272:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    4276:	2f 4f       	mov	@r15,	r15	
    4278:	4f 4f       	mov.b	r15,	r15	
    427a:	4f 4f       	mov.b	r15,	r15	
    427c:	4f 4f       	mov.b	r15,	r15	
    427e:	4f 5f       	rla.b	r15		
    4280:	4f 5f       	rla.b	r15		
    4282:	4f 5f       	rla.b	r15		
    4284:	4f 5f       	rla.b	r15		
    4286:	c4 df fa ff 	bis.b	r15,	-6(r4)	;0xfffa(r4)
	state[2]=temp_sBox;
    428a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    428e:	2f 53       	incd	r15		
    4290:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    4294:	00 00 

	temp_sBox = 0;
    4296:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
	temp_sBox |= sBox4[(state[3] & 0xF)];
    429a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    429e:	3f 50 03 00 	add	#3,	r15	;#0x0003
    42a2:	6f 4f       	mov.b	@r15,	r15	
    42a4:	4f 4f       	mov.b	r15,	r15	
    42a6:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    42aa:	0f 5f       	rla	r15		
    42ac:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    42b0:	2f 4f       	mov	@r15,	r15	
    42b2:	4f 4f       	mov.b	r15,	r15	
    42b4:	c4 df fa ff 	bis.b	r15,	-6(r4)	;0xfffa(r4)
	temp_sBox |= (sBox4[(state[3]>>4)]) << 4;
    42b8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    42bc:	3f 50 03 00 	add	#3,	r15	;#0x0003
    42c0:	6f 4f       	mov.b	@r15,	r15	
    42c2:	4f 4f       	mov.b	r15,	r15	
    42c4:	4f 4f       	mov.b	r15,	r15	
    42c6:	12 c3       	clrc			
    42c8:	4f 10       	rrc.b	r15		
    42ca:	12 c3       	clrc			
    42cc:	4f 10       	rrc.b	r15		
    42ce:	12 c3       	clrc			
    42d0:	4f 10       	rrc.b	r15		
    42d2:	12 c3       	clrc			
    42d4:	4f 10       	rrc.b	r15		
    42d6:	4f 4f       	mov.b	r15,	r15	
    42d8:	0f 5f       	rla	r15		
    42da:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    42de:	2f 4f       	mov	@r15,	r15	
    42e0:	4f 4f       	mov.b	r15,	r15	
    42e2:	4f 4f       	mov.b	r15,	r15	
    42e4:	4f 4f       	mov.b	r15,	r15	
    42e6:	4f 5f       	rla.b	r15		
    42e8:	4f 5f       	rla.b	r15		
    42ea:	4f 5f       	rla.b	r15		
    42ec:	4f 5f       	rla.b	r15		
    42ee:	c4 df fa ff 	bis.b	r15,	-6(r4)	;0xfffa(r4)
	state[3]=temp_sBox;
    42f2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    42f6:	3f 50 03 00 	add	#3,	r15	;#0x0003
    42fa:	df 44 fa ff 	mov.b	-6(r4),	0(r15)	;0xfffa(r4), 0x0000(r15)
    42fe:	00 00 
	//	******************* sBox End ***************************
}
    4300:	21 52       	add	#4,	r1	;r2 As==10
    4302:	34 41       	pop	r4		
    4304:	30 41       	ret			

00004306 <Mix>:

void
Mix(u8* state)
{
    4306:	04 12       	push	r4		
    4308:	04 41       	mov	r1,	r4	
    430a:	24 53       	incd	r4		
    430c:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    4310:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  u8 n7 = state[0] & 0xF;
    4314:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4318:	6f 4f       	mov.b	@r15,	r15	
    431a:	4e 4f       	mov.b	r15,	r14	
    431c:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    4320:	c4 4e f4 ff 	mov.b	r14,	-12(r4)	;0xfff4(r4)
  u8 n6 = state[0] >> 4;
    4324:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4328:	6f 4f       	mov.b	@r15,	r15	
    432a:	4f 4f       	mov.b	r15,	r15	
    432c:	c4 4f f5 ff 	mov.b	r15,	-11(r4)	;0xfff5(r4)
    4330:	12 c3       	clrc			
    4332:	54 10 f5 ff 	rrc.b	-11(r4)	;0xfff5(r4)
    4336:	12 c3       	clrc			
    4338:	54 10 f5 ff 	rrc.b	-11(r4)	;0xfff5(r4)
    433c:	12 c3       	clrc			
    433e:	54 10 f5 ff 	rrc.b	-11(r4)	;0xfff5(r4)
    4342:	12 c3       	clrc			
    4344:	54 10 f5 ff 	rrc.b	-11(r4)	;0xfff5(r4)
  u8 n5 = state[1] & 0xF;
    4348:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    434c:	1f 53       	inc	r15		
    434e:	6f 4f       	mov.b	@r15,	r15	
    4350:	4e 4f       	mov.b	r15,	r14	
    4352:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    4356:	c4 4e f6 ff 	mov.b	r14,	-10(r4)	;0xfff6(r4)
  u8 n4 = state[1] >> 4;
    435a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    435e:	1f 53       	inc	r15		
    4360:	6f 4f       	mov.b	@r15,	r15	
    4362:	4f 4f       	mov.b	r15,	r15	
    4364:	c4 4f f7 ff 	mov.b	r15,	-9(r4)	;0xfff7(r4)
    4368:	12 c3       	clrc			
    436a:	54 10 f7 ff 	rrc.b	-9(r4)		;0xfff7(r4)
    436e:	12 c3       	clrc			
    4370:	54 10 f7 ff 	rrc.b	-9(r4)		;0xfff7(r4)
    4374:	12 c3       	clrc			
    4376:	54 10 f7 ff 	rrc.b	-9(r4)		;0xfff7(r4)
    437a:	12 c3       	clrc			
    437c:	54 10 f7 ff 	rrc.b	-9(r4)		;0xfff7(r4)
  u8 n3 = state[2] & 0xF;
    4380:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4384:	2f 53       	incd	r15		
    4386:	6f 4f       	mov.b	@r15,	r15	
    4388:	4e 4f       	mov.b	r15,	r14	
    438a:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    438e:	c4 4e f8 ff 	mov.b	r14,	-8(r4)	;0xfff8(r4)
  u8 n2 = state[2] >> 4;
    4392:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4396:	2f 53       	incd	r15		
    4398:	6f 4f       	mov.b	@r15,	r15	
    439a:	4f 4f       	mov.b	r15,	r15	
    439c:	c4 4f f9 ff 	mov.b	r15,	-7(r4)	;0xfff9(r4)
    43a0:	12 c3       	clrc			
    43a2:	54 10 f9 ff 	rrc.b	-7(r4)		;0xfff9(r4)
    43a6:	12 c3       	clrc			
    43a8:	54 10 f9 ff 	rrc.b	-7(r4)		;0xfff9(r4)
    43ac:	12 c3       	clrc			
    43ae:	54 10 f9 ff 	rrc.b	-7(r4)		;0xfff9(r4)
    43b2:	12 c3       	clrc			
    43b4:	54 10 f9 ff 	rrc.b	-7(r4)		;0xfff9(r4)
  u8 n1 = state[3] & 0xF;
    43b8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    43bc:	3f 50 03 00 	add	#3,	r15	;#0x0003
    43c0:	6f 4f       	mov.b	@r15,	r15	
    43c2:	4e 4f       	mov.b	r15,	r14	
    43c4:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    43c8:	c4 4e fa ff 	mov.b	r14,	-6(r4)	;0xfffa(r4)
  u8 n0 = state[3] >> 4;
    43cc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    43d0:	3f 50 03 00 	add	#3,	r15	;#0x0003
    43d4:	6f 4f       	mov.b	@r15,	r15	
    43d6:	4f 4f       	mov.b	r15,	r15	
    43d8:	c4 4f fb ff 	mov.b	r15,	-5(r4)	;0xfffb(r4)
    43dc:	12 c3       	clrc			
    43de:	54 10 fb ff 	rrc.b	-5(r4)		;0xfffb(r4)
    43e2:	12 c3       	clrc			
    43e4:	54 10 fb ff 	rrc.b	-5(r4)		;0xfffb(r4)
    43e8:	12 c3       	clrc			
    43ea:	54 10 fb ff 	rrc.b	-5(r4)		;0xfffb(r4)
    43ee:	12 c3       	clrc			
    43f0:	54 10 fb ff 	rrc.b	-5(r4)		;0xfffb(r4)

  state[3] = ((n1 ^ n2 ^ n3 ^ n4 ^ n5 ^ n6) <<  4) | (n0 ^ n2 ^ n3 ^ n5 ^ n6 ^ n7);
    43f4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    43f8:	3e 50 03 00 	add	#3,	r14	;#0x0003
    43fc:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    4400:	5f e4 f9 ff 	xor.b	-7(r4),	r15	;0xfff9(r4)
    4404:	5f e4 f8 ff 	xor.b	-8(r4),	r15	;0xfff8(r4)
    4408:	5f e4 f7 ff 	xor.b	-9(r4),	r15	;0xfff7(r4)
    440c:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    4410:	5f e4 f5 ff 	xor.b	-11(r4),r15	;0xfff5(r4)
    4414:	4f 4f       	mov.b	r15,	r15	
    4416:	0f 5f       	rla	r15		
    4418:	0f 5f       	rla	r15		
    441a:	0f 5f       	rla	r15		
    441c:	0f 5f       	rla	r15		
    441e:	4d 4f       	mov.b	r15,	r13	
    4420:	5f 44 fb ff 	mov.b	-5(r4),	r15	;0xfffb(r4)
    4424:	5f e4 f9 ff 	xor.b	-7(r4),	r15	;0xfff9(r4)
    4428:	5f e4 f8 ff 	xor.b	-8(r4),	r15	;0xfff8(r4)
    442c:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    4430:	5f e4 f5 ff 	xor.b	-11(r4),r15	;0xfff5(r4)
    4434:	5f e4 f4 ff 	xor.b	-12(r4),r15	;0xfff4(r4)
    4438:	4f dd       	bis.b	r13,	r15	
    443a:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  state[2] = ((n0 ^ n1 ^ n3 ^ n4 ^ n6 ^ n7) << 4) | (n0 ^ n1 ^ n2 ^ n4 ^ n5 ^ n7);
    443e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4442:	2e 53       	incd	r14		
    4444:	5f 44 fb ff 	mov.b	-5(r4),	r15	;0xfffb(r4)
    4448:	5f e4 fa ff 	xor.b	-6(r4),	r15	;0xfffa(r4)
    444c:	5f e4 f8 ff 	xor.b	-8(r4),	r15	;0xfff8(r4)
    4450:	5f e4 f7 ff 	xor.b	-9(r4),	r15	;0xfff7(r4)
    4454:	5f e4 f5 ff 	xor.b	-11(r4),r15	;0xfff5(r4)
    4458:	5f e4 f4 ff 	xor.b	-12(r4),r15	;0xfff4(r4)
    445c:	4f 4f       	mov.b	r15,	r15	
    445e:	0f 5f       	rla	r15		
    4460:	0f 5f       	rla	r15		
    4462:	0f 5f       	rla	r15		
    4464:	0f 5f       	rla	r15		
    4466:	4d 4f       	mov.b	r15,	r13	
    4468:	5f 44 fb ff 	mov.b	-5(r4),	r15	;0xfffb(r4)
    446c:	5f e4 fa ff 	xor.b	-6(r4),	r15	;0xfffa(r4)
    4470:	5f e4 f9 ff 	xor.b	-7(r4),	r15	;0xfff9(r4)
    4474:	5f e4 f7 ff 	xor.b	-9(r4),	r15	;0xfff7(r4)
    4478:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    447c:	5f e4 f4 ff 	xor.b	-12(r4),r15	;0xfff4(r4)
    4480:	4f dd       	bis.b	r13,	r15	
    4482:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  state[1] = ((n0 ^ n1 ^ n3 ^ n4 ^ n5) << 4) | (n0 ^ n1 ^ n2 ^ n5 ^ n6);
    4486:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    448a:	1e 53       	inc	r14		
    448c:	5f 44 fb ff 	mov.b	-5(r4),	r15	;0xfffb(r4)
    4490:	5f e4 fa ff 	xor.b	-6(r4),	r15	;0xfffa(r4)
    4494:	5f e4 f8 ff 	xor.b	-8(r4),	r15	;0xfff8(r4)
    4498:	5f e4 f7 ff 	xor.b	-9(r4),	r15	;0xfff7(r4)
    449c:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    44a0:	4f 4f       	mov.b	r15,	r15	
    44a2:	0f 5f       	rla	r15		
    44a4:	0f 5f       	rla	r15		
    44a6:	0f 5f       	rla	r15		
    44a8:	0f 5f       	rla	r15		
    44aa:	4d 4f       	mov.b	r15,	r13	
    44ac:	5f 44 fb ff 	mov.b	-5(r4),	r15	;0xfffb(r4)
    44b0:	5f e4 fa ff 	xor.b	-6(r4),	r15	;0xfffa(r4)
    44b4:	5f e4 f9 ff 	xor.b	-7(r4),	r15	;0xfff9(r4)
    44b8:	5f e4 f6 ff 	xor.b	-10(r4),r15	;0xfff6(r4)
    44bc:	5f e4 f5 ff 	xor.b	-11(r4),r15	;0xfff5(r4)
    44c0:	4f dd       	bis.b	r13,	r15	
    44c2:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  state[0] = ((n1 ^ n2 ^ n3 ^ n6 ^ n7) << 4) | (n0 ^ n2 ^ n3 ^ n4 ^ n7);
    44c6:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    44ca:	5f e4 f9 ff 	xor.b	-7(r4),	r15	;0xfff9(r4)
    44ce:	5f e4 f8 ff 	xor.b	-8(r4),	r15	;0xfff8(r4)
    44d2:	5f e4 f5 ff 	xor.b	-11(r4),r15	;0xfff5(r4)
    44d6:	5f e4 f4 ff 	xor.b	-12(r4),r15	;0xfff4(r4)
    44da:	4f 4f       	mov.b	r15,	r15	
    44dc:	0f 5f       	rla	r15		
    44de:	0f 5f       	rla	r15		
    44e0:	0f 5f       	rla	r15		
    44e2:	0f 5f       	rla	r15		
    44e4:	4e 4f       	mov.b	r15,	r14	
    44e6:	5f 44 fb ff 	mov.b	-5(r4),	r15	;0xfffb(r4)
    44ea:	5f e4 f9 ff 	xor.b	-7(r4),	r15	;0xfff9(r4)
    44ee:	5f e4 f8 ff 	xor.b	-8(r4),	r15	;0xfff8(r4)
    44f2:	5f e4 f7 ff 	xor.b	-9(r4),	r15	;0xfff7(r4)
    44f6:	5f e4 f4 ff 	xor.b	-12(r4),r15	;0xfff4(r4)
    44fa:	4f de       	bis.b	r14,	r15	
    44fc:	4e 4f       	mov.b	r15,	r14	
    44fe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4502:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
}
    4506:	31 50 0a 00 	add	#10,	r1	;#0x000a
    450a:	34 41       	pop	r4		
    450c:	30 41       	ret			

0000450e <Permute>:

void
Permute(u8* state)
{
    450e:	04 12       	push	r4		
    4510:	04 41       	mov	r1,	r4	
    4512:	24 53       	incd	r4		
    4514:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    4518:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  u8 n7 = state[0] & 0xF;
    451c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4520:	6f 4f       	mov.b	@r15,	r15	
    4522:	4e 4f       	mov.b	r15,	r14	
    4524:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    4528:	c4 4e f4 ff 	mov.b	r14,	-12(r4)	;0xfff4(r4)
  u8 n6 = state[0] >> 4;
    452c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4530:	6f 4f       	mov.b	@r15,	r15	
    4532:	4f 4f       	mov.b	r15,	r15	
    4534:	c4 4f f5 ff 	mov.b	r15,	-11(r4)	;0xfff5(r4)
    4538:	12 c3       	clrc			
    453a:	54 10 f5 ff 	rrc.b	-11(r4)	;0xfff5(r4)
    453e:	12 c3       	clrc			
    4540:	54 10 f5 ff 	rrc.b	-11(r4)	;0xfff5(r4)
    4544:	12 c3       	clrc			
    4546:	54 10 f5 ff 	rrc.b	-11(r4)	;0xfff5(r4)
    454a:	12 c3       	clrc			
    454c:	54 10 f5 ff 	rrc.b	-11(r4)	;0xfff5(r4)
  u8 n5 = state[1] & 0xF;
    4550:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4554:	1f 53       	inc	r15		
    4556:	6f 4f       	mov.b	@r15,	r15	
    4558:	4e 4f       	mov.b	r15,	r14	
    455a:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    455e:	c4 4e f6 ff 	mov.b	r14,	-10(r4)	;0xfff6(r4)
  u8 n4 = state[1] >> 4;
    4562:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4566:	1f 53       	inc	r15		
    4568:	6f 4f       	mov.b	@r15,	r15	
    456a:	4f 4f       	mov.b	r15,	r15	
    456c:	c4 4f f7 ff 	mov.b	r15,	-9(r4)	;0xfff7(r4)
    4570:	12 c3       	clrc			
    4572:	54 10 f7 ff 	rrc.b	-9(r4)		;0xfff7(r4)
    4576:	12 c3       	clrc			
    4578:	54 10 f7 ff 	rrc.b	-9(r4)		;0xfff7(r4)
    457c:	12 c3       	clrc			
    457e:	54 10 f7 ff 	rrc.b	-9(r4)		;0xfff7(r4)
    4582:	12 c3       	clrc			
    4584:	54 10 f7 ff 	rrc.b	-9(r4)		;0xfff7(r4)
  u8 n3 = state[2] & 0xF;
    4588:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    458c:	2f 53       	incd	r15		
    458e:	6f 4f       	mov.b	@r15,	r15	
    4590:	4e 4f       	mov.b	r15,	r14	
    4592:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    4596:	c4 4e f8 ff 	mov.b	r14,	-8(r4)	;0xfff8(r4)
  u8 n2 = state[2] >> 4;
    459a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    459e:	2f 53       	incd	r15		
    45a0:	6f 4f       	mov.b	@r15,	r15	
    45a2:	4f 4f       	mov.b	r15,	r15	
    45a4:	c4 4f f9 ff 	mov.b	r15,	-7(r4)	;0xfff9(r4)
    45a8:	12 c3       	clrc			
    45aa:	54 10 f9 ff 	rrc.b	-7(r4)		;0xfff9(r4)
    45ae:	12 c3       	clrc			
    45b0:	54 10 f9 ff 	rrc.b	-7(r4)		;0xfff9(r4)
    45b4:	12 c3       	clrc			
    45b6:	54 10 f9 ff 	rrc.b	-7(r4)		;0xfff9(r4)
    45ba:	12 c3       	clrc			
    45bc:	54 10 f9 ff 	rrc.b	-7(r4)		;0xfff9(r4)
  u8 n1 = state[3] & 0xF;
    45c0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    45c4:	3f 50 03 00 	add	#3,	r15	;#0x0003
    45c8:	6f 4f       	mov.b	@r15,	r15	
    45ca:	4e 4f       	mov.b	r15,	r14	
    45cc:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    45d0:	c4 4e fa ff 	mov.b	r14,	-6(r4)	;0xfffa(r4)
  u8 n0 = state[3] >> 4;
    45d4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    45d8:	3f 50 03 00 	add	#3,	r15	;#0x0003
    45dc:	6f 4f       	mov.b	@r15,	r15	
    45de:	4f 4f       	mov.b	r15,	r15	
    45e0:	c4 4f fb ff 	mov.b	r15,	-5(r4)	;0xfffb(r4)
    45e4:	12 c3       	clrc			
    45e6:	54 10 fb ff 	rrc.b	-5(r4)		;0xfffb(r4)
    45ea:	12 c3       	clrc			
    45ec:	54 10 fb ff 	rrc.b	-5(r4)		;0xfffb(r4)
    45f0:	12 c3       	clrc			
    45f2:	54 10 fb ff 	rrc.b	-5(r4)		;0xfffb(r4)
    45f6:	12 c3       	clrc			
    45f8:	54 10 fb ff 	rrc.b	-5(r4)		;0xfffb(r4)

  state[3] = (n2 << 4) | n0;
    45fc:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4600:	3e 50 03 00 	add	#3,	r14	;#0x0003
    4604:	5f 44 f9 ff 	mov.b	-7(r4),	r15	;0xfff9(r4)
    4608:	0f 5f       	rla	r15		
    460a:	0f 5f       	rla	r15		
    460c:	0f 5f       	rla	r15		
    460e:	0f 5f       	rla	r15		
    4610:	4d 4f       	mov.b	r15,	r13	
    4612:	5f 44 fb ff 	mov.b	-5(r4),	r15	;0xfffb(r4)
    4616:	4f dd       	bis.b	r13,	r15	
    4618:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  state[2] = (n3 << 4) | n6;
    461c:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4620:	2e 53       	incd	r14		
    4622:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4626:	0f 5f       	rla	r15		
    4628:	0f 5f       	rla	r15		
    462a:	0f 5f       	rla	r15		
    462c:	0f 5f       	rla	r15		
    462e:	4d 4f       	mov.b	r15,	r13	
    4630:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    4634:	4f dd       	bis.b	r13,	r15	
    4636:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  state[1] = (n7 << 4) | n4;
    463a:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    463e:	1e 53       	inc	r14		
    4640:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    4644:	0f 5f       	rla	r15		
    4646:	0f 5f       	rla	r15		
    4648:	0f 5f       	rla	r15		
    464a:	0f 5f       	rla	r15		
    464c:	4d 4f       	mov.b	r15,	r13	
    464e:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    4652:	4f dd       	bis.b	r13,	r15	
    4654:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  state[0] = (n5 << 4) | n1;
    4658:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    465c:	0f 5f       	rla	r15		
    465e:	0f 5f       	rla	r15		
    4660:	0f 5f       	rla	r15		
    4662:	0f 5f       	rla	r15		
    4664:	4e 4f       	mov.b	r15,	r14	
    4666:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    466a:	4f de       	bis.b	r14,	r15	
    466c:	4e 4f       	mov.b	r15,	r14	
    466e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4672:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
}
    4676:	31 50 0a 00 	add	#10,	r1	;#0x000a
    467a:	34 41       	pop	r4		
    467c:	30 41       	ret			

0000467e <KeySchedule>:

void
KeySchedule(u8* key, u8 round)
{
    467e:	0b 12       	push	r11		
    4680:	0a 12       	push	r10		
    4682:	09 12       	push	r9		
    4684:	08 12       	push	r8		
    4686:	04 12       	push	r4		
    4688:	04 41       	mov	r1,	r4	
    468a:	34 50 0a 00 	add	#10,	r4	;#0x000a
    468e:	31 50 e4 ff 	add	#-28,	r1	;#0xffe4
    4692:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
    4696:	c4 4e ec ff 	mov.b	r14,	-20(r4)	;0xffec(r4)
  u64 key_64 = *((u64*) key);
    469a:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    469e:	a4 4f da ff 	mov	@r15,	-38(r4)	;0xffda(r4)
    46a2:	94 4f 02 00 	mov	2(r15),	-36(r4)	;0x0002(r15), 0xffdc(r4)
    46a6:	dc ff 
    46a8:	94 4f 04 00 	mov	4(r15),	-34(r4)	;0x0004(r15), 0xffde(r4)
    46ac:	de ff 
    46ae:	94 4f 06 00 	mov	6(r15),	-32(r4)	;0x0006(r15), 0xffe0(r4)
    46b2:	e0 ff 
  u64 key_64r = ROTATE_RIGHT_64(key_64, 15);
    46b4:	18 44 da ff 	mov	-38(r4),r8	;0xffda(r4)
    46b8:	19 44 dc ff 	mov	-36(r4),r9	;0xffdc(r4)
    46bc:	1a 44 de ff 	mov	-34(r4),r10	;0xffde(r4)
    46c0:	1b 44 e0 ff 	mov	-32(r4),r11	;0xffe0(r4)
    46c4:	0f 48       	mov	r8,	r15	
    46c6:	0e 43       	clr	r14		
    46c8:	0d 43       	clr	r13		
    46ca:	0c 43       	clr	r12		
    46cc:	0f 5f       	rla	r15		
    46ce:	84 4c ee ff 	mov	r12,	-18(r4)	;0xffee(r4)
    46d2:	84 4d f0 ff 	mov	r13,	-16(r4)	;0xfff0(r4)
    46d6:	84 4e f2 ff 	mov	r14,	-14(r4)	;0xfff2(r4)
    46da:	84 4f f4 ff 	mov	r15,	-12(r4)	;0xfff4(r4)
    46de:	0c 48       	mov	r8,	r12	
    46e0:	0e 49       	mov	r9,	r14	
    46e2:	0f 4a       	mov	r10,	r15	
    46e4:	0d 4b       	mov	r11,	r13	
    46e6:	8c 10       	swpb	r12		
    46e8:	8e 10       	swpb	r14		
    46ea:	4c ee       	xor.b	r14,	r12	
    46ec:	0c ee       	xor	r14,	r12	
    46ee:	8f 10       	swpb	r15		
    46f0:	4e ef       	xor.b	r15,	r14	
    46f2:	0e ef       	xor	r15,	r14	
    46f4:	8d 10       	swpb	r13		
    46f6:	4f ed       	xor.b	r13,	r15	
    46f8:	0f ed       	xor	r13,	r15	
    46fa:	4d 4d       	mov.b	r13,	r13	
    46fc:	84 4c e2 ff 	mov	r12,	-30(r4)	;0xffe2(r4)
    4700:	84 4e e4 ff 	mov	r14,	-28(r4)	;0xffe4(r4)
    4704:	84 4f e6 ff 	mov	r15,	-26(r4)	;0xffe6(r4)
    4708:	84 4d e8 ff 	mov	r13,	-24(r4)	;0xffe8(r4)
    470c:	12 c3       	clrc			
    470e:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    4712:	14 10 e6 ff 	rrc	-26(r4)	;0xffe6(r4)
    4716:	14 10 e4 ff 	rrc	-28(r4)	;0xffe4(r4)
    471a:	14 10 e2 ff 	rrc	-30(r4)	;0xffe2(r4)
    471e:	12 c3       	clrc			
    4720:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    4724:	14 10 e6 ff 	rrc	-26(r4)	;0xffe6(r4)
    4728:	14 10 e4 ff 	rrc	-28(r4)	;0xffe4(r4)
    472c:	14 10 e2 ff 	rrc	-30(r4)	;0xffe2(r4)
    4730:	12 c3       	clrc			
    4732:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    4736:	14 10 e6 ff 	rrc	-26(r4)	;0xffe6(r4)
    473a:	14 10 e4 ff 	rrc	-28(r4)	;0xffe4(r4)
    473e:	14 10 e2 ff 	rrc	-30(r4)	;0xffe2(r4)
    4742:	12 c3       	clrc			
    4744:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    4748:	14 10 e6 ff 	rrc	-26(r4)	;0xffe6(r4)
    474c:	14 10 e4 ff 	rrc	-28(r4)	;0xffe4(r4)
    4750:	14 10 e2 ff 	rrc	-30(r4)	;0xffe2(r4)
    4754:	12 c3       	clrc			
    4756:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    475a:	14 10 e6 ff 	rrc	-26(r4)	;0xffe6(r4)
    475e:	14 10 e4 ff 	rrc	-28(r4)	;0xffe4(r4)
    4762:	14 10 e2 ff 	rrc	-30(r4)	;0xffe2(r4)
    4766:	12 c3       	clrc			
    4768:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    476c:	14 10 e6 ff 	rrc	-26(r4)	;0xffe6(r4)
    4770:	14 10 e4 ff 	rrc	-28(r4)	;0xffe4(r4)
    4774:	14 10 e2 ff 	rrc	-30(r4)	;0xffe2(r4)
    4778:	12 c3       	clrc			
    477a:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    477e:	14 10 e6 ff 	rrc	-26(r4)	;0xffe6(r4)
    4782:	14 10 e4 ff 	rrc	-28(r4)	;0xffe4(r4)
    4786:	14 10 e2 ff 	rrc	-30(r4)	;0xffe2(r4)
    478a:	94 d4 ee ff 	bis	-18(r4),-30(r4)	;0xffee(r4), 0xffe2(r4)
    478e:	e2 ff 
    4790:	94 d4 f0 ff 	bis	-16(r4),-28(r4)	;0xfff0(r4), 0xffe4(r4)
    4794:	e4 ff 
    4796:	94 d4 f2 ff 	bis	-14(r4),-26(r4)	;0xfff2(r4), 0xffe6(r4)
    479a:	e6 ff 
    479c:	94 d4 f4 ff 	bis	-12(r4),-24(r4)	;0xfff4(r4), 0xffe8(r4)
    47a0:	e8 ff 
  *((u64*) key) = key_64r;
    47a2:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    47a6:	9f 44 e2 ff 	mov	-30(r4),0(r15)	;0xffe2(r4), 0x0000(r15)
    47aa:	00 00 
    47ac:	9f 44 e4 ff 	mov	-28(r4),2(r15)	;0xffe4(r4), 0x0002(r15)
    47b0:	02 00 
    47b2:	9f 44 e6 ff 	mov	-26(r4),4(r15)	;0xffe6(r4), 0x0004(r15)
    47b6:	04 00 
    47b8:	9f 44 e8 ff 	mov	-24(r4),6(r15)	;0xffe8(r4), 0x0006(r15)
    47bc:	06 00 

  key[7] = (sBox4[(key[7] >> 4) & 0xF] << 4) | (key[7] & 0xF);
    47be:	1e 44 ea ff 	mov	-22(r4),r14	;0xffea(r4)
    47c2:	3e 50 07 00 	add	#7,	r14	;#0x0007
    47c6:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    47ca:	3f 50 07 00 	add	#7,	r15	;#0x0007
    47ce:	6f 4f       	mov.b	@r15,	r15	
    47d0:	4f 4f       	mov.b	r15,	r15	
    47d2:	4f 4f       	mov.b	r15,	r15	
    47d4:	12 c3       	clrc			
    47d6:	4f 10       	rrc.b	r15		
    47d8:	12 c3       	clrc			
    47da:	4f 10       	rrc.b	r15		
    47dc:	12 c3       	clrc			
    47de:	4f 10       	rrc.b	r15		
    47e0:	12 c3       	clrc			
    47e2:	4f 10       	rrc.b	r15		
    47e4:	4f 4f       	mov.b	r15,	r15	
    47e6:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    47ea:	0f 5f       	rla	r15		
    47ec:	3f 50 62 4c 	add	#19554,	r15	;#0x4c62
    47f0:	2f 4f       	mov	@r15,	r15	
    47f2:	4f 4f       	mov.b	r15,	r15	
    47f4:	4f 4f       	mov.b	r15,	r15	
    47f6:	4f 4f       	mov.b	r15,	r15	
    47f8:	4f 5f       	rla.b	r15		
    47fa:	4f 5f       	rla.b	r15		
    47fc:	4f 5f       	rla.b	r15		
    47fe:	4f 5f       	rla.b	r15		
    4800:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    4804:	3d 50 07 00 	add	#7,	r13	;#0x0007
    4808:	6d 4d       	mov.b	@r13,	r13	
    480a:	7d f0 0f 00 	and.b	#15,	r13	;#0x000f
    480e:	4f dd       	bis.b	r13,	r15	
    4810:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  key[1] = ((((key[1] >> 3) & 0x1F) ^ round ) << 3) | (key[1] & 0x7);
    4814:	1e 44 ea ff 	mov	-22(r4),r14	;0xffea(r4)
    4818:	1e 53       	inc	r14		
    481a:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    481e:	1f 53       	inc	r15		
    4820:	6f 4f       	mov.b	@r15,	r15	
    4822:	4f 4f       	mov.b	r15,	r15	
    4824:	4f 4f       	mov.b	r15,	r15	
    4826:	12 c3       	clrc			
    4828:	4f 10       	rrc.b	r15		
    482a:	12 c3       	clrc			
    482c:	4f 10       	rrc.b	r15		
    482e:	12 c3       	clrc			
    4830:	4f 10       	rrc.b	r15		
    4832:	4f 4f       	mov.b	r15,	r15	
    4834:	0d 4f       	mov	r15,	r13	
    4836:	3d f0 1f 00 	and	#31,	r13	;#0x001f
    483a:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    483e:	0f ed       	xor	r13,	r15	
    4840:	0f 5f       	rla	r15		
    4842:	0f 5f       	rla	r15		
    4844:	0f 5f       	rla	r15		
    4846:	4d 4f       	mov.b	r15,	r13	
    4848:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    484c:	1f 53       	inc	r15		
    484e:	6f 4f       	mov.b	@r15,	r15	
    4850:	7f f0 07 00 	and.b	#7,	r15	;#0x0007
    4854:	4f dd       	bis.b	r13,	r15	
    4856:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)

}
    485a:	31 50 1c 00 	add	#28,	r1	;#0x001c
    485e:	34 41       	pop	r4		
    4860:	38 41       	pop	r8		
    4862:	39 41       	pop	r9		
    4864:	3a 41       	pop	r10		
    4866:	3b 41       	pop	r11		
    4868:	30 41       	ret			

0000486a <Encrypt>:

void
Encrypt(u8* state, u8* key)
{
    486a:	04 12       	push	r4		
    486c:	04 41       	mov	r1,	r4	
    486e:	24 53       	incd	r4		
    4870:	31 50 f2 ff 	add	#-14,	r1	;#0xfff2
    4874:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4878:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	u8 round;

	for(round=1; round <= 32; round++)
    487c:	d4 43 f0 ff 	mov.b	#1,	-16(r4)	;r3 As==01, 0xfff0(r4)
    4880:	46 3c       	jmp	$+142    	;abs 0x490e
	  {
	    u32 state_L = *((u32*) (state + 4));
    4882:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4886:	94 4f 04 00 	mov	4(r15),	-14(r4)	;0x0004(r15), 0xfff2(r4)
    488a:	f2 ff 
    488c:	94 4f 06 00 	mov	6(r15),	-12(r4)	;0x0006(r15), 0xfff4(r4)
    4890:	f4 ff 
	    u32 state_R = *((u32*) state);
    4892:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4896:	a4 4f f6 ff 	mov	@r15,	-10(r4)	;0xfff6(r4)
    489a:	94 4f 02 00 	mov	2(r15),	-8(r4)	;0x0002(r15), 0xfff8(r4)
    489e:	f8 ff 

	    KeySchedule(key, round);
    48a0:	5e 44 f0 ff 	mov.b	-16(r4),r14	;0xfff0(r4)
    48a4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48a8:	b0 12 7e 46 	call	#0x467e	

	    AddRoundKey(state + 4, key);
    48ac:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48b0:	2f 52       	add	#4,	r15	;r2 As==10
    48b2:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    48b6:	b0 12 d8 40 	call	#0x40d8	
	    Substitute(state + 4);
    48ba:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48be:	2f 52       	add	#4,	r15	;r2 As==10
    48c0:	b0 12 64 41 	call	#0x4164	
	    Mix(state + 4);
    48c4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48c8:	2f 52       	add	#4,	r15	;r2 As==10
    48ca:	b0 12 06 43 	call	#0x4306	
	    Permute(state + 4);
    48ce:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48d2:	2f 52       	add	#4,	r15	;r2 As==10
    48d4:	b0 12 0e 45 	call	#0x450e	

	    *((u32*) (state + 4)) = (*((u32*) (state + 4))) ^ state_R;
    48d8:	1d 44 fa ff 	mov	-6(r4),	r13	;0xfffa(r4)
    48dc:	2d 52       	add	#4,	r13	;r2 As==10
    48de:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48e2:	2f 52       	add	#4,	r15	;r2 As==10
    48e4:	2e 4f       	mov	@r15,	r14	
    48e6:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    48ea:	1e e4 f6 ff 	xor	-10(r4),r14	;0xfff6(r4)
    48ee:	1f e4 f8 ff 	xor	-8(r4),	r15	;0xfff8(r4)
    48f2:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    48f6:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
	    *((u32*) state) = state_L;
    48fa:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48fe:	9f 44 f2 ff 	mov	-14(r4),0(r15)	;0xfff2(r4), 0x0000(r15)
    4902:	00 00 
    4904:	9f 44 f4 ff 	mov	-12(r4),2(r15)	;0xfff4(r4), 0x0002(r15)
    4908:	02 00 
void
Encrypt(u8* state, u8* key)
{
	u8 round;

	for(round=1; round <= 32; round++)
    490a:	d4 53 f0 ff 	inc.b	-16(r4)	;0xfff0(r4)
    490e:	f4 90 21 00 	cmp.b	#33,	-16(r4)	;#0x0021, 0xfff0(r4)
    4912:	f0 ff 
    4914:	b6 2b       	jnc	$-146    	;abs 0x4882
	    *((u32*) (state + 4)) = (*((u32*) (state + 4))) ^ state_R;
	    *((u32*) state) = state_L;
	  }

	return;
}
    4916:	31 50 0e 00 	add	#14,	r1	;#0x000e
    491a:	34 41       	pop	r4		
    491c:	30 41       	ret			

0000491e <InvKeySchedule>:


void
InvKeySchedule(u8* key, u8 round)
{
    491e:	0b 12       	push	r11		
    4920:	0a 12       	push	r10		
    4922:	09 12       	push	r9		
    4924:	08 12       	push	r8		
    4926:	04 12       	push	r4		
    4928:	04 41       	mov	r1,	r4	
    492a:	34 50 0a 00 	add	#10,	r4	;#0x000a
    492e:	31 50 ec ff 	add	#-20,	r1	;#0xffec
    4932:	84 4f f2 ff 	mov	r15,	-14(r4)	;0xfff2(r4)
    4936:	c4 4e f4 ff 	mov.b	r14,	-12(r4)	;0xfff4(r4)
  key[1] = ((((key[1] >> 3) & 0x1F) ^ round ) << 3) | (key[1] & 0x7);
    493a:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    493e:	1e 53       	inc	r14		
    4940:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4944:	1f 53       	inc	r15		
    4946:	6f 4f       	mov.b	@r15,	r15	
    4948:	4f 4f       	mov.b	r15,	r15	
    494a:	4f 4f       	mov.b	r15,	r15	
    494c:	12 c3       	clrc			
    494e:	4f 10       	rrc.b	r15		
    4950:	12 c3       	clrc			
    4952:	4f 10       	rrc.b	r15		
    4954:	12 c3       	clrc			
    4956:	4f 10       	rrc.b	r15		
    4958:	4f 4f       	mov.b	r15,	r15	
    495a:	0d 4f       	mov	r15,	r13	
    495c:	3d f0 1f 00 	and	#31,	r13	;#0x001f
    4960:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    4964:	0f ed       	xor	r13,	r15	
    4966:	0f 5f       	rla	r15		
    4968:	0f 5f       	rla	r15		
    496a:	0f 5f       	rla	r15		
    496c:	4d 4f       	mov.b	r15,	r13	
    496e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4972:	1f 53       	inc	r15		
    4974:	6f 4f       	mov.b	@r15,	r15	
    4976:	7f f0 07 00 	and.b	#7,	r15	;#0x0007
    497a:	4f dd       	bis.b	r13,	r15	
    497c:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  key[7] = (sBox4Inv[(key[7] >> 4) & 0xF] << 4) | (key[7] & 0xF);
    4980:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    4984:	3e 50 07 00 	add	#7,	r14	;#0x0007
    4988:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    498c:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4990:	6f 4f       	mov.b	@r15,	r15	
    4992:	4f 4f       	mov.b	r15,	r15	
    4994:	4f 4f       	mov.b	r15,	r15	
    4996:	12 c3       	clrc			
    4998:	4f 10       	rrc.b	r15		
    499a:	12 c3       	clrc			
    499c:	4f 10       	rrc.b	r15		
    499e:	12 c3       	clrc			
    49a0:	4f 10       	rrc.b	r15		
    49a2:	12 c3       	clrc			
    49a4:	4f 10       	rrc.b	r15		
    49a6:	4f 4f       	mov.b	r15,	r15	
    49a8:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    49ac:	0f 5f       	rla	r15		
    49ae:	3f 50 82 4c 	add	#19586,	r15	;#0x4c82
    49b2:	2f 4f       	mov	@r15,	r15	
    49b4:	4f 4f       	mov.b	r15,	r15	
    49b6:	4f 4f       	mov.b	r15,	r15	
    49b8:	4f 4f       	mov.b	r15,	r15	
    49ba:	4f 5f       	rla.b	r15		
    49bc:	4f 5f       	rla.b	r15		
    49be:	4f 5f       	rla.b	r15		
    49c0:	4f 5f       	rla.b	r15		
    49c2:	1d 44 f2 ff 	mov	-14(r4),r13	;0xfff2(r4)
    49c6:	3d 50 07 00 	add	#7,	r13	;#0x0007
    49ca:	6d 4d       	mov.b	@r13,	r13	
    49cc:	7d f0 0f 00 	and.b	#15,	r13	;#0x000f
    49d0:	4f dd       	bis.b	r13,	r15	
    49d2:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)

  u64 key_64 = *((u64*) key);
    49d6:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    49da:	a4 4f e2 ff 	mov	@r15,	-30(r4)	;0xffe2(r4)
    49de:	94 4f 02 00 	mov	2(r15),	-28(r4)	;0x0002(r15), 0xffe4(r4)
    49e2:	e4 ff 
    49e4:	94 4f 04 00 	mov	4(r15),	-26(r4)	;0x0004(r15), 0xffe6(r4)
    49e8:	e6 ff 
    49ea:	94 4f 06 00 	mov	6(r15),	-24(r4)	;0x0006(r15), 0xffe8(r4)
    49ee:	e8 ff 
  u64 key_64r = ROTATE_LEFT_64(key_64, 15);
    49f0:	18 44 e2 ff 	mov	-30(r4),r8	;0xffe2(r4)
    49f4:	19 44 e4 ff 	mov	-28(r4),r9	;0xffe4(r4)
    49f8:	1a 44 e6 ff 	mov	-26(r4),r10	;0xffe6(r4)
    49fc:	1b 44 e8 ff 	mov	-24(r4),r11	;0xffe8(r4)
    4a00:	0c 48       	mov	r8,	r12	
    4a02:	0d 49       	mov	r9,	r13	
    4a04:	0e 4a       	mov	r10,	r14	
    4a06:	0f 4b       	mov	r11,	r15	
    4a08:	4f ee       	xor.b	r14,	r15	
    4a0a:	0f ee       	xor	r14,	r15	
    4a0c:	8f 10       	swpb	r15		
    4a0e:	4e ed       	xor.b	r13,	r14	
    4a10:	0e ed       	xor	r13,	r14	
    4a12:	8e 10       	swpb	r14		
    4a14:	4d ec       	xor.b	r12,	r13	
    4a16:	0d ec       	xor	r12,	r13	
    4a18:	8d 10       	swpb	r13		
    4a1a:	4c 4c       	mov.b	r12,	r12	
    4a1c:	8c 10       	swpb	r12		
    4a1e:	0c 5c       	rla	r12		
    4a20:	0d 6d       	rlc	r13		
    4a22:	0e 6e       	rlc	r14		
    4a24:	0f 6f       	rlc	r15		
    4a26:	0c 5c       	rla	r12		
    4a28:	0d 6d       	rlc	r13		
    4a2a:	0e 6e       	rlc	r14		
    4a2c:	0f 6f       	rlc	r15		
    4a2e:	0c 5c       	rla	r12		
    4a30:	0d 6d       	rlc	r13		
    4a32:	0e 6e       	rlc	r14		
    4a34:	0f 6f       	rlc	r15		
    4a36:	0c 5c       	rla	r12		
    4a38:	0d 6d       	rlc	r13		
    4a3a:	0e 6e       	rlc	r14		
    4a3c:	0f 6f       	rlc	r15		
    4a3e:	0c 5c       	rla	r12		
    4a40:	0d 6d       	rlc	r13		
    4a42:	0e 6e       	rlc	r14		
    4a44:	0f 6f       	rlc	r15		
    4a46:	0c 5c       	rla	r12		
    4a48:	0d 6d       	rlc	r13		
    4a4a:	0e 6e       	rlc	r14		
    4a4c:	0f 6f       	rlc	r15		
    4a4e:	0c 5c       	rla	r12		
    4a50:	0d 6d       	rlc	r13		
    4a52:	0e 6e       	rlc	r14		
    4a54:	0f 6f       	rlc	r15		
    4a56:	0a 43       	clr	r10		
    4a58:	09 4a       	mov	r10,	r9	
    4a5a:	08 4a       	mov	r10,	r8	
    4a5c:	12 c3       	clrc			
    4a5e:	0b 10       	rrc	r11		
    4a60:	84 4b ea ff 	mov	r11,	-22(r4)	;0xffea(r4)
    4a64:	84 48 ec ff 	mov	r8,	-20(r4)	;0xffec(r4)
    4a68:	84 49 ee ff 	mov	r9,	-18(r4)	;0xffee(r4)
    4a6c:	84 4a f0 ff 	mov	r10,	-16(r4)	;0xfff0(r4)
    4a70:	84 dc ea ff 	bis	r12,	-22(r4)	;0xffea(r4)
    4a74:	84 dd ec ff 	bis	r13,	-20(r4)	;0xffec(r4)
    4a78:	84 de ee ff 	bis	r14,	-18(r4)	;0xffee(r4)
    4a7c:	84 df f0 ff 	bis	r15,	-16(r4)	;0xfff0(r4)
  *((u64*) key) = key_64r;
    4a80:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4a84:	9f 44 ea ff 	mov	-22(r4),0(r15)	;0xffea(r4), 0x0000(r15)
    4a88:	00 00 
    4a8a:	9f 44 ec ff 	mov	-20(r4),2(r15)	;0xffec(r4), 0x0002(r15)
    4a8e:	02 00 
    4a90:	9f 44 ee ff 	mov	-18(r4),4(r15)	;0xffee(r4), 0x0004(r15)
    4a94:	04 00 
    4a96:	9f 44 f0 ff 	mov	-16(r4),6(r15)	;0xfff0(r4), 0x0006(r15)
    4a9a:	06 00 
}
    4a9c:	31 50 14 00 	add	#20,	r1	;#0x0014
    4aa0:	34 41       	pop	r4		
    4aa2:	38 41       	pop	r8		
    4aa4:	39 41       	pop	r9		
    4aa6:	3a 41       	pop	r10		
    4aa8:	3b 41       	pop	r11		
    4aaa:	30 41       	ret			

00004aac <Decrypt>:

void Decrypt(u8 *state, u8 *key)
{
    4aac:	04 12       	push	r4		
    4aae:	04 41       	mov	r1,	r4	
    4ab0:	24 53       	incd	r4		
    4ab2:	31 50 f2 ff 	add	#-14,	r1	;#0xfff2
    4ab6:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4aba:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int round;

	for(round=32; round >= 1; round--)
    4abe:	b4 40 20 00 	mov	#32,	-16(r4)	;#0x0020, 0xfff0(r4)
    4ac2:	f0 ff 
    4ac4:	43 3c       	jmp	$+136    	;abs 0x4b4c
	  {
	    u32 state_L = *((u32*) (state + 4));
    4ac6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4aca:	94 4f 04 00 	mov	4(r15),	-14(r4)	;0x0004(r15), 0xfff2(r4)
    4ace:	f2 ff 
    4ad0:	94 4f 06 00 	mov	6(r15),	-12(r4)	;0x0006(r15), 0xfff4(r4)
    4ad4:	f4 ff 
	    u32 state_R = *((u32*) state);
    4ad6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4ada:	a4 4f f6 ff 	mov	@r15,	-10(r4)	;0xfff6(r4)
    4ade:	94 4f 02 00 	mov	2(r15),	-8(r4)	;0x0002(r15), 0xfff8(r4)
    4ae2:	f8 ff 

	    AddRoundKey(state, key);
    4ae4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4ae8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4aec:	b0 12 d8 40 	call	#0x40d8	
	    Substitute(state);
    4af0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4af4:	b0 12 64 41 	call	#0x4164	
	    Mix(state);
    4af8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4afc:	b0 12 06 43 	call	#0x4306	
	    Permute(state);
    4b00:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b04:	b0 12 0e 45 	call	#0x450e	

	    *((u32*) state) = (*((u32*) state)) ^ state_L;
    4b08:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b0c:	2e 4f       	mov	@r15,	r14	
    4b0e:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4b12:	1e e4 f2 ff 	xor	-14(r4),r14	;0xfff2(r4)
    4b16:	1f e4 f4 ff 	xor	-12(r4),r15	;0xfff4(r4)
    4b1a:	1d 44 fa ff 	mov	-6(r4),	r13	;0xfffa(r4)
    4b1e:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    4b22:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
	    *((u32*) (state + 4)) = state_R;
    4b26:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4b2a:	2f 52       	add	#4,	r15	;r2 As==10
    4b2c:	9f 44 f6 ff 	mov	-10(r4),0(r15)	;0xfff6(r4), 0x0000(r15)
    4b30:	00 00 
    4b32:	9f 44 f8 ff 	mov	-8(r4),	2(r15)	;0xfff8(r4), 0x0002(r15)
    4b36:	02 00 

	    InvKeySchedule(key, round);
    4b38:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4b3c:	4f 4f       	mov.b	r15,	r15	
    4b3e:	4e 4f       	mov.b	r15,	r14	
    4b40:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4b44:	b0 12 1e 49 	call	#0x491e	

void Decrypt(u8 *state, u8 *key)
{
	int round;

	for(round=32; round >= 1; round--)
    4b48:	b4 53 f0 ff 	add	#-1,	-16(r4)	;r3 As==11, 0xfff0(r4)
    4b4c:	94 93 f0 ff 	cmp	#1,	-16(r4)	;r3 As==01, 0xfff0(r4)
    4b50:	ba 37       	jge	$-138    	;abs 0x4ac6

	    InvKeySchedule(key, round);
	  }

	return;
}
    4b52:	31 50 0e 00 	add	#14,	r1	;#0x000e
    4b56:	34 41       	pop	r4		
    4b58:	30 41       	ret			

00004b5a <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4b5a:	04 12       	push	r4		
    4b5c:	04 41       	mov	r1,	r4	
    4b5e:	24 53       	incd	r4		
    4b60:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4b64:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b68:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4b6c:	0d 3c       	jmp	$+28     	;abs 0x4b88
    {
      for (i = 0; i<d; i++) 
    4b6e:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4b72:	04 3c       	jmp	$+10     	;abs 0x4b7c
	{
	  nop();
    4b74:	03 43       	nop			
	  nop();
    4b76:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4b78:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4b7c:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4b80:	f8 ff 
    4b82:	f8 2b       	jnc	$-14     	;abs 0x4b74
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b84:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4b88:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4b8c:	fa ff 
    4b8e:	ef 2b       	jnc	$-32     	;abs 0x4b6e
	{
	  nop();
	  nop();
	}
    }
}
    4b90:	31 50 06 00 	add	#6,	r1	;#0x0006
    4b94:	34 41       	pop	r4		
    4b96:	30 41       	ret			

00004b98 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4b98:	04 12       	push	r4		
    4b9a:	04 41       	mov	r1,	r4	
    4b9c:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4b9e:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4ba2:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4ba4:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4ba8:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4bac:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4bb0:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4bb4:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4bb8:	5f 42 05 00 	mov.b	&0x0005,r15	
    4bbc:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4bc0:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4bc4:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4bc8:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4bcc:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4bce:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4bd2:	79 00 
  U1RCTL = 0;
    4bd4:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4bd8:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4bdc:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4be0:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4be2:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4be6:	7b 00 

  delay(0x800);
    4be8:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4bec:	b0 12 5a 4b 	call	#0x4b5a	
  return 0;
    4bf0:	0f 43       	clr	r15		
}
    4bf2:	34 41       	pop	r4		
    4bf4:	30 41       	ret			

00004bf6 <uart1_putchar>:

int uart1_putchar(int c)
{
    4bf6:	04 12       	push	r4		
    4bf8:	04 41       	mov	r1,	r4	
    4bfa:	24 53       	incd	r4		
    4bfc:	21 83       	decd	r1		
    4bfe:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4c02:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c06:	4f 4f       	mov.b	r15,	r15	
    4c08:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4c0c:	03 43       	nop			
    4c0e:	5f 42 79 00 	mov.b	&0x0079,r15	
    4c12:	4f 4f       	mov.b	r15,	r15	
    4c14:	1f f3       	and	#1,	r15	;r3 As==01
    4c16:	0f 93       	tst	r15		
    4c18:	fa 27       	jz	$-10     	;abs 0x4c0e
  return (unsigned char)c;
    4c1a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c1e:	4f 4f       	mov.b	r15,	r15	
    4c20:	4f 4f       	mov.b	r15,	r15	
}
    4c22:	21 53       	incd	r1		
    4c24:	34 41       	pop	r4		
    4c26:	30 41       	ret			

00004c28 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4c28:	04 12       	push	r4		
    4c2a:	04 41       	mov	r1,	r4	
    4c2c:	24 53       	incd	r4		
    4c2e:	21 83       	decd	r1		
    4c30:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4c34:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c38:	b0 12 f6 4b 	call	#0x4bf6	
}
    4c3c:	21 53       	incd	r1		
    4c3e:	34 41       	pop	r4		
    4c40:	30 41       	ret			

00004c42 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4c42:	04 12       	push	r4		
    4c44:	04 41       	mov	r1,	r4	
    4c46:	24 53       	incd	r4		
  ;
}
    4c48:	34 41       	pop	r4		
    4c4a:	30 41       	ret			

00004c4c <start_decrypt>:
void
start_decrypt()
{
    4c4c:	04 12       	push	r4		
    4c4e:	04 41       	mov	r1,	r4	
    4c50:	24 53       	incd	r4		
  ;
}
    4c52:	34 41       	pop	r4		
    4c54:	30 41       	ret			

00004c56 <end_expe>:


void
end_expe()
{
    4c56:	04 12       	push	r4		
    4c58:	04 41       	mov	r1,	r4	
    4c5a:	24 53       	incd	r4		
  ;
}
    4c5c:	34 41       	pop	r4		
    4c5e:	30 41       	ret			

00004c60 <_unexpected_>:
    4c60:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	c2 40 c2 40 c2 40 c2 40 c2 40 c2 40 c2 40 c2 40     .@.@.@.@.@.@.@.@
    fff0:	c2 40 c2 40 c2 40 c2 40 c2 40 c2 40 c2 40 00 40     .@.@.@.@.@.@.@.@
