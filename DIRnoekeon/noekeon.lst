
noekeon.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00004a66 l    d  .rodata	00000000 .rodata
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 noekeonDirectRef.c
00004a66 l     O .rodata	00000010 NullVector
000040dc l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004364 g     F .text	0000013a Pi1
00004a2c g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040dc  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040dc  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004a76 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
0000499c g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040d6  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000047fe g     F .text	0000004c RCShiftRegFwd
000040dc  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004a5a g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
0000484a g     F .text	00000056 RCShiftRegBwd
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040dc  w      .text	00000000 __isr_5
00004a76 g       *ABS*	00000000 __data_load_start
000040dc g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040dc  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040dc  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040dc  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
0000449e g     F .text	00000136 Pi2
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040dc  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00004766 g     F .text	00000098 Round
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004a64  w      .text	00000000 _unexpected_
000040dc  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040dc  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
000049fa g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040dc g       .text	00000000 __ctors_start
000040dc  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
000040e0 g     F .text	00000284 Theta
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .rodata	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	00000098 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040dc  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
0000495e g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040dc  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
000045d4 g     F .text	00000192 Gamma
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040dc g       .text	00000000 __dtors_start
000040dc  w      .text	00000000 __isr_6
000040dc g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040dc  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .rodata	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004a46 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040d6  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004a50 g     F .text	0000000a start_decrypt
000048a0 g     F .text	000000be CommonLoop
00001100 g       .rodata	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 76 4a 	mov	19062(r15),4352(r15);0x4a76(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
  a[0]^=RC2;

} /* CommonLoop */

int main()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
#ifdef PRINT
  uart1_init();
#endif

  u32 k[4]={0,0,0,0};
    4046:	84 43 de ff 	mov	#0,	-34(r4)	;r3 As==00, 0xffde(r4)
    404a:	84 43 e0 ff 	mov	#0,	-32(r4)	;r3 As==00, 0xffe0(r4)
    404e:	84 43 e2 ff 	mov	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    4052:	84 43 e4 ff 	mov	#0,	-28(r4)	;r3 As==00, 0xffe4(r4)
    4056:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    405a:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    405e:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
    4062:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
  u32 state[4]={0,0,0,0};
    4066:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    406a:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    406e:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    4072:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    4076:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    407a:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    407e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4082:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
  
  START_ENCRYPT();
    4086:	b0 12 46 4a 	call	#0x4a46	

  CommonLoop (k,state,RC1ENCRYPTSTART,0);
    408a:	0f 44       	mov	r4,	r15	
    408c:	3f 50 ee ff 	add	#-18,	r15	;#0xffee
    4090:	4c 43       	clr.b	r12		
    4092:	7d 40 80 ff 	mov.b	#-128,	r13	;#0xff80
    4096:	0e 4f       	mov	r15,	r14	
    4098:	0f 44       	mov	r4,	r15	
    409a:	3f 50 de ff 	add	#-34,	r15	;#0xffde
    409e:	b0 12 a0 48 	call	#0x48a0	
  printf("%lx ", state[2]);
  printf("%lx ", state[3]);
  printf("\n");	
#endif

  START_DECRYPT();
    40a2:	b0 12 50 4a 	call	#0x4a50	
  
  Theta(NullVector,k);
    40a6:	0e 44       	mov	r4,	r14	
    40a8:	3e 50 de ff 	add	#-34,	r14	;#0xffde
    40ac:	3f 40 66 4a 	mov	#19046,	r15	;#0x4a66
    40b0:	b0 12 e0 40 	call	#0x40e0	

  CommonLoop (k,state,0,RC2DECRYPTSTART);
    40b4:	0f 44       	mov	r4,	r15	
    40b6:	3f 50 ee ff 	add	#-18,	r15	;#0xffee
    40ba:	7c 40 d4 ff 	mov.b	#-44,	r12	;#0xffd4
    40be:	4d 43       	clr.b	r13		
    40c0:	0e 4f       	mov	r15,	r14	
    40c2:	0f 44       	mov	r4,	r15	
    40c4:	3f 50 de ff 	add	#-34,	r15	;#0xffde
    40c8:	b0 12 a0 48 	call	#0x48a0	
  printf("%lx ", state[1]);
  printf("%lx ", state[2]);
  printf("%lx ", state[3]);
  printf("\n");
#endif
  END_EXPE();
    40cc:	b0 12 5a 4a 	call	#0x4a5a	

  return 0;
    40d0:	0f 43       	clr	r15		
}
    40d2:	31 50 20 00 	add	#32,	r1	;#0x0020

000040d6 <__stop_progExec__>:
    40d6:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40da:	fd 3f       	jmp	$-4      	;abs 0x40d6

000040dc <__ctors_end>:
    40dc:	30 40 64 4a 	br	#0x4a64	

000040e0 <Theta>:

static const u32 NullVector[4] = {0,0,0,0};


 void Theta (u32 const * const k,u32 * const a)
{
    40e0:	0b 12       	push	r11		
    40e2:	0a 12       	push	r10		
    40e4:	09 12       	push	r9		
    40e6:	08 12       	push	r8		
    40e8:	07 12       	push	r7		
    40ea:	06 12       	push	r6		
    40ec:	05 12       	push	r5		
    40ee:	04 12       	push	r4		
    40f0:	04 41       	mov	r1,	r4	
    40f2:	34 50 10 00 	add	#16,	r4	;#0x0010
    40f6:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    40fa:	84 4f e8 ff 	mov	r15,	-24(r4)	;0xffe8(r4)
    40fe:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
  u32 tmp;

  tmp  = a[0]^a[2]; 
    4102:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4106:	2c 4f       	mov	@r15,	r12	
    4108:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    410c:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4110:	3f 52       	add	#8,	r15	;r2 As==11
    4112:	2e 4f       	mov	@r15,	r14	
    4114:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4118:	0a 4c       	mov	r12,	r10	
    411a:	0b 4d       	mov	r13,	r11	
    411c:	0a ee       	xor	r14,	r10	
    411e:	0b ef       	xor	r15,	r11	
    4120:	84 4a e4 ff 	mov	r10,	-28(r4)	;0xffe4(r4)
    4124:	84 4b e6 ff 	mov	r11,	-26(r4)	;0xffe6(r4)
  tmp ^= ROTL32(tmp,8)^ROTL32(tmp,24); 
    4128:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    412c:	8e 10       	swpb	r14		
    412e:	4e 4e       	mov.b	r14,	r14	
    4130:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    4134:	4f 4f       	mov.b	r15,	r15	
    4136:	8f 10       	swpb	r15		
    4138:	0b 4e       	mov	r14,	r11	
    413a:	0b df       	bis	r15,	r11	
    413c:	84 4b ee ff 	mov	r11,	-18(r4)	;0xffee(r4)
    4140:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    4144:	8e 10       	swpb	r14		
    4146:	4e 4e       	mov.b	r14,	r14	
    4148:	1f 44 e4 ff 	mov	-28(r4),r15	;0xffe4(r4)
    414c:	4f 4f       	mov.b	r15,	r15	
    414e:	8f 10       	swpb	r15		
    4150:	0d 4e       	mov	r14,	r13	
    4152:	0d df       	bis	r15,	r13	
    4154:	84 4d ec ff 	mov	r13,	-20(r4)	;0xffec(r4)
    4158:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    415c:	4e 4e       	mov.b	r14,	r14	
    415e:	8e 10       	swpb	r14		
    4160:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    4164:	8f 10       	swpb	r15		
    4166:	4f 4f       	mov.b	r15,	r15	
    4168:	06 4e       	mov	r14,	r6	
    416a:	06 df       	bis	r15,	r6	
    416c:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    4170:	4e 4e       	mov.b	r14,	r14	
    4172:	8e 10       	swpb	r14		
    4174:	1f 44 e4 ff 	mov	-28(r4),r15	;0xffe4(r4)
    4178:	8f 10       	swpb	r15		
    417a:	4f 4f       	mov.b	r15,	r15	
    417c:	05 4e       	mov	r14,	r5	
    417e:	05 df       	bis	r15,	r5	
    4180:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    4184:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4188:	0e e5       	xor	r5,	r14	
    418a:	0f e6       	xor	r6,	r15	
    418c:	84 ee e4 ff 	xor	r14,	-28(r4)	;0xffe4(r4)
    4190:	84 ef e6 ff 	xor	r15,	-26(r4)	;0xffe6(r4)
  a[1]^= tmp; 
    4194:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    4198:	2d 52       	add	#4,	r13	;r2 As==10
    419a:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    419e:	2f 52       	add	#4,	r15	;r2 As==10
    41a0:	2e 4f       	mov	@r15,	r14	
    41a2:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    41a6:	1e e4 e4 ff 	xor	-28(r4),r14	;0xffe4(r4)
    41aa:	1f e4 e6 ff 	xor	-26(r4),r15	;0xffe6(r4)
    41ae:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    41b2:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
  a[3]^= tmp; 
    41b6:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    41ba:	3d 50 0c 00 	add	#12,	r13	;#0x000c
    41be:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    41c2:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    41c6:	2e 4f       	mov	@r15,	r14	
    41c8:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    41cc:	1e e4 e4 ff 	xor	-28(r4),r14	;0xffe4(r4)
    41d0:	1f e4 e6 ff 	xor	-26(r4),r15	;0xffe6(r4)
    41d4:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    41d8:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)

  a[0] ^= k[0]; a[1] ^= k[1]; a[2] ^= k[2]; a[3] ^= k[3]; 
    41dc:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    41e0:	2c 4f       	mov	@r15,	r12	
    41e2:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41e6:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    41ea:	2e 4f       	mov	@r15,	r14	
    41ec:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    41f0:	0e ec       	xor	r12,	r14	
    41f2:	0f ed       	xor	r13,	r15	
    41f4:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    41f8:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    41fc:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
    4200:	1b 44 ea ff 	mov	-22(r4),r11	;0xffea(r4)
    4204:	2b 52       	add	#4,	r11	;r2 As==10
    4206:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    420a:	2f 52       	add	#4,	r15	;r2 As==10
    420c:	2c 4f       	mov	@r15,	r12	
    420e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4212:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4216:	2f 52       	add	#4,	r15	;r2 As==10
    4218:	2e 4f       	mov	@r15,	r14	
    421a:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    421e:	0e ec       	xor	r12,	r14	
    4220:	0f ed       	xor	r13,	r15	
    4222:	8b 4e 00 00 	mov	r14,	0(r11)	;0x0000(r11)
    4226:	8b 4f 02 00 	mov	r15,	2(r11)	;0x0002(r11)
    422a:	1b 44 ea ff 	mov	-22(r4),r11	;0xffea(r4)
    422e:	3b 52       	add	#8,	r11	;r2 As==11
    4230:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4234:	3f 52       	add	#8,	r15	;r2 As==11
    4236:	2c 4f       	mov	@r15,	r12	
    4238:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    423c:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4240:	3f 52       	add	#8,	r15	;r2 As==11
    4242:	2e 4f       	mov	@r15,	r14	
    4244:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4248:	0e ec       	xor	r12,	r14	
    424a:	0f ed       	xor	r13,	r15	
    424c:	8b 4e 00 00 	mov	r14,	0(r11)	;0x0000(r11)
    4250:	8b 4f 02 00 	mov	r15,	2(r11)	;0x0002(r11)
    4254:	1b 44 ea ff 	mov	-22(r4),r11	;0xffea(r4)
    4258:	3b 50 0c 00 	add	#12,	r11	;#0x000c
    425c:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4260:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    4264:	2c 4f       	mov	@r15,	r12	
    4266:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    426a:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    426e:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    4272:	2e 4f       	mov	@r15,	r14	
    4274:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4278:	0e ec       	xor	r12,	r14	
    427a:	0f ed       	xor	r13,	r15	
    427c:	8b 4e 00 00 	mov	r14,	0(r11)	;0x0000(r11)
    4280:	8b 4f 02 00 	mov	r15,	2(r11)	;0x0002(r11)

  tmp  = a[1]^a[3]; 
    4284:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4288:	2f 52       	add	#4,	r15	;r2 As==10
    428a:	2c 4f       	mov	@r15,	r12	
    428c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4290:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4294:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    4298:	2e 4f       	mov	@r15,	r14	
    429a:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    429e:	0a 4c       	mov	r12,	r10	
    42a0:	0b 4d       	mov	r13,	r11	
    42a2:	0a ee       	xor	r14,	r10	
    42a4:	0b ef       	xor	r15,	r11	
    42a6:	84 4a e4 ff 	mov	r10,	-28(r4)	;0xffe4(r4)
    42aa:	84 4b e6 ff 	mov	r11,	-26(r4)	;0xffe6(r4)
  tmp ^= ROTL32(tmp,8)^ROTL32(tmp,24); 
    42ae:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    42b2:	8e 10       	swpb	r14		
    42b4:	4e 4e       	mov.b	r14,	r14	
    42b6:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    42ba:	4f 4f       	mov.b	r15,	r15	
    42bc:	8f 10       	swpb	r15		
    42be:	08 4e       	mov	r14,	r8	
    42c0:	08 df       	bis	r15,	r8	
    42c2:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    42c6:	8e 10       	swpb	r14		
    42c8:	4e 4e       	mov.b	r14,	r14	
    42ca:	1f 44 e4 ff 	mov	-28(r4),r15	;0xffe4(r4)
    42ce:	4f 4f       	mov.b	r15,	r15	
    42d0:	8f 10       	swpb	r15		
    42d2:	07 4e       	mov	r14,	r7	
    42d4:	07 df       	bis	r15,	r7	
    42d6:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    42da:	4e 4e       	mov.b	r14,	r14	
    42dc:	8e 10       	swpb	r14		
    42de:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    42e2:	8f 10       	swpb	r15		
    42e4:	4f 4f       	mov.b	r15,	r15	
    42e6:	0a 4e       	mov	r14,	r10	
    42e8:	0a df       	bis	r15,	r10	
    42ea:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    42ee:	4e 4e       	mov.b	r14,	r14	
    42f0:	8e 10       	swpb	r14		
    42f2:	1f 44 e4 ff 	mov	-28(r4),r15	;0xffe4(r4)
    42f6:	8f 10       	swpb	r15		
    42f8:	4f 4f       	mov.b	r15,	r15	
    42fa:	09 4e       	mov	r14,	r9	
    42fc:	09 df       	bis	r15,	r9	
    42fe:	0e 47       	mov	r7,	r14	
    4300:	0f 48       	mov	r8,	r15	
    4302:	0e e9       	xor	r9,	r14	
    4304:	0f ea       	xor	r10,	r15	
    4306:	84 ee e4 ff 	xor	r14,	-28(r4)	;0xffe4(r4)
    430a:	84 ef e6 ff 	xor	r15,	-26(r4)	;0xffe6(r4)
  a[0]^= tmp; 
    430e:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4312:	2e 4f       	mov	@r15,	r14	
    4314:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4318:	1e e4 e4 ff 	xor	-28(r4),r14	;0xffe4(r4)
    431c:	1f e4 e6 ff 	xor	-26(r4),r15	;0xffe6(r4)
    4320:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    4324:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    4328:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
  a[2]^= tmp; 
    432c:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    4330:	3d 52       	add	#8,	r13	;r2 As==11
    4332:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4336:	3f 52       	add	#8,	r15	;r2 As==11
    4338:	2e 4f       	mov	@r15,	r14	
    433a:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    433e:	1e e4 e4 ff 	xor	-28(r4),r14	;0xffe4(r4)
    4342:	1f e4 e6 ff 	xor	-26(r4),r15	;0xffe6(r4)
    4346:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    434a:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)

} /* Theta */
    434e:	31 50 0c 00 	add	#12,	r1	;#0x000c
    4352:	34 41       	pop	r4		
    4354:	35 41       	pop	r5		
    4356:	36 41       	pop	r6		
    4358:	37 41       	pop	r7		
    435a:	38 41       	pop	r8		
    435c:	39 41       	pop	r9		
    435e:	3a 41       	pop	r10		
    4360:	3b 41       	pop	r11		
    4362:	30 41       	ret			

00004364 <Pi1>:


 void Pi1(u32 * const a)
{ a[1] = ROTL32 (a[1], 1); 
    4364:	0b 12       	push	r11		
    4366:	0a 12       	push	r10		
    4368:	09 12       	push	r9		
    436a:	08 12       	push	r8		
    436c:	07 12       	push	r7		
    436e:	06 12       	push	r6		
    4370:	05 12       	push	r5		
    4372:	04 12       	push	r4		
    4374:	04 41       	mov	r1,	r4	
    4376:	34 50 10 00 	add	#16,	r4	;#0x0010
    437a:	21 83       	decd	r1		
    437c:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    4380:	15 44 ee ff 	mov	-18(r4),r5	;0xffee(r4)
    4384:	25 52       	add	#4,	r5	;r2 As==10
    4386:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    438a:	2f 52       	add	#4,	r15	;r2 As==10
    438c:	2d 4f       	mov	@r15,	r13	
    438e:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    4392:	0f 4d       	mov	r13,	r15	
    4394:	0f 5f       	rla	r15		
    4396:	0f 43       	clr	r15		
    4398:	0f 6f       	rlc	r15		
    439a:	0c 4f       	mov	r15,	r12	
    439c:	0f 4e       	mov	r14,	r15	
    439e:	0f 5f       	rla	r15		
    43a0:	0b 4c       	mov	r12,	r11	
    43a2:	0b df       	bis	r15,	r11	
    43a4:	0f 4e       	mov	r14,	r15	
    43a6:	0f 5f       	rla	r15		
    43a8:	0f 43       	clr	r15		
    43aa:	0f 6f       	rlc	r15		
    43ac:	0c 4f       	mov	r15,	r12	
    43ae:	0f 4d       	mov	r13,	r15	
    43b0:	0f 5f       	rla	r15		
    43b2:	0a 4c       	mov	r12,	r10	
    43b4:	0a df       	bis	r15,	r10	
    43b6:	85 4a 00 00 	mov	r10,	0(r5)	;0x0000(r5)
    43ba:	85 4b 02 00 	mov	r11,	2(r5)	;0x0002(r5)
  a[2] = ROTL32 (a[2], 5); 
    43be:	1b 44 ee ff 	mov	-18(r4),r11	;0xffee(r4)
    43c2:	3b 52       	add	#8,	r11	;r2 As==11
    43c4:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    43c8:	3f 52       	add	#8,	r15	;r2 As==11
    43ca:	2c 4f       	mov	@r15,	r12	
    43cc:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    43d0:	0f 4c       	mov	r12,	r15	
    43d2:	8f 10       	swpb	r15		
    43d4:	4f 4f       	mov.b	r15,	r15	
    43d6:	12 c3       	clrc			
    43d8:	0f 10       	rrc	r15		
    43da:	12 c3       	clrc			
    43dc:	0f 10       	rrc	r15		
    43de:	12 c3       	clrc			
    43e0:	0f 10       	rrc	r15		
    43e2:	0e 4d       	mov	r13,	r14	
    43e4:	0e 5e       	rla	r14		
    43e6:	0e 5e       	rla	r14		
    43e8:	0e 5e       	rla	r14		
    43ea:	0e 5e       	rla	r14		
    43ec:	0e 5e       	rla	r14		
    43ee:	07 4f       	mov	r15,	r7	
    43f0:	07 de       	bis	r14,	r7	
    43f2:	0e 4d       	mov	r13,	r14	
    43f4:	8e 10       	swpb	r14		
    43f6:	4e 4e       	mov.b	r14,	r14	
    43f8:	12 c3       	clrc			
    43fa:	0e 10       	rrc	r14		
    43fc:	12 c3       	clrc			
    43fe:	0e 10       	rrc	r14		
    4400:	12 c3       	clrc			
    4402:	0e 10       	rrc	r14		
    4404:	0f 4c       	mov	r12,	r15	
    4406:	0f 5f       	rla	r15		
    4408:	0f 5f       	rla	r15		
    440a:	0f 5f       	rla	r15		
    440c:	0f 5f       	rla	r15		
    440e:	0f 5f       	rla	r15		
    4410:	06 4e       	mov	r14,	r6	
    4412:	06 df       	bis	r15,	r6	
    4414:	8b 46 00 00 	mov	r6,	0(r11)	;0x0000(r11)
    4418:	8b 47 02 00 	mov	r7,	2(r11)	;0x0002(r11)
  a[3] = ROTL32 (a[3], 2); 
    441c:	1b 44 ee ff 	mov	-18(r4),r11	;0xffee(r4)
    4420:	3b 50 0c 00 	add	#12,	r11	;#0x000c
    4424:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4428:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    442c:	2d 4f       	mov	@r15,	r13	
    442e:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    4432:	0f 4d       	mov	r13,	r15	
    4434:	8f 10       	swpb	r15		
    4436:	4f 4f       	mov.b	r15,	r15	
    4438:	12 c3       	clrc			
    443a:	0f 10       	rrc	r15		
    443c:	12 c3       	clrc			
    443e:	0f 10       	rrc	r15		
    4440:	12 c3       	clrc			
    4442:	0f 10       	rrc	r15		
    4444:	12 c3       	clrc			
    4446:	0f 10       	rrc	r15		
    4448:	12 c3       	clrc			
    444a:	0f 10       	rrc	r15		
    444c:	12 c3       	clrc			
    444e:	0f 10       	rrc	r15		
    4450:	0c 4e       	mov	r14,	r12	
    4452:	0c 5c       	rla	r12		
    4454:	0c 5c       	rla	r12		
    4456:	09 4f       	mov	r15,	r9	
    4458:	09 dc       	bis	r12,	r9	
    445a:	0f 4e       	mov	r14,	r15	
    445c:	8f 10       	swpb	r15		
    445e:	4f 4f       	mov.b	r15,	r15	
    4460:	12 c3       	clrc			
    4462:	0f 10       	rrc	r15		
    4464:	12 c3       	clrc			
    4466:	0f 10       	rrc	r15		
    4468:	12 c3       	clrc			
    446a:	0f 10       	rrc	r15		
    446c:	12 c3       	clrc			
    446e:	0f 10       	rrc	r15		
    4470:	12 c3       	clrc			
    4472:	0f 10       	rrc	r15		
    4474:	12 c3       	clrc			
    4476:	0f 10       	rrc	r15		
    4478:	0e 4d       	mov	r13,	r14	
    447a:	0e 5e       	rla	r14		
    447c:	0e 5e       	rla	r14		
    447e:	08 4f       	mov	r15,	r8	
    4480:	08 de       	bis	r14,	r8	
    4482:	8b 48 00 00 	mov	r8,	0(r11)	;0x0000(r11)
    4486:	8b 49 02 00 	mov	r9,	2(r11)	;0x0002(r11)
}  /* Pi1 */
    448a:	21 53       	incd	r1		
    448c:	34 41       	pop	r4		
    448e:	35 41       	pop	r5		
    4490:	36 41       	pop	r6		
    4492:	37 41       	pop	r7		
    4494:	38 41       	pop	r8		
    4496:	39 41       	pop	r9		
    4498:	3a 41       	pop	r10		
    449a:	3b 41       	pop	r11		
    449c:	30 41       	ret			

0000449e <Pi2>:


 void Pi2(u32 * const a)
{ a[1] = ROTL32 (a[1], 31);
    449e:	0b 12       	push	r11		
    44a0:	0a 12       	push	r10		
    44a2:	09 12       	push	r9		
    44a4:	08 12       	push	r8		
    44a6:	07 12       	push	r7		
    44a8:	06 12       	push	r6		
    44aa:	05 12       	push	r5		
    44ac:	04 12       	push	r4		
    44ae:	04 41       	mov	r1,	r4	
    44b0:	34 50 10 00 	add	#16,	r4	;#0x0010
    44b4:	21 83       	decd	r1		
    44b6:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    44ba:	15 44 ee ff 	mov	-18(r4),r5	;0xffee(r4)
    44be:	25 52       	add	#4,	r5	;r2 As==10
    44c0:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    44c4:	2f 52       	add	#4,	r15	;r2 As==10
    44c6:	2d 4f       	mov	@r15,	r13	
    44c8:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    44cc:	0f 4d       	mov	r13,	r15	
    44ce:	0f 11       	rra	r15		
    44d0:	0f 43       	clr	r15		
    44d2:	0f 10       	rrc	r15		
    44d4:	0c 4f       	mov	r15,	r12	
    44d6:	0f 4e       	mov	r14,	r15	
    44d8:	12 c3       	clrc			
    44da:	0f 10       	rrc	r15		
    44dc:	0b 4c       	mov	r12,	r11	
    44de:	0b df       	bis	r15,	r11	
    44e0:	0f 4e       	mov	r14,	r15	
    44e2:	0f 11       	rra	r15		
    44e4:	0f 43       	clr	r15		
    44e6:	0f 10       	rrc	r15		
    44e8:	0c 4f       	mov	r15,	r12	
    44ea:	0f 4d       	mov	r13,	r15	
    44ec:	12 c3       	clrc			
    44ee:	0f 10       	rrc	r15		
    44f0:	0a 4c       	mov	r12,	r10	
    44f2:	0a df       	bis	r15,	r10	
    44f4:	85 4a 00 00 	mov	r10,	0(r5)	;0x0000(r5)
    44f8:	85 4b 02 00 	mov	r11,	2(r5)	;0x0002(r5)
  a[2] = ROTL32 (a[2], 27); 
    44fc:	1b 44 ee ff 	mov	-18(r4),r11	;0xffee(r4)
    4500:	3b 52       	add	#8,	r11	;r2 As==11
    4502:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4506:	3f 52       	add	#8,	r15	;r2 As==11
    4508:	2c 4f       	mov	@r15,	r12	
    450a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    450e:	0f 4c       	mov	r12,	r15	
    4510:	4f 4f       	mov.b	r15,	r15	
    4512:	8f 10       	swpb	r15		
    4514:	0f 5f       	rla	r15		
    4516:	0f 5f       	rla	r15		
    4518:	0f 5f       	rla	r15		
    451a:	0e 4d       	mov	r13,	r14	
    451c:	12 c3       	clrc			
    451e:	0e 10       	rrc	r14		
    4520:	12 c3       	clrc			
    4522:	0e 10       	rrc	r14		
    4524:	12 c3       	clrc			
    4526:	0e 10       	rrc	r14		
    4528:	12 c3       	clrc			
    452a:	0e 10       	rrc	r14		
    452c:	12 c3       	clrc			
    452e:	0e 10       	rrc	r14		
    4530:	07 4f       	mov	r15,	r7	
    4532:	07 de       	bis	r14,	r7	
    4534:	0e 4d       	mov	r13,	r14	
    4536:	4e 4e       	mov.b	r14,	r14	
    4538:	8e 10       	swpb	r14		
    453a:	0e 5e       	rla	r14		
    453c:	0e 5e       	rla	r14		
    453e:	0e 5e       	rla	r14		
    4540:	0f 4c       	mov	r12,	r15	
    4542:	12 c3       	clrc			
    4544:	0f 10       	rrc	r15		
    4546:	12 c3       	clrc			
    4548:	0f 10       	rrc	r15		
    454a:	12 c3       	clrc			
    454c:	0f 10       	rrc	r15		
    454e:	12 c3       	clrc			
    4550:	0f 10       	rrc	r15		
    4552:	12 c3       	clrc			
    4554:	0f 10       	rrc	r15		
    4556:	06 4e       	mov	r14,	r6	
    4558:	06 df       	bis	r15,	r6	
    455a:	8b 46 00 00 	mov	r6,	0(r11)	;0x0000(r11)
    455e:	8b 47 02 00 	mov	r7,	2(r11)	;0x0002(r11)
  a[3] = ROTL32 (a[3], 30); 
    4562:	1b 44 ee ff 	mov	-18(r4),r11	;0xffee(r4)
    4566:	3b 50 0c 00 	add	#12,	r11	;#0x000c
    456a:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    456e:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    4572:	2d 4f       	mov	@r15,	r13	
    4574:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    4578:	0f 4d       	mov	r13,	r15	
    457a:	4f 4f       	mov.b	r15,	r15	
    457c:	8f 10       	swpb	r15		
    457e:	0f 5f       	rla	r15		
    4580:	0f 5f       	rla	r15		
    4582:	0f 5f       	rla	r15		
    4584:	0f 5f       	rla	r15		
    4586:	0f 5f       	rla	r15		
    4588:	0f 5f       	rla	r15		
    458a:	0c 4e       	mov	r14,	r12	
    458c:	12 c3       	clrc			
    458e:	0c 10       	rrc	r12		
    4590:	12 c3       	clrc			
    4592:	0c 10       	rrc	r12		
    4594:	09 4f       	mov	r15,	r9	
    4596:	09 dc       	bis	r12,	r9	
    4598:	0f 4e       	mov	r14,	r15	
    459a:	4f 4f       	mov.b	r15,	r15	
    459c:	8f 10       	swpb	r15		
    459e:	0f 5f       	rla	r15		
    45a0:	0f 5f       	rla	r15		
    45a2:	0f 5f       	rla	r15		
    45a4:	0f 5f       	rla	r15		
    45a6:	0f 5f       	rla	r15		
    45a8:	0f 5f       	rla	r15		
    45aa:	0e 4d       	mov	r13,	r14	
    45ac:	12 c3       	clrc			
    45ae:	0e 10       	rrc	r14		
    45b0:	12 c3       	clrc			
    45b2:	0e 10       	rrc	r14		
    45b4:	08 4f       	mov	r15,	r8	
    45b6:	08 de       	bis	r14,	r8	
    45b8:	8b 48 00 00 	mov	r8,	0(r11)	;0x0000(r11)
    45bc:	8b 49 02 00 	mov	r9,	2(r11)	;0x0002(r11)
}  /* Pi2 */
    45c0:	21 53       	incd	r1		
    45c2:	34 41       	pop	r4		
    45c4:	35 41       	pop	r5		
    45c6:	36 41       	pop	r6		
    45c8:	37 41       	pop	r7		
    45ca:	38 41       	pop	r8		
    45cc:	39 41       	pop	r9		
    45ce:	3a 41       	pop	r10		
    45d0:	3b 41       	pop	r11		
    45d2:	30 41       	ret			

000045d4 <Gamma>:



 void Gamma(u32 * const a)
{ u32 tmp;
    45d4:	0b 12       	push	r11		
    45d6:	0a 12       	push	r10		
    45d8:	09 12       	push	r9		
    45da:	04 12       	push	r4		
    45dc:	04 41       	mov	r1,	r4	
    45de:	34 52       	add	#8,	r4	;r2 As==11
    45e0:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    45e4:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)

  /* first non-linear step in gamma */
  a[1] ^= ~a[3] & ~a[2];
    45e8:	19 44 f6 ff 	mov	-10(r4),r9	;0xfff6(r4)
    45ec:	29 52       	add	#4,	r9	;r2 As==10
    45ee:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    45f2:	2f 52       	add	#4,	r15	;r2 As==10
    45f4:	2c 4f       	mov	@r15,	r12	
    45f6:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    45fa:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    45fe:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    4602:	2a 4f       	mov	@r15,	r10	
    4604:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    4608:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    460c:	3f 52       	add	#8,	r15	;r2 As==11
    460e:	2e 4f       	mov	@r15,	r14	
    4610:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4614:	0e da       	bis	r10,	r14	
    4616:	0f db       	bis	r11,	r15	
    4618:	3e e3       	inv	r14		
    461a:	3f e3       	inv	r15		
    461c:	0e ec       	xor	r12,	r14	
    461e:	0f ed       	xor	r13,	r15	
    4620:	89 4e 00 00 	mov	r14,	0(r9)	;0x0000(r9)
    4624:	89 4f 02 00 	mov	r15,	2(r9)	;0x0002(r9)
  a[0] ^=   a[2] & a[1];
    4628:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    462c:	2c 4f       	mov	@r15,	r12	
    462e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4632:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4636:	3f 52       	add	#8,	r15	;r2 As==11
    4638:	2a 4f       	mov	@r15,	r10	
    463a:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    463e:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4642:	2f 52       	add	#4,	r15	;r2 As==10
    4644:	2e 4f       	mov	@r15,	r14	
    4646:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    464a:	0e fa       	and	r10,	r14	
    464c:	0f fb       	and	r11,	r15	
    464e:	0e ec       	xor	r12,	r14	
    4650:	0f ed       	xor	r13,	r15	
    4652:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfff6(r4)
    4656:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    465a:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)

  /* linear step in gamma */
  tmp   = a[3];
    465e:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4662:	94 4f 0c 00 	mov	12(r15),-14(r4)	;0x000c(r15), 0xfff2(r4)
    4666:	f2 ff 
    4668:	94 4f 0e 00 	mov	14(r15),-12(r4)	;0x000e(r15), 0xfff4(r4)
    466c:	f4 ff 
  a[3]  = a[0];
    466e:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfff6(r4)
    4672:	3d 50 0c 00 	add	#12,	r13	;#0x000c
    4676:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    467a:	2e 4f       	mov	@r15,	r14	
    467c:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4680:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    4684:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
  a[0]  = tmp;
    4688:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    468c:	9f 44 f2 ff 	mov	-14(r4),0(r15)	;0xfff2(r4), 0x0000(r15)
    4690:	00 00 
    4692:	9f 44 f4 ff 	mov	-12(r4),2(r15)	;0xfff4(r4), 0x0002(r15)
    4696:	02 00 
  a[2] ^= a[0]^a[1]^a[3];
    4698:	19 44 f6 ff 	mov	-10(r4),r9	;0xfff6(r4)
    469c:	39 52       	add	#8,	r9	;r2 As==11
    469e:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    46a2:	3f 52       	add	#8,	r15	;r2 As==11
    46a4:	2c 4f       	mov	@r15,	r12	
    46a6:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    46aa:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    46ae:	2a 4f       	mov	@r15,	r10	
    46b0:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    46b4:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    46b8:	2f 52       	add	#4,	r15	;r2 As==10
    46ba:	2e 4f       	mov	@r15,	r14	
    46bc:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    46c0:	0a ee       	xor	r14,	r10	
    46c2:	0b ef       	xor	r15,	r11	
    46c4:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    46c8:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    46cc:	2e 4f       	mov	@r15,	r14	
    46ce:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    46d2:	0e ea       	xor	r10,	r14	
    46d4:	0f eb       	xor	r11,	r15	
    46d6:	0e ec       	xor	r12,	r14	
    46d8:	0f ed       	xor	r13,	r15	
    46da:	89 4e 00 00 	mov	r14,	0(r9)	;0x0000(r9)
    46de:	89 4f 02 00 	mov	r15,	2(r9)	;0x0002(r9)

  /* last non-linear step in gamma */
  a[1] ^= ~a[3] & ~a[2];
    46e2:	19 44 f6 ff 	mov	-10(r4),r9	;0xfff6(r4)
    46e6:	29 52       	add	#4,	r9	;r2 As==10
    46e8:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    46ec:	2f 52       	add	#4,	r15	;r2 As==10
    46ee:	2c 4f       	mov	@r15,	r12	
    46f0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    46f4:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    46f8:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    46fc:	2a 4f       	mov	@r15,	r10	
    46fe:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    4702:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4706:	3f 52       	add	#8,	r15	;r2 As==11
    4708:	2e 4f       	mov	@r15,	r14	
    470a:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    470e:	0e da       	bis	r10,	r14	
    4710:	0f db       	bis	r11,	r15	
    4712:	3e e3       	inv	r14		
    4714:	3f e3       	inv	r15		
    4716:	0e ec       	xor	r12,	r14	
    4718:	0f ed       	xor	r13,	r15	
    471a:	89 4e 00 00 	mov	r14,	0(r9)	;0x0000(r9)
    471e:	89 4f 02 00 	mov	r15,	2(r9)	;0x0002(r9)
  a[0] ^=   a[2] & a[1];
    4722:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4726:	2c 4f       	mov	@r15,	r12	
    4728:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    472c:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4730:	3f 52       	add	#8,	r15	;r2 As==11
    4732:	2a 4f       	mov	@r15,	r10	
    4734:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    4738:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    473c:	2f 52       	add	#4,	r15	;r2 As==10
    473e:	2e 4f       	mov	@r15,	r14	
    4740:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4744:	0e fa       	and	r10,	r14	
    4746:	0f fb       	and	r11,	r15	
    4748:	0e ec       	xor	r12,	r14	
    474a:	0f ed       	xor	r13,	r15	
    474c:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfff6(r4)
    4750:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    4754:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
} /* Gamma */
    4758:	31 50 06 00 	add	#6,	r1	;#0x0006
    475c:	34 41       	pop	r4		
    475e:	39 41       	pop	r9		
    4760:	3a 41       	pop	r10		
    4762:	3b 41       	pop	r11		
    4764:	30 41       	ret			

00004766 <Round>:


 void Round (u32 const * const k,u32 * const a,u8 const RC1,u8 const RC2)
{ 
    4766:	0b 12       	push	r11		
    4768:	0a 12       	push	r10		
    476a:	09 12       	push	r9		
    476c:	08 12       	push	r8		
    476e:	04 12       	push	r4		
    4770:	04 41       	mov	r1,	r4	
    4772:	34 50 0a 00 	add	#10,	r4	;#0x000a
    4776:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    477a:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    477e:	84 4e f2 ff 	mov	r14,	-14(r4)	;0xfff2(r4)
    4782:	c4 4d f4 ff 	mov.b	r13,	-12(r4)	;0xfff4(r4)
    4786:	c4 4c f5 ff 	mov.b	r12,	-11(r4)	;0xfff5(r4)
  a[0] ^= RC1;
    478a:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    478e:	2e 4f       	mov	@r15,	r14	
    4790:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4794:	58 44 f4 ff 	mov.b	-12(r4),r8	;0xfff4(r4)
    4798:	09 43       	clr	r9		
    479a:	0e e8       	xor	r8,	r14	
    479c:	0f e9       	xor	r9,	r15	
    479e:	1d 44 f2 ff 	mov	-14(r4),r13	;0xfff2(r4)
    47a2:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    47a6:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
  Theta(k,a); 
    47aa:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    47ae:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    47b2:	b0 12 e0 40 	call	#0x40e0	
  a[0] ^= RC2;
    47b6:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    47ba:	2e 4f       	mov	@r15,	r14	
    47bc:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    47c0:	5a 44 f5 ff 	mov.b	-11(r4),r10	;0xfff5(r4)
    47c4:	0b 43       	clr	r11		
    47c6:	0e ea       	xor	r10,	r14	
    47c8:	0f eb       	xor	r11,	r15	
    47ca:	1d 44 f2 ff 	mov	-14(r4),r13	;0xfff2(r4)
    47ce:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    47d2:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
  Pi1(a); 
    47d6:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    47da:	b0 12 64 43 	call	#0x4364	
  Gamma(a); 
    47de:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    47e2:	b0 12 d4 45 	call	#0x45d4	
  Pi2(a); 
    47e6:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    47ea:	b0 12 9e 44 	call	#0x449e	
}  /* Round */
    47ee:	31 50 06 00 	add	#6,	r1	;#0x0006
    47f2:	34 41       	pop	r4		
    47f4:	38 41       	pop	r8		
    47f6:	39 41       	pop	r9		
    47f8:	3a 41       	pop	r10		
    47fa:	3b 41       	pop	r11		
    47fc:	30 41       	ret			

000047fe <RCShiftRegFwd>:


 void RCShiftRegFwd (u8 * const RC)
{ 
    47fe:	04 12       	push	r4		
    4800:	04 41       	mov	r1,	r4	
    4802:	24 53       	incd	r4		
    4804:	21 83       	decd	r1		
    4806:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)

  if ((*RC)&0x80) (*RC)=((*RC)<<1) ^ 0x1B; else (*RC)<<=1;
    480a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    480e:	6f 4f       	mov.b	@r15,	r15	
    4810:	4f 93       	tst.b	r15		
    4812:	0e 34       	jge	$+30     	;abs 0x4830
    4814:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4818:	6f 4f       	mov.b	@r15,	r15	
    481a:	4f 4f       	mov.b	r15,	r15	
    481c:	0f 5f       	rla	r15		
    481e:	4f 4f       	mov.b	r15,	r15	
    4820:	7f e0 1b 00 	xor.b	#27,	r15	;#0x001b
    4824:	4e 4f       	mov.b	r15,	r14	
    4826:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    482a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    482e:	0a 3c       	jmp	$+22     	;abs 0x4844
    4830:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4834:	6f 4f       	mov.b	@r15,	r15	
    4836:	4f 4f       	mov.b	r15,	r15	
    4838:	4f 4f       	mov.b	r15,	r15	
    483a:	4f 5f       	rla.b	r15		
    483c:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4840:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  

  
} /* RCShiftRegFwd */
    4844:	21 53       	incd	r1		
    4846:	34 41       	pop	r4		
    4848:	30 41       	ret			

0000484a <RCShiftRegBwd>:


 void RCShiftRegBwd (u8 * const RC)
{ 
    484a:	04 12       	push	r4		
    484c:	04 41       	mov	r1,	r4	
    484e:	24 53       	incd	r4		
    4850:	21 83       	decd	r1		
    4852:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)

  if ((*RC)&0x01) (*RC)=((*RC)>>1) ^ 0x8D; else (*RC)>>=1;
    4856:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    485a:	6f 4f       	mov.b	@r15,	r15	
    485c:	4f 4f       	mov.b	r15,	r15	
    485e:	1f f3       	and	#1,	r15	;r3 As==01
    4860:	4f 4f       	mov.b	r15,	r15	
    4862:	4f 93       	tst.b	r15		
    4864:	0f 24       	jz	$+32     	;abs 0x4884
    4866:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    486a:	6f 4f       	mov.b	@r15,	r15	
    486c:	4f 4f       	mov.b	r15,	r15	
    486e:	4f 4f       	mov.b	r15,	r15	
    4870:	12 c3       	clrc			
    4872:	4f 10       	rrc.b	r15		
    4874:	4e 4f       	mov.b	r15,	r14	
    4876:	7e e0 8d ff 	xor.b	#-115,	r14	;#0xff8d
    487a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    487e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    4882:	0b 3c       	jmp	$+24     	;abs 0x489a
    4884:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4888:	6f 4f       	mov.b	@r15,	r15	
    488a:	4f 4f       	mov.b	r15,	r15	
    488c:	4f 4f       	mov.b	r15,	r15	
    488e:	12 c3       	clrc			
    4890:	4f 10       	rrc.b	r15		
    4892:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4896:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  
} /* RCShiftRegBwd */
    489a:	21 53       	incd	r1		
    489c:	34 41       	pop	r4		
    489e:	30 41       	ret			

000048a0 <CommonLoop>:


 void CommonLoop (u32 const * const k,u32 * const a, u8 RC1, u8 RC2)
{ 
    48a0:	0b 12       	push	r11		
    48a2:	0a 12       	push	r10		
    48a4:	09 12       	push	r9		
    48a6:	08 12       	push	r8		
    48a8:	04 12       	push	r4		
    48aa:	04 41       	mov	r1,	r4	
    48ac:	34 50 0a 00 	add	#10,	r4	;#0x000a
    48b0:	31 82       	sub	#8,	r1	;r2 As==11
    48b2:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    48b6:	84 4e f2 ff 	mov	r14,	-14(r4)	;0xfff2(r4)
    48ba:	c4 4d f4 ff 	mov.b	r13,	-12(r4)	;0xfff4(r4)
    48be:	c4 4c f5 ff 	mov.b	r12,	-11(r4)	;0xfff5(r4)
  unsigned i;

  for(i=0 ; i<NROUND ; i++) {
    48c2:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    48c6:	18 3c       	jmp	$+50     	;abs 0x48f8
    Round(k,a,RC1,RC2); 
    48c8:	5e 44 f5 ff 	mov.b	-11(r4),r14	;0xfff5(r4)
    48cc:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    48d0:	4c 4e       	mov.b	r14,	r12	
    48d2:	4d 4f       	mov.b	r15,	r13	
    48d4:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    48d8:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    48dc:	b0 12 66 47 	call	#0x4766	
    RCShiftRegFwd(&RC1);
    48e0:	0f 44       	mov	r4,	r15	
    48e2:	3f 50 f4 ff 	add	#-12,	r15	;#0xfff4
    48e6:	b0 12 fe 47 	call	#0x47fe	
    RCShiftRegBwd(&RC2);
    48ea:	0f 44       	mov	r4,	r15	
    48ec:	3f 50 f5 ff 	add	#-11,	r15	;#0xfff5
    48f0:	b0 12 4a 48 	call	#0x484a	

 void CommonLoop (u32 const * const k,u32 * const a, u8 RC1, u8 RC2)
{ 
  unsigned i;

  for(i=0 ; i<NROUND ; i++) {
    48f4:	94 53 ee ff 	inc	-18(r4)	;0xffee(r4)
    48f8:	b4 90 10 00 	cmp	#16,	-18(r4)	;#0x0010, 0xffee(r4)
    48fc:	ee ff 
    48fe:	e4 2b       	jnc	$-54     	;abs 0x48c8
    Round(k,a,RC1,RC2); 
    RCShiftRegFwd(&RC1);
    RCShiftRegBwd(&RC2);
  }
  a[0]^=RC1;
    4900:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4904:	2e 4f       	mov	@r15,	r14	
    4906:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    490a:	5d 44 f4 ff 	mov.b	-12(r4),r13	;0xfff4(r4)
    490e:	48 4d       	mov.b	r13,	r8	
    4910:	09 43       	clr	r9		
    4912:	0e e8       	xor	r8,	r14	
    4914:	0f e9       	xor	r9,	r15	
    4916:	1d 44 f2 ff 	mov	-14(r4),r13	;0xfff2(r4)
    491a:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    491e:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
  Theta(k,a); 
    4922:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    4926:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    492a:	b0 12 e0 40 	call	#0x40e0	
  a[0]^=RC2;
    492e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4932:	2e 4f       	mov	@r15,	r14	
    4934:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4938:	5d 44 f5 ff 	mov.b	-11(r4),r13	;0xfff5(r4)
    493c:	4a 4d       	mov.b	r13,	r10	
    493e:	0b 43       	clr	r11		
    4940:	0e ea       	xor	r10,	r14	
    4942:	0f eb       	xor	r11,	r15	
    4944:	1d 44 f2 ff 	mov	-14(r4),r13	;0xfff2(r4)
    4948:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    494c:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)

} /* CommonLoop */
    4950:	31 52       	add	#8,	r1	;r2 As==11
    4952:	34 41       	pop	r4		
    4954:	38 41       	pop	r8		
    4956:	39 41       	pop	r9		
    4958:	3a 41       	pop	r10		
    495a:	3b 41       	pop	r11		
    495c:	30 41       	ret			

0000495e <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    495e:	04 12       	push	r4		
    4960:	04 41       	mov	r1,	r4	
    4962:	24 53       	incd	r4		
    4964:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4968:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    496c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4970:	0d 3c       	jmp	$+28     	;abs 0x498c
    {
      for (i = 0; i<d; i++) 
    4972:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4976:	04 3c       	jmp	$+10     	;abs 0x4980
	{
	  nop();
    4978:	03 43       	nop			
	  nop();
    497a:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    497c:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4980:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4984:	f8 ff 
    4986:	f8 2b       	jnc	$-14     	;abs 0x4978
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4988:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    498c:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4990:	fa ff 
    4992:	ef 2b       	jnc	$-32     	;abs 0x4972
	{
	  nop();
	  nop();
	}
    }
}
    4994:	31 50 06 00 	add	#6,	r1	;#0x0006
    4998:	34 41       	pop	r4		
    499a:	30 41       	ret			

0000499c <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    499c:	04 12       	push	r4		
    499e:	04 41       	mov	r1,	r4	
    49a0:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    49a2:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    49a6:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    49a8:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    49ac:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    49b0:	5f 42 1b 00 	mov.b	&0x001b,r15	
    49b4:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    49b8:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    49bc:	5f 42 05 00 	mov.b	&0x0005,r15	
    49c0:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    49c4:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    49c8:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    49cc:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    49d0:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    49d2:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    49d6:	79 00 
  U1RCTL = 0;
    49d8:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    49dc:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    49e0:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    49e4:	7c 00 
  U1MCTL = U1MCTL_INIT;
    49e6:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    49ea:	7b 00 

  delay(0x800);
    49ec:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    49f0:	b0 12 5e 49 	call	#0x495e	
  return 0;
    49f4:	0f 43       	clr	r15		
}
    49f6:	34 41       	pop	r4		
    49f8:	30 41       	ret			

000049fa <uart1_putchar>:

int uart1_putchar(int c)
{
    49fa:	04 12       	push	r4		
    49fc:	04 41       	mov	r1,	r4	
    49fe:	24 53       	incd	r4		
    4a00:	21 83       	decd	r1		
    4a02:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4a06:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a0a:	4f 4f       	mov.b	r15,	r15	
    4a0c:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4a10:	03 43       	nop			
    4a12:	5f 42 79 00 	mov.b	&0x0079,r15	
    4a16:	4f 4f       	mov.b	r15,	r15	
    4a18:	1f f3       	and	#1,	r15	;r3 As==01
    4a1a:	0f 93       	tst	r15		
    4a1c:	fa 27       	jz	$-10     	;abs 0x4a12
  return (unsigned char)c;
    4a1e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a22:	4f 4f       	mov.b	r15,	r15	
    4a24:	4f 4f       	mov.b	r15,	r15	
}
    4a26:	21 53       	incd	r1		
    4a28:	34 41       	pop	r4		
    4a2a:	30 41       	ret			

00004a2c <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4a2c:	04 12       	push	r4		
    4a2e:	04 41       	mov	r1,	r4	
    4a30:	24 53       	incd	r4		
    4a32:	21 83       	decd	r1		
    4a34:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4a38:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a3c:	b0 12 fa 49 	call	#0x49fa	
}
    4a40:	21 53       	incd	r1		
    4a42:	34 41       	pop	r4		
    4a44:	30 41       	ret			

00004a46 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4a46:	04 12       	push	r4		
    4a48:	04 41       	mov	r1,	r4	
    4a4a:	24 53       	incd	r4		
  ;
}
    4a4c:	34 41       	pop	r4		
    4a4e:	30 41       	ret			

00004a50 <start_decrypt>:
void
start_decrypt()
{
    4a50:	04 12       	push	r4		
    4a52:	04 41       	mov	r1,	r4	
    4a54:	24 53       	incd	r4		
  ;
}
    4a56:	34 41       	pop	r4		
    4a58:	30 41       	ret			

00004a5a <end_expe>:


void
end_expe()
{
    4a5a:	04 12       	push	r4		
    4a5c:	04 41       	mov	r1,	r4	
    4a5e:	24 53       	incd	r4		
  ;
}
    4a60:	34 41       	pop	r4		
    4a62:	30 41       	ret			

00004a64 <_unexpected_>:
    4a64:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	dc 40 dc 40 dc 40 dc 40 dc 40 dc 40 dc 40 dc 40     .@.@.@.@.@.@.@.@
    fff0:	dc 40 dc 40 dc 40 dc 40 dc 40 dc 40 dc 40 00 40     .@.@.@.@.@.@.@.@
