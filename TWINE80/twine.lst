
twine.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
000047aa l    d  .rodata	00000000 .rodata
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 twine80.c
000047aa l     O .rodata	00000010 S
000047ba l     O .rodata	00000010 Pi
000047ca l     O .rodata	00000010 Pi_Inv
000047da l     O .rodata	00000023 CON
000040d0 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004770 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040d0  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040d0  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
00004606 g     F .text	0000009c Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000043ca g     F .text	000000ce OneRound
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004538 g     F .text	000000ce OneRound_Inv
000047fe g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
000046e0 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040ca  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040d0  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
0000479e g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040d0  w      .text	00000000 __isr_5
000047fe g       *ABS*	00000000 __data_load_start
000040d0 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040d0  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040d0  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040d0  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040d0  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
000047a8  w      .text	00000000 _unexpected_
000040d0  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040d0  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
0000473e g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040d0 g       .text	00000000 __ctors_start
000040d0  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .rodata	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	0000008c main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040d0  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
000046a2 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040d0  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040d0 g       .text	00000000 __dtors_start
000040d0  w      .text	00000000 __isr_6
000040d0 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040d0  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .rodata	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
0000478a g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040ca  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004794 g     F .text	0000000a start_decrypt
00001100 g       .rodata	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
000040d4 g     F .text	000002f6 KeySch
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00004498 g     F .text	000000a0 Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f fe 47 	mov	18430(r15),4352(r15);0x47fe(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
    }
}


int main()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 a6 fe 	add	#-346,	r1	;#0xfea6
 u8 Plain[16], SubK[36][8];
 u16 KEY[(KSIZE/4)];
 u8 i;

#if KSIZE == 80
  KEY[0] = 0x1100;
    4046:	b4 40 00 11 	mov	#4352,	-42(r4)	;#0x1100, 0xffd6(r4)
    404a:	d6 ff 
  KEY[1] = 0x3322;
    404c:	b4 40 22 33 	mov	#13090,	-40(r4)	;#0x3322, 0xffd8(r4)
    4050:	d8 ff 
  KEY[2] = 0x5544;
    4052:	b4 40 44 55 	mov	#21828,	-38(r4)	;#0x5544, 0xffda(r4)
    4056:	da ff 
  KEY[3] = 0x7766;
    4058:	b4 40 66 77 	mov	#30566,	-36(r4)	;#0x7766, 0xffdc(r4)
    405c:	dc ff 
  KEY[4] = 0x9988;
    405e:	b4 40 88 99 	mov	#-26232,-34(r4)	;#0x9988, 0xffde(r4)
    4062:	de ff 
  KEY[5] = 0xBBAA;
  KEY[6] = 0xDDCC;
  KEY[7] = 0xFFEE;
#endif
  
  for(i=0;i<16;i++)
    4064:	c4 43 a4 fe 	mov.b	#0,	-348(r4);r3 As==00, 0xfea4(r4)
    4068:	0b 3c       	jmp	$+24     	;abs 0x4080
  {
  Plain[i] = i;
    406a:	5f 44 a4 fe 	mov.b	-348(r4),r15	;0xfea4(r4)
    406e:	0e 44       	mov	r4,	r14	
    4070:	3e 50 a5 fe 	add	#-347,	r14	;#0xfea5
    4074:	0f 5e       	add	r14,	r15	
    4076:	df 44 a4 fe 	mov.b	-348(r4),0(r15)	;0xfea4(r4), 0x0000(r15)
    407a:	00 00 
  KEY[5] = 0xBBAA;
  KEY[6] = 0xDDCC;
  KEY[7] = 0xFFEE;
#endif
  
  for(i=0;i<16;i++)
    407c:	d4 53 a4 fe 	inc.b	-348(r4)	;0xfea4(r4)
    4080:	f4 90 10 00 	cmp.b	#16,	-348(r4);#0x0010, 0xfea4(r4)
    4084:	a4 fe 
    4086:	f1 2b       	jnc	$-28     	;abs 0x406a
	printf("%X ",Plain[i]); 
	}
	printf("\n"); 
	#endif

	START_ENCRYPT();
    4088:	b0 12 8a 47 	call	#0x478a	

    KeySch(KEY, SubK);
    408c:	0e 44       	mov	r4,	r14	
    408e:	3e 50 b5 fe 	add	#-331,	r14	;#0xfeb5
    4092:	0f 44       	mov	r4,	r15	
    4094:	3f 50 d6 ff 	add	#-42,	r15	;#0xffd6
    4098:	b0 12 d4 40 	call	#0x40d4	
    Encrypt(Plain,SubK);
    409c:	0e 44       	mov	r4,	r14	
    409e:	3e 50 b5 fe 	add	#-331,	r14	;#0xfeb5
    40a2:	0f 44       	mov	r4,	r15	
    40a4:	3f 50 a5 fe 	add	#-347,	r15	;#0xfea5
    40a8:	b0 12 98 44 	call	#0x4498	
	}
	printf("\n");
	#endif


    START_DECRYPT();
    40ac:	b0 12 94 47 	call	#0x4794	
    Decrypt(Plain,SubK);
    40b0:	0e 44       	mov	r4,	r14	
    40b2:	3e 50 b5 fe 	add	#-331,	r14	;#0xfeb5
    40b6:	0f 44       	mov	r4,	r15	
    40b8:	3f 50 a5 fe 	add	#-347,	r15	;#0xfea5
    40bc:	b0 12 06 46 	call	#0x4606	
	printf("%X ",Plain[i]); 
	}
	printf("\n"); 
	#endif

    END_EXPE();
    40c0:	b0 12 9e 47 	call	#0x479e	

 return 0;  
    40c4:	0f 43       	clr	r15		
 
} 
    40c6:	31 50 5a 01 	add	#346,	r1	;#0x015a

000040ca <__stop_progExec__>:
    40ca:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40ce:	fd 3f       	jmp	$-4      	;abs 0x40ca

000040d0 <__ctors_end>:
    40d0:	30 40 a8 47 	br	#0x47a8	

000040d4 <KeySch>:

void OneRound(u8 x[16], u8 k[8]);
void OneRound_Inv(u8 x[16], u8 k[8]);

void KeySch(const u16 *key, u8 output[36][8])
{
    40d4:	04 12       	push	r4		
    40d6:	04 41       	mov	r1,	r4	
    40d8:	24 53       	incd	r4		
    40da:	31 50 e2 ff 	add	#-30,	r1	;#0xffe2
    40de:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    40e2:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
     int i;
     u8 KeyR[KSIZE/4],temp, temp1, temp2, temp3;
          
      for(i=0;i<(KSIZE/4);i++)
    40e6:	84 43 e0 ff 	mov	#0,	-32(r4)	;r3 As==00, 0xffe0(r4)
    40ea:	29 3c       	jmp	$+84     	;abs 0x413e
     {
       KeyR[i] = (key[(i/4)]>>(4*(i&0x03))) & 0x0F;
    40ec:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    40f0:	0f 93       	tst	r15		
    40f2:	02 34       	jge	$+6      	;abs 0x40f8
    40f4:	3f 50 03 00 	add	#3,	r15	;#0x0003
    40f8:	0f 11       	rra	r15		
    40fa:	0f 11       	rra	r15		
    40fc:	0f 5f       	rla	r15		
    40fe:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4102:	2e 4f       	mov	@r15,	r14	
    4104:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    4108:	3f f0 03 00 	and	#3,	r15	;#0x0003
    410c:	0f 5f       	rla	r15		
    410e:	0f 5f       	rla	r15		
    4110:	4f 4f       	mov.b	r15,	r15	
    4112:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    4116:	4f 93       	tst.b	r15		
    4118:	05 24       	jz	$+12     	;abs 0x4124
    411a:	12 c3       	clrc			
    411c:	0e 10       	rrc	r14		
    411e:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4120:	4f 93       	tst.b	r15		
    4122:	fb 23       	jnz	$-8      	;abs 0x411a
    4124:	4f 4e       	mov.b	r14,	r15	
    4126:	4e 4f       	mov.b	r15,	r14	
    4128:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    412c:	0f 44       	mov	r4,	r15	
    412e:	3f 50 e6 ff 	add	#-26,	r15	;#0xffe6
    4132:	1f 54 e0 ff 	add	-32(r4),r15	;0xffe0(r4)
    4136:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
void KeySch(const u16 *key, u8 output[36][8])
{
     int i;
     u8 KeyR[KSIZE/4],temp, temp1, temp2, temp3;
          
      for(i=0;i<(KSIZE/4);i++)
    413a:	94 53 e0 ff 	inc	-32(r4)	;0xffe0(r4)
    413e:	b4 90 14 00 	cmp	#20,	-32(r4)	;#0x0014, 0xffe0(r4)
    4142:	e0 ff 
    4144:	d3 3b       	jl	$-88     	;abs 0x40ec
     {
       KeyR[i] = (key[(i/4)]>>(4*(i&0x03))) & 0x0F;
     }

     for(i=0;i<35;i++)
    4146:	84 43 e0 ff 	mov	#0,	-32(r4)	;r3 As==00, 0xffe0(r4)
    414a:	f7 3c       	jmp	$+496    	;abs 0x433a
      {
#if KSIZE == 80                      
      output[i][0] = KeyR[1];
    414c:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    4150:	0f 5f       	rla	r15		
    4152:	0f 5f       	rla	r15		
    4154:	0f 5f       	rla	r15		
    4156:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    415a:	5e 44 e7 ff 	mov.b	-25(r4),r14	;0xffe7(r4)
    415e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
      output[i][1] = KeyR[3];
    4162:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    4166:	0f 5f       	rla	r15		
    4168:	0f 5f       	rla	r15		
    416a:	0f 5f       	rla	r15		
    416c:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4170:	5e 44 e9 ff 	mov.b	-23(r4),r14	;0xffe9(r4)
    4174:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
      output[i][2] = KeyR[4];
    4178:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    417c:	0f 5f       	rla	r15		
    417e:	0f 5f       	rla	r15		
    4180:	0f 5f       	rla	r15		
    4182:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4186:	5e 44 ea ff 	mov.b	-22(r4),r14	;0xffea(r4)
    418a:	cf 4e 02 00 	mov.b	r14,	2(r15)	;0x0002(r15)
      output[i][3] = KeyR[6];
    418e:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    4192:	0f 5f       	rla	r15		
    4194:	0f 5f       	rla	r15		
    4196:	0f 5f       	rla	r15		
    4198:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    419c:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    41a0:	cf 4e 03 00 	mov.b	r14,	3(r15)	;0x0003(r15)
      output[i][4] = KeyR[13];
    41a4:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    41a8:	0f 5f       	rla	r15		
    41aa:	0f 5f       	rla	r15		
    41ac:	0f 5f       	rla	r15		
    41ae:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    41b2:	5e 44 f3 ff 	mov.b	-13(r4),r14	;0xfff3(r4)
    41b6:	cf 4e 04 00 	mov.b	r14,	4(r15)	;0x0004(r15)
      output[i][5] = KeyR[14];
    41ba:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    41be:	0f 5f       	rla	r15		
    41c0:	0f 5f       	rla	r15		
    41c2:	0f 5f       	rla	r15		
    41c4:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    41c8:	5e 44 f4 ff 	mov.b	-12(r4),r14	;0xfff4(r4)
    41cc:	cf 4e 05 00 	mov.b	r14,	5(r15)	;0x0005(r15)
      output[i][6] = KeyR[15];
    41d0:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    41d4:	0f 5f       	rla	r15		
    41d6:	0f 5f       	rla	r15		
    41d8:	0f 5f       	rla	r15		
    41da:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    41de:	5e 44 f5 ff 	mov.b	-11(r4),r14	;0xfff5(r4)
    41e2:	cf 4e 06 00 	mov.b	r14,	6(r15)	;0x0006(r15)
      output[i][7] = KeyR[16];        
    41e6:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    41ea:	0f 5f       	rla	r15		
    41ec:	0f 5f       	rla	r15		
    41ee:	0f 5f       	rla	r15		
    41f0:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    41f4:	5e 44 f6 ff 	mov.b	-10(r4),r14	;0xfff6(r4)
    41f8:	cf 4e 07 00 	mov.b	r14,	7(r15)	;0x0007(r15)
      
      KeyR[1]=KeyR[1] ^S[KeyR[0]];
    41fc:	5e 44 e7 ff 	mov.b	-25(r4),r14	;0xffe7(r4)
    4200:	5f 44 e6 ff 	mov.b	-26(r4),r15	;0xffe6(r4)
    4204:	4f 4f       	mov.b	r15,	r15	
    4206:	5f 4f aa 47 	mov.b	18346(r15),r15	;0x47aa(r15)
    420a:	4f ee       	xor.b	r14,	r15	
    420c:	c4 4f e7 ff 	mov.b	r15,	-25(r4)	;0xffe7(r4)
      KeyR[4]=KeyR[4] ^S[KeyR[16]];
    4210:	5e 44 ea ff 	mov.b	-22(r4),r14	;0xffea(r4)
    4214:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    4218:	4f 4f       	mov.b	r15,	r15	
    421a:	5f 4f aa 47 	mov.b	18346(r15),r15	;0x47aa(r15)
    421e:	4f ee       	xor.b	r14,	r15	
    4220:	c4 4f ea ff 	mov.b	r15,	-22(r4)	;0xffea(r4)
      KeyR[7]=KeyR[7] ^(CON[i]>>3);
    4224:	5e 44 ed ff 	mov.b	-19(r4),r14	;0xffed(r4)
    4228:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    422c:	3f 50 da 47 	add	#18394,	r15	;#0x47da
    4230:	6f 4f       	mov.b	@r15,	r15	
    4232:	4f 4f       	mov.b	r15,	r15	
    4234:	4f 4f       	mov.b	r15,	r15	
    4236:	12 c3       	clrc			
    4238:	4f 10       	rrc.b	r15		
    423a:	12 c3       	clrc			
    423c:	4f 10       	rrc.b	r15		
    423e:	12 c3       	clrc			
    4240:	4f 10       	rrc.b	r15		
    4242:	4f ee       	xor.b	r14,	r15	
    4244:	c4 4f ed ff 	mov.b	r15,	-19(r4)	;0xffed(r4)
      KeyR[19]=KeyR[19] ^(CON[i]&0x07);
    4248:	5f 44 f9 ff 	mov.b	-7(r4),	r15	;0xfff9(r4)
    424c:	4e 4f       	mov.b	r15,	r14	
    424e:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    4252:	3f 50 da 47 	add	#18394,	r15	;#0x47da
    4256:	6f 4f       	mov.b	@r15,	r15	
    4258:	7f f0 07 00 	and.b	#7,	r15	;#0x0007
    425c:	4f ee       	xor.b	r14,	r15	
    425e:	c4 4f f9 ff 	mov.b	r15,	-7(r4)	;0xfff9(r4)
      
      temp=KeyR[0];
    4262:	d4 44 e6 ff 	mov.b	-26(r4),-30(r4)	;0xffe6(r4), 0xffe2(r4)
    4266:	e2 ff 
      KeyR[0]=KeyR[1];
    4268:	5f 44 e7 ff 	mov.b	-25(r4),r15	;0xffe7(r4)
    426c:	c4 4f e6 ff 	mov.b	r15,	-26(r4)	;0xffe6(r4)
      KeyR[1]=KeyR[2];      
    4270:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4274:	c4 4f e7 ff 	mov.b	r15,	-25(r4)	;0xffe7(r4)
      KeyR[2]=KeyR[3];      
    4278:	5f 44 e9 ff 	mov.b	-23(r4),r15	;0xffe9(r4)
    427c:	c4 4f e8 ff 	mov.b	r15,	-24(r4)	;0xffe8(r4)
      KeyR[3]=temp;            
    4280:	d4 44 e2 ff 	mov.b	-30(r4),-23(r4)	;0xffe2(r4), 0xffe9(r4)
    4284:	e9 ff 
      
      temp=KeyR[0];
    4286:	d4 44 e6 ff 	mov.b	-26(r4),-30(r4)	;0xffe6(r4), 0xffe2(r4)
    428a:	e2 ff 
      temp1=KeyR[1];
    428c:	d4 44 e7 ff 	mov.b	-25(r4),-29(r4)	;0xffe7(r4), 0xffe3(r4)
    4290:	e3 ff 
      temp2=KeyR[2];
    4292:	d4 44 e8 ff 	mov.b	-24(r4),-28(r4)	;0xffe8(r4), 0xffe4(r4)
    4296:	e4 ff 
      temp3=KeyR[3];
    4298:	d4 44 e9 ff 	mov.b	-23(r4),-27(r4)	;0xffe9(r4), 0xffe5(r4)
    429c:	e5 ff 
      
      KeyR[0]=KeyR[4];
    429e:	5f 44 ea ff 	mov.b	-22(r4),r15	;0xffea(r4)
    42a2:	c4 4f e6 ff 	mov.b	r15,	-26(r4)	;0xffe6(r4)
      KeyR[1]=KeyR[5];      
    42a6:	5f 44 eb ff 	mov.b	-21(r4),r15	;0xffeb(r4)
    42aa:	c4 4f e7 ff 	mov.b	r15,	-25(r4)	;0xffe7(r4)
      KeyR[2]=KeyR[6];      
    42ae:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    42b2:	c4 4f e8 ff 	mov.b	r15,	-24(r4)	;0xffe8(r4)
      KeyR[3]=KeyR[7];            
    42b6:	5f 44 ed ff 	mov.b	-19(r4),r15	;0xffed(r4)
    42ba:	c4 4f e9 ff 	mov.b	r15,	-23(r4)	;0xffe9(r4)
      
      KeyR[4]=KeyR[8];
    42be:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    42c2:	c4 4f ea ff 	mov.b	r15,	-22(r4)	;0xffea(r4)
      KeyR[5]=KeyR[9];      
    42c6:	5f 44 ef ff 	mov.b	-17(r4),r15	;0xffef(r4)
    42ca:	c4 4f eb ff 	mov.b	r15,	-21(r4)	;0xffeb(r4)
      KeyR[6]=KeyR[10];      
    42ce:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    42d2:	c4 4f ec ff 	mov.b	r15,	-20(r4)	;0xffec(r4)
      KeyR[7]=KeyR[11];           
    42d6:	5f 44 f1 ff 	mov.b	-15(r4),r15	;0xfff1(r4)
    42da:	c4 4f ed ff 	mov.b	r15,	-19(r4)	;0xffed(r4)
      
      KeyR[8]=KeyR[12];
    42de:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    42e2:	c4 4f ee ff 	mov.b	r15,	-18(r4)	;0xffee(r4)
      KeyR[9]=KeyR[13];      
    42e6:	5f 44 f3 ff 	mov.b	-13(r4),r15	;0xfff3(r4)
    42ea:	c4 4f ef ff 	mov.b	r15,	-17(r4)	;0xffef(r4)
      KeyR[10]=KeyR[14];      
    42ee:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    42f2:	c4 4f f0 ff 	mov.b	r15,	-16(r4)	;0xfff0(r4)
      KeyR[11]=KeyR[15];     
    42f6:	5f 44 f5 ff 	mov.b	-11(r4),r15	;0xfff5(r4)
    42fa:	c4 4f f1 ff 	mov.b	r15,	-15(r4)	;0xfff1(r4)

      KeyR[12]=KeyR[16];
    42fe:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    4302:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
      KeyR[13]=KeyR[17];      
    4306:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    430a:	c4 4f f3 ff 	mov.b	r15,	-13(r4)	;0xfff3(r4)
      KeyR[14]=KeyR[18];      
    430e:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4312:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
      KeyR[15]=KeyR[19];
    4316:	5f 44 f9 ff 	mov.b	-7(r4),	r15	;0xfff9(r4)
    431a:	c4 4f f5 ff 	mov.b	r15,	-11(r4)	;0xfff5(r4)
      
      KeyR[16]=temp;
    431e:	d4 44 e2 ff 	mov.b	-30(r4),-10(r4)	;0xffe2(r4), 0xfff6(r4)
    4322:	f6 ff 
      KeyR[17]=temp1;      
    4324:	d4 44 e3 ff 	mov.b	-29(r4),-9(r4)	;0xffe3(r4), 0xfff7(r4)
    4328:	f7 ff 
      KeyR[18]=temp2;      
    432a:	d4 44 e4 ff 	mov.b	-28(r4),-8(r4)	;0xffe4(r4), 0xfff8(r4)
    432e:	f8 ff 
      KeyR[19]=temp3;     
    4330:	d4 44 e5 ff 	mov.b	-27(r4),-7(r4)	;0xffe5(r4), 0xfff9(r4)
    4334:	f9 ff 
      for(i=0;i<(KSIZE/4);i++)
     {
       KeyR[i] = (key[(i/4)]>>(4*(i&0x03))) & 0x0F;
     }

     for(i=0;i<35;i++)
    4336:	94 53 e0 ff 	inc	-32(r4)	;0xffe0(r4)
    433a:	b4 90 23 00 	cmp	#35,	-32(r4)	;#0x0023, 0xffe0(r4)
    433e:	e0 ff 
    4340:	05 3b       	jl	$-500    	;abs 0x414c

#endif             
     }
     
#if KSIZE == 80      
      output[35][0] = KeyR[1];
    4342:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4346:	3f 50 18 01 	add	#280,	r15	;#0x0118
    434a:	5e 44 e7 ff 	mov.b	-25(r4),r14	;0xffe7(r4)
    434e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
      output[35][1] = KeyR[3];
    4352:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4356:	3f 50 18 01 	add	#280,	r15	;#0x0118
    435a:	5e 44 e9 ff 	mov.b	-23(r4),r14	;0xffe9(r4)
    435e:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
      output[35][2] = KeyR[4];
    4362:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4366:	3f 50 18 01 	add	#280,	r15	;#0x0118
    436a:	5e 44 ea ff 	mov.b	-22(r4),r14	;0xffea(r4)
    436e:	cf 4e 02 00 	mov.b	r14,	2(r15)	;0x0002(r15)
      output[35][3] = KeyR[6];
    4372:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4376:	3f 50 18 01 	add	#280,	r15	;#0x0118
    437a:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    437e:	cf 4e 03 00 	mov.b	r14,	3(r15)	;0x0003(r15)
      output[35][4] = KeyR[13];
    4382:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4386:	3f 50 18 01 	add	#280,	r15	;#0x0118
    438a:	5e 44 f3 ff 	mov.b	-13(r4),r14	;0xfff3(r4)
    438e:	cf 4e 04 00 	mov.b	r14,	4(r15)	;0x0004(r15)
      output[35][5] = KeyR[14];
    4392:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4396:	3f 50 18 01 	add	#280,	r15	;#0x0118
    439a:	5e 44 f4 ff 	mov.b	-12(r4),r14	;0xfff4(r4)
    439e:	cf 4e 05 00 	mov.b	r14,	5(r15)	;0x0005(r15)
      output[35][6] = KeyR[15];
    43a2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    43a6:	3f 50 18 01 	add	#280,	r15	;#0x0118
    43aa:	5e 44 f5 ff 	mov.b	-11(r4),r14	;0xfff5(r4)
    43ae:	cf 4e 06 00 	mov.b	r14,	6(r15)	;0x0006(r15)
      output[35][7] = KeyR[16];    
    43b2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    43b6:	3f 50 18 01 	add	#280,	r15	;#0x0118
    43ba:	5e 44 f6 ff 	mov.b	-10(r4),r14	;0xfff6(r4)
    43be:	cf 4e 07 00 	mov.b	r14,	7(r15)	;0x0007(r15)
      output[35][5] = KeyR[18];
      output[35][6] = KeyR[28];
      output[35][7] = KeyR[31];  
#endif         

}     
    43c2:	31 50 1e 00 	add	#30,	r1	;#0x001e
    43c6:	34 41       	pop	r4		
    43c8:	30 41       	ret			

000043ca <OneRound>:

 void OneRound(u8 x[16], u8 k[8])
{
    43ca:	04 12       	push	r4		
    43cc:	04 41       	mov	r1,	r4	
    43ce:	24 53       	incd	r4		
    43d0:	31 50 ea ff 	add	#-22,	r1	;#0xffea
    43d4:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    43d8:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
  u8 t[16];
  u8 i;

    for(i=0;i<8;i++)
    43dc:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    43e0:	25 3c       	jmp	$+76     	;abs 0x442c
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    43e2:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    43e6:	0f 5f       	rla	r15		
    43e8:	1f 53       	inc	r15		
    43ea:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    43ee:	0e 5f       	add	r15,	r14	
    43f0:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    43f4:	0f 5f       	rla	r15		
    43f6:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    43fa:	6d 4f       	mov.b	@r15,	r13	
    43fc:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4400:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4404:	6f 4f       	mov.b	@r15,	r15	
    4406:	4f ed       	xor.b	r13,	r15	
    4408:	4f 4f       	mov.b	r15,	r15	
    440a:	5f 4f aa 47 	mov.b	18346(r15),r15	;0x47aa(r15)
    440e:	4d 4f       	mov.b	r15,	r13	
    4410:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4414:	0f 5f       	rla	r15		
    4416:	1f 53       	inc	r15		
    4418:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    441c:	6f 4f       	mov.b	@r15,	r15	
    441e:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    4422:	4f ed       	xor.b	r13,	r15	
    4424:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
 void OneRound(u8 x[16], u8 k[8])
{
  u8 t[16];
  u8 i;

    for(i=0;i<8;i++)
    4428:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    442c:	f4 92 e8 ff 	cmp.b	#8,	-24(r4)	;r2 As==11, 0xffe8(r4)
    4430:	d8 2b       	jnc	$-78     	;abs 0x43e2
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    }

    for(i=0;i<16;i++)
    4432:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    4436:	12 3c       	jmp	$+38     	;abs 0x445c
    {
      t[Pi[i]]=x[i];
    4438:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    443c:	5f 4f ba 47 	mov.b	18362(r15),r15	;0x47ba(r15)
    4440:	4f 4f       	mov.b	r15,	r15	
    4442:	5e 44 e8 ff 	mov.b	-24(r4),r14	;0xffe8(r4)
    4446:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    444a:	6e 4e       	mov.b	@r14,	r14	
    444c:	0d 44       	mov	r4,	r13	
    444e:	3d 50 e9 ff 	add	#-23,	r13	;#0xffe9
    4452:	0f 5d       	add	r13,	r15	
    4454:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    for(i=0;i<8;i++)
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    }

    for(i=0;i<16;i++)
    4458:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    445c:	f4 90 10 00 	cmp.b	#16,	-24(r4)	;#0x0010, 0xffe8(r4)
    4460:	e8 ff 
    4462:	ea 2b       	jnc	$-42     	;abs 0x4438
    {
      t[Pi[i]]=x[i];
    }
  
    for(i=0;i<16;i++)
    4464:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    4468:	0f 3c       	jmp	$+32     	;abs 0x4488
    {
    x[i]=t[i];
    446a:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    446e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4472:	5e 44 e8 ff 	mov.b	-24(r4),r14	;0xffe8(r4)
    4476:	0d 44       	mov	r4,	r13	
    4478:	3d 50 e9 ff 	add	#-23,	r13	;#0xffe9
    447c:	0e 5d       	add	r13,	r14	
    447e:	6e 4e       	mov.b	@r14,	r14	
    4480:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    for(i=0;i<16;i++)
    {
      t[Pi[i]]=x[i];
    }
  
    for(i=0;i<16;i++)
    4484:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    4488:	f4 90 10 00 	cmp.b	#16,	-24(r4)	;#0x0010, 0xffe8(r4)
    448c:	e8 ff 
    448e:	ed 2b       	jnc	$-36     	;abs 0x446a
    {
    x[i]=t[i];
    }
}
    4490:	31 50 16 00 	add	#22,	r1	;#0x0016
    4494:	34 41       	pop	r4		
    4496:	30 41       	ret			

00004498 <Encrypt>:

 void Encrypt(u8 x[16], u8 Subkey[36][8])
{
    4498:	04 12       	push	r4		
    449a:	04 41       	mov	r1,	r4	
    449c:	24 53       	incd	r4		
    449e:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    44a2:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    44a6:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
     u8 i;
     // 35 TOURS
     for(i=0;i<35;i++)
    44aa:	c4 43 f8 ff 	mov.b	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    44ae:	0e 3c       	jmp	$+30     	;abs 0x44cc
    {
      OneRound(x,Subkey[i]);
    44b0:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    44b4:	0f 5f       	rla	r15		
    44b6:	0f 5f       	rla	r15		
    44b8:	0f 5f       	rla	r15		
    44ba:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    44be:	0e 4f       	mov	r15,	r14	
    44c0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    44c4:	b0 12 ca 43 	call	#0x43ca	

 void Encrypt(u8 x[16], u8 Subkey[36][8])
{
     u8 i;
     // 35 TOURS
     for(i=0;i<35;i++)
    44c8:	d4 53 f8 ff 	inc.b	-8(r4)		;0xfff8(r4)
    44cc:	f4 90 23 00 	cmp.b	#35,	-8(r4)	;#0x0023, 0xfff8(r4)
    44d0:	f8 ff 
    44d2:	ee 2b       	jnc	$-34     	;abs 0x44b0
    {
      OneRound(x,Subkey[i]);
    }
    // DERNIER TOUR
    for(i=0;i<8;i++)
    44d4:	c4 43 f8 ff 	mov.b	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    44d8:	28 3c       	jmp	$+82     	;abs 0x452a
    {
      x[2*i+1]=S[x[2*i]^Subkey[35][i]]^x[2*i+1] & 0x0F;
    44da:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    44de:	0f 5f       	rla	r15		
    44e0:	1f 53       	inc	r15		
    44e2:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    44e6:	0e 5f       	add	r15,	r14	
    44e8:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    44ec:	0f 5f       	rla	r15		
    44ee:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    44f2:	6d 4f       	mov.b	@r15,	r13	
    44f4:	1c 44 fc ff 	mov	-4(r4),	r12	;0xfffc(r4)
    44f8:	3c 50 18 01 	add	#280,	r12	;#0x0118
    44fc:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4500:	0f 5c       	add	r12,	r15	
    4502:	6f 4f       	mov.b	@r15,	r15	
    4504:	4f ed       	xor.b	r13,	r15	
    4506:	4f 4f       	mov.b	r15,	r15	
    4508:	5f 4f aa 47 	mov.b	18346(r15),r15	;0x47aa(r15)
    450c:	4d 4f       	mov.b	r15,	r13	
    450e:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4512:	0f 5f       	rla	r15		
    4514:	1f 53       	inc	r15		
    4516:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    451a:	6f 4f       	mov.b	@r15,	r15	
    451c:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    4520:	4f ed       	xor.b	r13,	r15	
    4522:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
     for(i=0;i<35;i++)
    {
      OneRound(x,Subkey[i]);
    }
    // DERNIER TOUR
    for(i=0;i<8;i++)
    4526:	d4 53 f8 ff 	inc.b	-8(r4)		;0xfff8(r4)
    452a:	f4 92 f8 ff 	cmp.b	#8,	-8(r4)	;r2 As==11, 0xfff8(r4)
    452e:	d5 2b       	jnc	$-84     	;abs 0x44da
    {
      x[2*i+1]=S[x[2*i]^Subkey[35][i]]^x[2*i+1] & 0x0F;
    }
}
    4530:	31 50 06 00 	add	#6,	r1	;#0x0006
    4534:	34 41       	pop	r4		
    4536:	30 41       	ret			

00004538 <OneRound_Inv>:

 void OneRound_Inv(u8 x[16], u8 k[8])
{
    4538:	04 12       	push	r4		
    453a:	04 41       	mov	r1,	r4	
    453c:	24 53       	incd	r4		
    453e:	31 50 ea ff 	add	#-22,	r1	;#0xffea
    4542:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4546:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
  u8 t[16];
  u8 i;

   for(i=0;i<8;i++)
    454a:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    454e:	25 3c       	jmp	$+76     	;abs 0x459a
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    4550:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4554:	0f 5f       	rla	r15		
    4556:	1f 53       	inc	r15		
    4558:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    455c:	0e 5f       	add	r15,	r14	
    455e:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4562:	0f 5f       	rla	r15		
    4564:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4568:	6d 4f       	mov.b	@r15,	r13	
    456a:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    456e:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4572:	6f 4f       	mov.b	@r15,	r15	
    4574:	4f ed       	xor.b	r13,	r15	
    4576:	4f 4f       	mov.b	r15,	r15	
    4578:	5f 4f aa 47 	mov.b	18346(r15),r15	;0x47aa(r15)
    457c:	4d 4f       	mov.b	r15,	r13	
    457e:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    4582:	0f 5f       	rla	r15		
    4584:	1f 53       	inc	r15		
    4586:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    458a:	6f 4f       	mov.b	@r15,	r15	
    458c:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    4590:	4f ed       	xor.b	r13,	r15	
    4592:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
 void OneRound_Inv(u8 x[16], u8 k[8])
{
  u8 t[16];
  u8 i;

   for(i=0;i<8;i++)
    4596:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    459a:	f4 92 e8 ff 	cmp.b	#8,	-24(r4)	;r2 As==11, 0xffe8(r4)
    459e:	d8 2b       	jnc	$-78     	;abs 0x4550
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    }

    for(i=0;i<16;i++)
    45a0:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    45a4:	12 3c       	jmp	$+38     	;abs 0x45ca
    {
    t[Pi_Inv[i]]=x[i];
    45a6:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    45aa:	5f 4f ca 47 	mov.b	18378(r15),r15	;0x47ca(r15)
    45ae:	4f 4f       	mov.b	r15,	r15	
    45b0:	5e 44 e8 ff 	mov.b	-24(r4),r14	;0xffe8(r4)
    45b4:	1e 54 fa ff 	add	-6(r4),	r14	;0xfffa(r4)
    45b8:	6e 4e       	mov.b	@r14,	r14	
    45ba:	0d 44       	mov	r4,	r13	
    45bc:	3d 50 e9 ff 	add	#-23,	r13	;#0xffe9
    45c0:	0f 5d       	add	r13,	r15	
    45c2:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
   for(i=0;i<8;i++)
    {
    x[2*i+1]=S[x[2*i]^k[i]]^x[2*i+1] & 0x0F;
    }

    for(i=0;i<16;i++)
    45c6:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    45ca:	f4 90 10 00 	cmp.b	#16,	-24(r4)	;#0x0010, 0xffe8(r4)
    45ce:	e8 ff 
    45d0:	ea 2b       	jnc	$-42     	;abs 0x45a6
    {
    t[Pi_Inv[i]]=x[i];
    }

    for(i=0;i<16;i++)
    45d2:	c4 43 e8 ff 	mov.b	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    45d6:	0f 3c       	jmp	$+32     	;abs 0x45f6
    {
    x[i]=t[i];
    45d8:	5f 44 e8 ff 	mov.b	-24(r4),r15	;0xffe8(r4)
    45dc:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    45e0:	5e 44 e8 ff 	mov.b	-24(r4),r14	;0xffe8(r4)
    45e4:	0d 44       	mov	r4,	r13	
    45e6:	3d 50 e9 ff 	add	#-23,	r13	;#0xffe9
    45ea:	0e 5d       	add	r13,	r14	
    45ec:	6e 4e       	mov.b	@r14,	r14	
    45ee:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    for(i=0;i<16;i++)
    {
    t[Pi_Inv[i]]=x[i];
    }

    for(i=0;i<16;i++)
    45f2:	d4 53 e8 ff 	inc.b	-24(r4)	;0xffe8(r4)
    45f6:	f4 90 10 00 	cmp.b	#16,	-24(r4)	;#0x0010, 0xffe8(r4)
    45fa:	e8 ff 
    45fc:	ed 2b       	jnc	$-36     	;abs 0x45d8
    {
    x[i]=t[i];
    }	
}
    45fe:	31 50 16 00 	add	#22,	r1	;#0x0016
    4602:	34 41       	pop	r4		
    4604:	30 41       	ret			

00004606 <Decrypt>:


 void Decrypt(u8 x[16], u8 Subkey[36][8])
{
    4606:	04 12       	push	r4		
    4608:	04 41       	mov	r1,	r4	
    460a:	24 53       	incd	r4		
    460c:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4610:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4614:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
  u8 i;
  
  // 35 TOURS
  for(i=35;i>0;i--)
    4618:	f4 40 23 00 	mov.b	#35,	-8(r4)	;#0x0023, 0xfff8(r4)
    461c:	f8 ff 
    461e:	0e 3c       	jmp	$+30     	;abs 0x463c
    {
    OneRound_Inv(x,Subkey[i]);
    4620:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4624:	0f 5f       	rla	r15		
    4626:	0f 5f       	rla	r15		
    4628:	0f 5f       	rla	r15		
    462a:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    462e:	0e 4f       	mov	r15,	r14	
    4630:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4634:	b0 12 38 45 	call	#0x4538	
 void Decrypt(u8 x[16], u8 Subkey[36][8])
{
  u8 i;
  
  // 35 TOURS
  for(i=35;i>0;i--)
    4638:	f4 53 f8 ff 	add.b	#-1,	-8(r4)	;r3 As==11, 0xfff8(r4)
    463c:	c4 93 f8 ff 	tst.b	-8(r4)		;0xfff8(r4)
    4640:	ef 23       	jnz	$-32     	;abs 0x4620
    {
    OneRound_Inv(x,Subkey[i]);
    }
        // DERNIER TOUR
    for(i=0;i<8;i++)
    4642:	c4 43 f8 ff 	mov.b	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4646:	26 3c       	jmp	$+78     	;abs 0x4694
    {
    x[2*i+1]=S[x[2*i]^Subkey[0][i]]^x[2*i+1] & 0x0F;
    4648:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    464c:	0f 5f       	rla	r15		
    464e:	1f 53       	inc	r15		
    4650:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4654:	0e 5f       	add	r15,	r14	
    4656:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    465a:	0f 5f       	rla	r15		
    465c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4660:	6d 4f       	mov.b	@r15,	r13	
    4662:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    4666:	1c 44 fc ff 	mov	-4(r4),	r12	;0xfffc(r4)
    466a:	0f 5c       	add	r12,	r15	
    466c:	6f 4f       	mov.b	@r15,	r15	
    466e:	4f ed       	xor.b	r13,	r15	
    4670:	4f 4f       	mov.b	r15,	r15	
    4672:	5f 4f aa 47 	mov.b	18346(r15),r15	;0x47aa(r15)
    4676:	4d 4f       	mov.b	r15,	r13	
    4678:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    467c:	0f 5f       	rla	r15		
    467e:	1f 53       	inc	r15		
    4680:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4684:	6f 4f       	mov.b	@r15,	r15	
    4686:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    468a:	4f ed       	xor.b	r13,	r15	
    468c:	ce 4f 00 00 	mov.b	r15,	0(r14)	;0x0000(r14)
  for(i=35;i>0;i--)
    {
    OneRound_Inv(x,Subkey[i]);
    }
        // DERNIER TOUR
    for(i=0;i<8;i++)
    4690:	d4 53 f8 ff 	inc.b	-8(r4)		;0xfff8(r4)
    4694:	f4 92 f8 ff 	cmp.b	#8,	-8(r4)	;r2 As==11, 0xfff8(r4)
    4698:	d7 2b       	jnc	$-80     	;abs 0x4648
    {
    x[2*i+1]=S[x[2*i]^Subkey[0][i]]^x[2*i+1] & 0x0F;
    }
}
    469a:	31 50 06 00 	add	#6,	r1	;#0x0006
    469e:	34 41       	pop	r4		
    46a0:	30 41       	ret			

000046a2 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    46a2:	04 12       	push	r4		
    46a4:	04 41       	mov	r1,	r4	
    46a6:	24 53       	incd	r4		
    46a8:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    46ac:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    46b0:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    46b4:	0d 3c       	jmp	$+28     	;abs 0x46d0
    {
      for (i = 0; i<d; i++) 
    46b6:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    46ba:	04 3c       	jmp	$+10     	;abs 0x46c4
	{
	  nop();
    46bc:	03 43       	nop			
	  nop();
    46be:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    46c0:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    46c4:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    46c8:	f8 ff 
    46ca:	f8 2b       	jnc	$-14     	;abs 0x46bc
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    46cc:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    46d0:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    46d4:	fa ff 
    46d6:	ef 2b       	jnc	$-32     	;abs 0x46b6
	{
	  nop();
	  nop();
	}
    }
}
    46d8:	31 50 06 00 	add	#6,	r1	;#0x0006
    46dc:	34 41       	pop	r4		
    46de:	30 41       	ret			

000046e0 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    46e0:	04 12       	push	r4		
    46e2:	04 41       	mov	r1,	r4	
    46e4:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    46e6:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    46ea:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    46ec:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    46f0:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    46f4:	5f 42 1b 00 	mov.b	&0x001b,r15	
    46f8:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    46fc:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4700:	5f 42 05 00 	mov.b	&0x0005,r15	
    4704:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4708:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    470c:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4710:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4714:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4716:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    471a:	79 00 
  U1RCTL = 0;
    471c:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4720:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4724:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4728:	7c 00 
  U1MCTL = U1MCTL_INIT;
    472a:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    472e:	7b 00 

  delay(0x800);
    4730:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4734:	b0 12 a2 46 	call	#0x46a2	
  return 0;
    4738:	0f 43       	clr	r15		
}
    473a:	34 41       	pop	r4		
    473c:	30 41       	ret			

0000473e <uart1_putchar>:

int uart1_putchar(int c)
{
    473e:	04 12       	push	r4		
    4740:	04 41       	mov	r1,	r4	
    4742:	24 53       	incd	r4		
    4744:	21 83       	decd	r1		
    4746:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    474a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    474e:	4f 4f       	mov.b	r15,	r15	
    4750:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4754:	03 43       	nop			
    4756:	5f 42 79 00 	mov.b	&0x0079,r15	
    475a:	4f 4f       	mov.b	r15,	r15	
    475c:	1f f3       	and	#1,	r15	;r3 As==01
    475e:	0f 93       	tst	r15		
    4760:	fa 27       	jz	$-10     	;abs 0x4756
  return (unsigned char)c;
    4762:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4766:	4f 4f       	mov.b	r15,	r15	
    4768:	4f 4f       	mov.b	r15,	r15	
}
    476a:	21 53       	incd	r1		
    476c:	34 41       	pop	r4		
    476e:	30 41       	ret			

00004770 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4770:	04 12       	push	r4		
    4772:	04 41       	mov	r1,	r4	
    4774:	24 53       	incd	r4		
    4776:	21 83       	decd	r1		
    4778:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    477c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4780:	b0 12 3e 47 	call	#0x473e	
}
    4784:	21 53       	incd	r1		
    4786:	34 41       	pop	r4		
    4788:	30 41       	ret			

0000478a <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    478a:	04 12       	push	r4		
    478c:	04 41       	mov	r1,	r4	
    478e:	24 53       	incd	r4		
  ;
}
    4790:	34 41       	pop	r4		
    4792:	30 41       	ret			

00004794 <start_decrypt>:
void
start_decrypt()
{
    4794:	04 12       	push	r4		
    4796:	04 41       	mov	r1,	r4	
    4798:	24 53       	incd	r4		
  ;
}
    479a:	34 41       	pop	r4		
    479c:	30 41       	ret			

0000479e <end_expe>:


void
end_expe()
{
    479e:	04 12       	push	r4		
    47a0:	04 41       	mov	r1,	r4	
    47a2:	24 53       	incd	r4		
  ;
}
    47a4:	34 41       	pop	r4		
    47a6:	30 41       	ret			

000047a8 <_unexpected_>:
    47a8:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	d0 40 d0 40 d0 40 d0 40 d0 40 d0 40 d0 40 d0 40     .@.@.@.@.@.@.@.@
    fff0:	d0 40 d0 40 d0 40 d0 40 d0 40 d0 40 d0 40 00 40     .@.@.@.@.@.@.@.@
