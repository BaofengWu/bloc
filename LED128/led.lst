
led.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
000049f8 l    d  .rodata	00000000 .rodata
00001100 l    d  .data	00000000 .data
00001130 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 LED128.c
000049f8 l     O .rodata	00000010 MixColMatrix
00004a08 l     O .rodata	00000010 sbox
00004a18 l     O .rodata	00000010 invMixColMatrix
00004a28 l     O .rodata	00000010 invSbox
000040e0 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00000000 l    df *ABS*	00000000 memcpy.c
000048c4 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000030 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040e0  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040e0  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004a38 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004834 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040da  w      .text	00000000 __stop_progExec__
000048fc g     F .text	000000fa memcpy
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
0000446c g     F .text	000000ba MixColumn
00000192 g       *ABS*	00000000 __TBCCR0
000040e0  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
000048f2 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
000046b2 g     F .text	000000ba invMixColumn
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040e0  w      .text	00000000 __isr_5
00004a38 g       *ABS*	00000000 __data_load_start
000040e0 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040e0  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040e0  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
000045ae g     F .text	00000066 invSubCell
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001130 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040e0  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040e0  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004614 g     F .text	0000009e invShiftRow
00004028  w      .text	00000000 __do_clear_bss
00004174 g     F .text	000000ea AddKey
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
000040e4 g     F .text	00000090 FieldMult
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
0000476c g     F .text	0000008a invLEDRound
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
000049f6  w      .text	00000000 _unexpected_
000040e0  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040e0  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004892 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040e0 g       .text	00000000 __ctors_start
000040e0  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001130 g       .data	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	0000009c main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040e0  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
000043d0 g     F .text	0000009c ShiftRow
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
000047f6 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040e0  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040e0 g       .text	00000000 __dtors_start
000040e0  w      .text	00000000 __isr_6
000040e0 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040e0  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001130 g       .data	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00004526 g     F .text	00000088 LEDRound
00001132 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
000048de g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040da  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
000048e8 g     F .text	0000000a start_decrypt
0000436a g     F .text	00000066 SubCell
00001100 g       .data	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT
0000425e g     F .text	0000010c AddConstants



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 30 11 	mov	r5,	&0x1130	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 30 11 	mov	&0x1130,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 38 4a 	mov	19000(r15),4352(r15);0x4a38(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 30 11 	mov	&0x1130,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 30 11 	mov.b	#0,	4400(r15);r3 As==00, 0x1130(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
}

/************************************************************************/

int main(int argc, char*argv[])
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 c8 ff 	add	#-56,	r1	;#0xffc8
    4046:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    404a:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	#endif
	u8 state[4][4];
	u8 keys[32];
	int i,j;
	
	START_ENCRYPT();
    404e:	b0 12 de 48 	call	#0x48de	

	for(i = 0; i < 4; i++)
    4052:	84 43 c6 ff 	mov	#0,	-58(r4)	;r3 As==00, 0xffc6(r4)
    4056:	17 3c       	jmp	$+48     	;abs 0x4086
		for(j = 0; j < 4; j++)
    4058:	84 43 c8 ff 	mov	#0,	-56(r4)	;r3 As==00, 0xffc8(r4)
    405c:	0f 3c       	jmp	$+32     	;abs 0x407c
			state[i][j] = 0;
    405e:	1f 44 c6 ff 	mov	-58(r4),r15	;0xffc6(r4)
    4062:	0f 5f       	rla	r15		
    4064:	0f 5f       	rla	r15		
    4066:	3e 40 c6 ff 	mov	#-58,	r14	;#0xffc6
    406a:	0e 54       	add	r4,	r14	
    406c:	0f 5e       	add	r14,	r15	
    406e:	1f 54 c8 ff 	add	-56(r4),r15	;0xffc8(r4)
    4072:	2f 52       	add	#4,	r15	;r2 As==10
    4074:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
	int i,j;
	
	START_ENCRYPT();

	for(i = 0; i < 4; i++)
		for(j = 0; j < 4; j++)
    4078:	94 53 c8 ff 	inc	-56(r4)	;0xffc8(r4)
    407c:	a4 92 c8 ff 	cmp	#4,	-56(r4)	;r2 As==10, 0xffc8(r4)
    4080:	ee 3b       	jl	$-34     	;abs 0x405e
	u8 keys[32];
	int i,j;
	
	START_ENCRYPT();

	for(i = 0; i < 4; i++)
    4082:	94 53 c6 ff 	inc	-58(r4)	;0xffc6(r4)
    4086:	a4 92 c6 ff 	cmp	#4,	-58(r4)	;r2 As==10, 0xffc6(r4)
    408a:	e6 3b       	jl	$-50     	;abs 0x4058
		for(j = 0; j < 4; j++)
			state[i][j] = 0;

	for(i=0; i < 32; i++) keys[i] = 0;	
    408c:	84 43 c6 ff 	mov	#0,	-58(r4)	;r3 As==00, 0xffc6(r4)
    4090:	09 3c       	jmp	$+20     	;abs 0x40a4
    4092:	0f 44       	mov	r4,	r15	
    4094:	3f 50 da ff 	add	#-38,	r15	;#0xffda
    4098:	1f 54 c6 ff 	add	-58(r4),r15	;0xffc6(r4)
    409c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a0:	94 53 c6 ff 	inc	-58(r4)	;0xffc6(r4)
    40a4:	b4 90 20 00 	cmp	#32,	-58(r4)	;#0x0020, 0xffc6(r4)
    40a8:	c6 ff 
    40aa:	f3 3b       	jl	$-24     	;abs 0x4092
	
	LEDRound(state, keys);
    40ac:	0e 44       	mov	r4,	r14	
    40ae:	3e 50 da ff 	add	#-38,	r14	;#0xffda
    40b2:	0f 44       	mov	r4,	r15	
    40b4:	3f 50 ca ff 	add	#-54,	r15	;#0xffca
    40b8:	b0 12 26 45 	call	#0x4526	
		printf("\n");
		}
	printf("\n");
	printf("\n");
#endif
  START_DECRYPT();
    40bc:	b0 12 e8 48 	call	#0x48e8	

	invLEDRound(state, keys);
    40c0:	0e 44       	mov	r4,	r14	
    40c2:	3e 50 da ff 	add	#-38,	r14	;#0xffda
    40c6:	0f 44       	mov	r4,	r15	
    40c8:	3f 50 ca ff 	add	#-54,	r15	;#0xffca
    40cc:	b0 12 6c 47 	call	#0x476c	
	for(i = 0; i < 4; i++){
		for(j = 0; j < 4; j++)printf("%x ",state[i][j]);
		printf("\n");
		}
#endif
  END_EXPE();
    40d0:	b0 12 f2 48 	call	#0x48f2	
	return 0;
    40d4:	0f 43       	clr	r15		
}
    40d6:	31 50 38 00 	add	#56,	r1	;#0x0038

000040da <__stop_progExec__>:
    40da:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40de:	fd 3f       	jmp	$-4      	;abs 0x40da

000040e0 <__ctors_end>:
    40e0:	30 40 f6 49 	br	#0x49f6	

000040e4 <FieldMult>:
};

static const u8 invSbox[16] = {5, 14, 15, 8, 12, 1, 2, 13,11,4,6,3,0,7,9,10};

 u8 FieldMult(u8 a, u8 b)
{
    40e4:	04 12       	push	r4		
    40e6:	04 41       	mov	r1,	r4	
    40e8:	24 53       	incd	r4		
    40ea:	31 82       	sub	#8,	r1	;r2 As==11
    40ec:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    40f0:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
	const u8 ReductionPoly = 0x3;
    40f4:	f4 40 03 00 	mov.b	#3,	-6(r4)	;#0x0003, 0xfffa(r4)
    40f8:	fa ff 
	u8 x = a, ret = 0;
    40fa:	d4 44 fc ff 	mov.b	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    40fe:	f6 ff 
    4100:	c4 43 f7 ff 	mov.b	#0,	-9(r4)	;r3 As==00, 0xfff7(r4)
	int i;
	for(i = 0; i < 4; i++) {
    4104:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4108:	2b 3c       	jmp	$+88     	;abs 0x4160
		if((b>>i)&1) ret ^= x;
    410a:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    410e:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4112:	4e 4e       	mov.b	r14,	r14	
    4114:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    4118:	4e 93       	tst.b	r14		
    411a:	04 24       	jz	$+10     	;abs 0x4124
    411c:	0f 11       	rra	r15		
    411e:	7e 53       	add.b	#-1,	r14	;r3 As==11
    4120:	4e 93       	tst.b	r14		
    4122:	fc 23       	jnz	$-6      	;abs 0x411c
    4124:	1f f3       	and	#1,	r15	;r3 As==01
    4126:	4f 4f       	mov.b	r15,	r15	
    4128:	4f 93       	tst.b	r15		
    412a:	03 24       	jz	$+8      	;abs 0x4132
    412c:	d4 e4 f6 ff 	xor.b	-10(r4),-9(r4)	;0xfff6(r4), 0xfff7(r4)
    4130:	f7 ff 
		if(x&0x8) {
    4132:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    4136:	3f f2       	and	#8,	r15	;r2 As==11
    4138:	0f 93       	tst	r15		
    413a:	0a 24       	jz	$+22     	;abs 0x4150
			x <<= 1;
    413c:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    4140:	4f 4f       	mov.b	r15,	r15	
    4142:	4f 5f       	rla.b	r15		
    4144:	c4 4f f6 ff 	mov.b	r15,	-10(r4)	;0xfff6(r4)
			x ^= ReductionPoly;
    4148:	d4 e4 fa ff 	xor.b	-6(r4),	-10(r4)	;0xfffa(r4), 0xfff6(r4)
    414c:	f6 ff 
    414e:	06 3c       	jmp	$+14     	;abs 0x415c
		}
		else x <<= 1;
    4150:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    4154:	4f 4f       	mov.b	r15,	r15	
    4156:	4f 5f       	rla.b	r15		
    4158:	c4 4f f6 ff 	mov.b	r15,	-10(r4)	;0xfff6(r4)
 u8 FieldMult(u8 a, u8 b)
{
	const u8 ReductionPoly = 0x3;
	u8 x = a, ret = 0;
	int i;
	for(i = 0; i < 4; i++) {
    415c:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4160:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    4164:	d2 3b       	jl	$-90     	;abs 0x410a
			x <<= 1;
			x ^= ReductionPoly;
		}
		else x <<= 1;
	}
	return ret&WORDFILTER;
    4166:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    416a:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
}
    416e:	31 52       	add	#8,	r1	;r2 As==11
    4170:	34 41       	pop	r4		
    4172:	30 41       	ret			

00004174 <AddKey>:
 * else use the second half of the key
 * 
 * The key bytes are added row wise, i.e., first row , then second row etc.
 * */
 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
    4174:	04 12       	push	r4		
    4176:	04 41       	mov	r1,	r4	
    4178:	24 53       	incd	r4		
    417a:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    417e:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    4182:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    4186:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	int i, j;
	if((half&1) == 0){
    418a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    418e:	1f f3       	and	#1,	r15	;r3 As==01
    4190:	0f 93       	tst	r15		
    4192:	30 20       	jnz	$+98     	;abs 0x41f4
		for(i = 0; i < 4; i++)
    4194:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    4198:	29 3c       	jmp	$+84     	;abs 0x41ec
			for(j = 0; j < 4; j++)
    419a:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    419e:	21 3c       	jmp	$+68     	;abs 0x41e2
				state[i][j] ^= keyBytes[4*i+j];
    41a0:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    41a4:	0f 5f       	rla	r15		
    41a6:	0f 5f       	rla	r15		
    41a8:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    41ac:	0d 5f       	add	r15,	r13	
    41ae:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    41b2:	0f 5f       	rla	r15		
    41b4:	0f 5f       	rla	r15		
    41b6:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    41ba:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    41be:	6e 4f       	mov.b	@r15,	r14	
    41c0:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    41c4:	0f 5f       	rla	r15		
    41c6:	0f 5f       	rla	r15		
    41c8:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    41cc:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    41d0:	6f 4f       	mov.b	@r15,	r15	
    41d2:	4e ef       	xor.b	r15,	r14	
    41d4:	0f 4d       	mov	r13,	r15	
    41d6:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    41da:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
	int i, j;
	if((half&1) == 0){
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
    41de:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    41e2:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    41e6:	dc 3b       	jl	$-70     	;abs 0x41a0
 * */
 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
	int i, j;
	if((half&1) == 0){
		for(i = 0; i < 4; i++)
    41e8:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    41ec:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    41f0:	d4 3b       	jl	$-86     	;abs 0x419a
    41f2:	31 3c       	jmp	$+100    	;abs 0x4256
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
    41f4:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    41f8:	2b 3c       	jmp	$+88     	;abs 0x4250
			for(j = 0; j < 4; j++)
    41fa:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    41fe:	23 3c       	jmp	$+72     	;abs 0x4246
				state[i][j] ^= keyBytes[4*i+j+((LED-64)>>2)];
    4200:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4204:	0f 5f       	rla	r15		
    4206:	0f 5f       	rla	r15		
    4208:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    420c:	0d 5f       	add	r15,	r13	
    420e:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4212:	0f 5f       	rla	r15		
    4214:	0f 5f       	rla	r15		
    4216:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    421a:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    421e:	6e 4f       	mov.b	@r15,	r14	
    4220:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4224:	0f 5f       	rla	r15		
    4226:	0f 5f       	rla	r15		
    4228:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    422c:	3f 50 10 00 	add	#16,	r15	;#0x0010
    4230:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4234:	6f 4f       	mov.b	@r15,	r15	
    4236:	4e ef       	xor.b	r15,	r14	
    4238:	0f 4d       	mov	r13,	r15	
    423a:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    423e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
    4242:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    4246:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    424a:	da 3b       	jl	$-74     	;abs 0x4200
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
    424c:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    4250:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    4254:	d2 3b       	jl	$-90     	;abs 0x41fa
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j+((LED-64)>>2)];
	}
}
    4256:	31 50 0a 00 	add	#10,	r1	;#0x000a
    425a:	34 41       	pop	r4		
    425c:	30 41       	ret			

0000425e <AddConstants>:

 void AddConstants(u8 state[4][4], int r)
{
    425e:	04 12       	push	r4		
    4260:	04 41       	mov	r1,	r4	
    4262:	24 53       	incd	r4		
    4264:	31 50 ca ff 	add	#-54,	r1	;#0xffca
    4268:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    426c:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	const u8 RC[48] = {
    4270:	0f 44       	mov	r4,	r15	
    4272:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    4276:	3e 40 00 11 	mov	#4352,	r14	;#0x1100
    427a:	3d 40 30 00 	mov	#48,	r13	;#0x0030
    427e:	b0 12 fc 48 	call	#0x48fc	
		0x1E, 0x3C, 0x39, 0x33, 0x27, 0x0E, 0x1D, 0x3A, 0x35, 0x2B,
		0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0B, 0x17, 0x2E,
		0x1C, 0x38, 0x31, 0x23, 0x06, 0x0D, 0x1B, 0x36, 0x2D, 0x1A,
		0x34, 0x29, 0x12, 0x24, 0x08, 0x11, 0x22, 0x04
	};
	state[1][0] ^= 1;
    4282:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4286:	2f 52       	add	#4,	r15	;r2 As==10
    4288:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    428c:	2e 52       	add	#4,	r14	;r2 As==10
    428e:	6e 4e       	mov.b	@r14,	r14	
    4290:	5e e3       	xor.b	#1,	r14	;r3 As==01
    4292:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[2][0] ^= 2;
    4296:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    429a:	3f 52       	add	#8,	r15	;r2 As==11
    429c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    42a0:	3e 52       	add	#8,	r14	;r2 As==11
    42a2:	6e 4e       	mov.b	@r14,	r14	
    42a4:	6e e3       	xor.b	#2,	r14	;r3 As==10
    42a6:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[3][0] ^= 3;
    42aa:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42ae:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    42b2:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    42b6:	3e 50 0c 00 	add	#12,	r14	;#0x000c
    42ba:	6e 4e       	mov.b	@r14,	r14	
    42bc:	7e e0 03 00 	xor.b	#3,	r14	;#0x0003
    42c0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

	u8 tmp = (RC[r] >> 3) & 7;
    42c4:	0f 44       	mov	r4,	r15	
    42c6:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    42ca:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    42ce:	6f 4f       	mov.b	@r15,	r15	
    42d0:	4f 4f       	mov.b	r15,	r15	
    42d2:	4f 4f       	mov.b	r15,	r15	
    42d4:	12 c3       	clrc			
    42d6:	4f 10       	rrc.b	r15		
    42d8:	12 c3       	clrc			
    42da:	4f 10       	rrc.b	r15		
    42dc:	12 c3       	clrc			
    42de:	4f 10       	rrc.b	r15		
    42e0:	4e 4f       	mov.b	r15,	r14	
    42e2:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    42e6:	c4 4e c8 ff 	mov.b	r14,	-56(r4)	;0xffc8(r4)
	state[0][1] ^= tmp;
    42ea:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42ee:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    42f2:	4e 4f       	mov.b	r15,	r14	
    42f4:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    42f8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42fc:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	state[2][1] ^= tmp;
    4300:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4304:	3f 52       	add	#8,	r15	;r2 As==11
    4306:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    430a:	3e 52       	add	#8,	r14	;r2 As==11
    430c:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    4310:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    4314:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	tmp =  RC[r] & 7;
    4318:	0f 44       	mov	r4,	r15	
    431a:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    431e:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4322:	6f 4f       	mov.b	@r15,	r15	
    4324:	4e 4f       	mov.b	r15,	r14	
    4326:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    432a:	c4 4e c8 ff 	mov.b	r14,	-56(r4)	;0xffc8(r4)
	state[1][1] ^= tmp;
    432e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4332:	2f 52       	add	#4,	r15	;r2 As==10
    4334:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4338:	2e 52       	add	#4,	r14	;r2 As==10
    433a:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    433e:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    4342:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	state[3][1] ^= tmp;
    4346:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    434a:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    434e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4352:	3e 50 0c 00 	add	#12,	r14	;#0x000c
    4356:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    435a:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    435e:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
}
    4362:	31 50 36 00 	add	#54,	r1	;#0x0036
    4366:	34 41       	pop	r4		
    4368:	30 41       	ret			

0000436a <SubCell>:

 void SubCell(u8 state[4][4])
{
    436a:	04 12       	push	r4		
    436c:	04 41       	mov	r1,	r4	
    436e:	24 53       	incd	r4		
    4370:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4374:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i,j;
	for(i = 0; i < 4; i++)
    4378:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    437c:	22 3c       	jmp	$+70     	;abs 0x43c2
		for(j = 0; j <  4; j++)
    437e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4382:	1a 3c       	jmp	$+54     	;abs 0x43b8
			state[i][j] = sbox[state[i][j]];
    4384:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4388:	0f 5f       	rla	r15		
    438a:	0f 5f       	rla	r15		
    438c:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    4390:	0d 5f       	add	r15,	r13	
    4392:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4396:	0f 5f       	rla	r15		
    4398:	0f 5f       	rla	r15		
    439a:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    439e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    43a2:	6f 4f       	mov.b	@r15,	r15	
    43a4:	4f 4f       	mov.b	r15,	r15	
    43a6:	5e 4f 08 4a 	mov.b	18952(r15),r14	;0x4a08(r15)
    43aa:	0f 4d       	mov	r13,	r15	
    43ac:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    43b0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

 void SubCell(u8 state[4][4])
{
	int i,j;
	for(i = 0; i < 4; i++)
		for(j = 0; j <  4; j++)
    43b4:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    43b8:	a4 92 fa ff 	cmp	#4,	-6(r4)	;r2 As==10, 0xfffa(r4)
    43bc:	e3 3b       	jl	$-56     	;abs 0x4384
}

 void SubCell(u8 state[4][4])
{
	int i,j;
	for(i = 0; i < 4; i++)
    43be:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    43c2:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    43c6:	db 3b       	jl	$-72     	;abs 0x437e
		for(j = 0; j <  4; j++)
			state[i][j] = sbox[state[i][j]];
}
    43c8:	31 50 06 00 	add	#6,	r1	;#0x0006
    43cc:	34 41       	pop	r4		
    43ce:	30 41       	ret			

000043d0 <ShiftRow>:

 void ShiftRow(u8 state[4][4])
{
    43d0:	04 12       	push	r4		
    43d2:	04 41       	mov	r1,	r4	
    43d4:	24 53       	incd	r4		
    43d6:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    43da:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) {
    43de:	94 43 f4 ff 	mov	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    43e2:	3d 3c       	jmp	$+124    	;abs 0x445e
		for(j = 0; j < 4; j++)
    43e4:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    43e8:	11 3c       	jmp	$+36     	;abs 0x440c
			tmp[j] = state[i][j];
    43ea:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    43ee:	0f 5f       	rla	r15		
    43f0:	0f 5f       	rla	r15		
    43f2:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    43f6:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    43fa:	6e 4f       	mov.b	@r15,	r14	
    43fc:	0f 44       	mov	r4,	r15	
    43fe:	3f 82       	sub	#8,	r15	;r2 As==11
    4400:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4404:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
 void ShiftRow(u8 state[4][4])
{
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) {
		for(j = 0; j < 4; j++)
    4408:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    440c:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    4410:	ec 3b       	jl	$-38     	;abs 0x43ea
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
    4412:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    4416:	1e 3c       	jmp	$+62     	;abs 0x4454
			state[i][j] = tmp[(j+i)%4];
    4418:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    441c:	0f 5f       	rla	r15		
    441e:	0f 5f       	rla	r15		
    4420:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    4424:	0d 5f       	add	r15,	r13	
    4426:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    442a:	1f 54 f4 ff 	add	-12(r4),r15	;0xfff4(r4)
    442e:	3f f0 03 80 	and	#-32765,r15	;#0x8003
    4432:	0f 93       	tst	r15		
    4434:	04 34       	jge	$+10     	;abs 0x443e
    4436:	3f 53       	add	#-1,	r15	;r3 As==11
    4438:	3f d0 fc ff 	bis	#-4,	r15	;#0xfffc
    443c:	1f 53       	inc	r15		
    443e:	0e 44       	mov	r4,	r14	
    4440:	3e 82       	sub	#8,	r14	;r2 As==11
    4442:	0f 5e       	add	r14,	r15	
    4444:	6e 4f       	mov.b	@r15,	r14	
    4446:	0f 4d       	mov	r13,	r15	
    4448:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    444c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) {
		for(j = 0; j < 4; j++)
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
    4450:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    4454:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    4458:	df 3b       	jl	$-64     	;abs 0x4418

 void ShiftRow(u8 state[4][4])
{
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) {
    445a:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    445e:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    4462:	c0 3b       	jl	$-126    	;abs 0x43e4
		for(j = 0; j < 4; j++)
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
			state[i][j] = tmp[(j+i)%4];
	}
}
    4464:	31 50 0a 00 	add	#10,	r1	;#0x000a
    4468:	34 41       	pop	r4		
    446a:	30 41       	ret			

0000446c <MixColumn>:

 void MixColumn(u8 state[4][4])
{
    446c:	04 12       	push	r4		
    446e:	04 41       	mov	r1,	r4	
    4470:	24 53       	incd	r4		
    4472:	31 50 f2 ff 	add	#-14,	r1	;#0xfff2
    4476:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
    447a:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    447e:	4c 3c       	jmp	$+154    	;abs 0x4518
		for(i = 0; i < 4; i++) {
    4480:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    4484:	2a 3c       	jmp	$+86     	;abs 0x44da
			u8 sum = 0;
    4486:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
			for(k = 0; k < 4; k++)
    448a:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    448e:	18 3c       	jmp	$+50     	;abs 0x44c0
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
    4490:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4494:	0f 5f       	rla	r15		
    4496:	0f 5f       	rla	r15		
    4498:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    449c:	1f 54 f2 ff 	add	-14(r4),r15	;0xfff2(r4)
    44a0:	6e 4f       	mov.b	@r15,	r14	
    44a2:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    44a6:	0f 5f       	rla	r15		
    44a8:	0f 5f       	rla	r15		
    44aa:	1f 54 f4 ff 	add	-12(r4),r15	;0xfff4(r4)
    44ae:	3f 50 f8 49 	add	#18936,	r15	;#0x49f8
    44b2:	6f 4f       	mov.b	@r15,	r15	
    44b4:	b0 12 e4 40 	call	#0x40e4	
    44b8:	c4 ef f6 ff 	xor.b	r15,	-10(r4)	;0xfff6(r4)
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++) {
			u8 sum = 0;
			for(k = 0; k < 4; k++)
    44bc:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    44c0:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    44c4:	e5 3b       	jl	$-52     	;abs 0x4490
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
    44c6:	0f 44       	mov	r4,	r15	
    44c8:	3f 50 f7 ff 	add	#-9,	r15	;#0xfff7
    44cc:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    44d0:	df 44 f6 ff 	mov.b	-10(r4),0(r15)	;0xfff6(r4), 0x0000(r15)
    44d4:	00 00 
 void MixColumn(u8 state[4][4])
{
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++) {
    44d6:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    44da:	a4 92 f0 ff 	cmp	#4,	-16(r4)	;r2 As==10, 0xfff0(r4)
    44de:	d3 3b       	jl	$-88     	;abs 0x4486
			u8 sum = 0;
			for(k = 0; k < 4; k++)
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
    44e0:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    44e4:	14 3c       	jmp	$+42     	;abs 0x450e
			state[i][j] = tmp[i];
    44e6:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    44ea:	0f 5f       	rla	r15		
    44ec:	0f 5f       	rla	r15		
    44ee:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    44f2:	0d 5f       	add	r15,	r13	
    44f4:	0f 44       	mov	r4,	r15	
    44f6:	3f 50 f7 ff 	add	#-9,	r15	;#0xfff7
    44fa:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    44fe:	6e 4f       	mov.b	@r15,	r14	
    4500:	0f 4d       	mov	r13,	r15	
    4502:	1f 54 f2 ff 	add	-14(r4),r15	;0xfff2(r4)
    4506:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			u8 sum = 0;
			for(k = 0; k < 4; k++)
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
    450a:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    450e:	a4 92 f0 ff 	cmp	#4,	-16(r4)	;r2 As==10, 0xfff0(r4)
    4512:	e9 3b       	jl	$-44     	;abs 0x44e6

 void MixColumn(u8 state[4][4])
{
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
    4514:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
    4518:	a4 92 f2 ff 	cmp	#4,	-14(r4)	;r2 As==10, 0xfff2(r4)
    451c:	b1 3b       	jl	$-156    	;abs 0x4480
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
			state[i][j] = tmp[i];
	}
}
    451e:	31 50 0e 00 	add	#14,	r1	;#0x000e
    4522:	34 41       	pop	r4		
    4524:	30 41       	ret			

00004526 <LEDRound>:

 void LEDRound(u8 state[4][4], u8* keyBytes)
{
    4526:	04 12       	push	r4		
    4528:	04 41       	mov	r1,	r4	
    452a:	24 53       	incd	r4		
    452c:	31 82       	sub	#8,	r1	;r2 As==11
    452e:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4532:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i,j;
	AddKey(state, keyBytes, 0);
    4536:	0d 43       	clr	r13		
    4538:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    453c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4540:	b0 12 74 41 	call	#0x4174	
	for(i = 0; i < RN/4; i++){
    4544:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    4548:	2b 3c       	jmp	$+88     	;abs 0x45a0
		for(j = 0; j < 4; j++)
    454a:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    454e:	19 3c       	jmp	$+52     	;abs 0x4582
		{
			AddConstants(state, i*4+j);
    4550:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4554:	0f 5f       	rla	r15		
    4556:	0f 5f       	rla	r15		
    4558:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    455c:	0e 4f       	mov	r15,	r14	
    455e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4562:	b0 12 5e 42 	call	#0x425e	
			SubCell(state);
    4566:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    456a:	b0 12 6a 43 	call	#0x436a	
			ShiftRow(state);
    456e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4572:	b0 12 d0 43 	call	#0x43d0	
			MixColumn(state);
    4576:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    457a:	b0 12 6c 44 	call	#0x446c	
 void LEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	AddKey(state, keyBytes, 0);
	for(i = 0; i < RN/4; i++){
		for(j = 0; j < 4; j++)
    457e:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4582:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    4586:	e4 3b       	jl	$-54     	;abs 0x4550
			AddConstants(state, i*4+j);
			SubCell(state);
			ShiftRow(state);
			MixColumn(state);
		}
		AddKey(state, keyBytes, i+1);
    4588:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    458c:	1f 53       	inc	r15		
    458e:	0d 4f       	mov	r15,	r13	
    4590:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4594:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4598:	b0 12 74 41 	call	#0x4174	

 void LEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	AddKey(state, keyBytes, 0);
	for(i = 0; i < RN/4; i++){
    459c:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    45a0:	b4 90 0c 00 	cmp	#12,	-10(r4)	;#0x000c, 0xfff6(r4)
    45a4:	f6 ff 
    45a6:	d1 3b       	jl	$-92     	;abs 0x454a
			ShiftRow(state);
			MixColumn(state);
		}
		AddKey(state, keyBytes, i+1);
	}
}
    45a8:	31 52       	add	#8,	r1	;r2 As==11
    45aa:	34 41       	pop	r4		
    45ac:	30 41       	ret			

000045ae <invSubCell>:


/************************************************************************/
 void invSubCell(u8 state[4][4])
{
    45ae:	04 12       	push	r4		
    45b0:	04 41       	mov	r1,	r4	
    45b2:	24 53       	incd	r4		
    45b4:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    45b8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i,j;
	for(i = 0; i < 4; i++)
    45bc:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    45c0:	22 3c       	jmp	$+70     	;abs 0x4606
		for(j = 0; j <  4; j++)
    45c2:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    45c6:	1a 3c       	jmp	$+54     	;abs 0x45fc
			state[i][j] = invSbox[state[i][j]];
    45c8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45cc:	0f 5f       	rla	r15		
    45ce:	0f 5f       	rla	r15		
    45d0:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    45d4:	0d 5f       	add	r15,	r13	
    45d6:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45da:	0f 5f       	rla	r15		
    45dc:	0f 5f       	rla	r15		
    45de:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    45e2:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    45e6:	6f 4f       	mov.b	@r15,	r15	
    45e8:	4f 4f       	mov.b	r15,	r15	
    45ea:	5e 4f 28 4a 	mov.b	18984(r15),r14	;0x4a28(r15)
    45ee:	0f 4d       	mov	r13,	r15	
    45f0:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    45f4:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
/************************************************************************/
 void invSubCell(u8 state[4][4])
{
	int i,j;
	for(i = 0; i < 4; i++)
		for(j = 0; j <  4; j++)
    45f8:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    45fc:	a4 92 fa ff 	cmp	#4,	-6(r4)	;r2 As==10, 0xfffa(r4)
    4600:	e3 3b       	jl	$-56     	;abs 0x45c8

/************************************************************************/
 void invSubCell(u8 state[4][4])
{
	int i,j;
	for(i = 0; i < 4; i++)
    4602:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4606:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    460a:	db 3b       	jl	$-72     	;abs 0x45c2
		for(j = 0; j <  4; j++)
			state[i][j] = invSbox[state[i][j]];
}
    460c:	31 50 06 00 	add	#6,	r1	;#0x0006
    4610:	34 41       	pop	r4		
    4612:	30 41       	ret			

00004614 <invShiftRow>:

 void invShiftRow(u8 state[4][4])
{
    4614:	04 12       	push	r4		
    4616:	04 41       	mov	r1,	r4	
    4618:	24 53       	incd	r4		
    461a:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    461e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) 
    4622:	94 43 f4 ff 	mov	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    4626:	3e 3c       	jmp	$+126    	;abs 0x46a4
	{
		for(j = 0; j < 4; j++)
    4628:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    462c:	11 3c       	jmp	$+36     	;abs 0x4650
			tmp[j] = state[i][j];
    462e:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4632:	0f 5f       	rla	r15		
    4634:	0f 5f       	rla	r15		
    4636:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    463a:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    463e:	6e 4f       	mov.b	@r15,	r14	
    4640:	0f 44       	mov	r4,	r15	
    4642:	3f 82       	sub	#8,	r15	;r2 As==11
    4644:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4648:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
{
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) 
	{
		for(j = 0; j < 4; j++)
    464c:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    4650:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    4654:	ec 3b       	jl	$-38     	;abs 0x462e
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
    4656:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    465a:	1f 3c       	jmp	$+64     	;abs 0x469a
			state[i][j] = tmp[(j+(4-i))%4];
    465c:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4660:	0f 5f       	rla	r15		
    4662:	0f 5f       	rla	r15		
    4664:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    4668:	0d 5f       	add	r15,	r13	
    466a:	2f 42       	mov	#4,	r15	;r2 As==10
    466c:	1f 84 f4 ff 	sub	-12(r4),r15	;0xfff4(r4)
    4670:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4674:	3f f0 03 80 	and	#-32765,r15	;#0x8003
    4678:	0f 93       	tst	r15		
    467a:	04 34       	jge	$+10     	;abs 0x4684
    467c:	3f 53       	add	#-1,	r15	;r3 As==11
    467e:	3f d0 fc ff 	bis	#-4,	r15	;#0xfffc
    4682:	1f 53       	inc	r15		
    4684:	0e 44       	mov	r4,	r14	
    4686:	3e 82       	sub	#8,	r14	;r2 As==11
    4688:	0f 5e       	add	r14,	r15	
    468a:	6e 4f       	mov.b	@r15,	r14	
    468c:	0f 4d       	mov	r13,	r15	
    468e:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4692:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	u8 tmp[4];
	for(i = 1; i < 4; i++) 
	{
		for(j = 0; j < 4; j++)
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
    4696:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    469a:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    469e:	de 3b       	jl	$-66     	;abs 0x465c

 void invShiftRow(u8 state[4][4])
{
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) 
    46a0:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    46a4:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    46a8:	bf 3b       	jl	$-128    	;abs 0x4628
		for(j = 0; j < 4; j++)
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
			state[i][j] = tmp[(j+(4-i))%4];
	}
}
    46aa:	31 50 0a 00 	add	#10,	r1	;#0x000a
    46ae:	34 41       	pop	r4		
    46b0:	30 41       	ret			

000046b2 <invMixColumn>:


 void invMixColumn(u8 state[4][4])
{
    46b2:	04 12       	push	r4		
    46b4:	04 41       	mov	r1,	r4	
    46b6:	24 53       	incd	r4		
    46b8:	31 50 f2 ff 	add	#-14,	r1	;#0xfff2
    46bc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
    46c0:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    46c4:	4c 3c       	jmp	$+154    	;abs 0x475e
		for(i = 0; i < 4; i++) {
    46c6:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    46ca:	2a 3c       	jmp	$+86     	;abs 0x4720
			u8 sum = 0;
    46cc:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
			for(k = 0; k < 4; k++)
    46d0:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    46d4:	18 3c       	jmp	$+50     	;abs 0x4706
				sum ^= FieldMult(invMixColMatrix[i][k], state[k][j]);
    46d6:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    46da:	0f 5f       	rla	r15		
    46dc:	0f 5f       	rla	r15		
    46de:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    46e2:	1f 54 f2 ff 	add	-14(r4),r15	;0xfff2(r4)
    46e6:	6e 4f       	mov.b	@r15,	r14	
    46e8:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    46ec:	0f 5f       	rla	r15		
    46ee:	0f 5f       	rla	r15		
    46f0:	1f 54 f4 ff 	add	-12(r4),r15	;0xfff4(r4)
    46f4:	3f 50 18 4a 	add	#18968,	r15	;#0x4a18
    46f8:	6f 4f       	mov.b	@r15,	r15	
    46fa:	b0 12 e4 40 	call	#0x40e4	
    46fe:	c4 ef f6 ff 	xor.b	r15,	-10(r4)	;0xfff6(r4)
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++) {
			u8 sum = 0;
			for(k = 0; k < 4; k++)
    4702:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    4706:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    470a:	e5 3b       	jl	$-52     	;abs 0x46d6
				sum ^= FieldMult(invMixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
    470c:	0f 44       	mov	r4,	r15	
    470e:	3f 50 f7 ff 	add	#-9,	r15	;#0xfff7
    4712:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    4716:	df 44 f6 ff 	mov.b	-10(r4),0(r15)	;0xfff6(r4), 0x0000(r15)
    471a:	00 00 
 void invMixColumn(u8 state[4][4])
{
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++) {
    471c:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    4720:	a4 92 f0 ff 	cmp	#4,	-16(r4)	;r2 As==10, 0xfff0(r4)
    4724:	d3 3b       	jl	$-88     	;abs 0x46cc
			u8 sum = 0;
			for(k = 0; k < 4; k++)
				sum ^= FieldMult(invMixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
    4726:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    472a:	14 3c       	jmp	$+42     	;abs 0x4754
			state[i][j] = tmp[i];
    472c:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4730:	0f 5f       	rla	r15		
    4732:	0f 5f       	rla	r15		
    4734:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    4738:	0d 5f       	add	r15,	r13	
    473a:	0f 44       	mov	r4,	r15	
    473c:	3f 50 f7 ff 	add	#-9,	r15	;#0xfff7
    4740:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    4744:	6e 4f       	mov.b	@r15,	r14	
    4746:	0f 4d       	mov	r13,	r15	
    4748:	1f 54 f2 ff 	add	-14(r4),r15	;0xfff2(r4)
    474c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			u8 sum = 0;
			for(k = 0; k < 4; k++)
				sum ^= FieldMult(invMixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
    4750:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    4754:	a4 92 f0 ff 	cmp	#4,	-16(r4)	;r2 As==10, 0xfff0(r4)
    4758:	e9 3b       	jl	$-44     	;abs 0x472c

 void invMixColumn(u8 state[4][4])
{
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
    475a:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
    475e:	a4 92 f2 ff 	cmp	#4,	-14(r4)	;r2 As==10, 0xfff2(r4)
    4762:	b1 3b       	jl	$-156    	;abs 0x46c6
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
			state[i][j] = tmp[i];
	}
}
    4764:	31 50 0e 00 	add	#14,	r1	;#0x000e
    4768:	34 41       	pop	r4		
    476a:	30 41       	ret			

0000476c <invLEDRound>:


 void invLEDRound(u8 state[4][4], u8* keyBytes)
{
    476c:	04 12       	push	r4		
    476e:	04 41       	mov	r1,	r4	
    4770:	24 53       	incd	r4		
    4772:	31 82       	sub	#8,	r1	;r2 As==11
    4774:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4778:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i,j;
	for(i = (RN/4)-1; i >=0; i--){
    477c:	b4 40 0b 00 	mov	#11,	-10(r4)	;#0x000b, 0xfff6(r4)
    4780:	f6 ff 
    4782:	2c 3c       	jmp	$+90     	;abs 0x47dc
		AddKey(state, keyBytes, i+1);
    4784:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4788:	1f 53       	inc	r15		
    478a:	0d 4f       	mov	r15,	r13	
    478c:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4790:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4794:	b0 12 74 41 	call	#0x4174	
		for(j = 3; j >= 0; j--)
    4798:	b4 40 03 00 	mov	#3,	-8(r4)	;#0x0003, 0xfff8(r4)
    479c:	f8 ff 
    479e:	19 3c       	jmp	$+52     	;abs 0x47d2
		{
			invMixColumn(state);
    47a0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    47a4:	b0 12 b2 46 	call	#0x46b2	
			invShiftRow(state);
    47a8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    47ac:	b0 12 14 46 	call	#0x4614	
			invSubCell(state);
    47b0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    47b4:	b0 12 ae 45 	call	#0x45ae	
			AddConstants(state, i*4+j);
    47b8:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    47bc:	0f 5f       	rla	r15		
    47be:	0f 5f       	rla	r15		
    47c0:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    47c4:	0e 4f       	mov	r15,	r14	
    47c6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    47ca:	b0 12 5e 42 	call	#0x425e	
 void invLEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	for(i = (RN/4)-1; i >=0; i--){
		AddKey(state, keyBytes, i+1);
		for(j = 3; j >= 0; j--)
    47ce:	b4 53 f8 ff 	add	#-1,	-8(r4)	;r3 As==11, 0xfff8(r4)
    47d2:	84 93 f8 ff 	tst	-8(r4)		;0xfff8(r4)
    47d6:	e4 37       	jge	$-54     	;abs 0x47a0


 void invLEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	for(i = (RN/4)-1; i >=0; i--){
    47d8:	b4 53 f6 ff 	add	#-1,	-10(r4)	;r3 As==11, 0xfff6(r4)
    47dc:	84 93 f6 ff 	tst	-10(r4)	;0xfff6(r4)
    47e0:	d1 37       	jge	$-92     	;abs 0x4784
			invSubCell(state);
			AddConstants(state, i*4+j);
		}
		
	}
	AddKey(state, keyBytes, 0);
    47e2:	0d 43       	clr	r13		
    47e4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    47e8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    47ec:	b0 12 74 41 	call	#0x4174	
}
    47f0:	31 52       	add	#8,	r1	;r2 As==11
    47f2:	34 41       	pop	r4		
    47f4:	30 41       	ret			

000047f6 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    47f6:	04 12       	push	r4		
    47f8:	04 41       	mov	r1,	r4	
    47fa:	24 53       	incd	r4		
    47fc:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4800:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4804:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4808:	0d 3c       	jmp	$+28     	;abs 0x4824
    {
      for (i = 0; i<d; i++) 
    480a:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    480e:	04 3c       	jmp	$+10     	;abs 0x4818
	{
	  nop();
    4810:	03 43       	nop			
	  nop();
    4812:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4814:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4818:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    481c:	f8 ff 
    481e:	f8 2b       	jnc	$-14     	;abs 0x4810
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4820:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4824:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4828:	fa ff 
    482a:	ef 2b       	jnc	$-32     	;abs 0x480a
	{
	  nop();
	  nop();
	}
    }
}
    482c:	31 50 06 00 	add	#6,	r1	;#0x0006
    4830:	34 41       	pop	r4		
    4832:	30 41       	ret			

00004834 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4834:	04 12       	push	r4		
    4836:	04 41       	mov	r1,	r4	
    4838:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    483a:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    483e:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4840:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4844:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4848:	5f 42 1b 00 	mov.b	&0x001b,r15	
    484c:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4850:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4854:	5f 42 05 00 	mov.b	&0x0005,r15	
    4858:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    485c:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4860:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4864:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4868:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    486a:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    486e:	79 00 
  U1RCTL = 0;
    4870:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4874:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4878:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    487c:	7c 00 
  U1MCTL = U1MCTL_INIT;
    487e:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4882:	7b 00 

  delay(0x800);
    4884:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4888:	b0 12 f6 47 	call	#0x47f6	
  return 0;
    488c:	0f 43       	clr	r15		
}
    488e:	34 41       	pop	r4		
    4890:	30 41       	ret			

00004892 <uart1_putchar>:

int uart1_putchar(int c)
{
    4892:	04 12       	push	r4		
    4894:	04 41       	mov	r1,	r4	
    4896:	24 53       	incd	r4		
    4898:	21 83       	decd	r1		
    489a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    489e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48a2:	4f 4f       	mov.b	r15,	r15	
    48a4:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    48a8:	03 43       	nop			
    48aa:	5f 42 79 00 	mov.b	&0x0079,r15	
    48ae:	4f 4f       	mov.b	r15,	r15	
    48b0:	1f f3       	and	#1,	r15	;r3 As==01
    48b2:	0f 93       	tst	r15		
    48b4:	fa 27       	jz	$-10     	;abs 0x48aa
  return (unsigned char)c;
    48b6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48ba:	4f 4f       	mov.b	r15,	r15	
    48bc:	4f 4f       	mov.b	r15,	r15	
}
    48be:	21 53       	incd	r1		
    48c0:	34 41       	pop	r4		
    48c2:	30 41       	ret			

000048c4 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    48c4:	04 12       	push	r4		
    48c6:	04 41       	mov	r1,	r4	
    48c8:	24 53       	incd	r4		
    48ca:	21 83       	decd	r1		
    48cc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    48d0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48d4:	b0 12 92 48 	call	#0x4892	
}
    48d8:	21 53       	incd	r1		
    48da:	34 41       	pop	r4		
    48dc:	30 41       	ret			

000048de <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    48de:	04 12       	push	r4		
    48e0:	04 41       	mov	r1,	r4	
    48e2:	24 53       	incd	r4		
  ;
}
    48e4:	34 41       	pop	r4		
    48e6:	30 41       	ret			

000048e8 <start_decrypt>:
void
start_decrypt()
{
    48e8:	04 12       	push	r4		
    48ea:	04 41       	mov	r1,	r4	
    48ec:	24 53       	incd	r4		
  ;
}
    48ee:	34 41       	pop	r4		
    48f0:	30 41       	ret			

000048f2 <end_expe>:


void
end_expe()
{
    48f2:	04 12       	push	r4		
    48f4:	04 41       	mov	r1,	r4	
    48f6:	24 53       	incd	r4		
  ;
}
    48f8:	34 41       	pop	r4		
    48fa:	30 41       	ret			

000048fc <memcpy>:
    48fc:	0b 12       	push	r11		
    48fe:	0a 12       	push	r10		
    4900:	09 12       	push	r9		
    4902:	08 12       	push	r8		
    4904:	07 12       	push	r7		
    4906:	0d 93       	tst	r13		
    4908:	70 24       	jz	$+226    	;abs 0x49ea
    490a:	0f 9e       	cmp	r14,	r15	
    490c:	6e 24       	jz	$+222    	;abs 0x49ea
    490e:	34 2c       	jc	$+106    	;abs 0x4978
    4910:	0c 4e       	mov	r14,	r12	
    4912:	0c df       	bis	r15,	r12	
    4914:	1c f3       	and	#1,	r12	;r3 As==01
    4916:	1b 24       	jz	$+56     	;abs 0x494e
    4918:	0c 4e       	mov	r14,	r12	
    491a:	0c ef       	xor	r15,	r12	
    491c:	1c f3       	and	#1,	r12	;r3 As==01
    491e:	07 20       	jnz	$+16     	;abs 0x492e
    4920:	2d 93       	cmp	#2,	r13	;r3 As==10
    4922:	07 28       	jnc	$+16     	;abs 0x4932
    4924:	0b 4e       	mov	r14,	r11	
    4926:	1b f3       	and	#1,	r11	;r3 As==01
    4928:	2c 43       	mov	#2,	r12	;r3 As==10
    492a:	0c 8b       	sub	r11,	r12	
    492c:	03 3c       	jmp	$+8      	;abs 0x4934
    492e:	0c 4d       	mov	r13,	r12	
    4930:	01 3c       	jmp	$+4      	;abs 0x4934
    4932:	1c 43       	mov	#1,	r12	;r3 As==01
    4934:	0d 8c       	sub	r12,	r13	
    4936:	0a 4c       	mov	r12,	r10	
    4938:	09 4e       	mov	r14,	r9	
    493a:	0b 4f       	mov	r15,	r11	
    493c:	fb 49 00 00 	mov.b	@r9+,	0(r11)	;0x0000(r11)
    4940:	1b 53       	inc	r11		
    4942:	3a 53       	add	#-1,	r10	;r3 As==11
    4944:	fb 23       	jnz	$-8      	;abs 0x493c
    4946:	0a 4f       	mov	r15,	r10	
    4948:	0a 5c       	add	r12,	r10	
    494a:	0e 5c       	add	r12,	r14	
    494c:	01 3c       	jmp	$+4      	;abs 0x4950
    494e:	0a 4f       	mov	r15,	r10	
    4950:	0b 4d       	mov	r13,	r11	
    4952:	12 c3       	clrc			
    4954:	0b 10       	rrc	r11		
    4956:	0b 24       	jz	$+24     	;abs 0x496e
    4958:	09 4b       	mov	r11,	r9	
    495a:	08 4e       	mov	r14,	r8	
    495c:	0c 4a       	mov	r10,	r12	
    495e:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    4962:	2c 53       	incd	r12		
    4964:	39 53       	add	#-1,	r9	;r3 As==11
    4966:	fb 23       	jnz	$-8      	;abs 0x495e
    4968:	0b 5b       	rla	r11		
    496a:	0e 5b       	add	r11,	r14	
    496c:	0a 5b       	add	r11,	r10	
    496e:	1d f3       	and	#1,	r13	;r3 As==01
    4970:	3c 24       	jz	$+122    	;abs 0x49ea
    4972:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    4976:	39 3c       	jmp	$+116    	;abs 0x49ea
    4978:	0e 5d       	add	r13,	r14	
    497a:	0c 4f       	mov	r15,	r12	
    497c:	0c 5d       	add	r13,	r12	
    497e:	0b 4c       	mov	r12,	r11	
    4980:	0b de       	bis	r14,	r11	
    4982:	1b f3       	and	#1,	r11	;r3 As==01
    4984:	1b 24       	jz	$+56     	;abs 0x49bc
    4986:	0b 4c       	mov	r12,	r11	
    4988:	0b ee       	xor	r14,	r11	
    498a:	1b f3       	and	#1,	r11	;r3 As==01
    498c:	06 20       	jnz	$+14     	;abs 0x499a
    498e:	3d 90 03 00 	cmp	#3,	r13	;#0x0003
    4992:	03 28       	jnc	$+8      	;abs 0x499a
    4994:	0b 4e       	mov	r14,	r11	
    4996:	1b f3       	and	#1,	r11	;r3 As==01
    4998:	01 3c       	jmp	$+4      	;abs 0x499c
    499a:	0b 4d       	mov	r13,	r11	
    499c:	0d 8b       	sub	r11,	r13	
    499e:	09 4e       	mov	r14,	r9	
    49a0:	0a 4c       	mov	r12,	r10	
    49a2:	08 4b       	mov	r11,	r8	
    49a4:	08 8c       	sub	r12,	r8	
    49a6:	3a 53       	add	#-1,	r10	;r3 As==11
    49a8:	39 53       	add	#-1,	r9	;r3 As==11
    49aa:	ea 49 00 00 	mov.b	@r9,	0(r10)	;0x0000(r10)
    49ae:	07 4a       	mov	r10,	r7	
    49b0:	07 58       	add	r8,	r7	
    49b2:	f9 23       	jnz	$-12     	;abs 0x49a6
    49b4:	3b e3       	inv	r11		
    49b6:	1b 53       	inc	r11		
    49b8:	0c 5b       	add	r11,	r12	
    49ba:	0e 5b       	add	r11,	r14	
    49bc:	0b 4d       	mov	r13,	r11	
    49be:	12 c3       	clrc			
    49c0:	0b 10       	rrc	r11		
    49c2:	0e 24       	jz	$+30     	;abs 0x49e0
    49c4:	0a 4b       	mov	r11,	r10	
    49c6:	08 4e       	mov	r14,	r8	
    49c8:	09 4c       	mov	r12,	r9	
    49ca:	28 83       	decd	r8		
    49cc:	29 83       	decd	r9		
    49ce:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    49d2:	3a 53       	add	#-1,	r10	;r3 As==11
    49d4:	fa 23       	jnz	$-10     	;abs 0x49ca
    49d6:	0a 8b       	sub	r11,	r10	
    49d8:	0b 4a       	mov	r10,	r11	
    49da:	0b 5b       	rla	r11		
    49dc:	0e 5b       	add	r11,	r14	
    49de:	0c 5b       	add	r11,	r12	
    49e0:	1d f3       	and	#1,	r13	;r3 As==01
    49e2:	03 24       	jz	$+8      	;abs 0x49ea
    49e4:	dc 4e ff ff 	mov.b	-1(r14),-1(r12)	;0xffff(r14), 0xffff(r12)
    49e8:	ff ff 
    49ea:	37 41       	pop	r7		
    49ec:	38 41       	pop	r8		
    49ee:	39 41       	pop	r9		
    49f0:	3a 41       	pop	r10		
    49f2:	3b 41       	pop	r11		
    49f4:	30 41       	ret			

000049f6 <_unexpected_>:
    49f6:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	e0 40 e0 40 e0 40 e0 40 e0 40 e0 40 e0 40 e0 40     .@.@.@.@.@.@.@.@
    fff0:	e0 40 e0 40 e0 40 e0 40 e0 40 e0 40 e0 40 00 40     .@.@.@.@.@.@.@.@
