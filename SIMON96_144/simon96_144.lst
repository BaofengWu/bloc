
simon96_144.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .data	00000000 .data
0000113e l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 simon96_144.c
00001100 l     O .data	0000003e z
00004148 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004c26 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
0000003e g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
00004148  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
00004148  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
00004788 g     F .text	000003d0 Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004c60 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004b96 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
00004142  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
00004148  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004c54 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000414c g     F .text	00000282 KeyExpansion
0000019e g       *ABS*	00000000 __TBCCR6
00004148  w      .text	00000000 __isr_5
00004c60 g       *ABS*	00000000 __data_load_start
00004148 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
00004148  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
00004148  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
0000113e g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
00004148  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004148  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004c5e  w      .text	00000000 _unexpected_
00004148  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
00004148  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004bf4 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
00004148 g       .text	00000000 __ctors_start
00004148  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
0000113e g       .data	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	00000104 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
00004148  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004b58 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
00004148  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
00004148 g       .text	00000000 __dtors_start
00004148  w      .text	00000000 __isr_6
00004148 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
00004148  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
0000113e g       .data	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001140 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004c40 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
00004142  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004c4a g     F .text	0000000a start_decrypt
00001100 g       .data	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
000043ce g     F .text	000003ba Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 3e 11 	mov	r5,	&0x113e	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 3e 11 	mov	&0x113e,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 60 4c 	mov	19552(r15),4352(r15);0x4c60(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 3e 11 	mov	&0x113e,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 3e 11 	mov.b	#0,	4414(r15);r3 As==00, 0x113e(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
        crypt[0] = tmp;
    }
}

int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 30 fe 	add	#-464,	r1	;#0xfe30

    u64 text[2];
    text[0] = 0x746168742074;
    4046:	b4 40 74 20 	mov	#8308,	-466(r4);#0x2074, 0xfe2e(r4)
    404a:	2e fe 
    404c:	b4 40 74 68 	mov	#26740,	-464(r4);#0x6874, 0xfe30(r4)
    4050:	30 fe 
    4052:	b4 40 61 74 	mov	#29793,	-462(r4);#0x7461, 0xfe32(r4)
    4056:	32 fe 
    4058:	84 43 34 fe 	mov	#0,	-460(r4);r3 As==00, 0xfe34(r4)
    text[1] = 0x73756420666f;
    405c:	b4 40 6f 66 	mov	#26223,	-458(r4);#0x666f, 0xfe36(r4)
    4060:	36 fe 
    4062:	b4 40 20 64 	mov	#25632,	-456(r4);#0x6420, 0xfe38(r4)
    4066:	38 fe 
    4068:	b4 40 75 73 	mov	#29557,	-454(r4);#0x7375, 0xfe3a(r4)
    406c:	3a fe 
    406e:	84 43 3c fe 	mov	#0,	-452(r4);r3 As==00, 0xfe3c(r4)
    u64 crypt[2] = {0};
    4072:	0f 44       	mov	r4,	r15	
    4074:	3f 50 3e fe 	add	#-450,	r15	;#0xfe3e
    4078:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    407c:	2f 53       	incd	r15		
    407e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4082:	2f 53       	incd	r15		
    4084:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4088:	2f 53       	incd	r15		
    408a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    408e:	2f 53       	incd	r15		
    4090:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4094:	2f 53       	incd	r15		
    4096:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    409a:	2f 53       	incd	r15		
    409c:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a0:	2f 53       	incd	r15		
    40a2:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a6:	2f 53       	incd	r15		
    u64 k[54];
    k[2] = 0x151413121110;
    40a8:	b4 40 10 11 	mov	#4368,	-418(r4);#0x1110, 0xfe5e(r4)
    40ac:	5e fe 
    40ae:	b4 40 12 13 	mov	#4882,	-416(r4);#0x1312, 0xfe60(r4)
    40b2:	60 fe 
    40b4:	b4 40 14 15 	mov	#5396,	-414(r4);#0x1514, 0xfe62(r4)
    40b8:	62 fe 
    40ba:	84 43 64 fe 	mov	#0,	-412(r4);r3 As==00, 0xfe64(r4)
    k[1] = 0x0d0c0b0a0908;
    40be:	b4 40 08 09 	mov	#2312,	-426(r4);#0x0908, 0xfe56(r4)
    40c2:	56 fe 
    40c4:	b4 40 0a 0b 	mov	#2826,	-424(r4);#0x0b0a, 0xfe58(r4)
    40c8:	58 fe 
    40ca:	b4 40 0c 0d 	mov	#3340,	-422(r4);#0x0d0c, 0xfe5a(r4)
    40ce:	5a fe 
    40d0:	84 43 5c fe 	mov	#0,	-420(r4);r3 As==00, 0xfe5c(r4)
    k[0] = 0x050403020100;
    40d4:	b4 40 00 01 	mov	#256,	-434(r4);#0x0100, 0xfe4e(r4)
    40d8:	4e fe 
    40da:	b4 40 02 03 	mov	#770,	-432(r4);#0x0302, 0xfe50(r4)
    40de:	50 fe 
    40e0:	b4 40 04 05 	mov	#1284,	-430(r4);#0x0504, 0xfe52(r4)
    40e4:	52 fe 
    40e6:	84 43 54 fe 	mov	#0,	-428(r4);r3 As==00, 0xfe54(r4)

	START_ENCRYPT();
    40ea:	b0 12 40 4c 	call	#0x4c40	
    KeyExpansion ( k );
    40ee:	0f 44       	mov	r4,	r15	
    40f0:	3f 50 4e fe 	add	#-434,	r15	;#0xfe4e
    40f4:	b0 12 4c 41 	call	#0x414c	
    Encrypt ( text, crypt, k );
    40f8:	0e 44       	mov	r4,	r14	
    40fa:	3e 50 4e fe 	add	#-434,	r14	;#0xfe4e
    40fe:	0f 44       	mov	r4,	r15	
    4100:	3f 50 3e fe 	add	#-450,	r15	;#0xfe3e
    4104:	0d 4e       	mov	r14,	r13	
    4106:	0e 4f       	mov	r15,	r14	
    4108:	0f 44       	mov	r4,	r15	
    410a:	3f 50 2e fe 	add	#-466,	r15	;#0xfe2e
    410e:	b0 12 ce 43 	call	#0x43ce	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0]&0xffffffffffff, crypt[1]&0xffffffffffff);
    START_DECRYPT();
    4112:	b0 12 4a 4c 	call	#0x4c4a	
	KeyExpansion ( k );
    4116:	0f 44       	mov	r4,	r15	
    4118:	3f 50 4e fe 	add	#-434,	r15	;#0xfe4e
    411c:	b0 12 4c 41 	call	#0x414c	
	Decrypt ( crypt, text, k );
    4120:	0e 44       	mov	r4,	r14	
    4122:	3e 50 4e fe 	add	#-434,	r14	;#0xfe4e
    4126:	0f 44       	mov	r4,	r15	
    4128:	3f 50 3e fe 	add	#-450,	r15	;#0xfe3e
    412c:	0d 4e       	mov	r14,	r13	
    412e:	0e 44       	mov	r4,	r14	
    4130:	3e 50 2e fe 	add	#-466,	r14	;#0xfe2e
    4134:	b0 12 88 47 	call	#0x4788	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	END_EXPE();
    4138:	b0 12 54 4c 	call	#0x4c54	

    return 0;
    413c:	0f 43       	clr	r15		
}
    413e:	31 50 d0 01 	add	#464,	r1	;#0x01d0

00004142 <__stop_progExec__>:
    4142:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    4146:	fd 3f       	jmp	$-4      	;abs 0x4142

00004148 <__ctors_end>:
    4148:	30 40 5e 4c 	br	#0x4c5e	

0000414c <KeyExpansion>:

#define ROTATE_LEFT_48(x,bits) ( (x << bits) | ((x & 0xffffffffffff) >> (48-bits)) )
#define ROTATE_RIGHT_48(x,bits) ( ((x & 0xffffffffffff) >> bits) | (x << (48-bits)) )

void KeyExpansion ( u64 k[] )
{
    414c:	0b 12       	push	r11		
    414e:	0a 12       	push	r10		
    4150:	09 12       	push	r9		
    4152:	08 12       	push	r8		
    4154:	07 12       	push	r7		
    4156:	06 12       	push	r6		
    4158:	04 12       	push	r4		
    415a:	04 41       	mov	r1,	r4	
    415c:	34 50 0e 00 	add	#14,	r4	;#0x000e
    4160:	31 50 d8 ff 	add	#-40,	r1	;#0xffd8
    4164:	84 4f d4 ff 	mov	r15,	-44(r4)	;0xffd4(r4)
    u8 i;
    u64 tmp = 0;
    4168:	84 43 cc ff 	mov	#0,	-52(r4)	;r3 As==00, 0xffcc(r4)
    416c:	84 43 ce ff 	mov	#0,	-50(r4)	;r3 As==00, 0xffce(r4)
    4170:	84 43 d0 ff 	mov	#0,	-48(r4)	;r3 As==00, 0xffd0(r4)
    4174:	84 43 d2 ff 	mov	#0,	-46(r4)	;r3 As==00, 0xffd2(r4)
    for ( i=3 ; i<54 ; i++ )
    4178:	f4 40 03 00 	mov.b	#3,	-54(r4)	;#0x0003, 0xffca(r4)
    417c:	ca ff 
    417e:	30 40 ae 43 	br	#0x43ae	
    {
        tmp = ROTATE_RIGHT_48(k[i-1],3);
    4182:	5f 44 ca ff 	mov.b	-54(r4),r15	;0xffca(r4)
    4186:	3f 53       	add	#-1,	r15	;r3 As==11
    4188:	0f 5f       	rla	r15		
    418a:	0f 5f       	rla	r15		
    418c:	0f 5f       	rla	r15		
    418e:	1f 54 d4 ff 	add	-44(r4),r15	;0xffd4(r4)
    4192:	2c 4f       	mov	@r15,	r12	
    4194:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4198:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    419c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    41a0:	3c f3       	and	#-1,	r12	;r3 As==11
    41a2:	3d f3       	and	#-1,	r13	;r3 As==11
    41a4:	3e f3       	and	#-1,	r14	;r3 As==11
    41a6:	0f f3       	and	#0,	r15	;r3 As==00
    41a8:	08 4c       	mov	r12,	r8	
    41aa:	09 4d       	mov	r13,	r9	
    41ac:	0a 4e       	mov	r14,	r10	
    41ae:	0b 4f       	mov	r15,	r11	
    41b0:	12 c3       	clrc			
    41b2:	0b 10       	rrc	r11		
    41b4:	0a 10       	rrc	r10		
    41b6:	09 10       	rrc	r9		
    41b8:	08 10       	rrc	r8		
    41ba:	12 c3       	clrc			
    41bc:	0b 10       	rrc	r11		
    41be:	0a 10       	rrc	r10		
    41c0:	09 10       	rrc	r9		
    41c2:	08 10       	rrc	r8		
    41c4:	12 c3       	clrc			
    41c6:	0b 10       	rrc	r11		
    41c8:	0a 10       	rrc	r10		
    41ca:	09 10       	rrc	r9		
    41cc:	08 10       	rrc	r8		
    41ce:	5f 44 ca ff 	mov.b	-54(r4),r15	;0xffca(r4)
    41d2:	3f 53       	add	#-1,	r15	;r3 As==11
    41d4:	0f 5f       	rla	r15		
    41d6:	0f 5f       	rla	r15		
    41d8:	0f 5f       	rla	r15		
    41da:	1f 54 d4 ff 	add	-44(r4),r15	;0xffd4(r4)
    41de:	2c 4f       	mov	@r15,	r12	
    41e0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41e4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    41e8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    41ec:	84 4c ee ff 	mov	r12,	-18(r4)	;0xffee(r4)
    41f0:	84 4d f0 ff 	mov	r13,	-16(r4)	;0xfff0(r4)
    41f4:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfff0(r4)
    41f8:	1d 44 ee ff 	mov	-18(r4),r13	;0xffee(r4)
    41fc:	4c ed       	xor.b	r13,	r12	
    41fe:	0c ed       	xor	r13,	r12	
    4200:	8c 10       	swpb	r12		
    4202:	84 4c f0 ff 	mov	r12,	-16(r4)	;0xfff0(r4)
    4206:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    420a:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    420e:	94 10 ee ff 	swpb	-18(r4)	;0xffee(r4)
    4212:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    4216:	ee ff 
    4218:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    421c:	f0 ff 
    421e:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    4222:	ee ff 
    4224:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    4228:	f0 ff 
    422a:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    422e:	ee ff 
    4230:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    4234:	f0 ff 
    4236:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    423a:	ee ff 
    423c:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    4240:	f0 ff 
    4242:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    4246:	ee ff 
    4248:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    424c:	f0 ff 
    424e:	1c 44 ee ff 	mov	-18(r4),r12	;0xffee(r4)
    4252:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    4256:	0e 43       	clr	r14		
    4258:	0f 43       	clr	r15		
    425a:	84 4e d6 ff 	mov	r14,	-42(r4)	;0xffd6(r4)
    425e:	84 4f d8 ff 	mov	r15,	-40(r4)	;0xffd8(r4)
    4262:	84 4c da ff 	mov	r12,	-38(r4)	;0xffda(r4)
    4266:	84 4d dc ff 	mov	r13,	-36(r4)	;0xffdc(r4)
    426a:	1c 44 d6 ff 	mov	-42(r4),r12	;0xffd6(r4)
    426e:	1d 44 d8 ff 	mov	-40(r4),r13	;0xffd8(r4)
    4272:	1e 44 da ff 	mov	-38(r4),r14	;0xffda(r4)
    4276:	1f 44 dc ff 	mov	-36(r4),r15	;0xffdc(r4)
    427a:	0c d8       	bis	r8,	r12	
    427c:	0d d9       	bis	r9,	r13	
    427e:	0e da       	bis	r10,	r14	
    4280:	0f db       	bis	r11,	r15	
    4282:	84 4c cc ff 	mov	r12,	-52(r4)	;0xffcc(r4)
    4286:	84 4d ce ff 	mov	r13,	-50(r4)	;0xffce(r4)
    428a:	84 4e d0 ff 	mov	r14,	-48(r4)	;0xffd0(r4)
    428e:	84 4f d2 ff 	mov	r15,	-46(r4)	;0xffd2(r4)
        tmp = tmp ^ ROTATE_RIGHT_48(tmp,1);
    4292:	1c 44 cc ff 	mov	-52(r4),r12	;0xffcc(r4)
    4296:	1d 44 ce ff 	mov	-50(r4),r13	;0xffce(r4)
    429a:	1e 44 d0 ff 	mov	-48(r4),r14	;0xffd0(r4)
    429e:	1f 44 d2 ff 	mov	-46(r4),r15	;0xffd2(r4)
    42a2:	3c f3       	and	#-1,	r12	;r3 As==11
    42a4:	3d f3       	and	#-1,	r13	;r3 As==11
    42a6:	3e f3       	and	#-1,	r14	;r3 As==11
    42a8:	0f f3       	and	#0,	r15	;r3 As==00
    42aa:	12 c3       	clrc			
    42ac:	0f 10       	rrc	r15		
    42ae:	0e 10       	rrc	r14		
    42b0:	0d 10       	rrc	r13		
    42b2:	0c 10       	rrc	r12		
    42b4:	16 44 cc ff 	mov	-52(r4),r6	;0xffcc(r4)
    42b8:	17 44 ce ff 	mov	-50(r4),r7	;0xffce(r4)
    42bc:	47 e6       	xor.b	r6,	r7	
    42be:	07 e6       	xor	r6,	r7	
    42c0:	87 10       	swpb	r7		
    42c2:	46 46       	mov.b	r6,	r6	
    42c4:	86 10       	swpb	r6		
    42c6:	06 56       	rla	r6		
    42c8:	07 67       	rlc	r7		
    42ca:	06 56       	rla	r6		
    42cc:	07 67       	rlc	r7		
    42ce:	06 56       	rla	r6		
    42d0:	07 67       	rlc	r7		
    42d2:	06 56       	rla	r6		
    42d4:	07 67       	rlc	r7		
    42d6:	06 56       	rla	r6		
    42d8:	07 67       	rlc	r7		
    42da:	06 56       	rla	r6		
    42dc:	07 67       	rlc	r7		
    42de:	06 56       	rla	r6		
    42e0:	07 67       	rlc	r7		
    42e2:	08 46       	mov	r6,	r8	
    42e4:	09 47       	mov	r7,	r9	
    42e6:	0a 43       	clr	r10		
    42e8:	0b 43       	clr	r11		
    42ea:	84 4a de ff 	mov	r10,	-34(r4)	;0xffde(r4)
    42ee:	84 4b e0 ff 	mov	r11,	-32(r4)	;0xffe0(r4)
    42f2:	84 48 e2 ff 	mov	r8,	-30(r4)	;0xffe2(r4)
    42f6:	84 49 e4 ff 	mov	r9,	-28(r4)	;0xffe4(r4)
    42fa:	1c d4 de ff 	bis	-34(r4),r12	;0xffde(r4)
    42fe:	1d d4 e0 ff 	bis	-32(r4),r13	;0xffe0(r4)
    4302:	1e d4 e2 ff 	bis	-30(r4),r14	;0xffe2(r4)
    4306:	1f d4 e4 ff 	bis	-28(r4),r15	;0xffe4(r4)
    430a:	84 ec cc ff 	xor	r12,	-52(r4)	;0xffcc(r4)
    430e:	84 ed ce ff 	xor	r13,	-50(r4)	;0xffce(r4)
    4312:	84 ee d0 ff 	xor	r14,	-48(r4)	;0xffd0(r4)
    4316:	84 ef d2 ff 	xor	r15,	-46(r4)	;0xffd2(r4)
        k[i] = (~k[i-3] ^ tmp ^ z[(i-3)] ^ 3);
    431a:	5f 44 ca ff 	mov.b	-54(r4),r15	;0xffca(r4)
    431e:	0f 5f       	rla	r15		
    4320:	0f 5f       	rla	r15		
    4322:	0f 5f       	rla	r15		
    4324:	1a 44 d4 ff 	mov	-44(r4),r10	;0xffd4(r4)
    4328:	0a 5f       	add	r15,	r10	
    432a:	5f 44 ca ff 	mov.b	-54(r4),r15	;0xffca(r4)
    432e:	3f 50 fd ff 	add	#-3,	r15	;#0xfffd
    4332:	0f 5f       	rla	r15		
    4334:	0f 5f       	rla	r15		
    4336:	0f 5f       	rla	r15		
    4338:	1f 54 d4 ff 	add	-44(r4),r15	;0xffd4(r4)
    433c:	2c 4f       	mov	@r15,	r12	
    433e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4342:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4346:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    434a:	3c e3       	inv	r12		
    434c:	3d e3       	inv	r13		
    434e:	3e e3       	inv	r14		
    4350:	3f e3       	inv	r15		
    4352:	1c e4 cc ff 	xor	-52(r4),r12	;0xffcc(r4)
    4356:	1d e4 ce ff 	xor	-50(r4),r13	;0xffce(r4)
    435a:	1e e4 d0 ff 	xor	-48(r4),r14	;0xffd0(r4)
    435e:	1f e4 d2 ff 	xor	-46(r4),r15	;0xffd2(r4)
    4362:	5b 44 ca ff 	mov.b	-54(r4),r11	;0xffca(r4)
    4366:	3b 50 fd ff 	add	#-3,	r11	;#0xfffd
    436a:	5b 4b 00 11 	mov.b	4352(r11),r11	;0x1100(r11)
    436e:	4b 4b       	mov.b	r11,	r11	
    4370:	84 4b e6 ff 	mov	r11,	-26(r4)	;0xffe6(r4)
    4374:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    4378:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
    437c:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    4380:	1c e4 e6 ff 	xor	-26(r4),r12	;0xffe6(r4)
    4384:	1d e4 e8 ff 	xor	-24(r4),r13	;0xffe8(r4)
    4388:	1e e4 ea ff 	xor	-22(r4),r14	;0xffea(r4)
    438c:	1f e4 ec ff 	xor	-20(r4),r15	;0xffec(r4)
    4390:	3c e0 03 00 	xor	#3,	r12	;#0x0003
    4394:	0d e3       	xor	#0,	r13	;r3 As==00
    4396:	0e e3       	xor	#0,	r14	;r3 As==00
    4398:	0f e3       	xor	#0,	r15	;r3 As==00
    439a:	8a 4c 00 00 	mov	r12,	0(r10)	;0x0000(r10)
    439e:	8a 4d 02 00 	mov	r13,	2(r10)	;0x0002(r10)
    43a2:	8a 4e 04 00 	mov	r14,	4(r10)	;0x0004(r10)
    43a6:	8a 4f 06 00 	mov	r15,	6(r10)	;0x0006(r10)

void KeyExpansion ( u64 k[] )
{
    u8 i;
    u64 tmp = 0;
    for ( i=3 ; i<54 ; i++ )
    43aa:	d4 53 ca ff 	inc.b	-54(r4)	;0xffca(r4)
    43ae:	f4 90 36 00 	cmp.b	#54,	-54(r4)	;#0x0036, 0xffca(r4)
    43b2:	ca ff 
    43b4:	02 2c       	jc	$+6      	;abs 0x43ba
    43b6:	30 40 82 41 	br	#0x4182	
    {
        tmp = ROTATE_RIGHT_48(k[i-1],3);
        tmp = tmp ^ ROTATE_RIGHT_48(tmp,1);
        k[i] = (~k[i-3] ^ tmp ^ z[(i-3)] ^ 3);
    }
}
    43ba:	31 50 28 00 	add	#40,	r1	;#0x0028
    43be:	34 41       	pop	r4		
    43c0:	36 41       	pop	r6		
    43c2:	37 41       	pop	r7		
    43c4:	38 41       	pop	r8		
    43c6:	39 41       	pop	r9		
    43c8:	3a 41       	pop	r10		
    43ca:	3b 41       	pop	r11		
    43cc:	30 41       	ret			

000043ce <Encrypt>:

void Encrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    43ce:	0b 12       	push	r11		
    43d0:	0a 12       	push	r10		
    43d2:	09 12       	push	r9		
    43d4:	08 12       	push	r8		
    43d6:	07 12       	push	r7		
    43d8:	06 12       	push	r6		
    43da:	04 12       	push	r4		
    43dc:	04 41       	mov	r1,	r4	
    43de:	34 50 0e 00 	add	#14,	r4	;#0x000e
    43e2:	31 50 b8 ff 	add	#-72,	r1	;#0xffb8
    43e6:	84 4f b4 ff 	mov	r15,	-76(r4)	;0xffb4(r4)
    43ea:	84 4e b6 ff 	mov	r14,	-74(r4)	;0xffb6(r4)
    43ee:	84 4d b8 ff 	mov	r13,	-72(r4)	;0xffb8(r4)
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    43f2:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    43f6:	2c 4f       	mov	@r15,	r12	
    43f8:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    43fc:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4400:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4404:	1b 44 b6 ff 	mov	-74(r4),r11	;0xffb6(r4)
    4408:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    440c:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4410:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4414:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    4418:	1b 44 b6 ff 	mov	-74(r4),r11	;0xffb6(r4)
    441c:	3b 52       	add	#8,	r11	;r2 As==11
    441e:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4422:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    4426:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    442a:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    442e:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    4432:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4436:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    443a:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    443e:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<54 ; i++ )
    4442:	c4 43 aa ff 	mov.b	#0,	-86(r4)	;r3 As==00, 0xffaa(r4)
    4446:	30 40 68 47 	br	#0x4768	
    {
        tmp = crypt[0];
    444a:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    444e:	a4 4f ac ff 	mov	@r15,	-84(r4)	;0xffac(r4)
    4452:	94 4f 02 00 	mov	2(r15),	-82(r4)	;0x0002(r15), 0xffae(r4)
    4456:	ae ff 
    4458:	94 4f 04 00 	mov	4(r15),	-80(r4)	;0x0004(r15), 0xffb0(r4)
    445c:	b0 ff 
    445e:	94 4f 06 00 	mov	6(r15),	-78(r4)	;0x0006(r15), 0xffb2(r4)
    4462:	b2 ff 
        crypt[0] = crypt[1] ^ ((ROTATE_LEFT_48(crypt[0],1)) & (ROTATE_LEFT_48(crypt[0],8))) ^ (ROTATE_LEFT_48(crypt[0],2)) ^ key[i];
    4464:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4468:	3f 52       	add	#8,	r15	;r2 As==11
    446a:	a4 4f ba ff 	mov	@r15,	-70(r4)	;0xffba(r4)
    446e:	94 4f 02 00 	mov	2(r15),	-68(r4)	;0x0002(r15), 0xffbc(r4)
    4472:	bc ff 
    4474:	94 4f 04 00 	mov	4(r15),	-66(r4)	;0x0004(r15), 0xffbe(r4)
    4478:	be ff 
    447a:	94 4f 06 00 	mov	6(r15),	-64(r4)	;0x0006(r15), 0xffc0(r4)
    447e:	c0 ff 
    4480:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4484:	2c 4f       	mov	@r15,	r12	
    4486:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    448a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    448e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4492:	08 4c       	mov	r12,	r8	
    4494:	09 4d       	mov	r13,	r9	
    4496:	0a 4e       	mov	r14,	r10	
    4498:	0b 4f       	mov	r15,	r11	
    449a:	08 58       	rla	r8		
    449c:	09 69       	rlc	r9		
    449e:	0a 6a       	rlc	r10		
    44a0:	0b 6b       	rlc	r11		
    44a2:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    44a6:	2c 4f       	mov	@r15,	r12	
    44a8:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    44ac:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    44b0:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    44b4:	3c f3       	and	#-1,	r12	;r3 As==11
    44b6:	3d f3       	and	#-1,	r13	;r3 As==11
    44b8:	3e f3       	and	#-1,	r14	;r3 As==11
    44ba:	0f f3       	and	#0,	r15	;r3 As==00
    44bc:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
    44c0:	84 4f ec ff 	mov	r15,	-20(r4)	;0xffec(r4)
    44c4:	94 10 ea ff 	swpb	-22(r4)	;0xffea(r4)
    44c8:	1c 44 ea ff 	mov	-22(r4),r12	;0xffea(r4)
    44cc:	1d 44 ec ff 	mov	-20(r4),r13	;0xffec(r4)
    44d0:	8d 10       	swpb	r13		
    44d2:	4c ed       	xor.b	r13,	r12	
    44d4:	0c ed       	xor	r13,	r12	
    44d6:	84 4d ec ff 	mov	r13,	-20(r4)	;0xffec(r4)
    44da:	84 4c ea ff 	mov	r12,	-22(r4)	;0xffea(r4)
    44de:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    44e2:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
    44e6:	12 c3       	clrc			
    44e8:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    44ec:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    44f0:	12 c3       	clrc			
    44f2:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    44f6:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    44fa:	12 c3       	clrc			
    44fc:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    4500:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    4504:	12 c3       	clrc			
    4506:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    450a:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    450e:	12 c3       	clrc			
    4510:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    4514:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    4518:	12 c3       	clrc			
    451a:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    451e:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    4522:	12 c3       	clrc			
    4524:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    4528:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    452c:	1c 44 ea ff 	mov	-22(r4),r12	;0xffea(r4)
    4530:	1d 44 ec ff 	mov	-20(r4),r13	;0xffec(r4)
    4534:	0e 43       	clr	r14		
    4536:	0f 43       	clr	r15		
    4538:	84 4c c2 ff 	mov	r12,	-62(r4)	;0xffc2(r4)
    453c:	84 4d c4 ff 	mov	r13,	-60(r4)	;0xffc4(r4)
    4540:	84 4e c6 ff 	mov	r14,	-58(r4)	;0xffc6(r4)
    4544:	84 4f c8 ff 	mov	r15,	-56(r4)	;0xffc8(r4)
    4548:	1c 44 c2 ff 	mov	-62(r4),r12	;0xffc2(r4)
    454c:	1d 44 c4 ff 	mov	-60(r4),r13	;0xffc4(r4)
    4550:	1e 44 c6 ff 	mov	-58(r4),r14	;0xffc6(r4)
    4554:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    4558:	0c d8       	bis	r8,	r12	
    455a:	0d d9       	bis	r9,	r13	
    455c:	0e da       	bis	r10,	r14	
    455e:	0f db       	bis	r11,	r15	
    4560:	84 4c ca ff 	mov	r12,	-54(r4)	;0xffca(r4)
    4564:	84 4d cc ff 	mov	r13,	-52(r4)	;0xffcc(r4)
    4568:	84 4e ce ff 	mov	r14,	-50(r4)	;0xffce(r4)
    456c:	84 4f d0 ff 	mov	r15,	-48(r4)	;0xffd0(r4)
    4570:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4574:	2c 4f       	mov	@r15,	r12	
    4576:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    457a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    457e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4582:	08 4c       	mov	r12,	r8	
    4584:	09 4d       	mov	r13,	r9	
    4586:	0a 4e       	mov	r14,	r10	
    4588:	0b 4f       	mov	r15,	r11	
    458a:	4b ea       	xor.b	r10,	r11	
    458c:	0b ea       	xor	r10,	r11	
    458e:	8b 10       	swpb	r11		
    4590:	4a e9       	xor.b	r9,	r10	
    4592:	0a e9       	xor	r9,	r10	
    4594:	8a 10       	swpb	r10		
    4596:	49 e8       	xor.b	r8,	r9	
    4598:	09 e8       	xor	r8,	r9	
    459a:	89 10       	swpb	r9		
    459c:	48 48       	mov.b	r8,	r8	
    459e:	88 10       	swpb	r8		
    45a0:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    45a4:	2c 4f       	mov	@r15,	r12	
    45a6:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    45aa:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    45ae:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    45b2:	3c f3       	and	#-1,	r12	;r3 As==11
    45b4:	3d f3       	and	#-1,	r13	;r3 As==11
    45b6:	3e f3       	and	#-1,	r14	;r3 As==11
    45b8:	0f f3       	and	#0,	r15	;r3 As==00
    45ba:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    45be:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    45c2:	94 10 ee ff 	swpb	-18(r4)	;0xffee(r4)
    45c6:	1d 44 ee ff 	mov	-18(r4),r13	;0xffee(r4)
    45ca:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    45ce:	8e 10       	swpb	r14		
    45d0:	4d ee       	xor.b	r14,	r13	
    45d2:	0d ee       	xor	r14,	r13	
    45d4:	84 4e f0 ff 	mov	r14,	-16(r4)	;0xfff0(r4)
    45d8:	84 4d ee ff 	mov	r13,	-18(r4)	;0xffee(r4)
    45dc:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    45e0:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    45e4:	1c 44 ee ff 	mov	-18(r4),r12	;0xffee(r4)
    45e8:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    45ec:	0e 43       	clr	r14		
    45ee:	0f 43       	clr	r15		
    45f0:	84 4c d2 ff 	mov	r12,	-46(r4)	;0xffd2(r4)
    45f4:	84 4d d4 ff 	mov	r13,	-44(r4)	;0xffd4(r4)
    45f8:	84 4e d6 ff 	mov	r14,	-42(r4)	;0xffd6(r4)
    45fc:	84 4f d8 ff 	mov	r15,	-40(r4)	;0xffd8(r4)
    4600:	1c 44 d2 ff 	mov	-46(r4),r12	;0xffd2(r4)
    4604:	1d 44 d4 ff 	mov	-44(r4),r13	;0xffd4(r4)
    4608:	1e 44 d6 ff 	mov	-42(r4),r14	;0xffd6(r4)
    460c:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    4610:	0c d8       	bis	r8,	r12	
    4612:	0d d9       	bis	r9,	r13	
    4614:	0e da       	bis	r10,	r14	
    4616:	0f db       	bis	r11,	r15	
    4618:	1c f4 ca ff 	and	-54(r4),r12	;0xffca(r4)
    461c:	1d f4 cc ff 	and	-52(r4),r13	;0xffcc(r4)
    4620:	1e f4 ce ff 	and	-50(r4),r14	;0xffce(r4)
    4624:	1f f4 d0 ff 	and	-48(r4),r15	;0xffd0(r4)
    4628:	18 44 ba ff 	mov	-70(r4),r8	;0xffba(r4)
    462c:	19 44 bc ff 	mov	-68(r4),r9	;0xffbc(r4)
    4630:	1a 44 be ff 	mov	-66(r4),r10	;0xffbe(r4)
    4634:	1b 44 c0 ff 	mov	-64(r4),r11	;0xffc0(r4)
    4638:	08 ec       	xor	r12,	r8	
    463a:	09 ed       	xor	r13,	r9	
    463c:	0a ee       	xor	r14,	r10	
    463e:	0b ef       	xor	r15,	r11	
    4640:	84 48 da ff 	mov	r8,	-38(r4)	;0xffda(r4)
    4644:	84 49 dc ff 	mov	r9,	-36(r4)	;0xffdc(r4)
    4648:	84 4a de ff 	mov	r10,	-34(r4)	;0xffde(r4)
    464c:	84 4b e0 ff 	mov	r11,	-32(r4)	;0xffe0(r4)
    4650:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4654:	2c 4f       	mov	@r15,	r12	
    4656:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    465a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    465e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4662:	08 4c       	mov	r12,	r8	
    4664:	09 4d       	mov	r13,	r9	
    4666:	0a 4e       	mov	r14,	r10	
    4668:	0b 4f       	mov	r15,	r11	
    466a:	08 58       	rla	r8		
    466c:	09 69       	rlc	r9		
    466e:	0a 6a       	rlc	r10		
    4670:	0b 6b       	rlc	r11		
    4672:	08 58       	rla	r8		
    4674:	09 69       	rlc	r9		
    4676:	0a 6a       	rlc	r10		
    4678:	0b 6b       	rlc	r11		
    467a:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    467e:	2c 4f       	mov	@r15,	r12	
    4680:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4684:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4688:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    468c:	3c f3       	and	#-1,	r12	;r3 As==11
    468e:	3d f3       	and	#-1,	r13	;r3 As==11
    4690:	3e f3       	and	#-1,	r14	;r3 As==11
    4692:	0f f3       	and	#0,	r15	;r3 As==00
    4694:	06 4e       	mov	r14,	r6	
    4696:	07 4f       	mov	r15,	r7	
    4698:	86 10       	swpb	r6		
    469a:	87 10       	swpb	r7		
    469c:	46 e7       	xor.b	r7,	r6	
    469e:	06 e7       	xor	r7,	r6	
    46a0:	47 47       	mov.b	r7,	r7	
    46a2:	12 c3       	clrc			
    46a4:	07 10       	rrc	r7		
    46a6:	06 10       	rrc	r6		
    46a8:	12 c3       	clrc			
    46aa:	07 10       	rrc	r7		
    46ac:	06 10       	rrc	r6		
    46ae:	12 c3       	clrc			
    46b0:	07 10       	rrc	r7		
    46b2:	06 10       	rrc	r6		
    46b4:	12 c3       	clrc			
    46b6:	07 10       	rrc	r7		
    46b8:	06 10       	rrc	r6		
    46ba:	12 c3       	clrc			
    46bc:	07 10       	rrc	r7		
    46be:	06 10       	rrc	r6		
    46c0:	12 c3       	clrc			
    46c2:	07 10       	rrc	r7		
    46c4:	06 10       	rrc	r6		
    46c6:	0c 46       	mov	r6,	r12	
    46c8:	0d 47       	mov	r7,	r13	
    46ca:	0e 43       	clr	r14		
    46cc:	0f 43       	clr	r15		
    46ce:	84 4c e2 ff 	mov	r12,	-30(r4)	;0xffe2(r4)
    46d2:	84 4d e4 ff 	mov	r13,	-28(r4)	;0xffe4(r4)
    46d6:	84 4e e6 ff 	mov	r14,	-26(r4)	;0xffe6(r4)
    46da:	84 4f e8 ff 	mov	r15,	-24(r4)	;0xffe8(r4)
    46de:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffe2(r4)
    46e2:	1d 44 e4 ff 	mov	-28(r4),r13	;0xffe4(r4)
    46e6:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    46ea:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    46ee:	0c d8       	bis	r8,	r12	
    46f0:	0d d9       	bis	r9,	r13	
    46f2:	0e da       	bis	r10,	r14	
    46f4:	0f db       	bis	r11,	r15	
    46f6:	18 44 da ff 	mov	-38(r4),r8	;0xffda(r4)
    46fa:	19 44 dc ff 	mov	-36(r4),r9	;0xffdc(r4)
    46fe:	1a 44 de ff 	mov	-34(r4),r10	;0xffde(r4)
    4702:	1b 44 e0 ff 	mov	-32(r4),r11	;0xffe0(r4)
    4706:	08 ec       	xor	r12,	r8	
    4708:	09 ed       	xor	r13,	r9	
    470a:	0a ee       	xor	r14,	r10	
    470c:	0b ef       	xor	r15,	r11	
    470e:	5f 44 aa ff 	mov.b	-86(r4),r15	;0xffaa(r4)
    4712:	0f 5f       	rla	r15		
    4714:	0f 5f       	rla	r15		
    4716:	0f 5f       	rla	r15		
    4718:	1f 54 b8 ff 	add	-72(r4),r15	;0xffb8(r4)
    471c:	2c 4f       	mov	@r15,	r12	
    471e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4722:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4726:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    472a:	0c e8       	xor	r8,	r12	
    472c:	0d e9       	xor	r9,	r13	
    472e:	0e ea       	xor	r10,	r14	
    4730:	0f eb       	xor	r11,	r15	
    4732:	1b 44 b6 ff 	mov	-74(r4),r11	;0xffb6(r4)
    4736:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    473a:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    473e:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4742:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        crypt[1] = tmp;
    4746:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    474a:	3f 52       	add	#8,	r15	;r2 As==11
    474c:	9f 44 ac ff 	mov	-84(r4),0(r15)	;0xffac(r4), 0x0000(r15)
    4750:	00 00 
    4752:	9f 44 ae ff 	mov	-82(r4),2(r15)	;0xffae(r4), 0x0002(r15)
    4756:	02 00 
    4758:	9f 44 b0 ff 	mov	-80(r4),4(r15)	;0xffb0(r4), 0x0004(r15)
    475c:	04 00 
    475e:	9f 44 b2 ff 	mov	-78(r4),6(r15)	;0xffb2(r4), 0x0006(r15)
    4762:	06 00 
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<54 ; i++ )
    4764:	d4 53 aa ff 	inc.b	-86(r4)	;0xffaa(r4)
    4768:	f4 90 36 00 	cmp.b	#54,	-86(r4)	;#0x0036, 0xffaa(r4)
    476c:	aa ff 
    476e:	02 2c       	jc	$+6      	;abs 0x4774
    4770:	30 40 4a 44 	br	#0x444a	
    {
        tmp = crypt[0];
        crypt[0] = crypt[1] ^ ((ROTATE_LEFT_48(crypt[0],1)) & (ROTATE_LEFT_48(crypt[0],8))) ^ (ROTATE_LEFT_48(crypt[0],2)) ^ key[i];
        crypt[1] = tmp;
    }
}
    4774:	31 50 48 00 	add	#72,	r1	;#0x0048
    4778:	34 41       	pop	r4		
    477a:	36 41       	pop	r6		
    477c:	37 41       	pop	r7		
    477e:	38 41       	pop	r8		
    4780:	39 41       	pop	r9		
    4782:	3a 41       	pop	r10		
    4784:	3b 41       	pop	r11		
    4786:	30 41       	ret			

00004788 <Decrypt>:

void Decrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    4788:	0b 12       	push	r11		
    478a:	0a 12       	push	r10		
    478c:	09 12       	push	r9		
    478e:	08 12       	push	r8		
    4790:	07 12       	push	r7		
    4792:	06 12       	push	r6		
    4794:	05 12       	push	r5		
    4796:	04 12       	push	r4		
    4798:	04 41       	mov	r1,	r4	
    479a:	34 50 10 00 	add	#16,	r4	;#0x0010
    479e:	31 50 b8 ff 	add	#-72,	r1	;#0xffb8
    47a2:	84 4f b2 ff 	mov	r15,	-78(r4)	;0xffb2(r4)
    47a6:	84 4e b4 ff 	mov	r14,	-76(r4)	;0xffb4(r4)
    47aa:	84 4d b6 ff 	mov	r13,	-74(r4)	;0xffb6(r4)
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    47ae:	1f 44 b2 ff 	mov	-78(r4),r15	;0xffb2(r4)
    47b2:	2c 4f       	mov	@r15,	r12	
    47b4:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    47b8:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    47bc:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    47c0:	1b 44 b4 ff 	mov	-76(r4),r11	;0xffb4(r4)
    47c4:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    47c8:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    47cc:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    47d0:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    47d4:	1b 44 b4 ff 	mov	-76(r4),r11	;0xffb4(r4)
    47d8:	3b 52       	add	#8,	r11	;r2 As==11
    47da:	1f 44 b2 ff 	mov	-78(r4),r15	;0xffb2(r4)
    47de:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    47e2:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    47e6:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    47ea:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    47ee:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    47f2:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    47f6:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    47fa:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<54 ; i++ )
    47fe:	c4 43 a8 ff 	mov.b	#0,	-88(r4)	;r3 As==00, 0xffa8(r4)
    4802:	30 40 36 4b 	br	#0x4b36	
    {
        tmp = crypt[1];
    4806:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    480a:	94 4f 08 00 	mov	8(r15),	-86(r4)	;0x0008(r15), 0xffaa(r4)
    480e:	aa ff 
    4810:	94 4f 0a 00 	mov	10(r15),-84(r4)	;0x000a(r15), 0xffac(r4)
    4814:	ac ff 
    4816:	94 4f 0c 00 	mov	12(r15),-82(r4)	;0x000c(r15), 0xffae(r4)
    481a:	ae ff 
    481c:	94 4f 0e 00 	mov	14(r15),-80(r4)	;0x000e(r15), 0xffb0(r4)
    4820:	b0 ff 
        crypt[1] = crypt[0] ^ ((ROTATE_LEFT_48(crypt[1],1)) & (ROTATE_LEFT_48(crypt[1],8))) ^ (ROTATE_LEFT_48(crypt[1],2)) ^ key[53-i];
    4822:	15 44 b4 ff 	mov	-76(r4),r5	;0xffb4(r4)
    4826:	35 52       	add	#8,	r5	;r2 As==11
    4828:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    482c:	a4 4f b8 ff 	mov	@r15,	-72(r4)	;0xffb8(r4)
    4830:	94 4f 02 00 	mov	2(r15),	-70(r4)	;0x0002(r15), 0xffba(r4)
    4834:	ba ff 
    4836:	94 4f 04 00 	mov	4(r15),	-68(r4)	;0x0004(r15), 0xffbc(r4)
    483a:	bc ff 
    483c:	94 4f 06 00 	mov	6(r15),	-66(r4)	;0x0006(r15), 0xffbe(r4)
    4840:	be ff 
    4842:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4846:	3f 52       	add	#8,	r15	;r2 As==11
    4848:	2c 4f       	mov	@r15,	r12	
    484a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    484e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4852:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4856:	08 4c       	mov	r12,	r8	
    4858:	09 4d       	mov	r13,	r9	
    485a:	0a 4e       	mov	r14,	r10	
    485c:	0b 4f       	mov	r15,	r11	
    485e:	08 58       	rla	r8		
    4860:	09 69       	rlc	r9		
    4862:	0a 6a       	rlc	r10		
    4864:	0b 6b       	rlc	r11		
    4866:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    486a:	3f 52       	add	#8,	r15	;r2 As==11
    486c:	2c 4f       	mov	@r15,	r12	
    486e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4872:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4876:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    487a:	3c f3       	and	#-1,	r12	;r3 As==11
    487c:	3d f3       	and	#-1,	r13	;r3 As==11
    487e:	3e f3       	and	#-1,	r14	;r3 As==11
    4880:	0f f3       	and	#0,	r15	;r3 As==00
    4882:	84 4e e8 ff 	mov	r14,	-24(r4)	;0xffe8(r4)
    4886:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
    488a:	94 10 e8 ff 	swpb	-24(r4)	;0xffe8(r4)
    488e:	1c 44 e8 ff 	mov	-24(r4),r12	;0xffe8(r4)
    4892:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    4896:	8d 10       	swpb	r13		
    4898:	4c ed       	xor.b	r13,	r12	
    489a:	0c ed       	xor	r13,	r12	
    489c:	84 4d ea ff 	mov	r13,	-22(r4)	;0xffea(r4)
    48a0:	84 4c e8 ff 	mov	r12,	-24(r4)	;0xffe8(r4)
    48a4:	5e 44 ea ff 	mov.b	-22(r4),r14	;0xffea(r4)
    48a8:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
    48ac:	12 c3       	clrc			
    48ae:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48b2:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48b6:	12 c3       	clrc			
    48b8:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48bc:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48c0:	12 c3       	clrc			
    48c2:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48c6:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48ca:	12 c3       	clrc			
    48cc:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48d0:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48d4:	12 c3       	clrc			
    48d6:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48da:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48de:	12 c3       	clrc			
    48e0:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48e4:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48e8:	12 c3       	clrc			
    48ea:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48ee:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48f2:	1c 44 e8 ff 	mov	-24(r4),r12	;0xffe8(r4)
    48f6:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    48fa:	0e 43       	clr	r14		
    48fc:	0f 43       	clr	r15		
    48fe:	84 4c c0 ff 	mov	r12,	-64(r4)	;0xffc0(r4)
    4902:	84 4d c2 ff 	mov	r13,	-62(r4)	;0xffc2(r4)
    4906:	84 4e c4 ff 	mov	r14,	-60(r4)	;0xffc4(r4)
    490a:	84 4f c6 ff 	mov	r15,	-58(r4)	;0xffc6(r4)
    490e:	1c 44 c0 ff 	mov	-64(r4),r12	;0xffc0(r4)
    4912:	1d 44 c2 ff 	mov	-62(r4),r13	;0xffc2(r4)
    4916:	1e 44 c4 ff 	mov	-60(r4),r14	;0xffc4(r4)
    491a:	1f 44 c6 ff 	mov	-58(r4),r15	;0xffc6(r4)
    491e:	0c d8       	bis	r8,	r12	
    4920:	0d d9       	bis	r9,	r13	
    4922:	0e da       	bis	r10,	r14	
    4924:	0f db       	bis	r11,	r15	
    4926:	84 4c c8 ff 	mov	r12,	-56(r4)	;0xffc8(r4)
    492a:	84 4d ca ff 	mov	r13,	-54(r4)	;0xffca(r4)
    492e:	84 4e cc ff 	mov	r14,	-52(r4)	;0xffcc(r4)
    4932:	84 4f ce ff 	mov	r15,	-50(r4)	;0xffce(r4)
    4936:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    493a:	3f 52       	add	#8,	r15	;r2 As==11
    493c:	2c 4f       	mov	@r15,	r12	
    493e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4942:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4946:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    494a:	08 4c       	mov	r12,	r8	
    494c:	09 4d       	mov	r13,	r9	
    494e:	0a 4e       	mov	r14,	r10	
    4950:	0b 4f       	mov	r15,	r11	
    4952:	4b ea       	xor.b	r10,	r11	
    4954:	0b ea       	xor	r10,	r11	
    4956:	8b 10       	swpb	r11		
    4958:	4a e9       	xor.b	r9,	r10	
    495a:	0a e9       	xor	r9,	r10	
    495c:	8a 10       	swpb	r10		
    495e:	49 e8       	xor.b	r8,	r9	
    4960:	09 e8       	xor	r8,	r9	
    4962:	89 10       	swpb	r9		
    4964:	48 48       	mov.b	r8,	r8	
    4966:	88 10       	swpb	r8		
    4968:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    496c:	3f 52       	add	#8,	r15	;r2 As==11
    496e:	2c 4f       	mov	@r15,	r12	
    4970:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4974:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4978:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    497c:	3c f3       	and	#-1,	r12	;r3 As==11
    497e:	3d f3       	and	#-1,	r13	;r3 As==11
    4980:	3e f3       	and	#-1,	r14	;r3 As==11
    4982:	0f f3       	and	#0,	r15	;r3 As==00
    4984:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
    4988:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    498c:	94 10 ec ff 	swpb	-20(r4)	;0xffec(r4)
    4990:	1d 44 ec ff 	mov	-20(r4),r13	;0xffec(r4)
    4994:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    4998:	8e 10       	swpb	r14		
    499a:	4d ee       	xor.b	r14,	r13	
    499c:	0d ee       	xor	r14,	r13	
    499e:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    49a2:	84 4d ec ff 	mov	r13,	-20(r4)	;0xffec(r4)
    49a6:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    49aa:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    49ae:	1c 44 ec ff 	mov	-20(r4),r12	;0xffec(r4)
    49b2:	1d 44 ee ff 	mov	-18(r4),r13	;0xffee(r4)
    49b6:	0e 43       	clr	r14		
    49b8:	0f 43       	clr	r15		
    49ba:	84 4c d0 ff 	mov	r12,	-48(r4)	;0xffd0(r4)
    49be:	84 4d d2 ff 	mov	r13,	-46(r4)	;0xffd2(r4)
    49c2:	84 4e d4 ff 	mov	r14,	-44(r4)	;0xffd4(r4)
    49c6:	84 4f d6 ff 	mov	r15,	-42(r4)	;0xffd6(r4)
    49ca:	1c 44 d0 ff 	mov	-48(r4),r12	;0xffd0(r4)
    49ce:	1d 44 d2 ff 	mov	-46(r4),r13	;0xffd2(r4)
    49d2:	1e 44 d4 ff 	mov	-44(r4),r14	;0xffd4(r4)
    49d6:	1f 44 d6 ff 	mov	-42(r4),r15	;0xffd6(r4)
    49da:	0c d8       	bis	r8,	r12	
    49dc:	0d d9       	bis	r9,	r13	
    49de:	0e da       	bis	r10,	r14	
    49e0:	0f db       	bis	r11,	r15	
    49e2:	1c f4 c8 ff 	and	-56(r4),r12	;0xffc8(r4)
    49e6:	1d f4 ca ff 	and	-54(r4),r13	;0xffca(r4)
    49ea:	1e f4 cc ff 	and	-52(r4),r14	;0xffcc(r4)
    49ee:	1f f4 ce ff 	and	-50(r4),r15	;0xffce(r4)
    49f2:	18 44 b8 ff 	mov	-72(r4),r8	;0xffb8(r4)
    49f6:	19 44 ba ff 	mov	-70(r4),r9	;0xffba(r4)
    49fa:	1a 44 bc ff 	mov	-68(r4),r10	;0xffbc(r4)
    49fe:	1b 44 be ff 	mov	-66(r4),r11	;0xffbe(r4)
    4a02:	08 ec       	xor	r12,	r8	
    4a04:	09 ed       	xor	r13,	r9	
    4a06:	0a ee       	xor	r14,	r10	
    4a08:	0b ef       	xor	r15,	r11	
    4a0a:	84 48 d8 ff 	mov	r8,	-40(r4)	;0xffd8(r4)
    4a0e:	84 49 da ff 	mov	r9,	-38(r4)	;0xffda(r4)
    4a12:	84 4a dc ff 	mov	r10,	-36(r4)	;0xffdc(r4)
    4a16:	84 4b de ff 	mov	r11,	-34(r4)	;0xffde(r4)
    4a1a:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4a1e:	3f 52       	add	#8,	r15	;r2 As==11
    4a20:	2c 4f       	mov	@r15,	r12	
    4a22:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a26:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a2a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a2e:	08 4c       	mov	r12,	r8	
    4a30:	09 4d       	mov	r13,	r9	
    4a32:	0a 4e       	mov	r14,	r10	
    4a34:	0b 4f       	mov	r15,	r11	
    4a36:	08 58       	rla	r8		
    4a38:	09 69       	rlc	r9		
    4a3a:	0a 6a       	rlc	r10		
    4a3c:	0b 6b       	rlc	r11		
    4a3e:	08 58       	rla	r8		
    4a40:	09 69       	rlc	r9		
    4a42:	0a 6a       	rlc	r10		
    4a44:	0b 6b       	rlc	r11		
    4a46:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4a4a:	3f 52       	add	#8,	r15	;r2 As==11
    4a4c:	2c 4f       	mov	@r15,	r12	
    4a4e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a52:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a56:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a5a:	3c f3       	and	#-1,	r12	;r3 As==11
    4a5c:	3d f3       	and	#-1,	r13	;r3 As==11
    4a5e:	3e f3       	and	#-1,	r14	;r3 As==11
    4a60:	0f f3       	and	#0,	r15	;r3 As==00
    4a62:	06 4e       	mov	r14,	r6	
    4a64:	07 4f       	mov	r15,	r7	
    4a66:	86 10       	swpb	r6		
    4a68:	87 10       	swpb	r7		
    4a6a:	46 e7       	xor.b	r7,	r6	
    4a6c:	06 e7       	xor	r7,	r6	
    4a6e:	47 47       	mov.b	r7,	r7	
    4a70:	12 c3       	clrc			
    4a72:	07 10       	rrc	r7		
    4a74:	06 10       	rrc	r6		
    4a76:	12 c3       	clrc			
    4a78:	07 10       	rrc	r7		
    4a7a:	06 10       	rrc	r6		
    4a7c:	12 c3       	clrc			
    4a7e:	07 10       	rrc	r7		
    4a80:	06 10       	rrc	r6		
    4a82:	12 c3       	clrc			
    4a84:	07 10       	rrc	r7		
    4a86:	06 10       	rrc	r6		
    4a88:	12 c3       	clrc			
    4a8a:	07 10       	rrc	r7		
    4a8c:	06 10       	rrc	r6		
    4a8e:	12 c3       	clrc			
    4a90:	07 10       	rrc	r7		
    4a92:	06 10       	rrc	r6		
    4a94:	0c 46       	mov	r6,	r12	
    4a96:	0d 47       	mov	r7,	r13	
    4a98:	0e 43       	clr	r14		
    4a9a:	0f 43       	clr	r15		
    4a9c:	84 4c e0 ff 	mov	r12,	-32(r4)	;0xffe0(r4)
    4aa0:	84 4d e2 ff 	mov	r13,	-30(r4)	;0xffe2(r4)
    4aa4:	84 4e e4 ff 	mov	r14,	-28(r4)	;0xffe4(r4)
    4aa8:	84 4f e6 ff 	mov	r15,	-26(r4)	;0xffe6(r4)
    4aac:	1c 44 e0 ff 	mov	-32(r4),r12	;0xffe0(r4)
    4ab0:	1d 44 e2 ff 	mov	-30(r4),r13	;0xffe2(r4)
    4ab4:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    4ab8:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    4abc:	0c d8       	bis	r8,	r12	
    4abe:	0d d9       	bis	r9,	r13	
    4ac0:	0e da       	bis	r10,	r14	
    4ac2:	0f db       	bis	r11,	r15	
    4ac4:	18 44 d8 ff 	mov	-40(r4),r8	;0xffd8(r4)
    4ac8:	19 44 da ff 	mov	-38(r4),r9	;0xffda(r4)
    4acc:	1a 44 dc ff 	mov	-36(r4),r10	;0xffdc(r4)
    4ad0:	1b 44 de ff 	mov	-34(r4),r11	;0xffde(r4)
    4ad4:	08 ec       	xor	r12,	r8	
    4ad6:	09 ed       	xor	r13,	r9	
    4ad8:	0a ee       	xor	r14,	r10	
    4ada:	0b ef       	xor	r15,	r11	
    4adc:	5e 44 a8 ff 	mov.b	-88(r4),r14	;0xffa8(r4)
    4ae0:	3f 40 35 00 	mov	#53,	r15	;#0x0035
    4ae4:	0f 8e       	sub	r14,	r15	
    4ae6:	0f 5f       	rla	r15		
    4ae8:	0f 5f       	rla	r15		
    4aea:	0f 5f       	rla	r15		
    4aec:	1f 54 b6 ff 	add	-74(r4),r15	;0xffb6(r4)
    4af0:	2c 4f       	mov	@r15,	r12	
    4af2:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4af6:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4afa:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4afe:	0c e8       	xor	r8,	r12	
    4b00:	0d e9       	xor	r9,	r13	
    4b02:	0e ea       	xor	r10,	r14	
    4b04:	0f eb       	xor	r11,	r15	
    4b06:	85 4c 00 00 	mov	r12,	0(r5)	;0x0000(r5)
    4b0a:	85 4d 02 00 	mov	r13,	2(r5)	;0x0002(r5)
    4b0e:	85 4e 04 00 	mov	r14,	4(r5)	;0x0004(r5)
    4b12:	85 4f 06 00 	mov	r15,	6(r5)	;0x0006(r5)
        crypt[0] = tmp;
    4b16:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4b1a:	9f 44 aa ff 	mov	-86(r4),0(r15)	;0xffaa(r4), 0x0000(r15)
    4b1e:	00 00 
    4b20:	9f 44 ac ff 	mov	-84(r4),2(r15)	;0xffac(r4), 0x0002(r15)
    4b24:	02 00 
    4b26:	9f 44 ae ff 	mov	-82(r4),4(r15)	;0xffae(r4), 0x0004(r15)
    4b2a:	04 00 
    4b2c:	9f 44 b0 ff 	mov	-80(r4),6(r15)	;0xffb0(r4), 0x0006(r15)
    4b30:	06 00 
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<54 ; i++ )
    4b32:	d4 53 a8 ff 	inc.b	-88(r4)	;0xffa8(r4)
    4b36:	f4 90 36 00 	cmp.b	#54,	-88(r4)	;#0x0036, 0xffa8(r4)
    4b3a:	a8 ff 
    4b3c:	02 2c       	jc	$+6      	;abs 0x4b42
    4b3e:	30 40 06 48 	br	#0x4806	
    {
        tmp = crypt[1];
        crypt[1] = crypt[0] ^ ((ROTATE_LEFT_48(crypt[1],1)) & (ROTATE_LEFT_48(crypt[1],8))) ^ (ROTATE_LEFT_48(crypt[1],2)) ^ key[53-i];
        crypt[0] = tmp;
    }
}
    4b42:	31 50 48 00 	add	#72,	r1	;#0x0048
    4b46:	34 41       	pop	r4		
    4b48:	35 41       	pop	r5		
    4b4a:	36 41       	pop	r6		
    4b4c:	37 41       	pop	r7		
    4b4e:	38 41       	pop	r8		
    4b50:	39 41       	pop	r9		
    4b52:	3a 41       	pop	r10		
    4b54:	3b 41       	pop	r11		
    4b56:	30 41       	ret			

00004b58 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4b58:	04 12       	push	r4		
    4b5a:	04 41       	mov	r1,	r4	
    4b5c:	24 53       	incd	r4		
    4b5e:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4b62:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b66:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4b6a:	0d 3c       	jmp	$+28     	;abs 0x4b86
    {
      for (i = 0; i<d; i++) 
    4b6c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4b70:	04 3c       	jmp	$+10     	;abs 0x4b7a
	{
	  nop();
    4b72:	03 43       	nop			
	  nop();
    4b74:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4b76:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4b7a:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4b7e:	f8 ff 
    4b80:	f8 2b       	jnc	$-14     	;abs 0x4b72
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b82:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4b86:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4b8a:	fa ff 
    4b8c:	ef 2b       	jnc	$-32     	;abs 0x4b6c
	{
	  nop();
	  nop();
	}
    }
}
    4b8e:	31 50 06 00 	add	#6,	r1	;#0x0006
    4b92:	34 41       	pop	r4		
    4b94:	30 41       	ret			

00004b96 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4b96:	04 12       	push	r4		
    4b98:	04 41       	mov	r1,	r4	
    4b9a:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4b9c:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4ba0:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4ba2:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4ba6:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4baa:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4bae:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4bb2:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4bb6:	5f 42 05 00 	mov.b	&0x0005,r15	
    4bba:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4bbe:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4bc2:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4bc6:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4bca:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4bcc:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4bd0:	79 00 
  U1RCTL = 0;
    4bd2:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4bd6:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4bda:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4bde:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4be0:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4be4:	7b 00 

  delay(0x800);
    4be6:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4bea:	b0 12 58 4b 	call	#0x4b58	
  return 0;
    4bee:	0f 43       	clr	r15		
}
    4bf0:	34 41       	pop	r4		
    4bf2:	30 41       	ret			

00004bf4 <uart1_putchar>:

int uart1_putchar(int c)
{
    4bf4:	04 12       	push	r4		
    4bf6:	04 41       	mov	r1,	r4	
    4bf8:	24 53       	incd	r4		
    4bfa:	21 83       	decd	r1		
    4bfc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4c00:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c04:	4f 4f       	mov.b	r15,	r15	
    4c06:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4c0a:	03 43       	nop			
    4c0c:	5f 42 79 00 	mov.b	&0x0079,r15	
    4c10:	4f 4f       	mov.b	r15,	r15	
    4c12:	1f f3       	and	#1,	r15	;r3 As==01
    4c14:	0f 93       	tst	r15		
    4c16:	fa 27       	jz	$-10     	;abs 0x4c0c
  return (unsigned char)c;
    4c18:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c1c:	4f 4f       	mov.b	r15,	r15	
    4c1e:	4f 4f       	mov.b	r15,	r15	
}
    4c20:	21 53       	incd	r1		
    4c22:	34 41       	pop	r4		
    4c24:	30 41       	ret			

00004c26 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4c26:	04 12       	push	r4		
    4c28:	04 41       	mov	r1,	r4	
    4c2a:	24 53       	incd	r4		
    4c2c:	21 83       	decd	r1		
    4c2e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4c32:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c36:	b0 12 f4 4b 	call	#0x4bf4	
}
    4c3a:	21 53       	incd	r1		
    4c3c:	34 41       	pop	r4		
    4c3e:	30 41       	ret			

00004c40 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4c40:	04 12       	push	r4		
    4c42:	04 41       	mov	r1,	r4	
    4c44:	24 53       	incd	r4		
  ;
}
    4c46:	34 41       	pop	r4		
    4c48:	30 41       	ret			

00004c4a <start_decrypt>:
void
start_decrypt()
{
    4c4a:	04 12       	push	r4		
    4c4c:	04 41       	mov	r1,	r4	
    4c4e:	24 53       	incd	r4		
  ;
}
    4c50:	34 41       	pop	r4		
    4c52:	30 41       	ret			

00004c54 <end_expe>:


void
end_expe()
{
    4c54:	04 12       	push	r4		
    4c56:	04 41       	mov	r1,	r4	
    4c58:	24 53       	incd	r4		
  ;
}
    4c5a:	34 41       	pop	r4		
    4c5c:	30 41       	ret			

00004c5e <_unexpected_>:
    4c5e:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	48 41 48 41 48 41 48 41 48 41 48 41 48 41 48 41     HAHAHAHAHAHAHAHA
    fff0:	48 41 48 41 48 41 48 41 48 41 48 41 48 41 00 40     HAHAHAHAHAHAHA.@
