
speck64_128.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 speck64_128.c
0000412c l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00000000 l    df *ABS*	00000000 memset.c
0000459e g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
0000412c  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
0000412c  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
000043cc g     F .text	00000104 Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004642 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
0000450e g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
00004126  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
0000412c  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
000045cc g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
00004130 g     F .text	00000156 KeyExpansion
0000019e g       *ABS*	00000000 __TBCCR6
0000412c  w      .text	00000000 __isr_5
00004642 g       *ABS*	00000000 __data_load_start
0000412c g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
0000412c  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
0000412c  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
0000412c  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
0000412c  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004640  w      .text	00000000 _unexpected_
0000412c  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
0000412c  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
0000456c g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
0000412c g       .text	00000000 __ctors_start
0000412c  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .text	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
000045d6 g     F .text	0000006a memset
0000403e g     F .text	000000e8 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
0000412c  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
000044d0 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
0000412c  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
0000412c g       .text	00000000 __dtors_start
0000412c  w      .text	00000000 __isr_6
0000412c g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
0000412c  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .text	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
000045b8 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
00004126  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
000045c2 g     F .text	0000000a start_decrypt
00001100 g       .text	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00004286 g     F .text	00000146 Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 42 46 	mov	17986(r15),4352(r15);0x4642(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
        crypt[0] = ROTATE_LEFT_32( (crypt[0] ^ key[25-i]) - crypt[1], 8 );
    }
}

int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 14 ff 	add	#-236,	r1	;#0xff14
    u32 text[2];
    text[0] = 0x3b726574;
    4046:	b4 40 74 65 	mov	#25972,	-238(r4);#0x6574, 0xff12(r4)
    404a:	12 ff 
    404c:	b4 40 72 3b 	mov	#15218,	-236(r4);#0x3b72, 0xff14(r4)
    4050:	14 ff 
    text[1] = 0x7475432d;
    4052:	b4 40 2d 43 	mov	#17197,	-234(r4);#0x432d, 0xff16(r4)
    4056:	16 ff 
    4058:	b4 40 75 74 	mov	#29813,	-232(r4);#0x7475, 0xff18(r4)
    405c:	18 ff 
    u32 crypt[2] = {0};
    405e:	84 43 1a ff 	mov	#0,	-230(r4);r3 As==00, 0xff1a(r4)
    4062:	84 43 1c ff 	mov	#0,	-228(r4);r3 As==00, 0xff1c(r4)
    4066:	84 43 1e ff 	mov	#0,	-226(r4);r3 As==00, 0xff1e(r4)
    406a:	84 43 20 ff 	mov	#0,	-224(r4);r3 As==00, 0xff20(r4)
    u32 l[28] = {0};
    406e:	0f 44       	mov	r4,	r15	
    4070:	3f 50 22 ff 	add	#-222,	r15	;#0xff22
    4074:	3e 40 70 00 	mov	#112,	r14	;#0x0070
    4078:	0d 4e       	mov	r14,	r13	
    407a:	0e 43       	clr	r14		
    407c:	b0 12 d6 45 	call	#0x45d6	
    u32 k[27] = {0};
    4080:	0f 44       	mov	r4,	r15	
    4082:	3f 50 92 ff 	add	#-110,	r15	;#0xff92
    4086:	3e 40 6c 00 	mov	#108,	r14	;#0x006c
    408a:	0d 4e       	mov	r14,	r13	
    408c:	0e 43       	clr	r14		
    408e:	b0 12 d6 45 	call	#0x45d6	
    l[2] = 0x1b1a1918;
    4092:	b4 40 18 19 	mov	#6424,	-214(r4);#0x1918, 0xff2a(r4)
    4096:	2a ff 
    4098:	b4 40 1a 1b 	mov	#6938,	-212(r4);#0x1b1a, 0xff2c(r4)
    409c:	2c ff 
    l[1] = 0x13121110;
    409e:	b4 40 10 11 	mov	#4368,	-218(r4);#0x1110, 0xff26(r4)
    40a2:	26 ff 
    40a4:	b4 40 12 13 	mov	#4882,	-216(r4);#0x1312, 0xff28(r4)
    40a8:	28 ff 
    l[0] = 0x0b0a0908;
    40aa:	b4 40 08 09 	mov	#2312,	-222(r4);#0x0908, 0xff22(r4)
    40ae:	22 ff 
    40b0:	b4 40 0a 0b 	mov	#2826,	-220(r4);#0x0b0a, 0xff24(r4)
    40b4:	24 ff 
    k[0] = 0x03020100;
    40b6:	b4 40 00 01 	mov	#256,	-110(r4);#0x0100, 0xff92(r4)
    40ba:	92 ff 
    40bc:	b4 40 02 03 	mov	#770,	-108(r4);#0x0302, 0xff94(r4)
    40c0:	94 ff 
    
	START_ENCRYPT();
    40c2:	b0 12 b8 45 	call	#0x45b8	
	KeyExpansion ( l, k );
    40c6:	0e 44       	mov	r4,	r14	
    40c8:	3e 50 92 ff 	add	#-110,	r14	;#0xff92
    40cc:	0f 44       	mov	r4,	r15	
    40ce:	3f 50 22 ff 	add	#-222,	r15	;#0xff22
    40d2:	b0 12 30 41 	call	#0x4130	
    Encrypt ( text, crypt, k );
    40d6:	0e 44       	mov	r4,	r14	
    40d8:	3e 50 92 ff 	add	#-110,	r14	;#0xff92
    40dc:	0f 44       	mov	r4,	r15	
    40de:	3f 50 1a ff 	add	#-230,	r15	;#0xff1a
    40e2:	0d 4e       	mov	r14,	r13	
    40e4:	0e 4f       	mov	r15,	r14	
    40e6:	0f 44       	mov	r4,	r15	
    40e8:	3f 50 12 ff 	add	#-238,	r15	;#0xff12
    40ec:	b0 12 86 42 	call	#0x4286	
    //printf("%x %x\n%x %x\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	START_DECRYPT();
    40f0:	b0 12 c2 45 	call	#0x45c2	
	KeyExpansion ( l, k );
    40f4:	0e 44       	mov	r4,	r14	
    40f6:	3e 50 92 ff 	add	#-110,	r14	;#0xff92
    40fa:	0f 44       	mov	r4,	r15	
    40fc:	3f 50 22 ff 	add	#-222,	r15	;#0xff22
    4100:	b0 12 30 41 	call	#0x4130	
    Decrypt ( crypt, text, k );
    4104:	0e 44       	mov	r4,	r14	
    4106:	3e 50 92 ff 	add	#-110,	r14	;#0xff92
    410a:	0f 44       	mov	r4,	r15	
    410c:	3f 50 1a ff 	add	#-230,	r15	;#0xff1a
    4110:	0d 4e       	mov	r14,	r13	
    4112:	0e 44       	mov	r4,	r14	
    4114:	3e 50 12 ff 	add	#-238,	r14	;#0xff12
    4118:	b0 12 cc 43 	call	#0x43cc	
    //printf("%x %x\n%x %x\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	END_EXPE();
    411c:	b0 12 cc 45 	call	#0x45cc	

    return 0;
    4120:	0f 43       	clr	r15		
}
    4122:	31 50 ec 00 	add	#236,	r1	;#0x00ec

00004126 <__stop_progExec__>:
    4126:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    412a:	fd 3f       	jmp	$-4      	;abs 0x4126

0000412c <__ctors_end>:
    412c:	30 40 40 46 	br	#0x4640	

00004130 <KeyExpansion>:
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;

void KeyExpansion ( u32 l[], u32 k[] )
{
    4130:	0b 12       	push	r11		
    4132:	0a 12       	push	r10		
    4134:	09 12       	push	r9		
    4136:	08 12       	push	r8		
    4138:	07 12       	push	r7		
    413a:	06 12       	push	r6		
    413c:	05 12       	push	r5		
    413e:	04 12       	push	r4		
    4140:	04 41       	mov	r1,	r4	
    4142:	34 50 10 00 	add	#16,	r4	;#0x0010
    4146:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    414a:	84 4f e8 ff 	mov	r15,	-24(r4)	;0xffe8(r4)
    414e:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
    u8 i;
    for ( i=0 ; i<26 ; i++ )
    4152:	c4 43 e6 ff 	mov.b	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    4156:	88 3c       	jmp	$+274    	;abs 0x4268
    {
        l[i+3] = ( k[i] + ROTATE_RIGHT_32(l[i], 8) ) ^ i;
    4158:	5f 44 e6 ff 	mov.b	-26(r4),r15	;0xffe6(r4)
    415c:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4160:	0f 5f       	rla	r15		
    4162:	0f 5f       	rla	r15		
    4164:	15 44 e8 ff 	mov	-24(r4),r5	;0xffe8(r4)
    4168:	05 5f       	add	r15,	r5	
    416a:	5f 44 e6 ff 	mov.b	-26(r4),r15	;0xffe6(r4)
    416e:	0f 5f       	rla	r15		
    4170:	0f 5f       	rla	r15		
    4172:	1f 54 ea ff 	add	-22(r4),r15	;0xffea(r4)
    4176:	2a 4f       	mov	@r15,	r10	
    4178:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    417c:	5f 44 e6 ff 	mov.b	-26(r4),r15	;0xffe6(r4)
    4180:	0f 5f       	rla	r15		
    4182:	0f 5f       	rla	r15		
    4184:	1f 54 e8 ff 	add	-24(r4),r15	;0xffe8(r4)
    4188:	2e 4f       	mov	@r15,	r14	
    418a:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    418e:	0c 4e       	mov	r14,	r12	
    4190:	4c 4c       	mov.b	r12,	r12	
    4192:	8c 10       	swpb	r12		
    4194:	0d 4f       	mov	r15,	r13	
    4196:	8d 10       	swpb	r13		
    4198:	4d 4d       	mov.b	r13,	r13	
    419a:	09 4c       	mov	r12,	r9	
    419c:	09 dd       	bis	r13,	r9	
    419e:	84 49 ee ff 	mov	r9,	-18(r4)	;0xffee(r4)
    41a2:	0d 4f       	mov	r15,	r13	
    41a4:	4d 4d       	mov.b	r13,	r13	
    41a6:	8d 10       	swpb	r13		
    41a8:	0f 4e       	mov	r14,	r15	
    41aa:	8f 10       	swpb	r15		
    41ac:	4f 4f       	mov.b	r15,	r15	
    41ae:	0e 4d       	mov	r13,	r14	
    41b0:	0e df       	bis	r15,	r14	
    41b2:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
    41b6:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    41ba:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    41be:	0e 5a       	add	r10,	r14	
    41c0:	0f 6b       	addc	r11,	r15	
    41c2:	58 44 e6 ff 	mov.b	-26(r4),r8	;0xffe6(r4)
    41c6:	09 43       	clr	r9		
    41c8:	0e e8       	xor	r8,	r14	
    41ca:	0f e9       	xor	r9,	r15	
    41cc:	85 4e 00 00 	mov	r14,	0(r5)	;0x0000(r5)
    41d0:	85 4f 02 00 	mov	r15,	2(r5)	;0x0002(r5)
        k[i+1] = ROTATE_LEFT_32(k[i], 3) ^ l[i+3];
    41d4:	5f 44 e6 ff 	mov.b	-26(r4),r15	;0xffe6(r4)
    41d8:	1f 53       	inc	r15		
    41da:	0f 5f       	rla	r15		
    41dc:	0f 5f       	rla	r15		
    41de:	1b 44 ea ff 	mov	-22(r4),r11	;0xffea(r4)
    41e2:	0b 5f       	add	r15,	r11	
    41e4:	5f 44 e6 ff 	mov.b	-26(r4),r15	;0xffe6(r4)
    41e8:	0f 5f       	rla	r15		
    41ea:	0f 5f       	rla	r15		
    41ec:	1f 54 ea ff 	add	-22(r4),r15	;0xffea(r4)
    41f0:	2c 4f       	mov	@r15,	r12	
    41f2:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41f6:	0f 4c       	mov	r12,	r15	
    41f8:	8f 10       	swpb	r15		
    41fa:	4f 4f       	mov.b	r15,	r15	
    41fc:	12 c3       	clrc			
    41fe:	0f 10       	rrc	r15		
    4200:	12 c3       	clrc			
    4202:	0f 10       	rrc	r15		
    4204:	12 c3       	clrc			
    4206:	0f 10       	rrc	r15		
    4208:	12 c3       	clrc			
    420a:	0f 10       	rrc	r15		
    420c:	12 c3       	clrc			
    420e:	0f 10       	rrc	r15		
    4210:	0e 4d       	mov	r13,	r14	
    4212:	0e 5e       	rla	r14		
    4214:	0e 5e       	rla	r14		
    4216:	0e 5e       	rla	r14		
    4218:	07 4f       	mov	r15,	r7	
    421a:	07 de       	bis	r14,	r7	
    421c:	0f 4d       	mov	r13,	r15	
    421e:	8f 10       	swpb	r15		
    4220:	4f 4f       	mov.b	r15,	r15	
    4222:	12 c3       	clrc			
    4224:	0f 10       	rrc	r15		
    4226:	12 c3       	clrc			
    4228:	0f 10       	rrc	r15		
    422a:	12 c3       	clrc			
    422c:	0f 10       	rrc	r15		
    422e:	12 c3       	clrc			
    4230:	0f 10       	rrc	r15		
    4232:	12 c3       	clrc			
    4234:	0f 10       	rrc	r15		
    4236:	0e 4c       	mov	r12,	r14	
    4238:	0e 5e       	rla	r14		
    423a:	0e 5e       	rla	r14		
    423c:	0e 5e       	rla	r14		
    423e:	06 4f       	mov	r15,	r6	
    4240:	06 de       	bis	r14,	r6	
    4242:	5f 44 e6 ff 	mov.b	-26(r4),r15	;0xffe6(r4)
    4246:	3f 50 03 00 	add	#3,	r15	;#0x0003
    424a:	0f 5f       	rla	r15		
    424c:	0f 5f       	rla	r15		
    424e:	1f 54 e8 ff 	add	-24(r4),r15	;0xffe8(r4)
    4252:	2e 4f       	mov	@r15,	r14	
    4254:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4258:	0e e6       	xor	r6,	r14	
    425a:	0f e7       	xor	r7,	r15	
    425c:	8b 4e 00 00 	mov	r14,	0(r11)	;0x0000(r11)
    4260:	8b 4f 02 00 	mov	r15,	2(r11)	;0x0002(r11)
typedef uint32_t u32;

void KeyExpansion ( u32 l[], u32 k[] )
{
    u8 i;
    for ( i=0 ; i<26 ; i++ )
    4264:	d4 53 e6 ff 	inc.b	-26(r4)	;0xffe6(r4)
    4268:	f4 90 1a 00 	cmp.b	#26,	-26(r4)	;#0x001a, 0xffe6(r4)
    426c:	e6 ff 
    426e:	74 2b       	jnc	$-278    	;abs 0x4158
    {
        l[i+3] = ( k[i] + ROTATE_RIGHT_32(l[i], 8) ) ^ i;
        k[i+1] = ROTATE_LEFT_32(k[i], 3) ^ l[i+3];
    }
}
    4270:	31 50 0a 00 	add	#10,	r1	;#0x000a
    4274:	34 41       	pop	r4		
    4276:	35 41       	pop	r5		
    4278:	36 41       	pop	r6		
    427a:	37 41       	pop	r7		
    427c:	38 41       	pop	r8		
    427e:	39 41       	pop	r9		
    4280:	3a 41       	pop	r10		
    4282:	3b 41       	pop	r11		
    4284:	30 41       	ret			

00004286 <Encrypt>:

void Encrypt ( u32 text[], u32 crypt[], u32 key[] )
{
    4286:	0b 12       	push	r11		
    4288:	0a 12       	push	r10		
    428a:	09 12       	push	r9		
    428c:	08 12       	push	r8		
    428e:	07 12       	push	r7		
    4290:	04 12       	push	r4		
    4292:	04 41       	mov	r1,	r4	
    4294:	34 50 0c 00 	add	#12,	r4	;#0x000c
    4298:	31 82       	sub	#8,	r1	;r2 As==11
    429a:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    429e:	84 4e f0 ff 	mov	r14,	-16(r4)	;0xfff0(r4)
    42a2:	84 4d f2 ff 	mov	r13,	-14(r4)	;0xfff2(r4)
    u8 i;
    crypt[0] = text[0];
    42a6:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    42aa:	2e 4f       	mov	@r15,	r14	
    42ac:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    42b0:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    42b4:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    42b8:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
    crypt[1] = text[1];
    42bc:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    42c0:	2d 52       	add	#4,	r13	;r2 As==10
    42c2:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    42c6:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    42ca:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    42ce:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    42d2:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)

    for ( i=0 ; i<27 ; i++ )
    42d6:	c4 43 ec ff 	mov.b	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    42da:	6c 3c       	jmp	$+218    	;abs 0x43b4
    {
        crypt[0] = ( ROTATE_RIGHT_32(crypt[0], 8) + crypt[1] ) ^ key[i];
    42dc:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    42e0:	2c 4f       	mov	@r15,	r12	
    42e2:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42e6:	0e 4c       	mov	r12,	r14	
    42e8:	4e 4e       	mov.b	r14,	r14	
    42ea:	8e 10       	swpb	r14		
    42ec:	0f 4d       	mov	r13,	r15	
    42ee:	8f 10       	swpb	r15		
    42f0:	4f 4f       	mov.b	r15,	r15	
    42f2:	0a 4e       	mov	r14,	r10	
    42f4:	0a df       	bis	r15,	r10	
    42f6:	0e 4d       	mov	r13,	r14	
    42f8:	4e 4e       	mov.b	r14,	r14	
    42fa:	8e 10       	swpb	r14		
    42fc:	0f 4c       	mov	r12,	r15	
    42fe:	8f 10       	swpb	r15		
    4300:	4f 4f       	mov.b	r15,	r15	
    4302:	09 4e       	mov	r14,	r9	
    4304:	09 df       	bis	r15,	r9	
    4306:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    430a:	2f 52       	add	#4,	r15	;r2 As==10
    430c:	2e 4f       	mov	@r15,	r14	
    430e:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4312:	0c 49       	mov	r9,	r12	
    4314:	0d 4a       	mov	r10,	r13	
    4316:	0c 5e       	add	r14,	r12	
    4318:	0d 6f       	addc	r15,	r13	
    431a:	5f 44 ec ff 	mov.b	-20(r4),r15	;0xffec(r4)
    431e:	0f 5f       	rla	r15		
    4320:	0f 5f       	rla	r15		
    4322:	1f 54 f2 ff 	add	-14(r4),r15	;0xfff2(r4)
    4326:	2e 4f       	mov	@r15,	r14	
    4328:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    432c:	0e ec       	xor	r12,	r14	
    432e:	0f ed       	xor	r13,	r15	
    4330:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    4334:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    4338:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
        crypt[1] = ROTATE_LEFT_32(crypt[1], 3) ^ crypt[0];
    433c:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4340:	2b 52       	add	#4,	r11	;r2 As==10
    4342:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4346:	2f 52       	add	#4,	r15	;r2 As==10
    4348:	2c 4f       	mov	@r15,	r12	
    434a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    434e:	0f 4c       	mov	r12,	r15	
    4350:	8f 10       	swpb	r15		
    4352:	4f 4f       	mov.b	r15,	r15	
    4354:	12 c3       	clrc			
    4356:	0f 10       	rrc	r15		
    4358:	12 c3       	clrc			
    435a:	0f 10       	rrc	r15		
    435c:	12 c3       	clrc			
    435e:	0f 10       	rrc	r15		
    4360:	12 c3       	clrc			
    4362:	0f 10       	rrc	r15		
    4364:	12 c3       	clrc			
    4366:	0f 10       	rrc	r15		
    4368:	0e 4d       	mov	r13,	r14	
    436a:	0e 5e       	rla	r14		
    436c:	0e 5e       	rla	r14		
    436e:	0e 5e       	rla	r14		
    4370:	08 4f       	mov	r15,	r8	
    4372:	08 de       	bis	r14,	r8	
    4374:	0f 4d       	mov	r13,	r15	
    4376:	8f 10       	swpb	r15		
    4378:	4f 4f       	mov.b	r15,	r15	
    437a:	12 c3       	clrc			
    437c:	0f 10       	rrc	r15		
    437e:	12 c3       	clrc			
    4380:	0f 10       	rrc	r15		
    4382:	12 c3       	clrc			
    4384:	0f 10       	rrc	r15		
    4386:	12 c3       	clrc			
    4388:	0f 10       	rrc	r15		
    438a:	12 c3       	clrc			
    438c:	0f 10       	rrc	r15		
    438e:	0e 4c       	mov	r12,	r14	
    4390:	0e 5e       	rla	r14		
    4392:	0e 5e       	rla	r14		
    4394:	0e 5e       	rla	r14		
    4396:	07 4f       	mov	r15,	r7	
    4398:	07 de       	bis	r14,	r7	
    439a:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    439e:	2e 4f       	mov	@r15,	r14	
    43a0:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    43a4:	0e e7       	xor	r7,	r14	
    43a6:	0f e8       	xor	r8,	r15	
    43a8:	8b 4e 00 00 	mov	r14,	0(r11)	;0x0000(r11)
    43ac:	8b 4f 02 00 	mov	r15,	2(r11)	;0x0002(r11)
{
    u8 i;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<27 ; i++ )
    43b0:	d4 53 ec ff 	inc.b	-20(r4)	;0xffec(r4)
    43b4:	f4 90 1b 00 	cmp.b	#27,	-20(r4)	;#0x001b, 0xffec(r4)
    43b8:	ec ff 
    43ba:	90 2b       	jnc	$-222    	;abs 0x42dc
    {
        crypt[0] = ( ROTATE_RIGHT_32(crypt[0], 8) + crypt[1] ) ^ key[i];
        crypt[1] = ROTATE_LEFT_32(crypt[1], 3) ^ crypt[0];
    }
}
    43bc:	31 52       	add	#8,	r1	;r2 As==11
    43be:	34 41       	pop	r4		
    43c0:	37 41       	pop	r7		
    43c2:	38 41       	pop	r8		
    43c4:	39 41       	pop	r9		
    43c6:	3a 41       	pop	r10		
    43c8:	3b 41       	pop	r11		
    43ca:	30 41       	ret			

000043cc <Decrypt>:

void Decrypt ( u16 text[], u16 crypt[], u16 key[] )
{
    43cc:	0b 12       	push	r11		
    43ce:	04 12       	push	r4		
    43d0:	04 41       	mov	r1,	r4	
    43d2:	24 52       	add	#4,	r4	;r2 As==10
    43d4:	31 82       	sub	#8,	r1	;r2 As==11
    43d6:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    43da:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    43de:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
    u8 i;
    crypt[0] = text[0];
    43e2:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    43e6:	2e 4f       	mov	@r15,	r14	
    43e8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    43ec:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
    crypt[1] = text[1];
    43f0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    43f4:	2f 53       	incd	r15		
    43f6:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    43fa:	1e 4e 02 00 	mov	2(r14),	r14	;0x0002(r14)
    43fe:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)

    for ( i=0 ; i<27 ; i++ )
    4402:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    4406:	5c 3c       	jmp	$+186    	;abs 0x44c0
    {
        crypt[1] = ROTATE_RIGHT_32( crypt[0] ^ crypt[1], 3);
    4408:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    440c:	2d 53       	incd	r13		
    440e:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4412:	2e 4f       	mov	@r15,	r14	
    4414:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4418:	2f 53       	incd	r15		
    441a:	2f 4f       	mov	@r15,	r15	
    441c:	0f ee       	xor	r14,	r15	
    441e:	0e 4f       	mov	r15,	r14	
    4420:	12 c3       	clrc			
    4422:	0e 10       	rrc	r14		
    4424:	12 c3       	clrc			
    4426:	0e 10       	rrc	r14		
    4428:	12 c3       	clrc			
    442a:	0e 10       	rrc	r14		
    442c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4430:	2c 4f       	mov	@r15,	r12	
    4432:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4436:	2f 53       	incd	r15		
    4438:	2f 4f       	mov	@r15,	r15	
    443a:	0f ec       	xor	r12,	r15	
    443c:	4f 4f       	mov.b	r15,	r15	
    443e:	8f 10       	swpb	r15		
    4440:	0f 5f       	rla	r15		
    4442:	0f 5f       	rla	r15		
    4444:	0f 5f       	rla	r15		
    4446:	0f 5f       	rla	r15		
    4448:	0f 5f       	rla	r15		
    444a:	0f de       	bis	r14,	r15	
    444c:	8d 4f 00 00 	mov	r15,	0(r13)	;0x0000(r13)
        crypt[0] = ROTATE_LEFT_32( (crypt[0] ^ key[25-i]) - crypt[1], 8 );
    4450:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4454:	2e 4f       	mov	@r15,	r14	
    4456:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    445a:	3d 40 19 00 	mov	#25,	r13	;#0x0019
    445e:	0b 4d       	mov	r13,	r11	
    4460:	0b 8f       	sub	r15,	r11	
    4462:	0f 4b       	mov	r11,	r15	
    4464:	0f 5f       	rla	r15		
    4466:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    446a:	2f 4f       	mov	@r15,	r15	
    446c:	0e ef       	xor	r15,	r14	
    446e:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4472:	2f 53       	incd	r15		
    4474:	2f 4f       	mov	@r15,	r15	
    4476:	0c 4e       	mov	r14,	r12	
    4478:	0c 8f       	sub	r15,	r12	
    447a:	0f 4c       	mov	r12,	r15	
    447c:	0e 4f       	mov	r15,	r14	
    447e:	4e 4e       	mov.b	r14,	r14	
    4480:	8e 10       	swpb	r14		
    4482:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4486:	2d 4f       	mov	@r15,	r13	
    4488:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    448c:	3c 40 19 00 	mov	#25,	r12	;#0x0019
    4490:	0b 4c       	mov	r12,	r11	
    4492:	0b 8f       	sub	r15,	r11	
    4494:	0f 4b       	mov	r11,	r15	
    4496:	0f 5f       	rla	r15		
    4498:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    449c:	2f 4f       	mov	@r15,	r15	
    449e:	0d ef       	xor	r15,	r13	
    44a0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    44a4:	2f 53       	incd	r15		
    44a6:	2f 4f       	mov	@r15,	r15	
    44a8:	0c 4d       	mov	r13,	r12	
    44aa:	0c 8f       	sub	r15,	r12	
    44ac:	0f 4c       	mov	r12,	r15	
    44ae:	8f 10       	swpb	r15		
    44b0:	4f 4f       	mov.b	r15,	r15	
    44b2:	0e df       	bis	r15,	r14	
    44b4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    44b8:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
{
    u8 i;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<27 ; i++ )
    44bc:	d4 53 f4 ff 	inc.b	-12(r4)	;0xfff4(r4)
    44c0:	f4 90 1b 00 	cmp.b	#27,	-12(r4)	;#0x001b, 0xfff4(r4)
    44c4:	f4 ff 
    44c6:	a0 2b       	jnc	$-190    	;abs 0x4408
    {
        crypt[1] = ROTATE_RIGHT_32( crypt[0] ^ crypt[1], 3);
        crypt[0] = ROTATE_LEFT_32( (crypt[0] ^ key[25-i]) - crypt[1], 8 );
    }
}
    44c8:	31 52       	add	#8,	r1	;r2 As==11
    44ca:	34 41       	pop	r4		
    44cc:	3b 41       	pop	r11		
    44ce:	30 41       	ret			

000044d0 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    44d0:	04 12       	push	r4		
    44d2:	04 41       	mov	r1,	r4	
    44d4:	24 53       	incd	r4		
    44d6:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    44da:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    44de:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    44e2:	0d 3c       	jmp	$+28     	;abs 0x44fe
    {
      for (i = 0; i<d; i++) 
    44e4:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    44e8:	04 3c       	jmp	$+10     	;abs 0x44f2
	{
	  nop();
    44ea:	03 43       	nop			
	  nop();
    44ec:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    44ee:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    44f2:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    44f6:	f8 ff 
    44f8:	f8 2b       	jnc	$-14     	;abs 0x44ea
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    44fa:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    44fe:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4502:	fa ff 
    4504:	ef 2b       	jnc	$-32     	;abs 0x44e4
	{
	  nop();
	  nop();
	}
    }
}
    4506:	31 50 06 00 	add	#6,	r1	;#0x0006
    450a:	34 41       	pop	r4		
    450c:	30 41       	ret			

0000450e <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    450e:	04 12       	push	r4		
    4510:	04 41       	mov	r1,	r4	
    4512:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4514:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4518:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    451a:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    451e:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4522:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4526:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    452a:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    452e:	5f 42 05 00 	mov.b	&0x0005,r15	
    4532:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4536:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    453a:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    453e:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4542:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4544:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4548:	79 00 
  U1RCTL = 0;
    454a:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    454e:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4552:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4556:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4558:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    455c:	7b 00 

  delay(0x800);
    455e:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4562:	b0 12 d0 44 	call	#0x44d0	
  return 0;
    4566:	0f 43       	clr	r15		
}
    4568:	34 41       	pop	r4		
    456a:	30 41       	ret			

0000456c <uart1_putchar>:

int uart1_putchar(int c)
{
    456c:	04 12       	push	r4		
    456e:	04 41       	mov	r1,	r4	
    4570:	24 53       	incd	r4		
    4572:	21 83       	decd	r1		
    4574:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4578:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    457c:	4f 4f       	mov.b	r15,	r15	
    457e:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4582:	03 43       	nop			
    4584:	5f 42 79 00 	mov.b	&0x0079,r15	
    4588:	4f 4f       	mov.b	r15,	r15	
    458a:	1f f3       	and	#1,	r15	;r3 As==01
    458c:	0f 93       	tst	r15		
    458e:	fa 27       	jz	$-10     	;abs 0x4584
  return (unsigned char)c;
    4590:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4594:	4f 4f       	mov.b	r15,	r15	
    4596:	4f 4f       	mov.b	r15,	r15	
}
    4598:	21 53       	incd	r1		
    459a:	34 41       	pop	r4		
    459c:	30 41       	ret			

0000459e <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    459e:	04 12       	push	r4		
    45a0:	04 41       	mov	r1,	r4	
    45a2:	24 53       	incd	r4		
    45a4:	21 83       	decd	r1		
    45a6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    45aa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    45ae:	b0 12 6c 45 	call	#0x456c	
}
    45b2:	21 53       	incd	r1		
    45b4:	34 41       	pop	r4		
    45b6:	30 41       	ret			

000045b8 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    45b8:	04 12       	push	r4		
    45ba:	04 41       	mov	r1,	r4	
    45bc:	24 53       	incd	r4		
  ;
}
    45be:	34 41       	pop	r4		
    45c0:	30 41       	ret			

000045c2 <start_decrypt>:
void
start_decrypt()
{
    45c2:	04 12       	push	r4		
    45c4:	04 41       	mov	r1,	r4	
    45c6:	24 53       	incd	r4		
  ;
}
    45c8:	34 41       	pop	r4		
    45ca:	30 41       	ret			

000045cc <end_expe>:


void
end_expe()
{
    45cc:	04 12       	push	r4		
    45ce:	04 41       	mov	r1,	r4	
    45d0:	24 53       	incd	r4		
  ;
}
    45d2:	34 41       	pop	r4		
    45d4:	30 41       	ret			

000045d6 <memset>:
    45d6:	0b 12       	push	r11		
    45d8:	0a 12       	push	r10		
    45da:	09 12       	push	r9		
    45dc:	08 12       	push	r8		
    45de:	3d 90 06 00 	cmp	#6,	r13	;#0x0006
    45e2:	09 2c       	jc	$+20     	;abs 0x45f6
    45e4:	0c 4f       	mov	r15,	r12	
    45e6:	04 3c       	jmp	$+10     	;abs 0x45f0
    45e8:	cc 4e 00 00 	mov.b	r14,	0(r12)	;0x0000(r12)
    45ec:	1c 53       	inc	r12		
    45ee:	3d 53       	add	#-1,	r13	;r3 As==11
    45f0:	0d 93       	tst	r13		
    45f2:	fa 23       	jnz	$-10     	;abs 0x45e8
    45f4:	20 3c       	jmp	$+66     	;abs 0x4636
    45f6:	4e 4e       	mov.b	r14,	r14	
    45f8:	4b 4e       	mov.b	r14,	r11	
    45fa:	0b 93       	tst	r11		
    45fc:	03 24       	jz	$+8      	;abs 0x4604
    45fe:	0c 4b       	mov	r11,	r12	
    4600:	8c 10       	swpb	r12		
    4602:	0b dc       	bis	r12,	r11	
    4604:	1f b3       	bit	#1,	r15	;r3 As==01
    4606:	06 24       	jz	$+14     	;abs 0x4614
    4608:	3d 53       	add	#-1,	r13	;r3 As==11
    460a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    460e:	09 4f       	mov	r15,	r9	
    4610:	19 53       	inc	r9		
    4612:	01 3c       	jmp	$+4      	;abs 0x4616
    4614:	09 4f       	mov	r15,	r9	
    4616:	0c 4d       	mov	r13,	r12	
    4618:	12 c3       	clrc			
    461a:	0c 10       	rrc	r12		
    461c:	0a 49       	mov	r9,	r10	
    461e:	08 4c       	mov	r12,	r8	
    4620:	8a 4b 00 00 	mov	r11,	0(r10)	;0x0000(r10)
    4624:	2a 53       	incd	r10		
    4626:	38 53       	add	#-1,	r8	;r3 As==11
    4628:	fb 23       	jnz	$-8      	;abs 0x4620
    462a:	0c 5c       	rla	r12		
    462c:	0c 59       	add	r9,	r12	
    462e:	1d f3       	and	#1,	r13	;r3 As==01
    4630:	02 24       	jz	$+6      	;abs 0x4636
    4632:	cc 4e 00 00 	mov.b	r14,	0(r12)	;0x0000(r12)
    4636:	38 41       	pop	r8		
    4638:	39 41       	pop	r9		
    463a:	3a 41       	pop	r10		
    463c:	3b 41       	pop	r11		
    463e:	30 41       	ret			

00004640 <_unexpected_>:
    4640:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	2c 41 2c 41 2c 41 2c 41 2c 41 2c 41 2c 41 2c 41     ,A,A,A,A,A,A,A,A
    fff0:	2c 41 2c 41 2c 41 2c 41 2c 41 2c 41 2c 41 00 40     ,A,A,A,A,A,A,A.@
