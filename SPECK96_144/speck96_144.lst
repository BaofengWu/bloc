
speck96_144.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 speck96_144.c
00004178 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00000000 l    df *ABS*	00000000 memset.c
000048d0 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
00004178  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
00004178  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000464c g     F .text	000001b6 Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004974 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004840 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
00004172  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
00004178  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
000048fe g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000417c g     F .text	0000026e KeyExpansion
0000019e g       *ABS*	00000000 __TBCCR6
00004178  w      .text	00000000 __isr_5
00004974 g       *ABS*	00000000 __data_load_start
00004178 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
00004178  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
00004178  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
00004178  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004178  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004972  w      .text	00000000 _unexpected_
00004178  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
00004178  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
0000489e g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
00004178 g       .text	00000000 __ctors_start
00004178  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .text	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
00004908 g     F .text	0000006a memset
0000403e g     F .text	00000134 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
00004178  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004802 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
00004178  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
00004178 g       .text	00000000 __dtors_start
00004178  w      .text	00000000 __isr_6
00004178 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
00004178  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .text	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
000048ea g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
00004172  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
000048f4 g     F .text	0000000a start_decrypt
00001100 g       .text	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
000043ea g     F .text	00000262 Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 74 49 	mov	18804(r15),4352(r15);0x4974(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
        crypt[0] = ROTATE_LEFT_48( (crypt[0] ^ key[28-i]) - crypt[1], 8 );
    }
}

int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 08 fe 	add	#-504,	r1	;#0xfe08

    u64 text[2];
    text[0] = 0x656d6974206e;
    4046:	b4 40 6e 20 	mov	#8302,	-506(r4);#0x206e, 0xfe06(r4)
    404a:	06 fe 
    404c:	b4 40 74 69 	mov	#26996,	-504(r4);#0x6974, 0xfe08(r4)
    4050:	08 fe 
    4052:	b4 40 6d 65 	mov	#25965,	-502(r4);#0x656d, 0xfe0a(r4)
    4056:	0a fe 
    4058:	84 43 0c fe 	mov	#0,	-500(r4);r3 As==00, 0xfe0c(r4)
    text[1] = 0x69202c726576;
    405c:	b4 40 76 65 	mov	#25974,	-498(r4);#0x6576, 0xfe0e(r4)
    4060:	0e fe 
    4062:	b4 40 72 2c 	mov	#11378,	-496(r4);#0x2c72, 0xfe10(r4)
    4066:	10 fe 
    4068:	b4 40 20 69 	mov	#26912,	-494(r4);#0x6920, 0xfe12(r4)
    406c:	12 fe 
    406e:	84 43 14 fe 	mov	#0,	-492(r4);r3 As==00, 0xfe14(r4)
    u64 crypt[2] = {0};
    4072:	0f 44       	mov	r4,	r15	
    4074:	3f 50 16 fe 	add	#-490,	r15	;#0xfe16
    4078:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    407c:	2f 53       	incd	r15		
    407e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4082:	2f 53       	incd	r15		
    4084:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4088:	2f 53       	incd	r15		
    408a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    408e:	2f 53       	incd	r15		
    4090:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4094:	2f 53       	incd	r15		
    4096:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    409a:	2f 53       	incd	r15		
    409c:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a0:	2f 53       	incd	r15		
    40a2:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a6:	2f 53       	incd	r15		
    u64 l[30] = {0};
    40a8:	0f 44       	mov	r4,	r15	
    40aa:	3f 50 26 fe 	add	#-474,	r15	;#0xfe26
    40ae:	3e 40 f0 00 	mov	#240,	r14	;#0x00f0
    40b2:	0d 4e       	mov	r14,	r13	
    40b4:	0e 43       	clr	r14		
    40b6:	b0 12 08 49 	call	#0x4908	
    u64 k[29] = {0};
    40ba:	0f 44       	mov	r4,	r15	
    40bc:	3f 50 16 ff 	add	#-234,	r15	;#0xff16
    40c0:	3e 40 e8 00 	mov	#232,	r14	;#0x00e8
    40c4:	0d 4e       	mov	r14,	r13	
    40c6:	0e 43       	clr	r14		
    40c8:	b0 12 08 49 	call	#0x4908	
    l[1] = 0x151413121110;
    40cc:	b4 40 10 11 	mov	#4368,	-466(r4);#0x1110, 0xfe2e(r4)
    40d0:	2e fe 
    40d2:	b4 40 12 13 	mov	#4882,	-464(r4);#0x1312, 0xfe30(r4)
    40d6:	30 fe 
    40d8:	b4 40 14 15 	mov	#5396,	-462(r4);#0x1514, 0xfe32(r4)
    40dc:	32 fe 
    40de:	84 43 34 fe 	mov	#0,	-460(r4);r3 As==00, 0xfe34(r4)
    l[0] = 0x0d0c0b0a0908;
    40e2:	b4 40 08 09 	mov	#2312,	-474(r4);#0x0908, 0xfe26(r4)
    40e6:	26 fe 
    40e8:	b4 40 0a 0b 	mov	#2826,	-472(r4);#0x0b0a, 0xfe28(r4)
    40ec:	28 fe 
    40ee:	b4 40 0c 0d 	mov	#3340,	-470(r4);#0x0d0c, 0xfe2a(r4)
    40f2:	2a fe 
    40f4:	84 43 2c fe 	mov	#0,	-468(r4);r3 As==00, 0xfe2c(r4)
    k[0] = 0x050403020100;
    40f8:	b4 40 00 01 	mov	#256,	-234(r4);#0x0100, 0xff16(r4)
    40fc:	16 ff 
    40fe:	b4 40 02 03 	mov	#770,	-232(r4);#0x0302, 0xff18(r4)
    4102:	18 ff 
    4104:	b4 40 04 05 	mov	#1284,	-230(r4);#0x0504, 0xff1a(r4)
    4108:	1a ff 
    410a:	84 43 1c ff 	mov	#0,	-228(r4);r3 As==00, 0xff1c(r4)
    
	START_ENCRYPT();
    410e:	b0 12 ea 48 	call	#0x48ea	
	KeyExpansion ( l, k );
    4112:	0e 44       	mov	r4,	r14	
    4114:	3e 50 16 ff 	add	#-234,	r14	;#0xff16
    4118:	0f 44       	mov	r4,	r15	
    411a:	3f 50 26 fe 	add	#-474,	r15	;#0xfe26
    411e:	b0 12 7c 41 	call	#0x417c	
    Encrypt ( text, crypt, k );
    4122:	0e 44       	mov	r4,	r14	
    4124:	3e 50 16 ff 	add	#-234,	r14	;#0xff16
    4128:	0f 44       	mov	r4,	r15	
    412a:	3f 50 16 fe 	add	#-490,	r15	;#0xfe16
    412e:	0d 4e       	mov	r14,	r13	
    4130:	0e 4f       	mov	r15,	r14	
    4132:	0f 44       	mov	r4,	r15	
    4134:	3f 50 06 fe 	add	#-506,	r15	;#0xfe06
    4138:	b0 12 ea 43 	call	#0x43ea	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	START_DECRYPT();
    413c:	b0 12 f4 48 	call	#0x48f4	
	KeyExpansion ( l, k );
    4140:	0e 44       	mov	r4,	r14	
    4142:	3e 50 16 ff 	add	#-234,	r14	;#0xff16
    4146:	0f 44       	mov	r4,	r15	
    4148:	3f 50 26 fe 	add	#-474,	r15	;#0xfe26
    414c:	b0 12 7c 41 	call	#0x417c	
    Decrypt ( crypt, text, k );
    4150:	0e 44       	mov	r4,	r14	
    4152:	3e 50 16 ff 	add	#-234,	r14	;#0xff16
    4156:	0f 44       	mov	r4,	r15	
    4158:	3f 50 16 fe 	add	#-490,	r15	;#0xfe16
    415c:	0d 4e       	mov	r14,	r13	
    415e:	0e 44       	mov	r4,	r14	
    4160:	3e 50 06 fe 	add	#-506,	r14	;#0xfe06
    4164:	b0 12 4c 46 	call	#0x464c	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	END_EXPE();
    4168:	b0 12 fe 48 	call	#0x48fe	

    return 0;
    416c:	0f 43       	clr	r15		
}
    416e:	31 50 f8 01 	add	#504,	r1	;#0x01f8

00004172 <__stop_progExec__>:
    4172:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    4176:	fd 3f       	jmp	$-4      	;abs 0x4172

00004178 <__ctors_end>:
    4178:	30 40 72 49 	br	#0x4972	

0000417c <KeyExpansion>:

#define ROTATE_LEFT_48(x,bits) ( (x << bits) | ((x & 0xffffffffffff) >> (48-bits)) )
#define ROTATE_RIGHT_48(x,bits) ( ((x & 0xffffffffffff) >> bits) | (x << (48-bits)) )

void KeyExpansion ( u64 l[], u64 k[] )
{
    417c:	0b 12       	push	r11		
    417e:	0a 12       	push	r10		
    4180:	09 12       	push	r9		
    4182:	08 12       	push	r8		
    4184:	07 12       	push	r7		
    4186:	06 12       	push	r6		
    4188:	05 12       	push	r5		
    418a:	04 12       	push	r4		
    418c:	04 41       	mov	r1,	r4	
    418e:	34 50 10 00 	add	#16,	r4	;#0x0010
    4192:	31 50 d6 ff 	add	#-42,	r1	;#0xffd6
    4196:	84 4f c8 ff 	mov	r15,	-56(r4)	;0xffc8(r4)
    419a:	84 4e ca ff 	mov	r14,	-54(r4)	;0xffca(r4)
    u8 i;
    for ( i=0 ; i<28 ; i++ )
    419e:	c4 43 c6 ff 	mov.b	#0,	-58(r4)	;r3 As==00, 0xffc6(r4)
    41a2:	30 40 c8 43 	br	#0x43c8	
    {
        l[i+2] = ( k[i] + ROTATE_RIGHT_48(l[i], 8) ) ^ i;
    41a6:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    41aa:	2f 53       	incd	r15		
    41ac:	0f 5f       	rla	r15		
    41ae:	0f 5f       	rla	r15		
    41b0:	0f 5f       	rla	r15		
    41b2:	15 44 c8 ff 	mov	-56(r4),r5	;0xffc8(r4)
    41b6:	05 5f       	add	r15,	r5	
    41b8:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    41bc:	0f 5f       	rla	r15		
    41be:	0f 5f       	rla	r15		
    41c0:	0f 5f       	rla	r15		
    41c2:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    41c6:	a4 4f cc ff 	mov	@r15,	-52(r4)	;0xffcc(r4)
    41ca:	94 4f 02 00 	mov	2(r15),	-50(r4)	;0x0002(r15), 0xffce(r4)
    41ce:	ce ff 
    41d0:	94 4f 04 00 	mov	4(r15),	-48(r4)	;0x0004(r15), 0xffd0(r4)
    41d4:	d0 ff 
    41d6:	94 4f 06 00 	mov	6(r15),	-46(r4)	;0x0006(r15), 0xffd2(r4)
    41da:	d2 ff 
    41dc:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    41e0:	0f 5f       	rla	r15		
    41e2:	0f 5f       	rla	r15		
    41e4:	0f 5f       	rla	r15		
    41e6:	1f 54 c8 ff 	add	-56(r4),r15	;0xffc8(r4)
    41ea:	2c 4f       	mov	@r15,	r12	
    41ec:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41f0:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    41f4:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    41f8:	3c f3       	and	#-1,	r12	;r3 As==11
    41fa:	3d f3       	and	#-1,	r13	;r3 As==11
    41fc:	3e f3       	and	#-1,	r14	;r3 As==11
    41fe:	0f f3       	and	#0,	r15	;r3 As==00
    4200:	8c 10       	swpb	r12		
    4202:	8d 10       	swpb	r13		
    4204:	4c ed       	xor.b	r13,	r12	
    4206:	0c ed       	xor	r13,	r12	
    4208:	8e 10       	swpb	r14		
    420a:	4d ee       	xor.b	r14,	r13	
    420c:	0d ee       	xor	r14,	r13	
    420e:	8f 10       	swpb	r15		
    4210:	4e ef       	xor.b	r15,	r14	
    4212:	0e ef       	xor	r15,	r14	
    4214:	4f 4f       	mov.b	r15,	r15	
    4216:	5b 44 c6 ff 	mov.b	-58(r4),r11	;0xffc6(r4)
    421a:	0b 5b       	rla	r11		
    421c:	0b 5b       	rla	r11		
    421e:	0b 5b       	rla	r11		
    4220:	1b 54 c8 ff 	add	-56(r4),r11	;0xffc8(r4)
    4224:	28 4b       	mov	@r11,	r8	
    4226:	19 4b 02 00 	mov	2(r11),	r9	;0x0002(r11)
    422a:	1a 4b 04 00 	mov	4(r11),	r10	;0x0004(r11)
    422e:	1b 4b 06 00 	mov	6(r11),	r11	;0x0006(r11)
    4232:	84 48 ec ff 	mov	r8,	-20(r4)	;0xffec(r4)
    4236:	84 49 ee ff 	mov	r9,	-18(r4)	;0xffee(r4)
    423a:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    423e:	1b 44 ec ff 	mov	-20(r4),r11	;0xffec(r4)
    4242:	4a eb       	xor.b	r11,	r10	
    4244:	0a eb       	xor	r11,	r10	
    4246:	8a 10       	swpb	r10		
    4248:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    424c:	5a 44 ec ff 	mov.b	-20(r4),r10	;0xffec(r4)
    4250:	84 4a ec ff 	mov	r10,	-20(r4)	;0xffec(r4)
    4254:	94 10 ec ff 	swpb	-20(r4)	;0xffec(r4)
    4258:	18 44 ec ff 	mov	-20(r4),r8	;0xffec(r4)
    425c:	19 44 ee ff 	mov	-18(r4),r9	;0xffee(r4)
    4260:	0a 43       	clr	r10		
    4262:	0b 43       	clr	r11		
    4264:	84 4a d4 ff 	mov	r10,	-44(r4)	;0xffd4(r4)
    4268:	84 4b d6 ff 	mov	r11,	-42(r4)	;0xffd6(r4)
    426c:	84 48 d8 ff 	mov	r8,	-40(r4)	;0xffd8(r4)
    4270:	84 49 da ff 	mov	r9,	-38(r4)	;0xffda(r4)
    4274:	1c d4 d4 ff 	bis	-44(r4),r12	;0xffd4(r4)
    4278:	1d d4 d6 ff 	bis	-42(r4),r13	;0xffd6(r4)
    427c:	1e d4 d8 ff 	bis	-40(r4),r14	;0xffd8(r4)
    4280:	1f d4 da ff 	bis	-38(r4),r15	;0xffda(r4)
    4284:	1c 54 cc ff 	add	-52(r4),r12	;0xffcc(r4)
    4288:	1d 64 ce ff 	addc	-50(r4),r13	;0xffce(r4)
    428c:	1e 64 d0 ff 	addc	-48(r4),r14	;0xffd0(r4)
    4290:	1f 64 d2 ff 	addc	-46(r4),r15	;0xffd2(r4)
    4294:	5b 44 c6 ff 	mov.b	-58(r4),r11	;0xffc6(r4)
    4298:	84 4b dc ff 	mov	r11,	-36(r4)	;0xffdc(r4)
    429c:	84 43 de ff 	mov	#0,	-34(r4)	;r3 As==00, 0xffde(r4)
    42a0:	84 43 e0 ff 	mov	#0,	-32(r4)	;r3 As==00, 0xffe0(r4)
    42a4:	84 43 e2 ff 	mov	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    42a8:	1c e4 dc ff 	xor	-36(r4),r12	;0xffdc(r4)
    42ac:	1d e4 de ff 	xor	-34(r4),r13	;0xffde(r4)
    42b0:	1e e4 e0 ff 	xor	-32(r4),r14	;0xffe0(r4)
    42b4:	1f e4 e2 ff 	xor	-30(r4),r15	;0xffe2(r4)
    42b8:	85 4c 00 00 	mov	r12,	0(r5)	;0x0000(r5)
    42bc:	85 4d 02 00 	mov	r13,	2(r5)	;0x0002(r5)
    42c0:	85 4e 04 00 	mov	r14,	4(r5)	;0x0004(r5)
    42c4:	85 4f 06 00 	mov	r15,	6(r5)	;0x0006(r5)
        k[i+1] = ROTATE_LEFT_48(k[i], 3) ^ l[i+2];
    42c8:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    42cc:	1f 53       	inc	r15		
    42ce:	0f 5f       	rla	r15		
    42d0:	0f 5f       	rla	r15		
    42d2:	0f 5f       	rla	r15		
    42d4:	15 44 ca ff 	mov	-54(r4),r5	;0xffca(r4)
    42d8:	05 5f       	add	r15,	r5	
    42da:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    42de:	0f 5f       	rla	r15		
    42e0:	0f 5f       	rla	r15		
    42e2:	0f 5f       	rla	r15		
    42e4:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    42e8:	2c 4f       	mov	@r15,	r12	
    42ea:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42ee:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    42f2:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    42f6:	08 4c       	mov	r12,	r8	
    42f8:	09 4d       	mov	r13,	r9	
    42fa:	0a 4e       	mov	r14,	r10	
    42fc:	0b 4f       	mov	r15,	r11	
    42fe:	08 58       	rla	r8		
    4300:	09 69       	rlc	r9		
    4302:	0a 6a       	rlc	r10		
    4304:	0b 6b       	rlc	r11		
    4306:	08 58       	rla	r8		
    4308:	09 69       	rlc	r9		
    430a:	0a 6a       	rlc	r10		
    430c:	0b 6b       	rlc	r11		
    430e:	08 58       	rla	r8		
    4310:	09 69       	rlc	r9		
    4312:	0a 6a       	rlc	r10		
    4314:	0b 6b       	rlc	r11		
    4316:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    431a:	0f 5f       	rla	r15		
    431c:	0f 5f       	rla	r15		
    431e:	0f 5f       	rla	r15		
    4320:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    4324:	2c 4f       	mov	@r15,	r12	
    4326:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    432a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    432e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4332:	3c f3       	and	#-1,	r12	;r3 As==11
    4334:	3d f3       	and	#-1,	r13	;r3 As==11
    4336:	3e f3       	and	#-1,	r14	;r3 As==11
    4338:	0f f3       	and	#0,	r15	;r3 As==00
    433a:	06 4e       	mov	r14,	r6	
    433c:	07 4f       	mov	r15,	r7	
    433e:	86 10       	swpb	r6		
    4340:	87 10       	swpb	r7		
    4342:	46 e7       	xor.b	r7,	r6	
    4344:	06 e7       	xor	r7,	r6	
    4346:	47 47       	mov.b	r7,	r7	
    4348:	12 c3       	clrc			
    434a:	07 10       	rrc	r7		
    434c:	06 10       	rrc	r6		
    434e:	12 c3       	clrc			
    4350:	07 10       	rrc	r7		
    4352:	06 10       	rrc	r6		
    4354:	12 c3       	clrc			
    4356:	07 10       	rrc	r7		
    4358:	06 10       	rrc	r6		
    435a:	12 c3       	clrc			
    435c:	07 10       	rrc	r7		
    435e:	06 10       	rrc	r6		
    4360:	12 c3       	clrc			
    4362:	07 10       	rrc	r7		
    4364:	06 10       	rrc	r6		
    4366:	0c 46       	mov	r6,	r12	
    4368:	0d 47       	mov	r7,	r13	
    436a:	0e 43       	clr	r14		
    436c:	0f 43       	clr	r15		
    436e:	84 4c e4 ff 	mov	r12,	-28(r4)	;0xffe4(r4)
    4372:	84 4d e6 ff 	mov	r13,	-26(r4)	;0xffe6(r4)
    4376:	84 4e e8 ff 	mov	r14,	-24(r4)	;0xffe8(r4)
    437a:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
    437e:	18 d4 e4 ff 	bis	-28(r4),r8	;0xffe4(r4)
    4382:	19 d4 e6 ff 	bis	-26(r4),r9	;0xffe6(r4)
    4386:	1a d4 e8 ff 	bis	-24(r4),r10	;0xffe8(r4)
    438a:	1b d4 ea ff 	bis	-22(r4),r11	;0xffea(r4)
    438e:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    4392:	2f 53       	incd	r15		
    4394:	0f 5f       	rla	r15		
    4396:	0f 5f       	rla	r15		
    4398:	0f 5f       	rla	r15		
    439a:	1f 54 c8 ff 	add	-56(r4),r15	;0xffc8(r4)
    439e:	2c 4f       	mov	@r15,	r12	
    43a0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    43a4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    43a8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    43ac:	0c e8       	xor	r8,	r12	
    43ae:	0d e9       	xor	r9,	r13	
    43b0:	0e ea       	xor	r10,	r14	
    43b2:	0f eb       	xor	r11,	r15	
    43b4:	85 4c 00 00 	mov	r12,	0(r5)	;0x0000(r5)
    43b8:	85 4d 02 00 	mov	r13,	2(r5)	;0x0002(r5)
    43bc:	85 4e 04 00 	mov	r14,	4(r5)	;0x0004(r5)
    43c0:	85 4f 06 00 	mov	r15,	6(r5)	;0x0006(r5)
#define ROTATE_RIGHT_48(x,bits) ( ((x & 0xffffffffffff) >> bits) | (x << (48-bits)) )

void KeyExpansion ( u64 l[], u64 k[] )
{
    u8 i;
    for ( i=0 ; i<28 ; i++ )
    43c4:	d4 53 c6 ff 	inc.b	-58(r4)	;0xffc6(r4)
    43c8:	f4 90 1c 00 	cmp.b	#28,	-58(r4)	;#0x001c, 0xffc6(r4)
    43cc:	c6 ff 
    43ce:	02 2c       	jc	$+6      	;abs 0x43d4
    43d0:	30 40 a6 41 	br	#0x41a6	
    {
        l[i+2] = ( k[i] + ROTATE_RIGHT_48(l[i], 8) ) ^ i;
        k[i+1] = ROTATE_LEFT_48(k[i], 3) ^ l[i+2];
    }
}
    43d4:	31 50 2a 00 	add	#42,	r1	;#0x002a
    43d8:	34 41       	pop	r4		
    43da:	35 41       	pop	r5		
    43dc:	36 41       	pop	r6		
    43de:	37 41       	pop	r7		
    43e0:	38 41       	pop	r8		
    43e2:	39 41       	pop	r9		
    43e4:	3a 41       	pop	r10		
    43e6:	3b 41       	pop	r11		
    43e8:	30 41       	ret			

000043ea <Encrypt>:

void Encrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    43ea:	0b 12       	push	r11		
    43ec:	0a 12       	push	r10		
    43ee:	09 12       	push	r9		
    43f0:	08 12       	push	r8		
    43f2:	07 12       	push	r7		
    43f4:	06 12       	push	r6		
    43f6:	05 12       	push	r5		
    43f8:	04 12       	push	r4		
    43fa:	04 41       	mov	r1,	r4	
    43fc:	34 50 10 00 	add	#16,	r4	;#0x0010
    4400:	31 50 e4 ff 	add	#-28,	r1	;#0xffe4
    4404:	84 4f d6 ff 	mov	r15,	-42(r4)	;0xffd6(r4)
    4408:	84 4e d8 ff 	mov	r14,	-40(r4)	;0xffd8(r4)
    440c:	84 4d da ff 	mov	r13,	-38(r4)	;0xffda(r4)
    u8 i;
    crypt[0] = text[0];
    4410:	1f 44 d6 ff 	mov	-42(r4),r15	;0xffd6(r4)
    4414:	2c 4f       	mov	@r15,	r12	
    4416:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    441a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    441e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4422:	1b 44 d8 ff 	mov	-40(r4),r11	;0xffd8(r4)
    4426:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    442a:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    442e:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4432:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    4436:	1b 44 d8 ff 	mov	-40(r4),r11	;0xffd8(r4)
    443a:	3b 52       	add	#8,	r11	;r2 As==11
    443c:	1f 44 d6 ff 	mov	-42(r4),r15	;0xffd6(r4)
    4440:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    4444:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    4448:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    444c:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    4450:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4454:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4458:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    445c:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<29 ; i++ )
    4460:	c4 43 d4 ff 	mov.b	#0,	-44(r4)	;r3 As==00, 0xffd4(r4)
    4464:	e4 3c       	jmp	$+458    	;abs 0x462e
    {
        crypt[0] = ( ROTATE_RIGHT_48(crypt[0], 8) + crypt[1] ) ^ key[i];
    4466:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    446a:	2c 4f       	mov	@r15,	r12	
    446c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4470:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4474:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4478:	3c f3       	and	#-1,	r12	;r3 As==11
    447a:	3d f3       	and	#-1,	r13	;r3 As==11
    447c:	3e f3       	and	#-1,	r14	;r3 As==11
    447e:	0f f3       	and	#0,	r15	;r3 As==00
    4480:	8c 10       	swpb	r12		
    4482:	8d 10       	swpb	r13		
    4484:	4c ed       	xor.b	r13,	r12	
    4486:	0c ed       	xor	r13,	r12	
    4488:	8e 10       	swpb	r14		
    448a:	4d ee       	xor.b	r14,	r13	
    448c:	0d ee       	xor	r14,	r13	
    448e:	8f 10       	swpb	r15		
    4490:	4e ef       	xor.b	r15,	r14	
    4492:	0e ef       	xor	r15,	r14	
    4494:	4f 4f       	mov.b	r15,	r15	
    4496:	1b 44 d8 ff 	mov	-40(r4),r11	;0xffd8(r4)
    449a:	28 4b       	mov	@r11,	r8	
    449c:	19 4b 02 00 	mov	2(r11),	r9	;0x0002(r11)
    44a0:	1a 4b 04 00 	mov	4(r11),	r10	;0x0004(r11)
    44a4:	1b 4b 06 00 	mov	6(r11),	r11	;0x0006(r11)
    44a8:	84 48 ec ff 	mov	r8,	-20(r4)	;0xffec(r4)
    44ac:	84 49 ee ff 	mov	r9,	-18(r4)	;0xffee(r4)
    44b0:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    44b4:	1b 44 ec ff 	mov	-20(r4),r11	;0xffec(r4)
    44b8:	4a eb       	xor.b	r11,	r10	
    44ba:	0a eb       	xor	r11,	r10	
    44bc:	8a 10       	swpb	r10		
    44be:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    44c2:	5a 44 ec ff 	mov.b	-20(r4),r10	;0xffec(r4)
    44c6:	84 4a ec ff 	mov	r10,	-20(r4)	;0xffec(r4)
    44ca:	94 10 ec ff 	swpb	-20(r4)	;0xffec(r4)
    44ce:	18 44 ec ff 	mov	-20(r4),r8	;0xffec(r4)
    44d2:	19 44 ee ff 	mov	-18(r4),r9	;0xffee(r4)
    44d6:	0a 43       	clr	r10		
    44d8:	0b 43       	clr	r11		
    44da:	84 4a dc ff 	mov	r10,	-36(r4)	;0xffdc(r4)
    44de:	84 4b de ff 	mov	r11,	-34(r4)	;0xffde(r4)
    44e2:	84 48 e0 ff 	mov	r8,	-32(r4)	;0xffe0(r4)
    44e6:	84 49 e2 ff 	mov	r9,	-30(r4)	;0xffe2(r4)
    44ea:	18 44 dc ff 	mov	-36(r4),r8	;0xffdc(r4)
    44ee:	19 44 de ff 	mov	-34(r4),r9	;0xffde(r4)
    44f2:	1a 44 e0 ff 	mov	-32(r4),r10	;0xffe0(r4)
    44f6:	1b 44 e2 ff 	mov	-30(r4),r11	;0xffe2(r4)
    44fa:	08 dc       	bis	r12,	r8	
    44fc:	09 dd       	bis	r13,	r9	
    44fe:	0a de       	bis	r14,	r10	
    4500:	0b df       	bis	r15,	r11	
    4502:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    4506:	3f 52       	add	#8,	r15	;r2 As==11
    4508:	2c 4f       	mov	@r15,	r12	
    450a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    450e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4512:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4516:	08 5c       	add	r12,	r8	
    4518:	09 6d       	addc	r13,	r9	
    451a:	0a 6e       	addc	r14,	r10	
    451c:	0b 6f       	addc	r15,	r11	
    451e:	5f 44 d4 ff 	mov.b	-44(r4),r15	;0xffd4(r4)
    4522:	0f 5f       	rla	r15		
    4524:	0f 5f       	rla	r15		
    4526:	0f 5f       	rla	r15		
    4528:	1f 54 da ff 	add	-38(r4),r15	;0xffda(r4)
    452c:	2c 4f       	mov	@r15,	r12	
    452e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4532:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4536:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    453a:	0c e8       	xor	r8,	r12	
    453c:	0d e9       	xor	r9,	r13	
    453e:	0e ea       	xor	r10,	r14	
    4540:	0f eb       	xor	r11,	r15	
    4542:	1b 44 d8 ff 	mov	-40(r4),r11	;0xffd8(r4)
    4546:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    454a:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    454e:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4552:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        crypt[1] = ROTATE_LEFT_48(crypt[1], 3) ^ crypt[0];
    4556:	15 44 d8 ff 	mov	-40(r4),r5	;0xffd8(r4)
    455a:	35 52       	add	#8,	r5	;r2 As==11
    455c:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    4560:	3f 52       	add	#8,	r15	;r2 As==11
    4562:	2c 4f       	mov	@r15,	r12	
    4564:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4568:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    456c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4570:	08 4c       	mov	r12,	r8	
    4572:	09 4d       	mov	r13,	r9	
    4574:	0a 4e       	mov	r14,	r10	
    4576:	0b 4f       	mov	r15,	r11	
    4578:	08 58       	rla	r8		
    457a:	09 69       	rlc	r9		
    457c:	0a 6a       	rlc	r10		
    457e:	0b 6b       	rlc	r11		
    4580:	08 58       	rla	r8		
    4582:	09 69       	rlc	r9		
    4584:	0a 6a       	rlc	r10		
    4586:	0b 6b       	rlc	r11		
    4588:	08 58       	rla	r8		
    458a:	09 69       	rlc	r9		
    458c:	0a 6a       	rlc	r10		
    458e:	0b 6b       	rlc	r11		
    4590:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    4594:	3f 52       	add	#8,	r15	;r2 As==11
    4596:	2c 4f       	mov	@r15,	r12	
    4598:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    459c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    45a0:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    45a4:	3c f3       	and	#-1,	r12	;r3 As==11
    45a6:	3d f3       	and	#-1,	r13	;r3 As==11
    45a8:	3e f3       	and	#-1,	r14	;r3 As==11
    45aa:	0f f3       	and	#0,	r15	;r3 As==00
    45ac:	06 4e       	mov	r14,	r6	
    45ae:	07 4f       	mov	r15,	r7	
    45b0:	86 10       	swpb	r6		
    45b2:	87 10       	swpb	r7		
    45b4:	46 e7       	xor.b	r7,	r6	
    45b6:	06 e7       	xor	r7,	r6	
    45b8:	47 47       	mov.b	r7,	r7	
    45ba:	12 c3       	clrc			
    45bc:	07 10       	rrc	r7		
    45be:	06 10       	rrc	r6		
    45c0:	12 c3       	clrc			
    45c2:	07 10       	rrc	r7		
    45c4:	06 10       	rrc	r6		
    45c6:	12 c3       	clrc			
    45c8:	07 10       	rrc	r7		
    45ca:	06 10       	rrc	r6		
    45cc:	12 c3       	clrc			
    45ce:	07 10       	rrc	r7		
    45d0:	06 10       	rrc	r6		
    45d2:	12 c3       	clrc			
    45d4:	07 10       	rrc	r7		
    45d6:	06 10       	rrc	r6		
    45d8:	0c 46       	mov	r6,	r12	
    45da:	0d 47       	mov	r7,	r13	
    45dc:	0e 43       	clr	r14		
    45de:	0f 43       	clr	r15		
    45e0:	84 4c e4 ff 	mov	r12,	-28(r4)	;0xffe4(r4)
    45e4:	84 4d e6 ff 	mov	r13,	-26(r4)	;0xffe6(r4)
    45e8:	84 4e e8 ff 	mov	r14,	-24(r4)	;0xffe8(r4)
    45ec:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
    45f0:	18 d4 e4 ff 	bis	-28(r4),r8	;0xffe4(r4)
    45f4:	19 d4 e6 ff 	bis	-26(r4),r9	;0xffe6(r4)
    45f8:	1a d4 e8 ff 	bis	-24(r4),r10	;0xffe8(r4)
    45fc:	1b d4 ea ff 	bis	-22(r4),r11	;0xffea(r4)
    4600:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    4604:	2c 4f       	mov	@r15,	r12	
    4606:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    460a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    460e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4612:	0c e8       	xor	r8,	r12	
    4614:	0d e9       	xor	r9,	r13	
    4616:	0e ea       	xor	r10,	r14	
    4618:	0f eb       	xor	r11,	r15	
    461a:	85 4c 00 00 	mov	r12,	0(r5)	;0x0000(r5)
    461e:	85 4d 02 00 	mov	r13,	2(r5)	;0x0002(r5)
    4622:	85 4e 04 00 	mov	r14,	4(r5)	;0x0004(r5)
    4626:	85 4f 06 00 	mov	r15,	6(r5)	;0x0006(r5)
{
    u8 i;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<29 ; i++ )
    462a:	d4 53 d4 ff 	inc.b	-44(r4)	;0xffd4(r4)
    462e:	f4 90 1d 00 	cmp.b	#29,	-44(r4)	;#0x001d, 0xffd4(r4)
    4632:	d4 ff 
    4634:	18 2b       	jnc	$-462    	;abs 0x4466
    {
        crypt[0] = ( ROTATE_RIGHT_48(crypt[0], 8) + crypt[1] ) ^ key[i];
        crypt[1] = ROTATE_LEFT_48(crypt[1], 3) ^ crypt[0];
    }
}
    4636:	31 50 1c 00 	add	#28,	r1	;#0x001c
    463a:	34 41       	pop	r4		
    463c:	35 41       	pop	r5		
    463e:	36 41       	pop	r6		
    4640:	37 41       	pop	r7		
    4642:	38 41       	pop	r8		
    4644:	39 41       	pop	r9		
    4646:	3a 41       	pop	r10		
    4648:	3b 41       	pop	r11		
    464a:	30 41       	ret			

0000464c <Decrypt>:

void Decrypt ( u16 text[], u16 crypt[], u16 key[] )
{
    464c:	0b 12       	push	r11		
    464e:	0a 12       	push	r10		
    4650:	09 12       	push	r9		
    4652:	08 12       	push	r8		
    4654:	07 12       	push	r7		
    4656:	06 12       	push	r6		
    4658:	05 12       	push	r5		
    465a:	04 12       	push	r4		
    465c:	04 41       	mov	r1,	r4	
    465e:	34 50 10 00 	add	#16,	r4	;#0x0010
    4662:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    4666:	84 4f d2 ff 	mov	r15,	-46(r4)	;0xffd2(r4)
    466a:	84 4e d4 ff 	mov	r14,	-44(r4)	;0xffd4(r4)
    466e:	84 4d d6 ff 	mov	r13,	-42(r4)	;0xffd6(r4)
    u8 i;
    crypt[0] = text[0];
    4672:	1f 44 d2 ff 	mov	-46(r4),r15	;0xffd2(r4)
    4676:	2e 4f       	mov	@r15,	r14	
    4678:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    467c:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
    crypt[1] = text[1];
    4680:	1e 44 d4 ff 	mov	-44(r4),r14	;0xffd4(r4)
    4684:	2e 53       	incd	r14		
    4686:	1f 44 d2 ff 	mov	-46(r4),r15	;0xffd2(r4)
    468a:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    468e:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)

    for ( i=0 ; i<29 ; i++ )
    4692:	c4 43 d0 ff 	mov.b	#0,	-48(r4)	;r3 As==00, 0xffd0(r4)
    4696:	a6 3c       	jmp	$+334    	;abs 0x47e4
    {
        crypt[1] = ROTATE_RIGHT_48( crypt[0] ^ crypt[1], 3);
    4698:	15 44 d4 ff 	mov	-44(r4),r5	;0xffd4(r4)
    469c:	25 53       	incd	r5		
    469e:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    46a2:	2f 4f       	mov	@r15,	r15	
    46a4:	06 4f       	mov	r15,	r6	
    46a6:	07 43       	clr	r7		
    46a8:	08 43       	clr	r8		
    46aa:	09 43       	clr	r9		
    46ac:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    46b0:	2f 53       	incd	r15		
    46b2:	2f 4f       	mov	@r15,	r15	
    46b4:	84 4f d8 ff 	mov	r15,	-40(r4)	;0xffd8(r4)
    46b8:	84 43 da ff 	mov	#0,	-38(r4)	;r3 As==00, 0xffda(r4)
    46bc:	84 43 dc ff 	mov	#0,	-36(r4)	;r3 As==00, 0xffdc(r4)
    46c0:	84 43 de ff 	mov	#0,	-34(r4)	;r3 As==00, 0xffde(r4)
    46c4:	1c 44 d8 ff 	mov	-40(r4),r12	;0xffd8(r4)
    46c8:	1d 44 da ff 	mov	-38(r4),r13	;0xffda(r4)
    46cc:	1e 44 dc ff 	mov	-36(r4),r14	;0xffdc(r4)
    46d0:	1f 44 de ff 	mov	-34(r4),r15	;0xffde(r4)
    46d4:	3c f3       	and	#-1,	r12	;r3 As==11
    46d6:	3d f3       	and	#-1,	r13	;r3 As==11
    46d8:	3e f3       	and	#-1,	r14	;r3 As==11
    46da:	0f f3       	and	#0,	r15	;r3 As==00
    46dc:	0c e6       	xor	r6,	r12	
    46de:	0d e7       	xor	r7,	r13	
    46e0:	0e e8       	xor	r8,	r14	
    46e2:	0f e9       	xor	r9,	r15	
    46e4:	0f 11       	rra	r15		
    46e6:	0e 10       	rrc	r14		
    46e8:	0d 10       	rrc	r13		
    46ea:	0c 10       	rrc	r12		
    46ec:	0f 11       	rra	r15		
    46ee:	0e 10       	rrc	r14		
    46f0:	0d 10       	rrc	r13		
    46f2:	0c 10       	rrc	r12		
    46f4:	0f 11       	rra	r15		
    46f6:	0e 10       	rrc	r14		
    46f8:	0d 10       	rrc	r13		
    46fa:	0c 10       	rrc	r12		
    46fc:	0d 4c       	mov	r12,	r13	
    46fe:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4702:	2e 4f       	mov	@r15,	r14	
    4704:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4708:	2f 53       	incd	r15		
    470a:	2f 4f       	mov	@r15,	r15	
    470c:	4f 4f       	mov.b	r15,	r15	
    470e:	8f 10       	swpb	r15		
    4710:	0f 5f       	rla	r15		
    4712:	0f 5f       	rla	r15		
    4714:	0f 5f       	rla	r15		
    4716:	0f 5f       	rla	r15		
    4718:	0f 5f       	rla	r15		
    471a:	0f ee       	xor	r14,	r15	
    471c:	0f dd       	bis	r13,	r15	
    471e:	85 4f 00 00 	mov	r15,	0(r5)	;0x0000(r5)
        crypt[0] = ROTATE_LEFT_48( (crypt[0] ^ key[28-i]) - crypt[1], 8 );
    4722:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4726:	2d 4f       	mov	@r15,	r13	
    4728:	5e 44 d0 ff 	mov.b	-48(r4),r14	;0xffd0(r4)
    472c:	3f 40 1c 00 	mov	#28,	r15	;#0x001c
    4730:	0f 8e       	sub	r14,	r15	
    4732:	0f 5f       	rla	r15		
    4734:	1f 54 d6 ff 	add	-42(r4),r15	;0xffd6(r4)
    4738:	2f 4f       	mov	@r15,	r15	
    473a:	0e 4d       	mov	r13,	r14	
    473c:	0e ef       	xor	r15,	r14	
    473e:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4742:	2f 53       	incd	r15		
    4744:	2f 4f       	mov	@r15,	r15	
    4746:	0d 4e       	mov	r14,	r13	
    4748:	0d 8f       	sub	r15,	r13	
    474a:	0f 4d       	mov	r13,	r15	
    474c:	4f 4f       	mov.b	r15,	r15	
    474e:	8f 10       	swpb	r15		
    4750:	05 4f       	mov	r15,	r5	
    4752:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4756:	2d 4f       	mov	@r15,	r13	
    4758:	5e 44 d0 ff 	mov.b	-48(r4),r14	;0xffd0(r4)
    475c:	3f 40 1c 00 	mov	#28,	r15	;#0x001c
    4760:	0f 8e       	sub	r14,	r15	
    4762:	0f 5f       	rla	r15		
    4764:	1f 54 d6 ff 	add	-42(r4),r15	;0xffd6(r4)
    4768:	2f 4f       	mov	@r15,	r15	
    476a:	0e 4d       	mov	r13,	r14	
    476c:	0e ef       	xor	r15,	r14	
    476e:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4772:	2f 53       	incd	r15		
    4774:	2f 4f       	mov	@r15,	r15	
    4776:	0d 4e       	mov	r14,	r13	
    4778:	0d 8f       	sub	r15,	r13	
    477a:	0f 4d       	mov	r13,	r15	
    477c:	84 4f e0 ff 	mov	r15,	-32(r4)	;0xffe0(r4)
    4780:	84 43 e2 ff 	mov	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    4784:	84 43 e4 ff 	mov	#0,	-28(r4)	;r3 As==00, 0xffe4(r4)
    4788:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    478c:	1c 44 e0 ff 	mov	-32(r4),r12	;0xffe0(r4)
    4790:	1d 44 e2 ff 	mov	-30(r4),r13	;0xffe2(r4)
    4794:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    4798:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    479c:	3c f3       	and	#-1,	r12	;r3 As==11
    479e:	3d f3       	and	#-1,	r13	;r3 As==11
    47a0:	3e f3       	and	#-1,	r14	;r3 As==11
    47a2:	0f f3       	and	#0,	r15	;r3 As==00
    47a4:	0a 4e       	mov	r14,	r10	
    47a6:	0b 4f       	mov	r15,	r11	
    47a8:	8f 10       	swpb	r15		
    47aa:	8f 11       	sxt	r15		
    47ac:	8f 10       	swpb	r15		
    47ae:	8f 11       	sxt	r15		
    47b0:	8a 10       	swpb	r10		
    47b2:	8b 10       	swpb	r11		
    47b4:	4a eb       	xor.b	r11,	r10	
    47b6:	0a eb       	xor	r11,	r10	
    47b8:	8b 11       	sxt	r11		
    47ba:	0c 4a       	mov	r10,	r12	
    47bc:	0d 4b       	mov	r11,	r13	
    47be:	0e 4f       	mov	r15,	r14	
    47c0:	84 4c e8 ff 	mov	r12,	-24(r4)	;0xffe8(r4)
    47c4:	84 4d ea ff 	mov	r13,	-22(r4)	;0xffea(r4)
    47c8:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
    47cc:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    47d0:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    47d4:	0f d5       	bis	r5,	r15	
    47d6:	0e 4f       	mov	r15,	r14	
    47d8:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    47dc:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
{
    u8 i;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<29 ; i++ )
    47e0:	d4 53 d0 ff 	inc.b	-48(r4)	;0xffd0(r4)
    47e4:	f4 90 1d 00 	cmp.b	#29,	-48(r4)	;#0x001d, 0xffd0(r4)
    47e8:	d0 ff 
    47ea:	56 2b       	jnc	$-338    	;abs 0x4698
    {
        crypt[1] = ROTATE_RIGHT_48( crypt[0] ^ crypt[1], 3);
        crypt[0] = ROTATE_LEFT_48( (crypt[0] ^ key[28-i]) - crypt[1], 8 );
    }
}
    47ec:	31 50 20 00 	add	#32,	r1	;#0x0020
    47f0:	34 41       	pop	r4		
    47f2:	35 41       	pop	r5		
    47f4:	36 41       	pop	r6		
    47f6:	37 41       	pop	r7		
    47f8:	38 41       	pop	r8		
    47fa:	39 41       	pop	r9		
    47fc:	3a 41       	pop	r10		
    47fe:	3b 41       	pop	r11		
    4800:	30 41       	ret			

00004802 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4802:	04 12       	push	r4		
    4804:	04 41       	mov	r1,	r4	
    4806:	24 53       	incd	r4		
    4808:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    480c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4810:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4814:	0d 3c       	jmp	$+28     	;abs 0x4830
    {
      for (i = 0; i<d; i++) 
    4816:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    481a:	04 3c       	jmp	$+10     	;abs 0x4824
	{
	  nop();
    481c:	03 43       	nop			
	  nop();
    481e:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4820:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4824:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4828:	f8 ff 
    482a:	f8 2b       	jnc	$-14     	;abs 0x481c
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    482c:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4830:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4834:	fa ff 
    4836:	ef 2b       	jnc	$-32     	;abs 0x4816
	{
	  nop();
	  nop();
	}
    }
}
    4838:	31 50 06 00 	add	#6,	r1	;#0x0006
    483c:	34 41       	pop	r4		
    483e:	30 41       	ret			

00004840 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4840:	04 12       	push	r4		
    4842:	04 41       	mov	r1,	r4	
    4844:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4846:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    484a:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    484c:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4850:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4854:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4858:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    485c:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4860:	5f 42 05 00 	mov.b	&0x0005,r15	
    4864:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4868:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    486c:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4870:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4874:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4876:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    487a:	79 00 
  U1RCTL = 0;
    487c:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4880:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4884:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4888:	7c 00 
  U1MCTL = U1MCTL_INIT;
    488a:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    488e:	7b 00 

  delay(0x800);
    4890:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4894:	b0 12 02 48 	call	#0x4802	
  return 0;
    4898:	0f 43       	clr	r15		
}
    489a:	34 41       	pop	r4		
    489c:	30 41       	ret			

0000489e <uart1_putchar>:

int uart1_putchar(int c)
{
    489e:	04 12       	push	r4		
    48a0:	04 41       	mov	r1,	r4	
    48a2:	24 53       	incd	r4		
    48a4:	21 83       	decd	r1		
    48a6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    48aa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48ae:	4f 4f       	mov.b	r15,	r15	
    48b0:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    48b4:	03 43       	nop			
    48b6:	5f 42 79 00 	mov.b	&0x0079,r15	
    48ba:	4f 4f       	mov.b	r15,	r15	
    48bc:	1f f3       	and	#1,	r15	;r3 As==01
    48be:	0f 93       	tst	r15		
    48c0:	fa 27       	jz	$-10     	;abs 0x48b6
  return (unsigned char)c;
    48c2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48c6:	4f 4f       	mov.b	r15,	r15	
    48c8:	4f 4f       	mov.b	r15,	r15	
}
    48ca:	21 53       	incd	r1		
    48cc:	34 41       	pop	r4		
    48ce:	30 41       	ret			

000048d0 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    48d0:	04 12       	push	r4		
    48d2:	04 41       	mov	r1,	r4	
    48d4:	24 53       	incd	r4		
    48d6:	21 83       	decd	r1		
    48d8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    48dc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48e0:	b0 12 9e 48 	call	#0x489e	
}
    48e4:	21 53       	incd	r1		
    48e6:	34 41       	pop	r4		
    48e8:	30 41       	ret			

000048ea <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    48ea:	04 12       	push	r4		
    48ec:	04 41       	mov	r1,	r4	
    48ee:	24 53       	incd	r4		
  ;
}
    48f0:	34 41       	pop	r4		
    48f2:	30 41       	ret			

000048f4 <start_decrypt>:
void
start_decrypt()
{
    48f4:	04 12       	push	r4		
    48f6:	04 41       	mov	r1,	r4	
    48f8:	24 53       	incd	r4		
  ;
}
    48fa:	34 41       	pop	r4		
    48fc:	30 41       	ret			

000048fe <end_expe>:


void
end_expe()
{
    48fe:	04 12       	push	r4		
    4900:	04 41       	mov	r1,	r4	
    4902:	24 53       	incd	r4		
  ;
}
    4904:	34 41       	pop	r4		
    4906:	30 41       	ret			

00004908 <memset>:
    4908:	0b 12       	push	r11		
    490a:	0a 12       	push	r10		
    490c:	09 12       	push	r9		
    490e:	08 12       	push	r8		
    4910:	3d 90 06 00 	cmp	#6,	r13	;#0x0006
    4914:	09 2c       	jc	$+20     	;abs 0x4928
    4916:	0c 4f       	mov	r15,	r12	
    4918:	04 3c       	jmp	$+10     	;abs 0x4922
    491a:	cc 4e 00 00 	mov.b	r14,	0(r12)	;0x0000(r12)
    491e:	1c 53       	inc	r12		
    4920:	3d 53       	add	#-1,	r13	;r3 As==11
    4922:	0d 93       	tst	r13		
    4924:	fa 23       	jnz	$-10     	;abs 0x491a
    4926:	20 3c       	jmp	$+66     	;abs 0x4968
    4928:	4e 4e       	mov.b	r14,	r14	
    492a:	4b 4e       	mov.b	r14,	r11	
    492c:	0b 93       	tst	r11		
    492e:	03 24       	jz	$+8      	;abs 0x4936
    4930:	0c 4b       	mov	r11,	r12	
    4932:	8c 10       	swpb	r12		
    4934:	0b dc       	bis	r12,	r11	
    4936:	1f b3       	bit	#1,	r15	;r3 As==01
    4938:	06 24       	jz	$+14     	;abs 0x4946
    493a:	3d 53       	add	#-1,	r13	;r3 As==11
    493c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    4940:	09 4f       	mov	r15,	r9	
    4942:	19 53       	inc	r9		
    4944:	01 3c       	jmp	$+4      	;abs 0x4948
    4946:	09 4f       	mov	r15,	r9	
    4948:	0c 4d       	mov	r13,	r12	
    494a:	12 c3       	clrc			
    494c:	0c 10       	rrc	r12		
    494e:	0a 49       	mov	r9,	r10	
    4950:	08 4c       	mov	r12,	r8	
    4952:	8a 4b 00 00 	mov	r11,	0(r10)	;0x0000(r10)
    4956:	2a 53       	incd	r10		
    4958:	38 53       	add	#-1,	r8	;r3 As==11
    495a:	fb 23       	jnz	$-8      	;abs 0x4952
    495c:	0c 5c       	rla	r12		
    495e:	0c 59       	add	r9,	r12	
    4960:	1d f3       	and	#1,	r13	;r3 As==01
    4962:	02 24       	jz	$+6      	;abs 0x4968
    4964:	cc 4e 00 00 	mov.b	r14,	0(r12)	;0x0000(r12)
    4968:	38 41       	pop	r8		
    496a:	39 41       	pop	r9		
    496c:	3a 41       	pop	r10		
    496e:	3b 41       	pop	r11		
    4970:	30 41       	ret			

00004972 <_unexpected_>:
    4972:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	78 41 78 41 78 41 78 41 78 41 78 41 78 41 78 41     xAxAxAxAxAxAxAxA
    fff0:	78 41 78 41 78 41 78 41 78 41 78 41 78 41 00 40     xAxAxAxAxAxAxA.@
