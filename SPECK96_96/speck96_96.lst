
speck96_96.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 speck96_96.c
00004162 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00000000 l    df *ABS*	00000000 memset.c
000048ba g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
00004162  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
00004162  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
00004636 g     F .text	000001b6 Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
0000495e g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
0000482a g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
0000415c  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
00004162  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
000048e8 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
00004166 g     F .text	0000026e KeyExpansion
0000019e g       *ABS*	00000000 __TBCCR6
00004162  w      .text	00000000 __isr_5
0000495e g       *ABS*	00000000 __data_load_start
00004162 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
00004162  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
00004162  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
00004162  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004162  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
0000495c  w      .text	00000000 _unexpected_
00004162  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
00004162  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004888 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
00004162 g       .text	00000000 __ctors_start
00004162  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .text	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
000048f2 g     F .text	0000006a memset
0000403e g     F .text	0000011e main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
00004162  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
000047ec g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
00004162  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
00004162 g       .text	00000000 __dtors_start
00004162  w      .text	00000000 __isr_6
00004162 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
00004162  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .text	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
000048d4 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
0000415c  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
000048de g     F .text	0000000a start_decrypt
00001100 g       .text	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
000043d4 g     F .text	00000262 Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 5e 49 	mov	18782(r15),4352(r15);0x495e(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
        crypt[0] = ROTATE_LEFT_48( (crypt[0] ^ key[27-i]) - crypt[1], 8 );
    }
}

int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 20 fe 	add	#-480,	r1	;#0xfe20
    u64 text[2];
    text[0] = 0x65776f68202c;
    4046:	b4 40 2c 20 	mov	#8236,	-482(r4);#0x202c, 0xfe1e(r4)
    404a:	1e fe 
    404c:	b4 40 68 6f 	mov	#28520,	-480(r4);#0x6f68, 0xfe20(r4)
    4050:	20 fe 
    4052:	b4 40 77 65 	mov	#25975,	-478(r4);#0x6577, 0xfe22(r4)
    4056:	22 fe 
    4058:	84 43 24 fe 	mov	#0,	-476(r4);r3 As==00, 0xfe24(r4)
    text[1] = 0x656761737520;
    405c:	b4 40 20 75 	mov	#29984,	-474(r4);#0x7520, 0xfe26(r4)
    4060:	26 fe 
    4062:	b4 40 73 61 	mov	#24947,	-472(r4);#0x6173, 0xfe28(r4)
    4066:	28 fe 
    4068:	b4 40 67 65 	mov	#25959,	-470(r4);#0x6567, 0xfe2a(r4)
    406c:	2a fe 
    406e:	84 43 2c fe 	mov	#0,	-468(r4);r3 As==00, 0xfe2c(r4)
    u64 crypt[2] = {0};
    4072:	0f 44       	mov	r4,	r15	
    4074:	3f 50 2e fe 	add	#-466,	r15	;#0xfe2e
    4078:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    407c:	2f 53       	incd	r15		
    407e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4082:	2f 53       	incd	r15		
    4084:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4088:	2f 53       	incd	r15		
    408a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    408e:	2f 53       	incd	r15		
    4090:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4094:	2f 53       	incd	r15		
    4096:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    409a:	2f 53       	incd	r15		
    409c:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a0:	2f 53       	incd	r15		
    40a2:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a6:	2f 53       	incd	r15		
    u64 l[28] = {0};
    40a8:	0f 44       	mov	r4,	r15	
    40aa:	3f 50 3e fe 	add	#-450,	r15	;#0xfe3e
    40ae:	3e 40 e0 00 	mov	#224,	r14	;#0x00e0
    40b2:	0d 4e       	mov	r14,	r13	
    40b4:	0e 43       	clr	r14		
    40b6:	b0 12 f2 48 	call	#0x48f2	
    u64 k[28] = {0};
    40ba:	0f 44       	mov	r4,	r15	
    40bc:	3f 50 1e ff 	add	#-226,	r15	;#0xff1e
    40c0:	3e 40 e0 00 	mov	#224,	r14	;#0x00e0
    40c4:	0d 4e       	mov	r14,	r13	
    40c6:	0e 43       	clr	r14		
    40c8:	b0 12 f2 48 	call	#0x48f2	
    l[0] = 0x0d0c0b0a0908;
    40cc:	b4 40 08 09 	mov	#2312,	-450(r4);#0x0908, 0xfe3e(r4)
    40d0:	3e fe 
    40d2:	b4 40 0a 0b 	mov	#2826,	-448(r4);#0x0b0a, 0xfe40(r4)
    40d6:	40 fe 
    40d8:	b4 40 0c 0d 	mov	#3340,	-446(r4);#0x0d0c, 0xfe42(r4)
    40dc:	42 fe 
    40de:	84 43 44 fe 	mov	#0,	-444(r4);r3 As==00, 0xfe44(r4)
    k[0] = 0x050403020100;
    40e2:	b4 40 00 01 	mov	#256,	-226(r4);#0x0100, 0xff1e(r4)
    40e6:	1e ff 
    40e8:	b4 40 02 03 	mov	#770,	-224(r4);#0x0302, 0xff20(r4)
    40ec:	20 ff 
    40ee:	b4 40 04 05 	mov	#1284,	-222(r4);#0x0504, 0xff22(r4)
    40f2:	22 ff 
    40f4:	84 43 24 ff 	mov	#0,	-220(r4);r3 As==00, 0xff24(r4)
    
	START_ENCRYPT();
    40f8:	b0 12 d4 48 	call	#0x48d4	
	KeyExpansion ( l, k );
    40fc:	0e 44       	mov	r4,	r14	
    40fe:	3e 50 1e ff 	add	#-226,	r14	;#0xff1e
    4102:	0f 44       	mov	r4,	r15	
    4104:	3f 50 3e fe 	add	#-450,	r15	;#0xfe3e
    4108:	b0 12 66 41 	call	#0x4166	
    Encrypt ( text, crypt, k );
    410c:	0e 44       	mov	r4,	r14	
    410e:	3e 50 1e ff 	add	#-226,	r14	;#0xff1e
    4112:	0f 44       	mov	r4,	r15	
    4114:	3f 50 2e fe 	add	#-466,	r15	;#0xfe2e
    4118:	0d 4e       	mov	r14,	r13	
    411a:	0e 4f       	mov	r15,	r14	
    411c:	0f 44       	mov	r4,	r15	
    411e:	3f 50 1e fe 	add	#-482,	r15	;#0xfe1e
    4122:	b0 12 d4 43 	call	#0x43d4	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	START_DECRYPT();
    4126:	b0 12 de 48 	call	#0x48de	
	KeyExpansion ( l, k );
    412a:	0e 44       	mov	r4,	r14	
    412c:	3e 50 1e ff 	add	#-226,	r14	;#0xff1e
    4130:	0f 44       	mov	r4,	r15	
    4132:	3f 50 3e fe 	add	#-450,	r15	;#0xfe3e
    4136:	b0 12 66 41 	call	#0x4166	
    Decrypt ( crypt, text, k );
    413a:	0e 44       	mov	r4,	r14	
    413c:	3e 50 1e ff 	add	#-226,	r14	;#0xff1e
    4140:	0f 44       	mov	r4,	r15	
    4142:	3f 50 2e fe 	add	#-466,	r15	;#0xfe2e
    4146:	0d 4e       	mov	r14,	r13	
    4148:	0e 44       	mov	r4,	r14	
    414a:	3e 50 1e fe 	add	#-482,	r14	;#0xfe1e
    414e:	b0 12 36 46 	call	#0x4636	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	END_EXPE();
    4152:	b0 12 e8 48 	call	#0x48e8	

    return 0;
    4156:	0f 43       	clr	r15		
}
    4158:	31 50 e0 01 	add	#480,	r1	;#0x01e0

0000415c <__stop_progExec__>:
    415c:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    4160:	fd 3f       	jmp	$-4      	;abs 0x415c

00004162 <__ctors_end>:
    4162:	30 40 5c 49 	br	#0x495c	

00004166 <KeyExpansion>:

#define ROTATE_LEFT_48(x,bits) ( (x << bits) | ((x & 0xffffffffffff) >> (48-bits)) )
#define ROTATE_RIGHT_48(x,bits) ( ((x & 0xffffffffffff) >> bits) | (x << (48-bits)) )

void KeyExpansion ( u64 l[], u64 k[] )
{
    4166:	0b 12       	push	r11		
    4168:	0a 12       	push	r10		
    416a:	09 12       	push	r9		
    416c:	08 12       	push	r8		
    416e:	07 12       	push	r7		
    4170:	06 12       	push	r6		
    4172:	05 12       	push	r5		
    4174:	04 12       	push	r4		
    4176:	04 41       	mov	r1,	r4	
    4178:	34 50 10 00 	add	#16,	r4	;#0x0010
    417c:	31 50 d6 ff 	add	#-42,	r1	;#0xffd6
    4180:	84 4f c8 ff 	mov	r15,	-56(r4)	;0xffc8(r4)
    4184:	84 4e ca ff 	mov	r14,	-54(r4)	;0xffca(r4)
    u8 i;
    for ( i=0 ; i<27 ; i++ )
    4188:	c4 43 c6 ff 	mov.b	#0,	-58(r4)	;r3 As==00, 0xffc6(r4)
    418c:	30 40 b2 43 	br	#0x43b2	
    {
        l[i+1] = ( k[i] + ROTATE_RIGHT_48(l[i], 8) ) ^ i;
    4190:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    4194:	1f 53       	inc	r15		
    4196:	0f 5f       	rla	r15		
    4198:	0f 5f       	rla	r15		
    419a:	0f 5f       	rla	r15		
    419c:	15 44 c8 ff 	mov	-56(r4),r5	;0xffc8(r4)
    41a0:	05 5f       	add	r15,	r5	
    41a2:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    41a6:	0f 5f       	rla	r15		
    41a8:	0f 5f       	rla	r15		
    41aa:	0f 5f       	rla	r15		
    41ac:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    41b0:	a4 4f cc ff 	mov	@r15,	-52(r4)	;0xffcc(r4)
    41b4:	94 4f 02 00 	mov	2(r15),	-50(r4)	;0x0002(r15), 0xffce(r4)
    41b8:	ce ff 
    41ba:	94 4f 04 00 	mov	4(r15),	-48(r4)	;0x0004(r15), 0xffd0(r4)
    41be:	d0 ff 
    41c0:	94 4f 06 00 	mov	6(r15),	-46(r4)	;0x0006(r15), 0xffd2(r4)
    41c4:	d2 ff 
    41c6:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    41ca:	0f 5f       	rla	r15		
    41cc:	0f 5f       	rla	r15		
    41ce:	0f 5f       	rla	r15		
    41d0:	1f 54 c8 ff 	add	-56(r4),r15	;0xffc8(r4)
    41d4:	2c 4f       	mov	@r15,	r12	
    41d6:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41da:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    41de:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    41e2:	3c f3       	and	#-1,	r12	;r3 As==11
    41e4:	3d f3       	and	#-1,	r13	;r3 As==11
    41e6:	3e f3       	and	#-1,	r14	;r3 As==11
    41e8:	0f f3       	and	#0,	r15	;r3 As==00
    41ea:	8c 10       	swpb	r12		
    41ec:	8d 10       	swpb	r13		
    41ee:	4c ed       	xor.b	r13,	r12	
    41f0:	0c ed       	xor	r13,	r12	
    41f2:	8e 10       	swpb	r14		
    41f4:	4d ee       	xor.b	r14,	r13	
    41f6:	0d ee       	xor	r14,	r13	
    41f8:	8f 10       	swpb	r15		
    41fa:	4e ef       	xor.b	r15,	r14	
    41fc:	0e ef       	xor	r15,	r14	
    41fe:	4f 4f       	mov.b	r15,	r15	
    4200:	5b 44 c6 ff 	mov.b	-58(r4),r11	;0xffc6(r4)
    4204:	0b 5b       	rla	r11		
    4206:	0b 5b       	rla	r11		
    4208:	0b 5b       	rla	r11		
    420a:	1b 54 c8 ff 	add	-56(r4),r11	;0xffc8(r4)
    420e:	28 4b       	mov	@r11,	r8	
    4210:	19 4b 02 00 	mov	2(r11),	r9	;0x0002(r11)
    4214:	1a 4b 04 00 	mov	4(r11),	r10	;0x0004(r11)
    4218:	1b 4b 06 00 	mov	6(r11),	r11	;0x0006(r11)
    421c:	84 48 ec ff 	mov	r8,	-20(r4)	;0xffec(r4)
    4220:	84 49 ee ff 	mov	r9,	-18(r4)	;0xffee(r4)
    4224:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    4228:	1b 44 ec ff 	mov	-20(r4),r11	;0xffec(r4)
    422c:	4a eb       	xor.b	r11,	r10	
    422e:	0a eb       	xor	r11,	r10	
    4230:	8a 10       	swpb	r10		
    4232:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    4236:	5a 44 ec ff 	mov.b	-20(r4),r10	;0xffec(r4)
    423a:	84 4a ec ff 	mov	r10,	-20(r4)	;0xffec(r4)
    423e:	94 10 ec ff 	swpb	-20(r4)	;0xffec(r4)
    4242:	18 44 ec ff 	mov	-20(r4),r8	;0xffec(r4)
    4246:	19 44 ee ff 	mov	-18(r4),r9	;0xffee(r4)
    424a:	0a 43       	clr	r10		
    424c:	0b 43       	clr	r11		
    424e:	84 4a d4 ff 	mov	r10,	-44(r4)	;0xffd4(r4)
    4252:	84 4b d6 ff 	mov	r11,	-42(r4)	;0xffd6(r4)
    4256:	84 48 d8 ff 	mov	r8,	-40(r4)	;0xffd8(r4)
    425a:	84 49 da ff 	mov	r9,	-38(r4)	;0xffda(r4)
    425e:	1c d4 d4 ff 	bis	-44(r4),r12	;0xffd4(r4)
    4262:	1d d4 d6 ff 	bis	-42(r4),r13	;0xffd6(r4)
    4266:	1e d4 d8 ff 	bis	-40(r4),r14	;0xffd8(r4)
    426a:	1f d4 da ff 	bis	-38(r4),r15	;0xffda(r4)
    426e:	1c 54 cc ff 	add	-52(r4),r12	;0xffcc(r4)
    4272:	1d 64 ce ff 	addc	-50(r4),r13	;0xffce(r4)
    4276:	1e 64 d0 ff 	addc	-48(r4),r14	;0xffd0(r4)
    427a:	1f 64 d2 ff 	addc	-46(r4),r15	;0xffd2(r4)
    427e:	5b 44 c6 ff 	mov.b	-58(r4),r11	;0xffc6(r4)
    4282:	84 4b dc ff 	mov	r11,	-36(r4)	;0xffdc(r4)
    4286:	84 43 de ff 	mov	#0,	-34(r4)	;r3 As==00, 0xffde(r4)
    428a:	84 43 e0 ff 	mov	#0,	-32(r4)	;r3 As==00, 0xffe0(r4)
    428e:	84 43 e2 ff 	mov	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    4292:	1c e4 dc ff 	xor	-36(r4),r12	;0xffdc(r4)
    4296:	1d e4 de ff 	xor	-34(r4),r13	;0xffde(r4)
    429a:	1e e4 e0 ff 	xor	-32(r4),r14	;0xffe0(r4)
    429e:	1f e4 e2 ff 	xor	-30(r4),r15	;0xffe2(r4)
    42a2:	85 4c 00 00 	mov	r12,	0(r5)	;0x0000(r5)
    42a6:	85 4d 02 00 	mov	r13,	2(r5)	;0x0002(r5)
    42aa:	85 4e 04 00 	mov	r14,	4(r5)	;0x0004(r5)
    42ae:	85 4f 06 00 	mov	r15,	6(r5)	;0x0006(r5)
        k[i+1] = ROTATE_LEFT_48(k[i], 3) ^ l[i+1];
    42b2:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    42b6:	1f 53       	inc	r15		
    42b8:	0f 5f       	rla	r15		
    42ba:	0f 5f       	rla	r15		
    42bc:	0f 5f       	rla	r15		
    42be:	15 44 ca ff 	mov	-54(r4),r5	;0xffca(r4)
    42c2:	05 5f       	add	r15,	r5	
    42c4:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    42c8:	0f 5f       	rla	r15		
    42ca:	0f 5f       	rla	r15		
    42cc:	0f 5f       	rla	r15		
    42ce:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    42d2:	2c 4f       	mov	@r15,	r12	
    42d4:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42d8:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    42dc:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    42e0:	08 4c       	mov	r12,	r8	
    42e2:	09 4d       	mov	r13,	r9	
    42e4:	0a 4e       	mov	r14,	r10	
    42e6:	0b 4f       	mov	r15,	r11	
    42e8:	08 58       	rla	r8		
    42ea:	09 69       	rlc	r9		
    42ec:	0a 6a       	rlc	r10		
    42ee:	0b 6b       	rlc	r11		
    42f0:	08 58       	rla	r8		
    42f2:	09 69       	rlc	r9		
    42f4:	0a 6a       	rlc	r10		
    42f6:	0b 6b       	rlc	r11		
    42f8:	08 58       	rla	r8		
    42fa:	09 69       	rlc	r9		
    42fc:	0a 6a       	rlc	r10		
    42fe:	0b 6b       	rlc	r11		
    4300:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    4304:	0f 5f       	rla	r15		
    4306:	0f 5f       	rla	r15		
    4308:	0f 5f       	rla	r15		
    430a:	1f 54 ca ff 	add	-54(r4),r15	;0xffca(r4)
    430e:	2c 4f       	mov	@r15,	r12	
    4310:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4314:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4318:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    431c:	3c f3       	and	#-1,	r12	;r3 As==11
    431e:	3d f3       	and	#-1,	r13	;r3 As==11
    4320:	3e f3       	and	#-1,	r14	;r3 As==11
    4322:	0f f3       	and	#0,	r15	;r3 As==00
    4324:	06 4e       	mov	r14,	r6	
    4326:	07 4f       	mov	r15,	r7	
    4328:	86 10       	swpb	r6		
    432a:	87 10       	swpb	r7		
    432c:	46 e7       	xor.b	r7,	r6	
    432e:	06 e7       	xor	r7,	r6	
    4330:	47 47       	mov.b	r7,	r7	
    4332:	12 c3       	clrc			
    4334:	07 10       	rrc	r7		
    4336:	06 10       	rrc	r6		
    4338:	12 c3       	clrc			
    433a:	07 10       	rrc	r7		
    433c:	06 10       	rrc	r6		
    433e:	12 c3       	clrc			
    4340:	07 10       	rrc	r7		
    4342:	06 10       	rrc	r6		
    4344:	12 c3       	clrc			
    4346:	07 10       	rrc	r7		
    4348:	06 10       	rrc	r6		
    434a:	12 c3       	clrc			
    434c:	07 10       	rrc	r7		
    434e:	06 10       	rrc	r6		
    4350:	0c 46       	mov	r6,	r12	
    4352:	0d 47       	mov	r7,	r13	
    4354:	0e 43       	clr	r14		
    4356:	0f 43       	clr	r15		
    4358:	84 4c e4 ff 	mov	r12,	-28(r4)	;0xffe4(r4)
    435c:	84 4d e6 ff 	mov	r13,	-26(r4)	;0xffe6(r4)
    4360:	84 4e e8 ff 	mov	r14,	-24(r4)	;0xffe8(r4)
    4364:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
    4368:	18 d4 e4 ff 	bis	-28(r4),r8	;0xffe4(r4)
    436c:	19 d4 e6 ff 	bis	-26(r4),r9	;0xffe6(r4)
    4370:	1a d4 e8 ff 	bis	-24(r4),r10	;0xffe8(r4)
    4374:	1b d4 ea ff 	bis	-22(r4),r11	;0xffea(r4)
    4378:	5f 44 c6 ff 	mov.b	-58(r4),r15	;0xffc6(r4)
    437c:	1f 53       	inc	r15		
    437e:	0f 5f       	rla	r15		
    4380:	0f 5f       	rla	r15		
    4382:	0f 5f       	rla	r15		
    4384:	1f 54 c8 ff 	add	-56(r4),r15	;0xffc8(r4)
    4388:	2c 4f       	mov	@r15,	r12	
    438a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    438e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4392:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4396:	0c e8       	xor	r8,	r12	
    4398:	0d e9       	xor	r9,	r13	
    439a:	0e ea       	xor	r10,	r14	
    439c:	0f eb       	xor	r11,	r15	
    439e:	85 4c 00 00 	mov	r12,	0(r5)	;0x0000(r5)
    43a2:	85 4d 02 00 	mov	r13,	2(r5)	;0x0002(r5)
    43a6:	85 4e 04 00 	mov	r14,	4(r5)	;0x0004(r5)
    43aa:	85 4f 06 00 	mov	r15,	6(r5)	;0x0006(r5)
#define ROTATE_RIGHT_48(x,bits) ( ((x & 0xffffffffffff) >> bits) | (x << (48-bits)) )

void KeyExpansion ( u64 l[], u64 k[] )
{
    u8 i;
    for ( i=0 ; i<27 ; i++ )
    43ae:	d4 53 c6 ff 	inc.b	-58(r4)	;0xffc6(r4)
    43b2:	f4 90 1b 00 	cmp.b	#27,	-58(r4)	;#0x001b, 0xffc6(r4)
    43b6:	c6 ff 
    43b8:	02 2c       	jc	$+6      	;abs 0x43be
    43ba:	30 40 90 41 	br	#0x4190	
    {
        l[i+1] = ( k[i] + ROTATE_RIGHT_48(l[i], 8) ) ^ i;
        k[i+1] = ROTATE_LEFT_48(k[i], 3) ^ l[i+1];
    }
}
    43be:	31 50 2a 00 	add	#42,	r1	;#0x002a
    43c2:	34 41       	pop	r4		
    43c4:	35 41       	pop	r5		
    43c6:	36 41       	pop	r6		
    43c8:	37 41       	pop	r7		
    43ca:	38 41       	pop	r8		
    43cc:	39 41       	pop	r9		
    43ce:	3a 41       	pop	r10		
    43d0:	3b 41       	pop	r11		
    43d2:	30 41       	ret			

000043d4 <Encrypt>:

void Encrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    43d4:	0b 12       	push	r11		
    43d6:	0a 12       	push	r10		
    43d8:	09 12       	push	r9		
    43da:	08 12       	push	r8		
    43dc:	07 12       	push	r7		
    43de:	06 12       	push	r6		
    43e0:	05 12       	push	r5		
    43e2:	04 12       	push	r4		
    43e4:	04 41       	mov	r1,	r4	
    43e6:	34 50 10 00 	add	#16,	r4	;#0x0010
    43ea:	31 50 e4 ff 	add	#-28,	r1	;#0xffe4
    43ee:	84 4f d6 ff 	mov	r15,	-42(r4)	;0xffd6(r4)
    43f2:	84 4e d8 ff 	mov	r14,	-40(r4)	;0xffd8(r4)
    43f6:	84 4d da ff 	mov	r13,	-38(r4)	;0xffda(r4)
    u8 i;
    crypt[0] = text[0];
    43fa:	1f 44 d6 ff 	mov	-42(r4),r15	;0xffd6(r4)
    43fe:	2c 4f       	mov	@r15,	r12	
    4400:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4404:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4408:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    440c:	1b 44 d8 ff 	mov	-40(r4),r11	;0xffd8(r4)
    4410:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4414:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4418:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    441c:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    4420:	1b 44 d8 ff 	mov	-40(r4),r11	;0xffd8(r4)
    4424:	3b 52       	add	#8,	r11	;r2 As==11
    4426:	1f 44 d6 ff 	mov	-42(r4),r15	;0xffd6(r4)
    442a:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    442e:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    4432:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    4436:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    443a:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    443e:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4442:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4446:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<28 ; i++ )
    444a:	c4 43 d4 ff 	mov.b	#0,	-44(r4)	;r3 As==00, 0xffd4(r4)
    444e:	e4 3c       	jmp	$+458    	;abs 0x4618
    {
        crypt[0] = ( ROTATE_RIGHT_48(crypt[0], 8) + crypt[1] ) ^ key[i];
    4450:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    4454:	2c 4f       	mov	@r15,	r12	
    4456:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    445a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    445e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4462:	3c f3       	and	#-1,	r12	;r3 As==11
    4464:	3d f3       	and	#-1,	r13	;r3 As==11
    4466:	3e f3       	and	#-1,	r14	;r3 As==11
    4468:	0f f3       	and	#0,	r15	;r3 As==00
    446a:	8c 10       	swpb	r12		
    446c:	8d 10       	swpb	r13		
    446e:	4c ed       	xor.b	r13,	r12	
    4470:	0c ed       	xor	r13,	r12	
    4472:	8e 10       	swpb	r14		
    4474:	4d ee       	xor.b	r14,	r13	
    4476:	0d ee       	xor	r14,	r13	
    4478:	8f 10       	swpb	r15		
    447a:	4e ef       	xor.b	r15,	r14	
    447c:	0e ef       	xor	r15,	r14	
    447e:	4f 4f       	mov.b	r15,	r15	
    4480:	1b 44 d8 ff 	mov	-40(r4),r11	;0xffd8(r4)
    4484:	28 4b       	mov	@r11,	r8	
    4486:	19 4b 02 00 	mov	2(r11),	r9	;0x0002(r11)
    448a:	1a 4b 04 00 	mov	4(r11),	r10	;0x0004(r11)
    448e:	1b 4b 06 00 	mov	6(r11),	r11	;0x0006(r11)
    4492:	84 48 ec ff 	mov	r8,	-20(r4)	;0xffec(r4)
    4496:	84 49 ee ff 	mov	r9,	-18(r4)	;0xffee(r4)
    449a:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    449e:	1b 44 ec ff 	mov	-20(r4),r11	;0xffec(r4)
    44a2:	4a eb       	xor.b	r11,	r10	
    44a4:	0a eb       	xor	r11,	r10	
    44a6:	8a 10       	swpb	r10		
    44a8:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    44ac:	5a 44 ec ff 	mov.b	-20(r4),r10	;0xffec(r4)
    44b0:	84 4a ec ff 	mov	r10,	-20(r4)	;0xffec(r4)
    44b4:	94 10 ec ff 	swpb	-20(r4)	;0xffec(r4)
    44b8:	18 44 ec ff 	mov	-20(r4),r8	;0xffec(r4)
    44bc:	19 44 ee ff 	mov	-18(r4),r9	;0xffee(r4)
    44c0:	0a 43       	clr	r10		
    44c2:	0b 43       	clr	r11		
    44c4:	84 4a dc ff 	mov	r10,	-36(r4)	;0xffdc(r4)
    44c8:	84 4b de ff 	mov	r11,	-34(r4)	;0xffde(r4)
    44cc:	84 48 e0 ff 	mov	r8,	-32(r4)	;0xffe0(r4)
    44d0:	84 49 e2 ff 	mov	r9,	-30(r4)	;0xffe2(r4)
    44d4:	18 44 dc ff 	mov	-36(r4),r8	;0xffdc(r4)
    44d8:	19 44 de ff 	mov	-34(r4),r9	;0xffde(r4)
    44dc:	1a 44 e0 ff 	mov	-32(r4),r10	;0xffe0(r4)
    44e0:	1b 44 e2 ff 	mov	-30(r4),r11	;0xffe2(r4)
    44e4:	08 dc       	bis	r12,	r8	
    44e6:	09 dd       	bis	r13,	r9	
    44e8:	0a de       	bis	r14,	r10	
    44ea:	0b df       	bis	r15,	r11	
    44ec:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    44f0:	3f 52       	add	#8,	r15	;r2 As==11
    44f2:	2c 4f       	mov	@r15,	r12	
    44f4:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    44f8:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    44fc:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4500:	08 5c       	add	r12,	r8	
    4502:	09 6d       	addc	r13,	r9	
    4504:	0a 6e       	addc	r14,	r10	
    4506:	0b 6f       	addc	r15,	r11	
    4508:	5f 44 d4 ff 	mov.b	-44(r4),r15	;0xffd4(r4)
    450c:	0f 5f       	rla	r15		
    450e:	0f 5f       	rla	r15		
    4510:	0f 5f       	rla	r15		
    4512:	1f 54 da ff 	add	-38(r4),r15	;0xffda(r4)
    4516:	2c 4f       	mov	@r15,	r12	
    4518:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    451c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4520:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4524:	0c e8       	xor	r8,	r12	
    4526:	0d e9       	xor	r9,	r13	
    4528:	0e ea       	xor	r10,	r14	
    452a:	0f eb       	xor	r11,	r15	
    452c:	1b 44 d8 ff 	mov	-40(r4),r11	;0xffd8(r4)
    4530:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4534:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4538:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    453c:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        crypt[1] = ROTATE_LEFT_48(crypt[1], 3) ^ crypt[0];
    4540:	15 44 d8 ff 	mov	-40(r4),r5	;0xffd8(r4)
    4544:	35 52       	add	#8,	r5	;r2 As==11
    4546:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    454a:	3f 52       	add	#8,	r15	;r2 As==11
    454c:	2c 4f       	mov	@r15,	r12	
    454e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4552:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4556:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    455a:	08 4c       	mov	r12,	r8	
    455c:	09 4d       	mov	r13,	r9	
    455e:	0a 4e       	mov	r14,	r10	
    4560:	0b 4f       	mov	r15,	r11	
    4562:	08 58       	rla	r8		
    4564:	09 69       	rlc	r9		
    4566:	0a 6a       	rlc	r10		
    4568:	0b 6b       	rlc	r11		
    456a:	08 58       	rla	r8		
    456c:	09 69       	rlc	r9		
    456e:	0a 6a       	rlc	r10		
    4570:	0b 6b       	rlc	r11		
    4572:	08 58       	rla	r8		
    4574:	09 69       	rlc	r9		
    4576:	0a 6a       	rlc	r10		
    4578:	0b 6b       	rlc	r11		
    457a:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    457e:	3f 52       	add	#8,	r15	;r2 As==11
    4580:	2c 4f       	mov	@r15,	r12	
    4582:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4586:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    458a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    458e:	3c f3       	and	#-1,	r12	;r3 As==11
    4590:	3d f3       	and	#-1,	r13	;r3 As==11
    4592:	3e f3       	and	#-1,	r14	;r3 As==11
    4594:	0f f3       	and	#0,	r15	;r3 As==00
    4596:	06 4e       	mov	r14,	r6	
    4598:	07 4f       	mov	r15,	r7	
    459a:	86 10       	swpb	r6		
    459c:	87 10       	swpb	r7		
    459e:	46 e7       	xor.b	r7,	r6	
    45a0:	06 e7       	xor	r7,	r6	
    45a2:	47 47       	mov.b	r7,	r7	
    45a4:	12 c3       	clrc			
    45a6:	07 10       	rrc	r7		
    45a8:	06 10       	rrc	r6		
    45aa:	12 c3       	clrc			
    45ac:	07 10       	rrc	r7		
    45ae:	06 10       	rrc	r6		
    45b0:	12 c3       	clrc			
    45b2:	07 10       	rrc	r7		
    45b4:	06 10       	rrc	r6		
    45b6:	12 c3       	clrc			
    45b8:	07 10       	rrc	r7		
    45ba:	06 10       	rrc	r6		
    45bc:	12 c3       	clrc			
    45be:	07 10       	rrc	r7		
    45c0:	06 10       	rrc	r6		
    45c2:	0c 46       	mov	r6,	r12	
    45c4:	0d 47       	mov	r7,	r13	
    45c6:	0e 43       	clr	r14		
    45c8:	0f 43       	clr	r15		
    45ca:	84 4c e4 ff 	mov	r12,	-28(r4)	;0xffe4(r4)
    45ce:	84 4d e6 ff 	mov	r13,	-26(r4)	;0xffe6(r4)
    45d2:	84 4e e8 ff 	mov	r14,	-24(r4)	;0xffe8(r4)
    45d6:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
    45da:	18 d4 e4 ff 	bis	-28(r4),r8	;0xffe4(r4)
    45de:	19 d4 e6 ff 	bis	-26(r4),r9	;0xffe6(r4)
    45e2:	1a d4 e8 ff 	bis	-24(r4),r10	;0xffe8(r4)
    45e6:	1b d4 ea ff 	bis	-22(r4),r11	;0xffea(r4)
    45ea:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    45ee:	2c 4f       	mov	@r15,	r12	
    45f0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    45f4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    45f8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    45fc:	0c e8       	xor	r8,	r12	
    45fe:	0d e9       	xor	r9,	r13	
    4600:	0e ea       	xor	r10,	r14	
    4602:	0f eb       	xor	r11,	r15	
    4604:	85 4c 00 00 	mov	r12,	0(r5)	;0x0000(r5)
    4608:	85 4d 02 00 	mov	r13,	2(r5)	;0x0002(r5)
    460c:	85 4e 04 00 	mov	r14,	4(r5)	;0x0004(r5)
    4610:	85 4f 06 00 	mov	r15,	6(r5)	;0x0006(r5)
{
    u8 i;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<28 ; i++ )
    4614:	d4 53 d4 ff 	inc.b	-44(r4)	;0xffd4(r4)
    4618:	f4 90 1c 00 	cmp.b	#28,	-44(r4)	;#0x001c, 0xffd4(r4)
    461c:	d4 ff 
    461e:	18 2b       	jnc	$-462    	;abs 0x4450
    {
        crypt[0] = ( ROTATE_RIGHT_48(crypt[0], 8) + crypt[1] ) ^ key[i];
        crypt[1] = ROTATE_LEFT_48(crypt[1], 3) ^ crypt[0];
    }
}
    4620:	31 50 1c 00 	add	#28,	r1	;#0x001c
    4624:	34 41       	pop	r4		
    4626:	35 41       	pop	r5		
    4628:	36 41       	pop	r6		
    462a:	37 41       	pop	r7		
    462c:	38 41       	pop	r8		
    462e:	39 41       	pop	r9		
    4630:	3a 41       	pop	r10		
    4632:	3b 41       	pop	r11		
    4634:	30 41       	ret			

00004636 <Decrypt>:

void Decrypt ( u16 text[], u16 crypt[], u16 key[] )
{
    4636:	0b 12       	push	r11		
    4638:	0a 12       	push	r10		
    463a:	09 12       	push	r9		
    463c:	08 12       	push	r8		
    463e:	07 12       	push	r7		
    4640:	06 12       	push	r6		
    4642:	05 12       	push	r5		
    4644:	04 12       	push	r4		
    4646:	04 41       	mov	r1,	r4	
    4648:	34 50 10 00 	add	#16,	r4	;#0x0010
    464c:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    4650:	84 4f d2 ff 	mov	r15,	-46(r4)	;0xffd2(r4)
    4654:	84 4e d4 ff 	mov	r14,	-44(r4)	;0xffd4(r4)
    4658:	84 4d d6 ff 	mov	r13,	-42(r4)	;0xffd6(r4)
    u8 i;
    crypt[0] = text[0];
    465c:	1f 44 d2 ff 	mov	-46(r4),r15	;0xffd2(r4)
    4660:	2e 4f       	mov	@r15,	r14	
    4662:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4666:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
    crypt[1] = text[1];
    466a:	1e 44 d4 ff 	mov	-44(r4),r14	;0xffd4(r4)
    466e:	2e 53       	incd	r14		
    4670:	1f 44 d2 ff 	mov	-46(r4),r15	;0xffd2(r4)
    4674:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4678:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)

    for ( i=0 ; i<28 ; i++ )
    467c:	c4 43 d0 ff 	mov.b	#0,	-48(r4)	;r3 As==00, 0xffd0(r4)
    4680:	a6 3c       	jmp	$+334    	;abs 0x47ce
    {
        crypt[1] = ROTATE_RIGHT_48( crypt[0] ^ crypt[1], 3);
    4682:	15 44 d4 ff 	mov	-44(r4),r5	;0xffd4(r4)
    4686:	25 53       	incd	r5		
    4688:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    468c:	2f 4f       	mov	@r15,	r15	
    468e:	06 4f       	mov	r15,	r6	
    4690:	07 43       	clr	r7		
    4692:	08 43       	clr	r8		
    4694:	09 43       	clr	r9		
    4696:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    469a:	2f 53       	incd	r15		
    469c:	2f 4f       	mov	@r15,	r15	
    469e:	84 4f d8 ff 	mov	r15,	-40(r4)	;0xffd8(r4)
    46a2:	84 43 da ff 	mov	#0,	-38(r4)	;r3 As==00, 0xffda(r4)
    46a6:	84 43 dc ff 	mov	#0,	-36(r4)	;r3 As==00, 0xffdc(r4)
    46aa:	84 43 de ff 	mov	#0,	-34(r4)	;r3 As==00, 0xffde(r4)
    46ae:	1c 44 d8 ff 	mov	-40(r4),r12	;0xffd8(r4)
    46b2:	1d 44 da ff 	mov	-38(r4),r13	;0xffda(r4)
    46b6:	1e 44 dc ff 	mov	-36(r4),r14	;0xffdc(r4)
    46ba:	1f 44 de ff 	mov	-34(r4),r15	;0xffde(r4)
    46be:	3c f3       	and	#-1,	r12	;r3 As==11
    46c0:	3d f3       	and	#-1,	r13	;r3 As==11
    46c2:	3e f3       	and	#-1,	r14	;r3 As==11
    46c4:	0f f3       	and	#0,	r15	;r3 As==00
    46c6:	0c e6       	xor	r6,	r12	
    46c8:	0d e7       	xor	r7,	r13	
    46ca:	0e e8       	xor	r8,	r14	
    46cc:	0f e9       	xor	r9,	r15	
    46ce:	0f 11       	rra	r15		
    46d0:	0e 10       	rrc	r14		
    46d2:	0d 10       	rrc	r13		
    46d4:	0c 10       	rrc	r12		
    46d6:	0f 11       	rra	r15		
    46d8:	0e 10       	rrc	r14		
    46da:	0d 10       	rrc	r13		
    46dc:	0c 10       	rrc	r12		
    46de:	0f 11       	rra	r15		
    46e0:	0e 10       	rrc	r14		
    46e2:	0d 10       	rrc	r13		
    46e4:	0c 10       	rrc	r12		
    46e6:	0d 4c       	mov	r12,	r13	
    46e8:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    46ec:	2e 4f       	mov	@r15,	r14	
    46ee:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    46f2:	2f 53       	incd	r15		
    46f4:	2f 4f       	mov	@r15,	r15	
    46f6:	4f 4f       	mov.b	r15,	r15	
    46f8:	8f 10       	swpb	r15		
    46fa:	0f 5f       	rla	r15		
    46fc:	0f 5f       	rla	r15		
    46fe:	0f 5f       	rla	r15		
    4700:	0f 5f       	rla	r15		
    4702:	0f 5f       	rla	r15		
    4704:	0f ee       	xor	r14,	r15	
    4706:	0f dd       	bis	r13,	r15	
    4708:	85 4f 00 00 	mov	r15,	0(r5)	;0x0000(r5)
        crypt[0] = ROTATE_LEFT_48( (crypt[0] ^ key[27-i]) - crypt[1], 8 );
    470c:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4710:	2d 4f       	mov	@r15,	r13	
    4712:	5e 44 d0 ff 	mov.b	-48(r4),r14	;0xffd0(r4)
    4716:	3f 40 1b 00 	mov	#27,	r15	;#0x001b
    471a:	0f 8e       	sub	r14,	r15	
    471c:	0f 5f       	rla	r15		
    471e:	1f 54 d6 ff 	add	-42(r4),r15	;0xffd6(r4)
    4722:	2f 4f       	mov	@r15,	r15	
    4724:	0e 4d       	mov	r13,	r14	
    4726:	0e ef       	xor	r15,	r14	
    4728:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    472c:	2f 53       	incd	r15		
    472e:	2f 4f       	mov	@r15,	r15	
    4730:	0d 4e       	mov	r14,	r13	
    4732:	0d 8f       	sub	r15,	r13	
    4734:	0f 4d       	mov	r13,	r15	
    4736:	4f 4f       	mov.b	r15,	r15	
    4738:	8f 10       	swpb	r15		
    473a:	05 4f       	mov	r15,	r5	
    473c:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    4740:	2d 4f       	mov	@r15,	r13	
    4742:	5e 44 d0 ff 	mov.b	-48(r4),r14	;0xffd0(r4)
    4746:	3f 40 1b 00 	mov	#27,	r15	;#0x001b
    474a:	0f 8e       	sub	r14,	r15	
    474c:	0f 5f       	rla	r15		
    474e:	1f 54 d6 ff 	add	-42(r4),r15	;0xffd6(r4)
    4752:	2f 4f       	mov	@r15,	r15	
    4754:	0e 4d       	mov	r13,	r14	
    4756:	0e ef       	xor	r15,	r14	
    4758:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    475c:	2f 53       	incd	r15		
    475e:	2f 4f       	mov	@r15,	r15	
    4760:	0d 4e       	mov	r14,	r13	
    4762:	0d 8f       	sub	r15,	r13	
    4764:	0f 4d       	mov	r13,	r15	
    4766:	84 4f e0 ff 	mov	r15,	-32(r4)	;0xffe0(r4)
    476a:	84 43 e2 ff 	mov	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    476e:	84 43 e4 ff 	mov	#0,	-28(r4)	;r3 As==00, 0xffe4(r4)
    4772:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    4776:	1c 44 e0 ff 	mov	-32(r4),r12	;0xffe0(r4)
    477a:	1d 44 e2 ff 	mov	-30(r4),r13	;0xffe2(r4)
    477e:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    4782:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    4786:	3c f3       	and	#-1,	r12	;r3 As==11
    4788:	3d f3       	and	#-1,	r13	;r3 As==11
    478a:	3e f3       	and	#-1,	r14	;r3 As==11
    478c:	0f f3       	and	#0,	r15	;r3 As==00
    478e:	0a 4e       	mov	r14,	r10	
    4790:	0b 4f       	mov	r15,	r11	
    4792:	8f 10       	swpb	r15		
    4794:	8f 11       	sxt	r15		
    4796:	8f 10       	swpb	r15		
    4798:	8f 11       	sxt	r15		
    479a:	8a 10       	swpb	r10		
    479c:	8b 10       	swpb	r11		
    479e:	4a eb       	xor.b	r11,	r10	
    47a0:	0a eb       	xor	r11,	r10	
    47a2:	8b 11       	sxt	r11		
    47a4:	0c 4a       	mov	r10,	r12	
    47a6:	0d 4b       	mov	r11,	r13	
    47a8:	0e 4f       	mov	r15,	r14	
    47aa:	84 4c e8 ff 	mov	r12,	-24(r4)	;0xffe8(r4)
    47ae:	84 4d ea ff 	mov	r13,	-22(r4)	;0xffea(r4)
    47b2:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
    47b6:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    47ba:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    47be:	0f d5       	bis	r5,	r15	
    47c0:	0e 4f       	mov	r15,	r14	
    47c2:	1f 44 d4 ff 	mov	-44(r4),r15	;0xffd4(r4)
    47c6:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
{
    u8 i;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<28 ; i++ )
    47ca:	d4 53 d0 ff 	inc.b	-48(r4)	;0xffd0(r4)
    47ce:	f4 90 1c 00 	cmp.b	#28,	-48(r4)	;#0x001c, 0xffd0(r4)
    47d2:	d0 ff 
    47d4:	56 2b       	jnc	$-338    	;abs 0x4682
    {
        crypt[1] = ROTATE_RIGHT_48( crypt[0] ^ crypt[1], 3);
        crypt[0] = ROTATE_LEFT_48( (crypt[0] ^ key[27-i]) - crypt[1], 8 );
    }
}
    47d6:	31 50 20 00 	add	#32,	r1	;#0x0020
    47da:	34 41       	pop	r4		
    47dc:	35 41       	pop	r5		
    47de:	36 41       	pop	r6		
    47e0:	37 41       	pop	r7		
    47e2:	38 41       	pop	r8		
    47e4:	39 41       	pop	r9		
    47e6:	3a 41       	pop	r10		
    47e8:	3b 41       	pop	r11		
    47ea:	30 41       	ret			

000047ec <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    47ec:	04 12       	push	r4		
    47ee:	04 41       	mov	r1,	r4	
    47f0:	24 53       	incd	r4		
    47f2:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    47f6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    47fa:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    47fe:	0d 3c       	jmp	$+28     	;abs 0x481a
    {
      for (i = 0; i<d; i++) 
    4800:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4804:	04 3c       	jmp	$+10     	;abs 0x480e
	{
	  nop();
    4806:	03 43       	nop			
	  nop();
    4808:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    480a:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    480e:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4812:	f8 ff 
    4814:	f8 2b       	jnc	$-14     	;abs 0x4806
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4816:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    481a:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    481e:	fa ff 
    4820:	ef 2b       	jnc	$-32     	;abs 0x4800
	{
	  nop();
	  nop();
	}
    }
}
    4822:	31 50 06 00 	add	#6,	r1	;#0x0006
    4826:	34 41       	pop	r4		
    4828:	30 41       	ret			

0000482a <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    482a:	04 12       	push	r4		
    482c:	04 41       	mov	r1,	r4	
    482e:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4830:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4834:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4836:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    483a:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    483e:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4842:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4846:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    484a:	5f 42 05 00 	mov.b	&0x0005,r15	
    484e:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4852:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4856:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    485a:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    485e:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4860:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4864:	79 00 
  U1RCTL = 0;
    4866:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    486a:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    486e:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4872:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4874:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4878:	7b 00 

  delay(0x800);
    487a:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    487e:	b0 12 ec 47 	call	#0x47ec	
  return 0;
    4882:	0f 43       	clr	r15		
}
    4884:	34 41       	pop	r4		
    4886:	30 41       	ret			

00004888 <uart1_putchar>:

int uart1_putchar(int c)
{
    4888:	04 12       	push	r4		
    488a:	04 41       	mov	r1,	r4	
    488c:	24 53       	incd	r4		
    488e:	21 83       	decd	r1		
    4890:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4894:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4898:	4f 4f       	mov.b	r15,	r15	
    489a:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    489e:	03 43       	nop			
    48a0:	5f 42 79 00 	mov.b	&0x0079,r15	
    48a4:	4f 4f       	mov.b	r15,	r15	
    48a6:	1f f3       	and	#1,	r15	;r3 As==01
    48a8:	0f 93       	tst	r15		
    48aa:	fa 27       	jz	$-10     	;abs 0x48a0
  return (unsigned char)c;
    48ac:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48b0:	4f 4f       	mov.b	r15,	r15	
    48b2:	4f 4f       	mov.b	r15,	r15	
}
    48b4:	21 53       	incd	r1		
    48b6:	34 41       	pop	r4		
    48b8:	30 41       	ret			

000048ba <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    48ba:	04 12       	push	r4		
    48bc:	04 41       	mov	r1,	r4	
    48be:	24 53       	incd	r4		
    48c0:	21 83       	decd	r1		
    48c2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    48c6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    48ca:	b0 12 88 48 	call	#0x4888	
}
    48ce:	21 53       	incd	r1		
    48d0:	34 41       	pop	r4		
    48d2:	30 41       	ret			

000048d4 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    48d4:	04 12       	push	r4		
    48d6:	04 41       	mov	r1,	r4	
    48d8:	24 53       	incd	r4		
  ;
}
    48da:	34 41       	pop	r4		
    48dc:	30 41       	ret			

000048de <start_decrypt>:
void
start_decrypt()
{
    48de:	04 12       	push	r4		
    48e0:	04 41       	mov	r1,	r4	
    48e2:	24 53       	incd	r4		
  ;
}
    48e4:	34 41       	pop	r4		
    48e6:	30 41       	ret			

000048e8 <end_expe>:


void
end_expe()
{
    48e8:	04 12       	push	r4		
    48ea:	04 41       	mov	r1,	r4	
    48ec:	24 53       	incd	r4		
  ;
}
    48ee:	34 41       	pop	r4		
    48f0:	30 41       	ret			

000048f2 <memset>:
    48f2:	0b 12       	push	r11		
    48f4:	0a 12       	push	r10		
    48f6:	09 12       	push	r9		
    48f8:	08 12       	push	r8		
    48fa:	3d 90 06 00 	cmp	#6,	r13	;#0x0006
    48fe:	09 2c       	jc	$+20     	;abs 0x4912
    4900:	0c 4f       	mov	r15,	r12	
    4902:	04 3c       	jmp	$+10     	;abs 0x490c
    4904:	cc 4e 00 00 	mov.b	r14,	0(r12)	;0x0000(r12)
    4908:	1c 53       	inc	r12		
    490a:	3d 53       	add	#-1,	r13	;r3 As==11
    490c:	0d 93       	tst	r13		
    490e:	fa 23       	jnz	$-10     	;abs 0x4904
    4910:	20 3c       	jmp	$+66     	;abs 0x4952
    4912:	4e 4e       	mov.b	r14,	r14	
    4914:	4b 4e       	mov.b	r14,	r11	
    4916:	0b 93       	tst	r11		
    4918:	03 24       	jz	$+8      	;abs 0x4920
    491a:	0c 4b       	mov	r11,	r12	
    491c:	8c 10       	swpb	r12		
    491e:	0b dc       	bis	r12,	r11	
    4920:	1f b3       	bit	#1,	r15	;r3 As==01
    4922:	06 24       	jz	$+14     	;abs 0x4930
    4924:	3d 53       	add	#-1,	r13	;r3 As==11
    4926:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    492a:	09 4f       	mov	r15,	r9	
    492c:	19 53       	inc	r9		
    492e:	01 3c       	jmp	$+4      	;abs 0x4932
    4930:	09 4f       	mov	r15,	r9	
    4932:	0c 4d       	mov	r13,	r12	
    4934:	12 c3       	clrc			
    4936:	0c 10       	rrc	r12		
    4938:	0a 49       	mov	r9,	r10	
    493a:	08 4c       	mov	r12,	r8	
    493c:	8a 4b 00 00 	mov	r11,	0(r10)	;0x0000(r10)
    4940:	2a 53       	incd	r10		
    4942:	38 53       	add	#-1,	r8	;r3 As==11
    4944:	fb 23       	jnz	$-8      	;abs 0x493c
    4946:	0c 5c       	rla	r12		
    4948:	0c 59       	add	r9,	r12	
    494a:	1d f3       	and	#1,	r13	;r3 As==01
    494c:	02 24       	jz	$+6      	;abs 0x4952
    494e:	cc 4e 00 00 	mov.b	r14,	0(r12)	;0x0000(r12)
    4952:	38 41       	pop	r8		
    4954:	39 41       	pop	r9		
    4956:	3a 41       	pop	r10		
    4958:	3b 41       	pop	r11		
    495a:	30 41       	ret			

0000495c <_unexpected_>:
    495c:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	62 41 62 41 62 41 62 41 62 41 62 41 62 41 62 41     bAbAbAbAbAbAbAbA
    fff0:	62 41 62 41 62 41 62 41 62 41 62 41 62 41 00 40     bAbAbAbAbAbAbA.@
