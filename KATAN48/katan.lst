
katan.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00005394 l    d  .rodata	00000000 .rodata
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 katan48.c
00004100 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
0000535a g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
00004100  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
00004100  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00005b84 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
000052ca g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040fa  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
00004100  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00005388 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
00004100  w      .text	00000000 __isr_5
00005b84 g       *ABS*	00000000 __data_load_start
00004100 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
00004100  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
00004100  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
00004100  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00004ab6 g     F .text	000007d6 katan48_decrypt
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004100  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00005392  w      .text	00000000 _unexpected_
00004100  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
00004100  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00005328 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
00004104 g     F .text	000009b2 katan48_encrypt
00004100 g       .text	00000000 __ctors_start
00004100  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .rodata	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	000000bc main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
00004100  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
0000528c g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
00004100  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
00004100 g       .text	00000000 __dtors_start
00004100  w      .text	00000000 __isr_6
00004100 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
00004100  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .rodata	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00005374 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040fa  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
0000537e g     F .text	0000000a start_decrypt
00001100 g       .rodata	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT
00005394 g     O .rodata	000007f0 IR



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 84 5b 	mov	23428(r15),4352(r15);0x5b84(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
    plain[i+29] = L1[i];

}

int main()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 7e f9 	add	#-1666,	r1	;#0xf97e
  u64 key[80];
  u64 plain[64], cipher[64];
  int i;
  
  for(i=0;i<80;++i)   key[i]=ONES;
    4046:	84 43 7c f9 	mov	#0,	-1668(r4);r3 As==00, 0xf97c(r4)
    404a:	14 3c       	jmp	$+42     	;abs 0x4074
    404c:	1f 44 7c f9 	mov	-1668(r4),r15	;0xf97c(r4)
    4050:	0f 5f       	rla	r15		
    4052:	0f 5f       	rla	r15		
    4054:	0f 5f       	rla	r15		
    4056:	3e 40 7c f9 	mov	#-1668,	r14	;#0xf97c
    405a:	0e 54       	add	r4,	r14	
    405c:	0f 5e       	add	r14,	r15	
    405e:	2f 53       	incd	r15		
    4060:	bf 43 00 00 	mov	#-1,	0(r15)	;r3 As==11, 0x0000(r15)
    4064:	bf 43 02 00 	mov	#-1,	2(r15)	;r3 As==11, 0x0002(r15)
    4068:	bf 43 04 00 	mov	#-1,	4(r15)	;r3 As==11, 0x0004(r15)
    406c:	bf 43 06 00 	mov	#-1,	6(r15)	;r3 As==11, 0x0006(r15)
    4070:	94 53 7c f9 	inc	-1668(r4)	;0xf97c(r4)
    4074:	b4 90 50 00 	cmp	#80,	-1668(r4);#0x0050, 0xf97c(r4)
    4078:	7c f9 
    407a:	e8 3b       	jl	$-46     	;abs 0x404c
  for(i=0;i<48;++i)   plain[i]=0;
    407c:	84 43 7c f9 	mov	#0,	-1668(r4);r3 As==00, 0xf97c(r4)
    4080:	15 3c       	jmp	$+44     	;abs 0x40ac
    4082:	1f 44 7c f9 	mov	-1668(r4),r15	;0xf97c(r4)
    4086:	0f 5f       	rla	r15		
    4088:	0f 5f       	rla	r15		
    408a:	0f 5f       	rla	r15		
    408c:	3e 40 7c f9 	mov	#-1668,	r14	;#0xf97c
    4090:	0e 54       	add	r4,	r14	
    4092:	0f 5e       	add	r14,	r15	
    4094:	3f 50 82 02 	add	#642,	r15	;#0x0282
    4098:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    409c:	8f 43 02 00 	mov	#0,	2(r15)	;r3 As==00, 0x0002(r15)
    40a0:	8f 43 04 00 	mov	#0,	4(r15)	;r3 As==00, 0x0004(r15)
    40a4:	8f 43 06 00 	mov	#0,	6(r15)	;r3 As==00, 0x0006(r15)
    40a8:	94 53 7c f9 	inc	-1668(r4)	;0xf97c(r4)
    40ac:	b4 90 30 00 	cmp	#48,	-1668(r4);#0x0030, 0xf97c(r4)
    40b0:	7c f9 
    40b2:	e7 3b       	jl	$-48     	;abs 0x4082
  
  START_ENCRYPT();
    40b4:	b0 12 74 53 	call	#0x5374	
  katan48_encrypt( plain, cipher, key, 254 );
    40b8:	0d 44       	mov	r4,	r13	
    40ba:	3d 50 7e f9 	add	#-1666,	r13	;#0xf97e
    40be:	0e 44       	mov	r4,	r14	
    40c0:	3e 50 fe fd 	add	#-514,	r14	;#0xfdfe
    40c4:	0f 44       	mov	r4,	r15	
    40c6:	3f 50 fe fb 	add	#-1026,	r15	;#0xfbfe
    40ca:	3c 40 fe 00 	mov	#254,	r12	;#0x00fe
    40ce:	b0 12 04 41 	call	#0x4104	
  
  //printf("\nkatan48_encrypt(key=11..11, plain=00.00) = ");
  //  for(i=0;i<48;++i)   printf("%llu",cipher[i]&1);
  //for(i=47;i>=0;i--)   printf("%llu",cipher[i]&1);
  
  START_DECRYPT();
    40d2:	b0 12 7e 53 	call	#0x537e	
  katan48_decrypt( cipher, plain, key, 254 );
    40d6:	0d 44       	mov	r4,	r13	
    40d8:	3d 50 7e f9 	add	#-1666,	r13	;#0xf97e
    40dc:	0e 44       	mov	r4,	r14	
    40de:	3e 50 fe fb 	add	#-1026,	r14	;#0xfbfe
    40e2:	0f 44       	mov	r4,	r15	
    40e4:	3f 50 fe fd 	add	#-514,	r15	;#0xfdfe
    40e8:	3c 40 fe 00 	mov	#254,	r12	;#0x00fe
    40ec:	b0 12 b6 4a 	call	#0x4ab6	
  
  END_EXPE();
    40f0:	b0 12 88 53 	call	#0x5388	
  return 0;  
    40f4:	0f 43       	clr	r15		
    40f6:	31 50 82 06 	add	#1666,	r1	;#0x0682

000040fa <__stop_progExec__>:
    40fa:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40fe:	fd 3f       	jmp	$-4      	;abs 0x40fa

00004100 <__ctors_end>:
    4100:	30 40 92 53 	br	#0x5392	

00004104 <katan48_encrypt>:
  0,0,0,0,0,0,ONES,ONES,0,ONES,
  ONES,ONES,0,0,0,0,0,0,0,ONES, // 240-249
  0,0,ONES,0,
};

void katan48_encrypt( const u64 plain[48], u64 cipher[48], const u64 key[80], int rounds ) {
    4104:	0b 12       	push	r11		
    4106:	0a 12       	push	r10		
    4108:	09 12       	push	r9		
    410a:	08 12       	push	r8		
    410c:	07 12       	push	r7		
    410e:	06 12       	push	r6		
    4110:	04 12       	push	r4		
    4112:	04 41       	mov	r1,	r4	
    4114:	34 50 0e 00 	add	#14,	r4	;#0x000e
    4118:	31 50 08 fe 	add	#-504,	r1	;#0xfe08
    411c:	84 4f a2 ff 	mov	r15,	-94(r4)	;0xffa2(r4)
    4120:	84 4e a4 ff 	mov	r14,	-92(r4)	;0xffa4(r4)
    4124:	84 4d a6 ff 	mov	r13,	-90(r4)	;0xffa6(r4)
    4128:	84 4c a8 ff 	mov	r12,	-88(r4)	;0xffa8(r4)
  for(i=0;i<29;++i) 
    cipher[i] = L2[i];
  for(i=0;i<19;++i) 
    cipher[i+29] = L1[i];

}
    412c:	07 41       	mov	r1,	r7	
  0,0,0,0,0,0,ONES,ONES,0,ONES,
  ONES,ONES,0,0,0,0,0,0,0,ONES, // 240-249
  0,0,ONES,0,
};

void katan48_encrypt( const u64 plain[48], u64 cipher[48], const u64 key[80], int rounds ) {
    412e:	0f 41       	mov	r1,	r15	
    4130:	06 4f       	mov	r15,	r6	

  u64 L1[19], L2[29], k[2*rounds], fa_1, fa_0, fb_1, fb_0;
    4132:	1f 44 a8 ff 	mov	-88(r4),r15	;0xffa8(r4)
    4136:	0f 5f       	rla	r15		
    4138:	0e 4f       	mov	r15,	r14	
    413a:	3e 53       	add	#-1,	r14	;r3 As==11
    413c:	84 4e fe fd 	mov	r14,	-514(r4);0xfdfe(r4)
    4140:	0e 4f       	mov	r15,	r14	
    4142:	08 4e       	mov	r14,	r8	
    4144:	09 43       	clr	r9		
    4146:	0e 4f       	mov	r15,	r14	
    4148:	0a 4e       	mov	r14,	r10	
    414a:	0b 43       	clr	r11		
    414c:	0f 5f       	rla	r15		
    414e:	0f 5f       	rla	r15		
    4150:	0f 5f       	rla	r15		
    4152:	1f 53       	inc	r15		
    4154:	1f 53       	inc	r15		
    4156:	12 c3       	clrc			
    4158:	0f 10       	rrc	r15		
    415a:	0f 5f       	rla	r15		
    415c:	01 8f       	sub	r15,	r1	
    415e:	0f 41       	mov	r1,	r15	
    4160:	1f 53       	inc	r15		
    4162:	12 c3       	clrc			
    4164:	0f 10       	rrc	r15		
    4166:	0f 5f       	rla	r15		
    4168:	84 4f 00 fe 	mov	r15,	-512(r4);0xfe00(r4)
  int i,j;

  for(i=0;i<29;++i) 
    416c:	84 43 fa fd 	mov	#0,	-518(r4);r3 As==00, 0xfdfa(r4)
    4170:	23 3c       	jmp	$+72     	;abs 0x41b8
    L2[i] = plain[i];
    4172:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4176:	0f 5f       	rla	r15		
    4178:	0f 5f       	rla	r15		
    417a:	0f 5f       	rla	r15		
    417c:	1f 54 a2 ff 	add	-94(r4),r15	;0xffa2(r4)
    4180:	2c 4f       	mov	@r15,	r12	
    4182:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4186:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    418a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    418e:	1b 44 fa fd 	mov	-518(r4),r11	;0xfdfa(r4)
    4192:	0b 5b       	rla	r11		
    4194:	0b 5b       	rla	r11		
    4196:	0b 5b       	rla	r11		
    4198:	38 40 fa fd 	mov	#-518,	r8	;#0xfdfa
    419c:	08 54       	add	r4,	r8	
    419e:	0b 58       	add	r8,	r11	
    41a0:	3b 50 c0 00 	add	#192,	r11	;#0x00c0
    41a4:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    41a8:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    41ac:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    41b0:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
void katan48_encrypt( const u64 plain[48], u64 cipher[48], const u64 key[80], int rounds ) {

  u64 L1[19], L2[29], k[2*rounds], fa_1, fa_0, fb_1, fb_0;
  int i,j;

  for(i=0;i<29;++i) 
    41b4:	94 53 fa fd 	inc	-518(r4)	;0xfdfa(r4)
    41b8:	b4 90 1d 00 	cmp	#29,	-518(r4);#0x001d, 0xfdfa(r4)
    41bc:	fa fd 
    41be:	d9 3b       	jl	$-76     	;abs 0x4172
    L2[i] = plain[i];
  for(i=0;i<19;++i) 
    41c0:	84 43 fa fd 	mov	#0,	-518(r4);r3 As==00, 0xfdfa(r4)
    41c4:	25 3c       	jmp	$+76     	;abs 0x4210
    L1[i] = plain[i+29];
    41c6:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    41ca:	3f 50 1d 00 	add	#29,	r15	;#0x001d
    41ce:	0f 5f       	rla	r15		
    41d0:	0f 5f       	rla	r15		
    41d2:	0f 5f       	rla	r15		
    41d4:	1f 54 a2 ff 	add	-94(r4),r15	;0xffa2(r4)
    41d8:	2c 4f       	mov	@r15,	r12	
    41da:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41de:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    41e2:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    41e6:	1b 44 fa fd 	mov	-518(r4),r11	;0xfdfa(r4)
    41ea:	0b 5b       	rla	r11		
    41ec:	0b 5b       	rla	r11		
    41ee:	0b 5b       	rla	r11		
    41f0:	39 40 fa fd 	mov	#-518,	r9	;#0xfdfa
    41f4:	09 54       	add	r4,	r9	
    41f6:	0b 59       	add	r9,	r11	
    41f8:	3b 50 28 00 	add	#40,	r11	;#0x0028
    41fc:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4200:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4204:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4208:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  u64 L1[19], L2[29], k[2*rounds], fa_1, fa_0, fb_1, fb_0;
  int i,j;

  for(i=0;i<29;++i) 
    L2[i] = plain[i];
  for(i=0;i<19;++i) 
    420c:	94 53 fa fd 	inc	-518(r4)	;0xfdfa(r4)
    4210:	b4 90 13 00 	cmp	#19,	-518(r4);#0x0013, 0xfdfa(r4)
    4214:	fa fd 
    4216:	d7 3b       	jl	$-80     	;abs 0x41c6
    L1[i] = plain[i+29];

  for(i=0;i<80;++i)
    4218:	84 43 fa fd 	mov	#0,	-518(r4);r3 As==00, 0xfdfa(r4)
    421c:	20 3c       	jmp	$+66     	;abs 0x425e
    k[i]=key[i];
    421e:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4222:	0f 5f       	rla	r15		
    4224:	0f 5f       	rla	r15		
    4226:	0f 5f       	rla	r15		
    4228:	1f 54 a6 ff 	add	-90(r4),r15	;0xffa6(r4)
    422c:	2c 4f       	mov	@r15,	r12	
    422e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4232:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4236:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    423a:	1a 44 00 fe 	mov	-512(r4),r10	;0xfe00(r4)
    423e:	1b 44 fa fd 	mov	-518(r4),r11	;0xfdfa(r4)
    4242:	0b 5b       	rla	r11		
    4244:	0b 5b       	rla	r11		
    4246:	0b 5b       	rla	r11		
    4248:	0b 5a       	add	r10,	r11	
    424a:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    424e:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4252:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4256:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<29;++i) 
    L2[i] = plain[i];
  for(i=0;i<19;++i) 
    L1[i] = plain[i+29];

  for(i=0;i<80;++i)
    425a:	94 53 fa fd 	inc	-518(r4)	;0xfdfa(r4)
    425e:	b4 90 50 00 	cmp	#80,	-518(r4);#0x0050, 0xfdfa(r4)
    4262:	fa fd 
    4264:	dc 3b       	jl	$-70     	;abs 0x421e
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    4266:	b4 40 50 00 	mov	#80,	-518(r4);#0x0050, 0xfdfa(r4)
    426a:	fa fd 
    426c:	62 3c       	jmp	$+198    	;abs 0x4332
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13];
    426e:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4272:	3f 50 b0 ff 	add	#-80,	r15	;#0xffb0
    4276:	1e 44 00 fe 	mov	-512(r4),r14	;0xfe00(r4)
    427a:	0f 5f       	rla	r15		
    427c:	0f 5f       	rla	r15		
    427e:	0f 5f       	rla	r15		
    4280:	0f 5e       	add	r14,	r15	
    4282:	28 4f       	mov	@r15,	r8	
    4284:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    4288:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    428c:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    4290:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4294:	3f 50 c3 ff 	add	#-61,	r15	;#0xffc3
    4298:	1e 44 00 fe 	mov	-512(r4),r14	;0xfe00(r4)
    429c:	0f 5f       	rla	r15		
    429e:	0f 5f       	rla	r15		
    42a0:	0f 5f       	rla	r15		
    42a2:	0f 5e       	add	r14,	r15	
    42a4:	2c 4f       	mov	@r15,	r12	
    42a6:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42aa:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    42ae:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    42b2:	08 ec       	xor	r12,	r8	
    42b4:	09 ed       	xor	r13,	r9	
    42b6:	0a ee       	xor	r14,	r10	
    42b8:	0b ef       	xor	r15,	r11	
    42ba:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    42be:	3f 50 ce ff 	add	#-50,	r15	;#0xffce
    42c2:	1e 44 00 fe 	mov	-512(r4),r14	;0xfe00(r4)
    42c6:	0f 5f       	rla	r15		
    42c8:	0f 5f       	rla	r15		
    42ca:	0f 5f       	rla	r15		
    42cc:	0f 5e       	add	r14,	r15	
    42ce:	2c 4f       	mov	@r15,	r12	
    42d0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42d4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    42d8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    42dc:	08 ec       	xor	r12,	r8	
    42de:	09 ed       	xor	r13,	r9	
    42e0:	0a ee       	xor	r14,	r10	
    42e2:	0b ef       	xor	r15,	r11	
    42e4:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    42e8:	3f 50 f3 ff 	add	#-13,	r15	;#0xfff3
    42ec:	1e 44 00 fe 	mov	-512(r4),r14	;0xfe00(r4)
    42f0:	0f 5f       	rla	r15		
    42f2:	0f 5f       	rla	r15		
    42f4:	0f 5f       	rla	r15		
    42f6:	0f 5e       	add	r14,	r15	
    42f8:	2c 4f       	mov	@r15,	r12	
    42fa:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    42fe:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4302:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4306:	0c e8       	xor	r8,	r12	
    4308:	0d e9       	xor	r9,	r13	
    430a:	0e ea       	xor	r10,	r14	
    430c:	0f eb       	xor	r11,	r15	
    430e:	1a 44 00 fe 	mov	-512(r4),r10	;0xfe00(r4)
    4312:	1b 44 fa fd 	mov	-518(r4),r11	;0xfdfa(r4)
    4316:	0b 5b       	rla	r11		
    4318:	0b 5b       	rla	r11		
    431a:	0b 5b       	rla	r11		
    431c:	0b 5a       	add	r10,	r11	
    431e:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4322:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4326:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    432a:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<19;++i) 
    L1[i] = plain[i+29];

  for(i=0;i<80;++i)
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    432e:	94 53 fa fd 	inc	-518(r4)	;0xfdfa(r4)
    4332:	1f 44 a8 ff 	mov	-88(r4),r15	;0xffa8(r4)
    4336:	0f 5f       	rla	r15		
    4338:	84 9f fa fd 	cmp	r15,	-518(r4);0xfdfa(r4)
    433c:	98 3b       	jl	$-206    	;abs 0x426e
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13];

  for(i=0;i<rounds;++i) {
    433e:	84 43 fa fd 	mov	#0,	-518(r4);r3 As==00, 0xfdfa(r4)
    4342:	30 40 e2 49 	br	#0x49e2	
    
    fa_1 = L1[X1_48]   ^ L1[X2_48]   ^ (L1[X3_48] & L1[X4_48])     ^ (L1[X5_48] & IR[i])         ^ k[2*i];
    4346:	94 44 b2 fe 	mov	-334(r4),-22(r4)	;0xfeb2(r4), 0xffea(r4)
    434a:	ea ff 
    434c:	94 44 b4 fe 	mov	-332(r4),-20(r4)	;0xfeb4(r4), 0xffec(r4)
    4350:	ec ff 
    4352:	94 44 b6 fe 	mov	-330(r4),-18(r4)	;0xfeb6(r4), 0xffee(r4)
    4356:	ee ff 
    4358:	94 44 b8 fe 	mov	-328(r4),-16(r4)	;0xfeb8(r4), 0xfff0(r4)
    435c:	f0 ff 
    435e:	1c 44 82 fe 	mov	-382(r4),r12	;0xfe82(r4)
    4362:	1d 44 84 fe 	mov	-380(r4),r13	;0xfe84(r4)
    4366:	1e 44 86 fe 	mov	-378(r4),r14	;0xfe86(r4)
    436a:	1f 44 88 fe 	mov	-376(r4),r15	;0xfe88(r4)
    436e:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4372:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    4376:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    437a:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    437e:	08 ec       	xor	r12,	r8	
    4380:	09 ed       	xor	r13,	r9	
    4382:	0a ee       	xor	r14,	r10	
    4384:	0b ef       	xor	r15,	r11	
    4386:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    438a:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    438e:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    4392:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    4396:	94 44 9a fe 	mov	-358(r4),-86(r4)	;0xfe9a(r4), 0xffaa(r4)
    439a:	aa ff 
    439c:	94 44 9c fe 	mov	-356(r4),-84(r4)	;0xfe9c(r4), 0xffac(r4)
    43a0:	ac ff 
    43a2:	94 44 9e fe 	mov	-354(r4),-82(r4)	;0xfe9e(r4), 0xffae(r4)
    43a6:	ae ff 
    43a8:	94 44 a0 fe 	mov	-352(r4),-80(r4)	;0xfea0(r4), 0xffb0(r4)
    43ac:	b0 ff 
    43ae:	1c 44 5a fe 	mov	-422(r4),r12	;0xfe5a(r4)
    43b2:	1d 44 5c fe 	mov	-420(r4),r13	;0xfe5c(r4)
    43b6:	1e 44 5e fe 	mov	-418(r4),r14	;0xfe5e(r4)
    43ba:	1f 44 60 fe 	mov	-416(r4),r15	;0xfe60(r4)
    43be:	1c f4 aa ff 	and	-86(r4),r12	;0xffaa(r4)
    43c2:	1d f4 ac ff 	and	-84(r4),r13	;0xffac(r4)
    43c6:	1e f4 ae ff 	and	-82(r4),r14	;0xffae(r4)
    43ca:	1f f4 b0 ff 	and	-80(r4),r15	;0xffb0(r4)
    43ce:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    43d2:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    43d6:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    43da:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    43de:	08 ec       	xor	r12,	r8	
    43e0:	09 ed       	xor	r13,	r9	
    43e2:	0a ee       	xor	r14,	r10	
    43e4:	0b ef       	xor	r15,	r11	
    43e6:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    43ea:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    43ee:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    43f2:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    43f6:	94 44 52 fe 	mov	-430(r4),-78(r4)	;0xfe52(r4), 0xffb2(r4)
    43fa:	b2 ff 
    43fc:	94 44 54 fe 	mov	-428(r4),-76(r4)	;0xfe54(r4), 0xffb4(r4)
    4400:	b4 ff 
    4402:	94 44 56 fe 	mov	-426(r4),-74(r4)	;0xfe56(r4), 0xffb6(r4)
    4406:	b6 ff 
    4408:	94 44 58 fe 	mov	-424(r4),-72(r4)	;0xfe58(r4), 0xffb8(r4)
    440c:	b8 ff 
    440e:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4412:	0f 5f       	rla	r15		
    4414:	0f 5f       	rla	r15		
    4416:	0f 5f       	rla	r15		
    4418:	3f 50 94 53 	add	#21396,	r15	;#0x5394
    441c:	2c 4f       	mov	@r15,	r12	
    441e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4422:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4426:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    442a:	1c f4 b2 ff 	and	-78(r4),r12	;0xffb2(r4)
    442e:	1d f4 b4 ff 	and	-76(r4),r13	;0xffb4(r4)
    4432:	1e f4 b6 ff 	and	-74(r4),r14	;0xffb6(r4)
    4436:	1f f4 b8 ff 	and	-72(r4),r15	;0xffb8(r4)
    443a:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    443e:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    4442:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    4446:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    444a:	08 ec       	xor	r12,	r8	
    444c:	09 ed       	xor	r13,	r9	
    444e:	0a ee       	xor	r14,	r10	
    4450:	0b ef       	xor	r15,	r11	
    4452:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    4456:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    445a:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    445e:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    4462:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4466:	0f 5f       	rla	r15		
    4468:	1e 44 00 fe 	mov	-512(r4),r14	;0xfe00(r4)
    446c:	0f 5f       	rla	r15		
    446e:	0f 5f       	rla	r15		
    4470:	0f 5f       	rla	r15		
    4472:	0f 5e       	add	r14,	r15	
    4474:	2c 4f       	mov	@r15,	r12	
    4476:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    447a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    447e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4482:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4486:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    448a:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    448e:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4492:	08 ec       	xor	r12,	r8	
    4494:	09 ed       	xor	r13,	r9	
    4496:	0a ee       	xor	r14,	r10	
    4498:	0b ef       	xor	r15,	r11	
    449a:	84 48 02 fe 	mov	r8,	-510(r4);0xfe02(r4)
    449e:	84 49 04 fe 	mov	r9,	-508(r4);0xfe04(r4)
    44a2:	84 4a 06 fe 	mov	r10,	-506(r4);0xfe06(r4)
    44a6:	84 4b 08 fe 	mov	r11,	-504(r4);0xfe08(r4)
    fa_0 = L1[X1_48-1] ^ L1[X2_48-1] ^ (L1[X3_48-1] & L1[X4_48-1]) ^ (L1[X5_48-1] & IR[i])       ^ k[2*i];
    44aa:	94 44 aa fe 	mov	-342(r4),-22(r4)	;0xfeaa(r4), 0xffea(r4)
    44ae:	ea ff 
    44b0:	94 44 ac fe 	mov	-340(r4),-20(r4)	;0xfeac(r4), 0xffec(r4)
    44b4:	ec ff 
    44b6:	94 44 ae fe 	mov	-338(r4),-18(r4)	;0xfeae(r4), 0xffee(r4)
    44ba:	ee ff 
    44bc:	94 44 b0 fe 	mov	-336(r4),-16(r4)	;0xfeb0(r4), 0xfff0(r4)
    44c0:	f0 ff 
    44c2:	1c 44 7a fe 	mov	-390(r4),r12	;0xfe7a(r4)
    44c6:	1d 44 7c fe 	mov	-388(r4),r13	;0xfe7c(r4)
    44ca:	1e 44 7e fe 	mov	-386(r4),r14	;0xfe7e(r4)
    44ce:	1f 44 80 fe 	mov	-384(r4),r15	;0xfe80(r4)
    44d2:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    44d6:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    44da:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    44de:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    44e2:	08 ec       	xor	r12,	r8	
    44e4:	09 ed       	xor	r13,	r9	
    44e6:	0a ee       	xor	r14,	r10	
    44e8:	0b ef       	xor	r15,	r11	
    44ea:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    44ee:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    44f2:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    44f6:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    44fa:	94 44 92 fe 	mov	-366(r4),-70(r4)	;0xfe92(r4), 0xffba(r4)
    44fe:	ba ff 
    4500:	94 44 94 fe 	mov	-364(r4),-68(r4)	;0xfe94(r4), 0xffbc(r4)
    4504:	bc ff 
    4506:	94 44 96 fe 	mov	-362(r4),-66(r4)	;0xfe96(r4), 0xffbe(r4)
    450a:	be ff 
    450c:	94 44 98 fe 	mov	-360(r4),-64(r4)	;0xfe98(r4), 0xffc0(r4)
    4510:	c0 ff 
    4512:	1c 44 52 fe 	mov	-430(r4),r12	;0xfe52(r4)
    4516:	1d 44 54 fe 	mov	-428(r4),r13	;0xfe54(r4)
    451a:	1e 44 56 fe 	mov	-426(r4),r14	;0xfe56(r4)
    451e:	1f 44 58 fe 	mov	-424(r4),r15	;0xfe58(r4)
    4522:	1c f4 ba ff 	and	-70(r4),r12	;0xffba(r4)
    4526:	1d f4 bc ff 	and	-68(r4),r13	;0xffbc(r4)
    452a:	1e f4 be ff 	and	-66(r4),r14	;0xffbe(r4)
    452e:	1f f4 c0 ff 	and	-64(r4),r15	;0xffc0(r4)
    4532:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4536:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    453a:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    453e:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4542:	08 ec       	xor	r12,	r8	
    4544:	09 ed       	xor	r13,	r9	
    4546:	0a ee       	xor	r14,	r10	
    4548:	0b ef       	xor	r15,	r11	
    454a:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    454e:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    4552:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    4556:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    455a:	94 44 4a fe 	mov	-438(r4),-62(r4)	;0xfe4a(r4), 0xffc2(r4)
    455e:	c2 ff 
    4560:	94 44 4c fe 	mov	-436(r4),-60(r4)	;0xfe4c(r4), 0xffc4(r4)
    4564:	c4 ff 
    4566:	94 44 4e fe 	mov	-434(r4),-58(r4)	;0xfe4e(r4), 0xffc6(r4)
    456a:	c6 ff 
    456c:	94 44 50 fe 	mov	-432(r4),-56(r4)	;0xfe50(r4), 0xffc8(r4)
    4570:	c8 ff 
    4572:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4576:	0f 5f       	rla	r15		
    4578:	0f 5f       	rla	r15		
    457a:	0f 5f       	rla	r15		
    457c:	3f 50 94 53 	add	#21396,	r15	;#0x5394
    4580:	2c 4f       	mov	@r15,	r12	
    4582:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4586:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    458a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    458e:	1c f4 c2 ff 	and	-62(r4),r12	;0xffc2(r4)
    4592:	1d f4 c4 ff 	and	-60(r4),r13	;0xffc4(r4)
    4596:	1e f4 c6 ff 	and	-58(r4),r14	;0xffc6(r4)
    459a:	1f f4 c8 ff 	and	-56(r4),r15	;0xffc8(r4)
    459e:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    45a2:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    45a6:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    45aa:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    45ae:	08 ec       	xor	r12,	r8	
    45b0:	09 ed       	xor	r13,	r9	
    45b2:	0a ee       	xor	r14,	r10	
    45b4:	0b ef       	xor	r15,	r11	
    45b6:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    45ba:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    45be:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    45c2:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    45c6:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    45ca:	0f 5f       	rla	r15		
    45cc:	1e 44 00 fe 	mov	-512(r4),r14	;0xfe00(r4)
    45d0:	0f 5f       	rla	r15		
    45d2:	0f 5f       	rla	r15		
    45d4:	0f 5f       	rla	r15		
    45d6:	0f 5e       	add	r14,	r15	
    45d8:	2c 4f       	mov	@r15,	r12	
    45da:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    45de:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    45e2:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    45e6:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    45ea:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    45ee:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    45f2:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    45f6:	08 ec       	xor	r12,	r8	
    45f8:	09 ed       	xor	r13,	r9	
    45fa:	0a ee       	xor	r14,	r10	
    45fc:	0b ef       	xor	r15,	r11	
    45fe:	84 48 0a fe 	mov	r8,	-502(r4);0xfe0a(r4)
    4602:	84 49 0c fe 	mov	r9,	-500(r4);0xfe0c(r4)
    4606:	84 4a 0e fe 	mov	r10,	-498(r4);0xfe0e(r4)
    460a:	84 4b 10 fe 	mov	r11,	-496(r4);0xfe10(r4)
    fb_1 = L2[Y1_48]   ^ L2[Y2_48]   ^ (L2[Y3_48] & L2[Y4_48])     ^ (L2[Y5_48] & L2[Y6_48])     ^ k[2*i+1];
    460e:	94 44 9a ff 	mov	-102(r4),-22(r4)	;0xff9a(r4), 0xffea(r4)
    4612:	ea ff 
    4614:	94 44 9c ff 	mov	-100(r4),-20(r4)	;0xff9c(r4), 0xffec(r4)
    4618:	ec ff 
    461a:	94 44 9e ff 	mov	-98(r4),-18(r4)	;0xff9e(r4), 0xffee(r4)
    461e:	ee ff 
    4620:	94 44 a0 ff 	mov	-96(r4),-16(r4)	;0xffa0(r4), 0xfff0(r4)
    4624:	f0 ff 
    4626:	1c 44 52 ff 	mov	-174(r4),r12	;0xff52(r4)
    462a:	1d 44 54 ff 	mov	-172(r4),r13	;0xff54(r4)
    462e:	1e 44 56 ff 	mov	-170(r4),r14	;0xff56(r4)
    4632:	1f 44 58 ff 	mov	-168(r4),r15	;0xff58(r4)
    4636:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    463a:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    463e:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    4642:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4646:	08 ec       	xor	r12,	r8	
    4648:	09 ed       	xor	r13,	r9	
    464a:	0a ee       	xor	r14,	r10	
    464c:	0b ef       	xor	r15,	r11	
    464e:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    4652:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    4656:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    465a:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    465e:	94 44 62 ff 	mov	-158(r4),-54(r4)	;0xff62(r4), 0xffca(r4)
    4662:	ca ff 
    4664:	94 44 64 ff 	mov	-156(r4),-52(r4)	;0xff64(r4), 0xffcc(r4)
    4668:	cc ff 
    466a:	94 44 66 ff 	mov	-154(r4),-50(r4)	;0xff66(r4), 0xffce(r4)
    466e:	ce ff 
    4670:	94 44 68 ff 	mov	-152(r4),-48(r4)	;0xff68(r4), 0xffd0(r4)
    4674:	d0 ff 
    4676:	1c 44 22 ff 	mov	-222(r4),r12	;0xff22(r4)
    467a:	1d 44 24 ff 	mov	-220(r4),r13	;0xff24(r4)
    467e:	1e 44 26 ff 	mov	-218(r4),r14	;0xff26(r4)
    4682:	1f 44 28 ff 	mov	-216(r4),r15	;0xff28(r4)
    4686:	1c f4 ca ff 	and	-54(r4),r12	;0xffca(r4)
    468a:	1d f4 cc ff 	and	-52(r4),r13	;0xffcc(r4)
    468e:	1e f4 ce ff 	and	-50(r4),r14	;0xffce(r4)
    4692:	1f f4 d0 ff 	and	-48(r4),r15	;0xffd0(r4)
    4696:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    469a:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    469e:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    46a2:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    46a6:	08 ec       	xor	r12,	r8	
    46a8:	09 ed       	xor	r13,	r9	
    46aa:	0a ee       	xor	r14,	r10	
    46ac:	0b ef       	xor	r15,	r11	
    46ae:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    46b2:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    46b6:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    46ba:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    46be:	94 44 32 ff 	mov	-206(r4),-46(r4)	;0xff32(r4), 0xffd2(r4)
    46c2:	d2 ff 
    46c4:	94 44 34 ff 	mov	-204(r4),-44(r4)	;0xff34(r4), 0xffd4(r4)
    46c8:	d4 ff 
    46ca:	94 44 36 ff 	mov	-202(r4),-42(r4)	;0xff36(r4), 0xffd6(r4)
    46ce:	d6 ff 
    46d0:	94 44 38 ff 	mov	-200(r4),-40(r4)	;0xff38(r4), 0xffd8(r4)
    46d4:	d8 ff 
    46d6:	1c 44 ea fe 	mov	-278(r4),r12	;0xfeea(r4)
    46da:	1d 44 ec fe 	mov	-276(r4),r13	;0xfeec(r4)
    46de:	1e 44 ee fe 	mov	-274(r4),r14	;0xfeee(r4)
    46e2:	1f 44 f0 fe 	mov	-272(r4),r15	;0xfef0(r4)
    46e6:	1c f4 d2 ff 	and	-46(r4),r12	;0xffd2(r4)
    46ea:	1d f4 d4 ff 	and	-44(r4),r13	;0xffd4(r4)
    46ee:	1e f4 d6 ff 	and	-42(r4),r14	;0xffd6(r4)
    46f2:	1f f4 d8 ff 	and	-40(r4),r15	;0xffd8(r4)
    46f6:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    46fa:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    46fe:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    4702:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4706:	08 ec       	xor	r12,	r8	
    4708:	09 ed       	xor	r13,	r9	
    470a:	0a ee       	xor	r14,	r10	
    470c:	0b ef       	xor	r15,	r11	
    470e:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    4712:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    4716:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    471a:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    471e:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4722:	0f 5f       	rla	r15		
    4724:	1f 53       	inc	r15		
    4726:	1e 44 00 fe 	mov	-512(r4),r14	;0xfe00(r4)
    472a:	0f 5f       	rla	r15		
    472c:	0f 5f       	rla	r15		
    472e:	0f 5f       	rla	r15		
    4730:	0f 5e       	add	r14,	r15	
    4732:	2c 4f       	mov	@r15,	r12	
    4734:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4738:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    473c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4740:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4744:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    4748:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    474c:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4750:	08 ec       	xor	r12,	r8	
    4752:	09 ed       	xor	r13,	r9	
    4754:	0a ee       	xor	r14,	r10	
    4756:	0b ef       	xor	r15,	r11	
    4758:	84 48 12 fe 	mov	r8,	-494(r4);0xfe12(r4)
    475c:	84 49 14 fe 	mov	r9,	-492(r4);0xfe14(r4)
    4760:	84 4a 16 fe 	mov	r10,	-490(r4);0xfe16(r4)
    4764:	84 4b 18 fe 	mov	r11,	-488(r4);0xfe18(r4)
    fb_0 = L2[Y1_48-1] ^ L2[Y2_48-1] ^ (L2[Y3_48-1] & L2[Y4_48-1]) ^ (L2[Y5_48-1] & L2[Y6_48-1]) ^ k[2*i+1];
    4768:	94 44 92 ff 	mov	-110(r4),-22(r4)	;0xff92(r4), 0xffea(r4)
    476c:	ea ff 
    476e:	94 44 94 ff 	mov	-108(r4),-20(r4)	;0xff94(r4), 0xffec(r4)
    4772:	ec ff 
    4774:	94 44 96 ff 	mov	-106(r4),-18(r4)	;0xff96(r4), 0xffee(r4)
    4778:	ee ff 
    477a:	94 44 98 ff 	mov	-104(r4),-16(r4)	;0xff98(r4), 0xfff0(r4)
    477e:	f0 ff 
    4780:	1c 44 4a ff 	mov	-182(r4),r12	;0xff4a(r4)
    4784:	1d 44 4c ff 	mov	-180(r4),r13	;0xff4c(r4)
    4788:	1e 44 4e ff 	mov	-178(r4),r14	;0xff4e(r4)
    478c:	1f 44 50 ff 	mov	-176(r4),r15	;0xff50(r4)
    4790:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4794:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    4798:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    479c:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    47a0:	08 ec       	xor	r12,	r8	
    47a2:	09 ed       	xor	r13,	r9	
    47a4:	0a ee       	xor	r14,	r10	
    47a6:	0b ef       	xor	r15,	r11	
    47a8:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    47ac:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    47b0:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    47b4:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    47b8:	94 44 5a ff 	mov	-166(r4),-38(r4)	;0xff5a(r4), 0xffda(r4)
    47bc:	da ff 
    47be:	94 44 5c ff 	mov	-164(r4),-36(r4)	;0xff5c(r4), 0xffdc(r4)
    47c2:	dc ff 
    47c4:	94 44 5e ff 	mov	-162(r4),-34(r4)	;0xff5e(r4), 0xffde(r4)
    47c8:	de ff 
    47ca:	94 44 60 ff 	mov	-160(r4),-32(r4)	;0xff60(r4), 0xffe0(r4)
    47ce:	e0 ff 
    47d0:	1c 44 1a ff 	mov	-230(r4),r12	;0xff1a(r4)
    47d4:	1d 44 1c ff 	mov	-228(r4),r13	;0xff1c(r4)
    47d8:	1e 44 1e ff 	mov	-226(r4),r14	;0xff1e(r4)
    47dc:	1f 44 20 ff 	mov	-224(r4),r15	;0xff20(r4)
    47e0:	1c f4 da ff 	and	-38(r4),r12	;0xffda(r4)
    47e4:	1d f4 dc ff 	and	-36(r4),r13	;0xffdc(r4)
    47e8:	1e f4 de ff 	and	-34(r4),r14	;0xffde(r4)
    47ec:	1f f4 e0 ff 	and	-32(r4),r15	;0xffe0(r4)
    47f0:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    47f4:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    47f8:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    47fc:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4800:	08 ec       	xor	r12,	r8	
    4802:	09 ed       	xor	r13,	r9	
    4804:	0a ee       	xor	r14,	r10	
    4806:	0b ef       	xor	r15,	r11	
    4808:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    480c:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    4810:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    4814:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    4818:	94 44 2a ff 	mov	-214(r4),-30(r4)	;0xff2a(r4), 0xffe2(r4)
    481c:	e2 ff 
    481e:	94 44 2c ff 	mov	-212(r4),-28(r4)	;0xff2c(r4), 0xffe4(r4)
    4822:	e4 ff 
    4824:	94 44 2e ff 	mov	-210(r4),-26(r4)	;0xff2e(r4), 0xffe6(r4)
    4828:	e6 ff 
    482a:	94 44 30 ff 	mov	-208(r4),-24(r4)	;0xff30(r4), 0xffe8(r4)
    482e:	e8 ff 
    4830:	1c 44 e2 fe 	mov	-286(r4),r12	;0xfee2(r4)
    4834:	1d 44 e4 fe 	mov	-284(r4),r13	;0xfee4(r4)
    4838:	1e 44 e6 fe 	mov	-282(r4),r14	;0xfee6(r4)
    483c:	1f 44 e8 fe 	mov	-280(r4),r15	;0xfee8(r4)
    4840:	1c f4 e2 ff 	and	-30(r4),r12	;0xffe2(r4)
    4844:	1d f4 e4 ff 	and	-28(r4),r13	;0xffe4(r4)
    4848:	1e f4 e6 ff 	and	-26(r4),r14	;0xffe6(r4)
    484c:	1f f4 e8 ff 	and	-24(r4),r15	;0xffe8(r4)
    4850:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    4854:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    4858:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    485c:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    4860:	08 ec       	xor	r12,	r8	
    4862:	09 ed       	xor	r13,	r9	
    4864:	0a ee       	xor	r14,	r10	
    4866:	0b ef       	xor	r15,	r11	
    4868:	84 48 ea ff 	mov	r8,	-22(r4)	;0xffea(r4)
    486c:	84 49 ec ff 	mov	r9,	-20(r4)	;0xffec(r4)
    4870:	84 4a ee ff 	mov	r10,	-18(r4)	;0xffee(r4)
    4874:	84 4b f0 ff 	mov	r11,	-16(r4)	;0xfff0(r4)
    4878:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    487c:	0f 5f       	rla	r15		
    487e:	1f 53       	inc	r15		
    4880:	1e 44 00 fe 	mov	-512(r4),r14	;0xfe00(r4)
    4884:	0f 5f       	rla	r15		
    4886:	0f 5f       	rla	r15		
    4888:	0f 5f       	rla	r15		
    488a:	0f 5e       	add	r14,	r15	
    488c:	2c 4f       	mov	@r15,	r12	
    488e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4892:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4896:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    489a:	18 44 ea ff 	mov	-22(r4),r8	;0xffea(r4)
    489e:	19 44 ec ff 	mov	-20(r4),r9	;0xffec(r4)
    48a2:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    48a6:	1b 44 f0 ff 	mov	-16(r4),r11	;0xfff0(r4)
    48aa:	08 ec       	xor	r12,	r8	
    48ac:	09 ed       	xor	r13,	r9	
    48ae:	0a ee       	xor	r14,	r10	
    48b0:	0b ef       	xor	r15,	r11	
    48b2:	84 48 1a fe 	mov	r8,	-486(r4);0xfe1a(r4)
    48b6:	84 49 1c fe 	mov	r9,	-484(r4);0xfe1c(r4)
    48ba:	84 4a 1e fe 	mov	r10,	-482(r4);0xfe1e(r4)
    48be:	84 4b 20 fe 	mov	r11,	-480(r4);0xfe20(r4)

    for(j=18;j>1;--j)
    48c2:	b4 40 12 00 	mov	#18,	-516(r4);#0x0012, 0xfdfc(r4)
    48c6:	fc fd 
    48c8:	28 3c       	jmp	$+82     	;abs 0x491a
      L1[j] = L1[j-2];
    48ca:	1f 44 fc fd 	mov	-516(r4),r15	;0xfdfc(r4)
    48ce:	2f 83       	decd	r15		
    48d0:	0f 5f       	rla	r15		
    48d2:	0f 5f       	rla	r15		
    48d4:	0f 5f       	rla	r15		
    48d6:	39 40 fa fd 	mov	#-518,	r9	;#0xfdfa
    48da:	09 54       	add	r4,	r9	
    48dc:	0f 59       	add	r9,	r15	
    48de:	3f 50 28 00 	add	#40,	r15	;#0x0028
    48e2:	2c 4f       	mov	@r15,	r12	
    48e4:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    48e8:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    48ec:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    48f0:	1b 44 fc fd 	mov	-516(r4),r11	;0xfdfc(r4)
    48f4:	0b 5b       	rla	r11		
    48f6:	0b 5b       	rla	r11		
    48f8:	0b 5b       	rla	r11		
    48fa:	3a 40 fa fd 	mov	#-518,	r10	;#0xfdfa
    48fe:	0a 54       	add	r4,	r10	
    4900:	0b 5a       	add	r10,	r11	
    4902:	3b 50 28 00 	add	#40,	r11	;#0x0028
    4906:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    490a:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    490e:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4912:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    fa_1 = L1[X1_48]   ^ L1[X2_48]   ^ (L1[X3_48] & L1[X4_48])     ^ (L1[X5_48] & IR[i])         ^ k[2*i];
    fa_0 = L1[X1_48-1] ^ L1[X2_48-1] ^ (L1[X3_48-1] & L1[X4_48-1]) ^ (L1[X5_48-1] & IR[i])       ^ k[2*i];
    fb_1 = L2[Y1_48]   ^ L2[Y2_48]   ^ (L2[Y3_48] & L2[Y4_48])     ^ (L2[Y5_48] & L2[Y6_48])     ^ k[2*i+1];
    fb_0 = L2[Y1_48-1] ^ L2[Y2_48-1] ^ (L2[Y3_48-1] & L2[Y4_48-1]) ^ (L2[Y5_48-1] & L2[Y6_48-1]) ^ k[2*i+1];

    for(j=18;j>1;--j)
    4916:	b4 53 fc fd 	add	#-1,	-516(r4);r3 As==11, 0xfdfc(r4)
    491a:	a4 93 fc fd 	cmp	#2,	-516(r4);r3 As==10, 0xfdfc(r4)
    491e:	d5 37       	jge	$-84     	;abs 0x48ca
      L1[j] = L1[j-2];
    for(j=28;j>1;--j)
    4920:	b4 40 1c 00 	mov	#28,	-516(r4);#0x001c, 0xfdfc(r4)
    4924:	fc fd 
    4926:	28 3c       	jmp	$+82     	;abs 0x4978
      L2[j] = L2[j-2];
    4928:	1f 44 fc fd 	mov	-516(r4),r15	;0xfdfc(r4)
    492c:	2f 83       	decd	r15		
    492e:	0f 5f       	rla	r15		
    4930:	0f 5f       	rla	r15		
    4932:	0f 5f       	rla	r15		
    4934:	3b 40 fa fd 	mov	#-518,	r11	;#0xfdfa
    4938:	0b 54       	add	r4,	r11	
    493a:	0f 5b       	add	r11,	r15	
    493c:	3f 50 c0 00 	add	#192,	r15	;#0x00c0
    4940:	2c 4f       	mov	@r15,	r12	
    4942:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4946:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    494a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    494e:	1b 44 fc fd 	mov	-516(r4),r11	;0xfdfc(r4)
    4952:	0b 5b       	rla	r11		
    4954:	0b 5b       	rla	r11		
    4956:	0b 5b       	rla	r11		
    4958:	38 40 fa fd 	mov	#-518,	r8	;#0xfdfa
    495c:	08 54       	add	r4,	r8	
    495e:	0b 58       	add	r8,	r11	
    4960:	3b 50 c0 00 	add	#192,	r11	;#0x00c0
    4964:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4968:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    496c:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4970:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    fb_1 = L2[Y1_48]   ^ L2[Y2_48]   ^ (L2[Y3_48] & L2[Y4_48])     ^ (L2[Y5_48] & L2[Y6_48])     ^ k[2*i+1];
    fb_0 = L2[Y1_48-1] ^ L2[Y2_48-1] ^ (L2[Y3_48-1] & L2[Y4_48-1]) ^ (L2[Y5_48-1] & L2[Y6_48-1]) ^ k[2*i+1];

    for(j=18;j>1;--j)
      L1[j] = L1[j-2];
    for(j=28;j>1;--j)
    4974:	b4 53 fc fd 	add	#-1,	-516(r4);r3 As==11, 0xfdfc(r4)
    4978:	a4 93 fc fd 	cmp	#2,	-516(r4);r3 As==10, 0xfdfc(r4)
    497c:	d5 37       	jge	$-84     	;abs 0x4928
      L2[j] = L2[j-2];
    L1[1] = fb_1;
    497e:	94 44 12 fe 	mov	-494(r4),-470(r4);0xfe12(r4), 0xfe2a(r4)
    4982:	2a fe 
    4984:	94 44 14 fe 	mov	-492(r4),-468(r4);0xfe14(r4), 0xfe2c(r4)
    4988:	2c fe 
    498a:	94 44 16 fe 	mov	-490(r4),-466(r4);0xfe16(r4), 0xfe2e(r4)
    498e:	2e fe 
    4990:	94 44 18 fe 	mov	-488(r4),-464(r4);0xfe18(r4), 0xfe30(r4)
    4994:	30 fe 
    L1[0] = fb_0;
    4996:	94 44 1a fe 	mov	-486(r4),-478(r4);0xfe1a(r4), 0xfe22(r4)
    499a:	22 fe 
    499c:	94 44 1c fe 	mov	-484(r4),-476(r4);0xfe1c(r4), 0xfe24(r4)
    49a0:	24 fe 
    49a2:	94 44 1e fe 	mov	-482(r4),-474(r4);0xfe1e(r4), 0xfe26(r4)
    49a6:	26 fe 
    49a8:	94 44 20 fe 	mov	-480(r4),-472(r4);0xfe20(r4), 0xfe28(r4)
    49ac:	28 fe 
    L2[1] = fa_1;
    49ae:	94 44 02 fe 	mov	-510(r4),-318(r4);0xfe02(r4), 0xfec2(r4)
    49b2:	c2 fe 
    49b4:	94 44 04 fe 	mov	-508(r4),-316(r4);0xfe04(r4), 0xfec4(r4)
    49b8:	c4 fe 
    49ba:	94 44 06 fe 	mov	-506(r4),-314(r4);0xfe06(r4), 0xfec6(r4)
    49be:	c6 fe 
    49c0:	94 44 08 fe 	mov	-504(r4),-312(r4);0xfe08(r4), 0xfec8(r4)
    49c4:	c8 fe 
    L2[0] = fa_0;
    49c6:	94 44 0a fe 	mov	-502(r4),-326(r4);0xfe0a(r4), 0xfeba(r4)
    49ca:	ba fe 
    49cc:	94 44 0c fe 	mov	-500(r4),-324(r4);0xfe0c(r4), 0xfebc(r4)
    49d0:	bc fe 
    49d2:	94 44 0e fe 	mov	-498(r4),-322(r4);0xfe0e(r4), 0xfebe(r4)
    49d6:	be fe 
    49d8:	94 44 10 fe 	mov	-496(r4),-320(r4);0xfe10(r4), 0xfec0(r4)
    49dc:	c0 fe 
  for(i=0;i<80;++i)
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13];

  for(i=0;i<rounds;++i) {
    49de:	94 53 fa fd 	inc	-518(r4)	;0xfdfa(r4)
    49e2:	94 94 a8 ff 	cmp	-88(r4),-518(r4);0xffa8(r4), 0xfdfa(r4)
    49e6:	fa fd 
    49e8:	02 34       	jge	$+6      	;abs 0x49ee
    49ea:	30 40 46 43 	br	#0x4346	
    L1[0] = fb_0;
    L2[1] = fa_1;
    L2[0] = fa_0;
  }

  for(i=0;i<29;++i) 
    49ee:	84 43 fa fd 	mov	#0,	-518(r4);r3 As==00, 0xfdfa(r4)
    49f2:	24 3c       	jmp	$+74     	;abs 0x4a3c
    cipher[i] = L2[i];
    49f4:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    49f8:	0f 5f       	rla	r15		
    49fa:	0f 5f       	rla	r15		
    49fc:	0f 5f       	rla	r15		
    49fe:	1b 44 a4 ff 	mov	-92(r4),r11	;0xffa4(r4)
    4a02:	0b 5f       	add	r15,	r11	
    4a04:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4a08:	0f 5f       	rla	r15		
    4a0a:	0f 5f       	rla	r15		
    4a0c:	0f 5f       	rla	r15		
    4a0e:	39 40 fa fd 	mov	#-518,	r9	;#0xfdfa
    4a12:	09 54       	add	r4,	r9	
    4a14:	0f 59       	add	r9,	r15	
    4a16:	3f 50 c0 00 	add	#192,	r15	;#0x00c0
    4a1a:	2c 4f       	mov	@r15,	r12	
    4a1c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a20:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a24:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a28:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4a2c:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4a30:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4a34:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    L1[0] = fb_0;
    L2[1] = fa_1;
    L2[0] = fa_0;
  }

  for(i=0;i<29;++i) 
    4a38:	94 53 fa fd 	inc	-518(r4)	;0xfdfa(r4)
    4a3c:	b4 90 1d 00 	cmp	#29,	-518(r4);#0x001d, 0xfdfa(r4)
    4a40:	fa fd 
    4a42:	d8 3b       	jl	$-78     	;abs 0x49f4
    cipher[i] = L2[i];
  for(i=0;i<19;++i) 
    4a44:	84 43 fa fd 	mov	#0,	-518(r4);r3 As==00, 0xfdfa(r4)
    4a48:	26 3c       	jmp	$+78     	;abs 0x4a96
    cipher[i+29] = L1[i];
    4a4a:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4a4e:	3f 50 1d 00 	add	#29,	r15	;#0x001d
    4a52:	0f 5f       	rla	r15		
    4a54:	0f 5f       	rla	r15		
    4a56:	0f 5f       	rla	r15		
    4a58:	1b 44 a4 ff 	mov	-92(r4),r11	;0xffa4(r4)
    4a5c:	0b 5f       	add	r15,	r11	
    4a5e:	1f 44 fa fd 	mov	-518(r4),r15	;0xfdfa(r4)
    4a62:	0f 5f       	rla	r15		
    4a64:	0f 5f       	rla	r15		
    4a66:	0f 5f       	rla	r15		
    4a68:	3a 40 fa fd 	mov	#-518,	r10	;#0xfdfa
    4a6c:	0a 54       	add	r4,	r10	
    4a6e:	0f 5a       	add	r10,	r15	
    4a70:	3f 50 28 00 	add	#40,	r15	;#0x0028
    4a74:	2c 4f       	mov	@r15,	r12	
    4a76:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a7a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a7e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a82:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4a86:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4a8a:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4a8e:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    L2[0] = fa_0;
  }

  for(i=0;i<29;++i) 
    cipher[i] = L2[i];
  for(i=0;i<19;++i) 
    4a92:	94 53 fa fd 	inc	-518(r4)	;0xfdfa(r4)
    4a96:	b4 90 13 00 	cmp	#19,	-518(r4);#0x0013, 0xfdfa(r4)
    4a9a:	fa fd 
    4a9c:	d6 3b       	jl	$-82     	;abs 0x4a4a
    4a9e:	01 46       	mov	r6,	r1	
    cipher[i+29] = L1[i];

}
    4aa0:	01 47       	mov	r7,	r1	
    4aa2:	31 50 f8 01 	add	#504,	r1	;#0x01f8
    4aa6:	34 41       	pop	r4		
    4aa8:	36 41       	pop	r6		
    4aaa:	37 41       	pop	r7		
    4aac:	38 41       	pop	r8		
    4aae:	39 41       	pop	r9		
    4ab0:	3a 41       	pop	r10		
    4ab2:	3b 41       	pop	r11		
    4ab4:	30 41       	ret			

00004ab6 <katan48_decrypt>:


void katan48_decrypt( const u64 cipher[48], u64 plain[48], const u64 key[80], int rounds ) {
    4ab6:	0b 12       	push	r11		
    4ab8:	0a 12       	push	r10		
    4aba:	09 12       	push	r9		
    4abc:	08 12       	push	r8		
    4abe:	07 12       	push	r7		
    4ac0:	06 12       	push	r6		
    4ac2:	04 12       	push	r4		
    4ac4:	04 41       	mov	r1,	r4	
    4ac6:	34 50 0e 00 	add	#14,	r4	;#0x000e
    4aca:	31 50 10 fe 	add	#-496,	r1	;#0xfe10
    4ace:	84 4f aa ff 	mov	r15,	-86(r4)	;0xffaa(r4)
    4ad2:	84 4e ac ff 	mov	r14,	-84(r4)	;0xffac(r4)
    4ad6:	84 4d ae ff 	mov	r13,	-82(r4)	;0xffae(r4)
    4ada:	84 4c b0 ff 	mov	r12,	-80(r4)	;0xffb0(r4)
  for(i=0;i<29;++i) 
    plain[i] = L2[i];
  for(i=0;i<19;++i) 
    plain[i+29] = L1[i];

}
    4ade:	07 41       	mov	r1,	r7	
    cipher[i+29] = L1[i];

}


void katan48_decrypt( const u64 cipher[48], u64 plain[48], const u64 key[80], int rounds ) {
    4ae0:	0f 41       	mov	r1,	r15	
    4ae2:	06 4f       	mov	r15,	r6	

  u64 L1[19], L2[29], k[2*rounds], fa_1, fa_0, fb_1, fb_0;
    4ae4:	1f 44 b0 ff 	mov	-80(r4),r15	;0xffb0(r4)
    4ae8:	0f 5f       	rla	r15		
    4aea:	0e 4f       	mov	r15,	r14	
    4aec:	3e 53       	add	#-1,	r14	;r3 As==11
    4aee:	84 4e 06 fe 	mov	r14,	-506(r4);0xfe06(r4)
    4af2:	0e 4f       	mov	r15,	r14	
    4af4:	08 4e       	mov	r14,	r8	
    4af6:	09 43       	clr	r9		
    4af8:	0e 4f       	mov	r15,	r14	
    4afa:	0a 4e       	mov	r14,	r10	
    4afc:	0b 43       	clr	r11		
    4afe:	0f 5f       	rla	r15		
    4b00:	0f 5f       	rla	r15		
    4b02:	0f 5f       	rla	r15		
    4b04:	1f 53       	inc	r15		
    4b06:	1f 53       	inc	r15		
    4b08:	12 c3       	clrc			
    4b0a:	0f 10       	rrc	r15		
    4b0c:	0f 5f       	rla	r15		
    4b0e:	01 8f       	sub	r15,	r1	
    4b10:	0f 41       	mov	r1,	r15	
    4b12:	1f 53       	inc	r15		
    4b14:	12 c3       	clrc			
    4b16:	0f 10       	rrc	r15		
    4b18:	0f 5f       	rla	r15		
    4b1a:	84 4f 08 fe 	mov	r15,	-504(r4);0xfe08(r4)
  int i,j;

  
  for(i=0;i<29;++i) 
    4b1e:	84 43 02 fe 	mov	#0,	-510(r4);r3 As==00, 0xfe02(r4)
    4b22:	23 3c       	jmp	$+72     	;abs 0x4b6a
    L2[i] = cipher[i];
    4b24:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4b28:	0f 5f       	rla	r15		
    4b2a:	0f 5f       	rla	r15		
    4b2c:	0f 5f       	rla	r15		
    4b2e:	1f 54 aa ff 	add	-86(r4),r15	;0xffaa(r4)
    4b32:	2c 4f       	mov	@r15,	r12	
    4b34:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4b38:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4b3c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4b40:	1b 44 02 fe 	mov	-510(r4),r11	;0xfe02(r4)
    4b44:	0b 5b       	rla	r11		
    4b46:	0b 5b       	rla	r11		
    4b48:	0b 5b       	rla	r11		
    4b4a:	3a 40 02 fe 	mov	#-510,	r10	;#0xfe02
    4b4e:	0a 54       	add	r4,	r10	
    4b50:	0b 5a       	add	r10,	r11	
    4b52:	3b 50 c0 00 	add	#192,	r11	;#0x00c0
    4b56:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4b5a:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4b5e:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4b62:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

  u64 L1[19], L2[29], k[2*rounds], fa_1, fa_0, fb_1, fb_0;
  int i,j;

  
  for(i=0;i<29;++i) 
    4b66:	94 53 02 fe 	inc	-510(r4)	;0xfe02(r4)
    4b6a:	b4 90 1d 00 	cmp	#29,	-510(r4);#0x001d, 0xfe02(r4)
    4b6e:	02 fe 
    4b70:	d9 3b       	jl	$-76     	;abs 0x4b24
    L2[i] = cipher[i];
  for(i=0;i<19;++i) 
    4b72:	84 43 02 fe 	mov	#0,	-510(r4);r3 As==00, 0xfe02(r4)
    4b76:	25 3c       	jmp	$+76     	;abs 0x4bc2
    L1[i] = cipher[i+29];
    4b78:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4b7c:	3f 50 1d 00 	add	#29,	r15	;#0x001d
    4b80:	0f 5f       	rla	r15		
    4b82:	0f 5f       	rla	r15		
    4b84:	0f 5f       	rla	r15		
    4b86:	1f 54 aa ff 	add	-86(r4),r15	;0xffaa(r4)
    4b8a:	2c 4f       	mov	@r15,	r12	
    4b8c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4b90:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4b94:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4b98:	1b 44 02 fe 	mov	-510(r4),r11	;0xfe02(r4)
    4b9c:	0b 5b       	rla	r11		
    4b9e:	0b 5b       	rla	r11		
    4ba0:	0b 5b       	rla	r11		
    4ba2:	3a 40 02 fe 	mov	#-510,	r10	;#0xfe02
    4ba6:	0a 54       	add	r4,	r10	
    4ba8:	0b 5a       	add	r10,	r11	
    4baa:	3b 50 28 00 	add	#40,	r11	;#0x0028
    4bae:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4bb2:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4bb6:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4bba:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  int i,j;

  
  for(i=0;i<29;++i) 
    L2[i] = cipher[i];
  for(i=0;i<19;++i) 
    4bbe:	94 53 02 fe 	inc	-510(r4)	;0xfe02(r4)
    4bc2:	b4 90 13 00 	cmp	#19,	-510(r4);#0x0013, 0xfe02(r4)
    4bc6:	02 fe 
    4bc8:	d7 3b       	jl	$-80     	;abs 0x4b78
    L1[i] = cipher[i+29];

  for(i=0;i<80;++i)
    4bca:	84 43 02 fe 	mov	#0,	-510(r4);r3 As==00, 0xfe02(r4)
    4bce:	20 3c       	jmp	$+66     	;abs 0x4c10
    k[i]=key[i];
    4bd0:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4bd4:	0f 5f       	rla	r15		
    4bd6:	0f 5f       	rla	r15		
    4bd8:	0f 5f       	rla	r15		
    4bda:	1f 54 ae ff 	add	-82(r4),r15	;0xffae(r4)
    4bde:	2c 4f       	mov	@r15,	r12	
    4be0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4be4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4be8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4bec:	1a 44 08 fe 	mov	-504(r4),r10	;0xfe08(r4)
    4bf0:	1b 44 02 fe 	mov	-510(r4),r11	;0xfe02(r4)
    4bf4:	0b 5b       	rla	r11		
    4bf6:	0b 5b       	rla	r11		
    4bf8:	0b 5b       	rla	r11		
    4bfa:	0b 5a       	add	r10,	r11	
    4bfc:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4c00:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4c04:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4c08:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<29;++i) 
    L2[i] = cipher[i];
  for(i=0;i<19;++i) 
    L1[i] = cipher[i+29];

  for(i=0;i<80;++i)
    4c0c:	94 53 02 fe 	inc	-510(r4)	;0xfe02(r4)
    4c10:	b4 90 50 00 	cmp	#80,	-510(r4);#0x0050, 0xfe02(r4)
    4c14:	02 fe 
    4c16:	dc 3b       	jl	$-70     	;abs 0x4bd0
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    4c18:	b4 40 50 00 	mov	#80,	-510(r4);#0x0050, 0xfe02(r4)
    4c1c:	02 fe 
    4c1e:	62 3c       	jmp	$+198    	;abs 0x4ce4
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;
    4c20:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4c24:	3f 50 b0 ff 	add	#-80,	r15	;#0xffb0
    4c28:	1e 44 08 fe 	mov	-504(r4),r14	;0xfe08(r4)
    4c2c:	0f 5f       	rla	r15		
    4c2e:	0f 5f       	rla	r15		
    4c30:	0f 5f       	rla	r15		
    4c32:	0f 5e       	add	r14,	r15	
    4c34:	28 4f       	mov	@r15,	r8	
    4c36:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    4c3a:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    4c3e:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    4c42:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4c46:	3f 50 c3 ff 	add	#-61,	r15	;#0xffc3
    4c4a:	1e 44 08 fe 	mov	-504(r4),r14	;0xfe08(r4)
    4c4e:	0f 5f       	rla	r15		
    4c50:	0f 5f       	rla	r15		
    4c52:	0f 5f       	rla	r15		
    4c54:	0f 5e       	add	r14,	r15	
    4c56:	2c 4f       	mov	@r15,	r12	
    4c58:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4c5c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4c60:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4c64:	08 ec       	xor	r12,	r8	
    4c66:	09 ed       	xor	r13,	r9	
    4c68:	0a ee       	xor	r14,	r10	
    4c6a:	0b ef       	xor	r15,	r11	
    4c6c:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4c70:	3f 50 ce ff 	add	#-50,	r15	;#0xffce
    4c74:	1e 44 08 fe 	mov	-504(r4),r14	;0xfe08(r4)
    4c78:	0f 5f       	rla	r15		
    4c7a:	0f 5f       	rla	r15		
    4c7c:	0f 5f       	rla	r15		
    4c7e:	0f 5e       	add	r14,	r15	
    4c80:	2c 4f       	mov	@r15,	r12	
    4c82:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4c86:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4c8a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4c8e:	08 ec       	xor	r12,	r8	
    4c90:	09 ed       	xor	r13,	r9	
    4c92:	0a ee       	xor	r14,	r10	
    4c94:	0b ef       	xor	r15,	r11	
    4c96:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4c9a:	3f 50 f3 ff 	add	#-13,	r15	;#0xfff3
    4c9e:	1e 44 08 fe 	mov	-504(r4),r14	;0xfe08(r4)
    4ca2:	0f 5f       	rla	r15		
    4ca4:	0f 5f       	rla	r15		
    4ca6:	0f 5f       	rla	r15		
    4ca8:	0f 5e       	add	r14,	r15	
    4caa:	2c 4f       	mov	@r15,	r12	
    4cac:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4cb0:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4cb4:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4cb8:	0c e8       	xor	r8,	r12	
    4cba:	0d e9       	xor	r9,	r13	
    4cbc:	0e ea       	xor	r10,	r14	
    4cbe:	0f eb       	xor	r11,	r15	
    4cc0:	1a 44 08 fe 	mov	-504(r4),r10	;0xfe08(r4)
    4cc4:	1b 44 02 fe 	mov	-510(r4),r11	;0xfe02(r4)
    4cc8:	0b 5b       	rla	r11		
    4cca:	0b 5b       	rla	r11		
    4ccc:	0b 5b       	rla	r11		
    4cce:	0b 5a       	add	r10,	r11	
    4cd0:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4cd4:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4cd8:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4cdc:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
  for(i=0;i<19;++i) 
    L1[i] = cipher[i+29];

  for(i=0;i<80;++i)
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    4ce0:	94 53 02 fe 	inc	-510(r4)	;0xfe02(r4)
    4ce4:	1f 44 b0 ff 	mov	-80(r4),r15	;0xffb0(r4)
    4ce8:	0f 5f       	rla	r15		
    4cea:	84 9f 02 fe 	cmp	r15,	-510(r4);0xfe02(r4)
    4cee:	98 3b       	jl	$-206    	;abs 0x4c20
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;

  for(i=rounds-1;i>=0;--i) {
    4cf0:	1e 44 b0 ff 	mov	-80(r4),r14	;0xffb0(r4)
    4cf4:	3e 53       	add	#-1,	r14	;r3 As==11
    4cf6:	84 4e 02 fe 	mov	r14,	-510(r4);0xfe02(r4)
    4cfa:	30 40 ba 51 	br	#0x51ba	

    fb_1 = L1[1];    
    4cfe:	94 44 32 fe 	mov	-462(r4),-502(r4);0xfe32(r4), 0xfe0a(r4)
    4d02:	0a fe 
    4d04:	94 44 34 fe 	mov	-460(r4),-500(r4);0xfe34(r4), 0xfe0c(r4)
    4d08:	0c fe 
    4d0a:	94 44 36 fe 	mov	-458(r4),-498(r4);0xfe36(r4), 0xfe0e(r4)
    4d0e:	0e fe 
    4d10:	94 44 38 fe 	mov	-456(r4),-496(r4);0xfe38(r4), 0xfe10(r4)
    4d14:	10 fe 
    fb_0 = L1[0];    
    4d16:	94 44 2a fe 	mov	-470(r4),-494(r4);0xfe2a(r4), 0xfe12(r4)
    4d1a:	12 fe 
    4d1c:	94 44 2c fe 	mov	-468(r4),-492(r4);0xfe2c(r4), 0xfe14(r4)
    4d20:	14 fe 
    4d22:	94 44 2e fe 	mov	-466(r4),-490(r4);0xfe2e(r4), 0xfe16(r4)
    4d26:	16 fe 
    4d28:	94 44 30 fe 	mov	-464(r4),-488(r4);0xfe30(r4), 0xfe18(r4)
    4d2c:	18 fe 
    fa_1 = L2[1];
    4d2e:	94 44 ca fe 	mov	-310(r4),-486(r4);0xfeca(r4), 0xfe1a(r4)
    4d32:	1a fe 
    4d34:	94 44 cc fe 	mov	-308(r4),-484(r4);0xfecc(r4), 0xfe1c(r4)
    4d38:	1c fe 
    4d3a:	94 44 ce fe 	mov	-306(r4),-482(r4);0xfece(r4), 0xfe1e(r4)
    4d3e:	1e fe 
    4d40:	94 44 d0 fe 	mov	-304(r4),-480(r4);0xfed0(r4), 0xfe20(r4)
    4d44:	20 fe 
    fa_0 = L2[0];
    4d46:	94 44 c2 fe 	mov	-318(r4),-478(r4);0xfec2(r4), 0xfe22(r4)
    4d4a:	22 fe 
    4d4c:	94 44 c4 fe 	mov	-316(r4),-476(r4);0xfec4(r4), 0xfe24(r4)
    4d50:	24 fe 
    4d52:	94 44 c6 fe 	mov	-314(r4),-474(r4);0xfec6(r4), 0xfe26(r4)
    4d56:	26 fe 
    4d58:	94 44 c8 fe 	mov	-312(r4),-472(r4);0xfec8(r4), 0xfe28(r4)
    4d5c:	28 fe 
    for(j=0;j<17;++j)
    4d5e:	84 43 04 fe 	mov	#0,	-508(r4);r3 As==00, 0xfe04(r4)
    4d62:	28 3c       	jmp	$+82     	;abs 0x4db4
      L1[j] = L1[j+2];
    4d64:	1f 44 04 fe 	mov	-508(r4),r15	;0xfe04(r4)
    4d68:	2f 53       	incd	r15		
    4d6a:	0f 5f       	rla	r15		
    4d6c:	0f 5f       	rla	r15		
    4d6e:	0f 5f       	rla	r15		
    4d70:	3a 40 02 fe 	mov	#-510,	r10	;#0xfe02
    4d74:	0a 54       	add	r4,	r10	
    4d76:	0f 5a       	add	r10,	r15	
    4d78:	3f 50 28 00 	add	#40,	r15	;#0x0028
    4d7c:	2c 4f       	mov	@r15,	r12	
    4d7e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4d82:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4d86:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4d8a:	1b 44 04 fe 	mov	-508(r4),r11	;0xfe04(r4)
    4d8e:	0b 5b       	rla	r11		
    4d90:	0b 5b       	rla	r11		
    4d92:	0b 5b       	rla	r11		
    4d94:	3a 40 02 fe 	mov	#-510,	r10	;#0xfe02
    4d98:	0a 54       	add	r4,	r10	
    4d9a:	0b 5a       	add	r10,	r11	
    4d9c:	3b 50 28 00 	add	#40,	r11	;#0x0028
    4da0:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4da4:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4da8:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4dac:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    fb_1 = L1[1];    
    fb_0 = L1[0];    
    fa_1 = L2[1];
    fa_0 = L2[0];
    for(j=0;j<17;++j)
    4db0:	94 53 04 fe 	inc	-508(r4)	;0xfe04(r4)
    4db4:	b4 90 11 00 	cmp	#17,	-508(r4);#0x0011, 0xfe04(r4)
    4db8:	04 fe 
    4dba:	d4 3b       	jl	$-86     	;abs 0x4d64
      L1[j] = L1[j+2];
    for(j=0;j<27;++j)
    4dbc:	84 43 04 fe 	mov	#0,	-508(r4);r3 As==00, 0xfe04(r4)
    4dc0:	28 3c       	jmp	$+82     	;abs 0x4e12
      L2[j] = L2[j+2];
    4dc2:	1f 44 04 fe 	mov	-508(r4),r15	;0xfe04(r4)
    4dc6:	2f 53       	incd	r15		
    4dc8:	0f 5f       	rla	r15		
    4dca:	0f 5f       	rla	r15		
    4dcc:	0f 5f       	rla	r15		
    4dce:	3e 40 02 fe 	mov	#-510,	r14	;#0xfe02
    4dd2:	0e 54       	add	r4,	r14	
    4dd4:	0f 5e       	add	r14,	r15	
    4dd6:	3f 50 c0 00 	add	#192,	r15	;#0x00c0
    4dda:	2c 4f       	mov	@r15,	r12	
    4ddc:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4de0:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4de4:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4de8:	1b 44 04 fe 	mov	-508(r4),r11	;0xfe04(r4)
    4dec:	0b 5b       	rla	r11		
    4dee:	0b 5b       	rla	r11		
    4df0:	0b 5b       	rla	r11		
    4df2:	3a 40 02 fe 	mov	#-510,	r10	;#0xfe02
    4df6:	0a 54       	add	r4,	r10	
    4df8:	0b 5a       	add	r10,	r11	
    4dfa:	3b 50 c0 00 	add	#192,	r11	;#0x00c0
    4dfe:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4e02:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4e06:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4e0a:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    fb_0 = L1[0];    
    fa_1 = L2[1];
    fa_0 = L2[0];
    for(j=0;j<17;++j)
      L1[j] = L1[j+2];
    for(j=0;j<27;++j)
    4e0e:	94 53 04 fe 	inc	-508(r4)	;0xfe04(r4)
    4e12:	b4 90 1b 00 	cmp	#27,	-508(r4);#0x001b, 0xfe04(r4)
    4e16:	04 fe 
    4e18:	d4 3b       	jl	$-86     	;abs 0x4dc2
      L2[j] = L2[j+2];

    L1[X1_48]   = fa_1 ^ L1[X2_48]   ^ (L1[X3_48] & L1[X4_48])     ^ (L1[X5_48] & IR[i])         ^ k[2*i];
    4e1a:	1c 44 8a fe 	mov	-374(r4),r12	;0xfe8a(r4)
    4e1e:	1d 44 8c fe 	mov	-372(r4),r13	;0xfe8c(r4)
    4e22:	1e 44 8e fe 	mov	-370(r4),r14	;0xfe8e(r4)
    4e26:	1f 44 90 fe 	mov	-368(r4),r15	;0xfe90(r4)
    4e2a:	08 4c       	mov	r12,	r8	
    4e2c:	09 4d       	mov	r13,	r9	
    4e2e:	0a 4e       	mov	r14,	r10	
    4e30:	0b 4f       	mov	r15,	r11	
    4e32:	18 e4 1a fe 	xor	-486(r4),r8	;0xfe1a(r4)
    4e36:	19 e4 1c fe 	xor	-484(r4),r9	;0xfe1c(r4)
    4e3a:	1a e4 1e fe 	xor	-482(r4),r10	;0xfe1e(r4)
    4e3e:	1b e4 20 fe 	xor	-480(r4),r11	;0xfe20(r4)
    4e42:	94 44 a2 fe 	mov	-350(r4),-78(r4)	;0xfea2(r4), 0xffb2(r4)
    4e46:	b2 ff 
    4e48:	94 44 a4 fe 	mov	-348(r4),-76(r4)	;0xfea4(r4), 0xffb4(r4)
    4e4c:	b4 ff 
    4e4e:	94 44 a6 fe 	mov	-346(r4),-74(r4)	;0xfea6(r4), 0xffb6(r4)
    4e52:	b6 ff 
    4e54:	94 44 a8 fe 	mov	-344(r4),-72(r4)	;0xfea8(r4), 0xffb8(r4)
    4e58:	b8 ff 
    4e5a:	1c 44 62 fe 	mov	-414(r4),r12	;0xfe62(r4)
    4e5e:	1d 44 64 fe 	mov	-412(r4),r13	;0xfe64(r4)
    4e62:	1e 44 66 fe 	mov	-410(r4),r14	;0xfe66(r4)
    4e66:	1f 44 68 fe 	mov	-408(r4),r15	;0xfe68(r4)
    4e6a:	1c f4 b2 ff 	and	-78(r4),r12	;0xffb2(r4)
    4e6e:	1d f4 b4 ff 	and	-76(r4),r13	;0xffb4(r4)
    4e72:	1e f4 b6 ff 	and	-74(r4),r14	;0xffb6(r4)
    4e76:	1f f4 b8 ff 	and	-72(r4),r15	;0xffb8(r4)
    4e7a:	08 ec       	xor	r12,	r8	
    4e7c:	09 ed       	xor	r13,	r9	
    4e7e:	0a ee       	xor	r14,	r10	
    4e80:	0b ef       	xor	r15,	r11	
    4e82:	94 44 5a fe 	mov	-422(r4),-70(r4)	;0xfe5a(r4), 0xffba(r4)
    4e86:	ba ff 
    4e88:	94 44 5c fe 	mov	-420(r4),-68(r4)	;0xfe5c(r4), 0xffbc(r4)
    4e8c:	bc ff 
    4e8e:	94 44 5e fe 	mov	-418(r4),-66(r4)	;0xfe5e(r4), 0xffbe(r4)
    4e92:	be ff 
    4e94:	94 44 60 fe 	mov	-416(r4),-64(r4)	;0xfe60(r4), 0xffc0(r4)
    4e98:	c0 ff 
    4e9a:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4e9e:	0f 5f       	rla	r15		
    4ea0:	0f 5f       	rla	r15		
    4ea2:	0f 5f       	rla	r15		
    4ea4:	3f 50 94 53 	add	#21396,	r15	;#0x5394
    4ea8:	2c 4f       	mov	@r15,	r12	
    4eaa:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4eae:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4eb2:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4eb6:	1c f4 ba ff 	and	-70(r4),r12	;0xffba(r4)
    4eba:	1d f4 bc ff 	and	-68(r4),r13	;0xffbc(r4)
    4ebe:	1e f4 be ff 	and	-66(r4),r14	;0xffbe(r4)
    4ec2:	1f f4 c0 ff 	and	-64(r4),r15	;0xffc0(r4)
    4ec6:	08 ec       	xor	r12,	r8	
    4ec8:	09 ed       	xor	r13,	r9	
    4eca:	0a ee       	xor	r14,	r10	
    4ecc:	0b ef       	xor	r15,	r11	
    4ece:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4ed2:	0f 5f       	rla	r15		
    4ed4:	1e 44 08 fe 	mov	-504(r4),r14	;0xfe08(r4)
    4ed8:	0f 5f       	rla	r15		
    4eda:	0f 5f       	rla	r15		
    4edc:	0f 5f       	rla	r15		
    4ede:	0f 5e       	add	r14,	r15	
    4ee0:	2c 4f       	mov	@r15,	r12	
    4ee2:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4ee6:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4eea:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4eee:	0c e8       	xor	r8,	r12	
    4ef0:	0d e9       	xor	r9,	r13	
    4ef2:	0e ea       	xor	r10,	r14	
    4ef4:	0f eb       	xor	r11,	r15	
    4ef6:	84 4c ba fe 	mov	r12,	-326(r4);0xfeba(r4)
    4efa:	84 4d bc fe 	mov	r13,	-324(r4);0xfebc(r4)
    4efe:	84 4e be fe 	mov	r14,	-322(r4);0xfebe(r4)
    4f02:	84 4f c0 fe 	mov	r15,	-320(r4);0xfec0(r4)
    L1[X1_48-1] = fa_0 ^ L1[X2_48-1] ^ (L1[X3_48-1] & L1[X4_48-1]) ^ (L1[X5_48-1] & IR[i])       ^ k[2*i];
    4f06:	1c 44 82 fe 	mov	-382(r4),r12	;0xfe82(r4)
    4f0a:	1d 44 84 fe 	mov	-380(r4),r13	;0xfe84(r4)
    4f0e:	1e 44 86 fe 	mov	-378(r4),r14	;0xfe86(r4)
    4f12:	1f 44 88 fe 	mov	-376(r4),r15	;0xfe88(r4)
    4f16:	08 4c       	mov	r12,	r8	
    4f18:	09 4d       	mov	r13,	r9	
    4f1a:	0a 4e       	mov	r14,	r10	
    4f1c:	0b 4f       	mov	r15,	r11	
    4f1e:	18 e4 22 fe 	xor	-478(r4),r8	;0xfe22(r4)
    4f22:	19 e4 24 fe 	xor	-476(r4),r9	;0xfe24(r4)
    4f26:	1a e4 26 fe 	xor	-474(r4),r10	;0xfe26(r4)
    4f2a:	1b e4 28 fe 	xor	-472(r4),r11	;0xfe28(r4)
    4f2e:	94 44 9a fe 	mov	-358(r4),-62(r4)	;0xfe9a(r4), 0xffc2(r4)
    4f32:	c2 ff 
    4f34:	94 44 9c fe 	mov	-356(r4),-60(r4)	;0xfe9c(r4), 0xffc4(r4)
    4f38:	c4 ff 
    4f3a:	94 44 9e fe 	mov	-354(r4),-58(r4)	;0xfe9e(r4), 0xffc6(r4)
    4f3e:	c6 ff 
    4f40:	94 44 a0 fe 	mov	-352(r4),-56(r4)	;0xfea0(r4), 0xffc8(r4)
    4f44:	c8 ff 
    4f46:	1c 44 5a fe 	mov	-422(r4),r12	;0xfe5a(r4)
    4f4a:	1d 44 5c fe 	mov	-420(r4),r13	;0xfe5c(r4)
    4f4e:	1e 44 5e fe 	mov	-418(r4),r14	;0xfe5e(r4)
    4f52:	1f 44 60 fe 	mov	-416(r4),r15	;0xfe60(r4)
    4f56:	1c f4 c2 ff 	and	-62(r4),r12	;0xffc2(r4)
    4f5a:	1d f4 c4 ff 	and	-60(r4),r13	;0xffc4(r4)
    4f5e:	1e f4 c6 ff 	and	-58(r4),r14	;0xffc6(r4)
    4f62:	1f f4 c8 ff 	and	-56(r4),r15	;0xffc8(r4)
    4f66:	08 ec       	xor	r12,	r8	
    4f68:	09 ed       	xor	r13,	r9	
    4f6a:	0a ee       	xor	r14,	r10	
    4f6c:	0b ef       	xor	r15,	r11	
    4f6e:	94 44 52 fe 	mov	-430(r4),-54(r4)	;0xfe52(r4), 0xffca(r4)
    4f72:	ca ff 
    4f74:	94 44 54 fe 	mov	-428(r4),-52(r4)	;0xfe54(r4), 0xffcc(r4)
    4f78:	cc ff 
    4f7a:	94 44 56 fe 	mov	-426(r4),-50(r4)	;0xfe56(r4), 0xffce(r4)
    4f7e:	ce ff 
    4f80:	94 44 58 fe 	mov	-424(r4),-48(r4)	;0xfe58(r4), 0xffd0(r4)
    4f84:	d0 ff 
    4f86:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4f8a:	0f 5f       	rla	r15		
    4f8c:	0f 5f       	rla	r15		
    4f8e:	0f 5f       	rla	r15		
    4f90:	3f 50 94 53 	add	#21396,	r15	;#0x5394
    4f94:	2c 4f       	mov	@r15,	r12	
    4f96:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4f9a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4f9e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4fa2:	1c f4 ca ff 	and	-54(r4),r12	;0xffca(r4)
    4fa6:	1d f4 cc ff 	and	-52(r4),r13	;0xffcc(r4)
    4faa:	1e f4 ce ff 	and	-50(r4),r14	;0xffce(r4)
    4fae:	1f f4 d0 ff 	and	-48(r4),r15	;0xffd0(r4)
    4fb2:	08 ec       	xor	r12,	r8	
    4fb4:	09 ed       	xor	r13,	r9	
    4fb6:	0a ee       	xor	r14,	r10	
    4fb8:	0b ef       	xor	r15,	r11	
    4fba:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    4fbe:	0f 5f       	rla	r15		
    4fc0:	1e 44 08 fe 	mov	-504(r4),r14	;0xfe08(r4)
    4fc4:	0f 5f       	rla	r15		
    4fc6:	0f 5f       	rla	r15		
    4fc8:	0f 5f       	rla	r15		
    4fca:	0f 5e       	add	r14,	r15	
    4fcc:	2c 4f       	mov	@r15,	r12	
    4fce:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4fd2:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4fd6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4fda:	0c e8       	xor	r8,	r12	
    4fdc:	0d e9       	xor	r9,	r13	
    4fde:	0e ea       	xor	r10,	r14	
    4fe0:	0f eb       	xor	r11,	r15	
    4fe2:	84 4c b2 fe 	mov	r12,	-334(r4);0xfeb2(r4)
    4fe6:	84 4d b4 fe 	mov	r13,	-332(r4);0xfeb4(r4)
    4fea:	84 4e b6 fe 	mov	r14,	-330(r4);0xfeb6(r4)
    4fee:	84 4f b8 fe 	mov	r15,	-328(r4);0xfeb8(r4)
    L2[Y1_48]   = fb_1 ^ L2[Y2_48]   ^ (L2[Y3_48] & L2[Y4_48])     ^ (L2[Y5_48] & L2[Y6_48])     ^ k[2*i+1];
    4ff2:	1c 44 5a ff 	mov	-166(r4),r12	;0xff5a(r4)
    4ff6:	1d 44 5c ff 	mov	-164(r4),r13	;0xff5c(r4)
    4ffa:	1e 44 5e ff 	mov	-162(r4),r14	;0xff5e(r4)
    4ffe:	1f 44 60 ff 	mov	-160(r4),r15	;0xff60(r4)
    5002:	08 4c       	mov	r12,	r8	
    5004:	09 4d       	mov	r13,	r9	
    5006:	0a 4e       	mov	r14,	r10	
    5008:	0b 4f       	mov	r15,	r11	
    500a:	18 e4 0a fe 	xor	-502(r4),r8	;0xfe0a(r4)
    500e:	19 e4 0c fe 	xor	-500(r4),r9	;0xfe0c(r4)
    5012:	1a e4 0e fe 	xor	-498(r4),r10	;0xfe0e(r4)
    5016:	1b e4 10 fe 	xor	-496(r4),r11	;0xfe10(r4)
    501a:	94 44 6a ff 	mov	-150(r4),-46(r4)	;0xff6a(r4), 0xffd2(r4)
    501e:	d2 ff 
    5020:	94 44 6c ff 	mov	-148(r4),-44(r4)	;0xff6c(r4), 0xffd4(r4)
    5024:	d4 ff 
    5026:	94 44 6e ff 	mov	-146(r4),-42(r4)	;0xff6e(r4), 0xffd6(r4)
    502a:	d6 ff 
    502c:	94 44 70 ff 	mov	-144(r4),-40(r4)	;0xff70(r4), 0xffd8(r4)
    5030:	d8 ff 
    5032:	1c 44 2a ff 	mov	-214(r4),r12	;0xff2a(r4)
    5036:	1d 44 2c ff 	mov	-212(r4),r13	;0xff2c(r4)
    503a:	1e 44 2e ff 	mov	-210(r4),r14	;0xff2e(r4)
    503e:	1f 44 30 ff 	mov	-208(r4),r15	;0xff30(r4)
    5042:	1c f4 d2 ff 	and	-46(r4),r12	;0xffd2(r4)
    5046:	1d f4 d4 ff 	and	-44(r4),r13	;0xffd4(r4)
    504a:	1e f4 d6 ff 	and	-42(r4),r14	;0xffd6(r4)
    504e:	1f f4 d8 ff 	and	-40(r4),r15	;0xffd8(r4)
    5052:	08 ec       	xor	r12,	r8	
    5054:	09 ed       	xor	r13,	r9	
    5056:	0a ee       	xor	r14,	r10	
    5058:	0b ef       	xor	r15,	r11	
    505a:	94 44 3a ff 	mov	-198(r4),-38(r4)	;0xff3a(r4), 0xffda(r4)
    505e:	da ff 
    5060:	94 44 3c ff 	mov	-196(r4),-36(r4)	;0xff3c(r4), 0xffdc(r4)
    5064:	dc ff 
    5066:	94 44 3e ff 	mov	-194(r4),-34(r4)	;0xff3e(r4), 0xffde(r4)
    506a:	de ff 
    506c:	94 44 40 ff 	mov	-192(r4),-32(r4)	;0xff40(r4), 0xffe0(r4)
    5070:	e0 ff 
    5072:	1c 44 f2 fe 	mov	-270(r4),r12	;0xfef2(r4)
    5076:	1d 44 f4 fe 	mov	-268(r4),r13	;0xfef4(r4)
    507a:	1e 44 f6 fe 	mov	-266(r4),r14	;0xfef6(r4)
    507e:	1f 44 f8 fe 	mov	-264(r4),r15	;0xfef8(r4)
    5082:	1c f4 da ff 	and	-38(r4),r12	;0xffda(r4)
    5086:	1d f4 dc ff 	and	-36(r4),r13	;0xffdc(r4)
    508a:	1e f4 de ff 	and	-34(r4),r14	;0xffde(r4)
    508e:	1f f4 e0 ff 	and	-32(r4),r15	;0xffe0(r4)
    5092:	08 ec       	xor	r12,	r8	
    5094:	09 ed       	xor	r13,	r9	
    5096:	0a ee       	xor	r14,	r10	
    5098:	0b ef       	xor	r15,	r11	
    509a:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    509e:	0f 5f       	rla	r15		
    50a0:	1f 53       	inc	r15		
    50a2:	1e 44 08 fe 	mov	-504(r4),r14	;0xfe08(r4)
    50a6:	0f 5f       	rla	r15		
    50a8:	0f 5f       	rla	r15		
    50aa:	0f 5f       	rla	r15		
    50ac:	0f 5e       	add	r14,	r15	
    50ae:	2c 4f       	mov	@r15,	r12	
    50b0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    50b4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    50b8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    50bc:	0c e8       	xor	r8,	r12	
    50be:	0d e9       	xor	r9,	r13	
    50c0:	0e ea       	xor	r10,	r14	
    50c2:	0f eb       	xor	r11,	r15	
    50c4:	84 4c a2 ff 	mov	r12,	-94(r4)	;0xffa2(r4)
    50c8:	84 4d a4 ff 	mov	r13,	-92(r4)	;0xffa4(r4)
    50cc:	84 4e a6 ff 	mov	r14,	-90(r4)	;0xffa6(r4)
    50d0:	84 4f a8 ff 	mov	r15,	-88(r4)	;0xffa8(r4)
    L2[Y1_48-1] = fb_0 ^ L2[Y2_48-1] ^ (L2[Y3_48-1] & L2[Y4_48-1]) ^ (L2[Y5_48-1] & L2[Y6_48-1]) ^ k[2*i+1];
    50d4:	1c 44 52 ff 	mov	-174(r4),r12	;0xff52(r4)
    50d8:	1d 44 54 ff 	mov	-172(r4),r13	;0xff54(r4)
    50dc:	1e 44 56 ff 	mov	-170(r4),r14	;0xff56(r4)
    50e0:	1f 44 58 ff 	mov	-168(r4),r15	;0xff58(r4)
    50e4:	08 4c       	mov	r12,	r8	
    50e6:	09 4d       	mov	r13,	r9	
    50e8:	0a 4e       	mov	r14,	r10	
    50ea:	0b 4f       	mov	r15,	r11	
    50ec:	18 e4 12 fe 	xor	-494(r4),r8	;0xfe12(r4)
    50f0:	19 e4 14 fe 	xor	-492(r4),r9	;0xfe14(r4)
    50f4:	1a e4 16 fe 	xor	-490(r4),r10	;0xfe16(r4)
    50f8:	1b e4 18 fe 	xor	-488(r4),r11	;0xfe18(r4)
    50fc:	94 44 62 ff 	mov	-158(r4),-30(r4)	;0xff62(r4), 0xffe2(r4)
    5100:	e2 ff 
    5102:	94 44 64 ff 	mov	-156(r4),-28(r4)	;0xff64(r4), 0xffe4(r4)
    5106:	e4 ff 
    5108:	94 44 66 ff 	mov	-154(r4),-26(r4)	;0xff66(r4), 0xffe6(r4)
    510c:	e6 ff 
    510e:	94 44 68 ff 	mov	-152(r4),-24(r4)	;0xff68(r4), 0xffe8(r4)
    5112:	e8 ff 
    5114:	1c 44 22 ff 	mov	-222(r4),r12	;0xff22(r4)
    5118:	1d 44 24 ff 	mov	-220(r4),r13	;0xff24(r4)
    511c:	1e 44 26 ff 	mov	-218(r4),r14	;0xff26(r4)
    5120:	1f 44 28 ff 	mov	-216(r4),r15	;0xff28(r4)
    5124:	1c f4 e2 ff 	and	-30(r4),r12	;0xffe2(r4)
    5128:	1d f4 e4 ff 	and	-28(r4),r13	;0xffe4(r4)
    512c:	1e f4 e6 ff 	and	-26(r4),r14	;0xffe6(r4)
    5130:	1f f4 e8 ff 	and	-24(r4),r15	;0xffe8(r4)
    5134:	08 ec       	xor	r12,	r8	
    5136:	09 ed       	xor	r13,	r9	
    5138:	0a ee       	xor	r14,	r10	
    513a:	0b ef       	xor	r15,	r11	
    513c:	94 44 32 ff 	mov	-206(r4),-22(r4)	;0xff32(r4), 0xffea(r4)
    5140:	ea ff 
    5142:	94 44 34 ff 	mov	-204(r4),-20(r4)	;0xff34(r4), 0xffec(r4)
    5146:	ec ff 
    5148:	94 44 36 ff 	mov	-202(r4),-18(r4)	;0xff36(r4), 0xffee(r4)
    514c:	ee ff 
    514e:	94 44 38 ff 	mov	-200(r4),-16(r4)	;0xff38(r4), 0xfff0(r4)
    5152:	f0 ff 
    5154:	1c 44 ea fe 	mov	-278(r4),r12	;0xfeea(r4)
    5158:	1d 44 ec fe 	mov	-276(r4),r13	;0xfeec(r4)
    515c:	1e 44 ee fe 	mov	-274(r4),r14	;0xfeee(r4)
    5160:	1f 44 f0 fe 	mov	-272(r4),r15	;0xfef0(r4)
    5164:	1c f4 ea ff 	and	-22(r4),r12	;0xffea(r4)
    5168:	1d f4 ec ff 	and	-20(r4),r13	;0xffec(r4)
    516c:	1e f4 ee ff 	and	-18(r4),r14	;0xffee(r4)
    5170:	1f f4 f0 ff 	and	-16(r4),r15	;0xfff0(r4)
    5174:	08 ec       	xor	r12,	r8	
    5176:	09 ed       	xor	r13,	r9	
    5178:	0a ee       	xor	r14,	r10	
    517a:	0b ef       	xor	r15,	r11	
    517c:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    5180:	0f 5f       	rla	r15		
    5182:	1f 53       	inc	r15		
    5184:	1e 44 08 fe 	mov	-504(r4),r14	;0xfe08(r4)
    5188:	0f 5f       	rla	r15		
    518a:	0f 5f       	rla	r15		
    518c:	0f 5f       	rla	r15		
    518e:	0f 5e       	add	r14,	r15	
    5190:	2c 4f       	mov	@r15,	r12	
    5192:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    5196:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    519a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    519e:	0c e8       	xor	r8,	r12	
    51a0:	0d e9       	xor	r9,	r13	
    51a2:	0e ea       	xor	r10,	r14	
    51a4:	0f eb       	xor	r11,	r15	
    51a6:	84 4c 9a ff 	mov	r12,	-102(r4);0xff9a(r4)
    51aa:	84 4d 9c ff 	mov	r13,	-100(r4);0xff9c(r4)
    51ae:	84 4e 9e ff 	mov	r14,	-98(r4)	;0xff9e(r4)
    51b2:	84 4f a0 ff 	mov	r15,	-96(r4)	;0xffa0(r4)
  for(i=0;i<80;++i)
    k[i]=key[i];
  for(i=80;i<2*rounds;++i)
    k[i]=k[i-80] ^ k[i-61] ^ k[i-50] ^ k[i-13] ;

  for(i=rounds-1;i>=0;--i) {
    51b6:	b4 53 02 fe 	add	#-1,	-510(r4);r3 As==11, 0xfe02(r4)
    51ba:	84 93 02 fe 	tst	-510(r4)	;0xfe02(r4)
    51be:	02 38       	jl	$+6      	;abs 0x51c4
    51c0:	30 40 fe 4c 	br	#0x4cfe	
    L1[X1_48-1] = fa_0 ^ L1[X2_48-1] ^ (L1[X3_48-1] & L1[X4_48-1]) ^ (L1[X5_48-1] & IR[i])       ^ k[2*i];
    L2[Y1_48]   = fb_1 ^ L2[Y2_48]   ^ (L2[Y3_48] & L2[Y4_48])     ^ (L2[Y5_48] & L2[Y6_48])     ^ k[2*i+1];
    L2[Y1_48-1] = fb_0 ^ L2[Y2_48-1] ^ (L2[Y3_48-1] & L2[Y4_48-1]) ^ (L2[Y5_48-1] & L2[Y6_48-1]) ^ k[2*i+1];
  }
  
  for(i=0;i<29;++i) 
    51c4:	84 43 02 fe 	mov	#0,	-510(r4);r3 As==00, 0xfe02(r4)
    51c8:	24 3c       	jmp	$+74     	;abs 0x5212
    plain[i] = L2[i];
    51ca:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    51ce:	0f 5f       	rla	r15		
    51d0:	0f 5f       	rla	r15		
    51d2:	0f 5f       	rla	r15		
    51d4:	1b 44 ac ff 	mov	-84(r4),r11	;0xffac(r4)
    51d8:	0b 5f       	add	r15,	r11	
    51da:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    51de:	0f 5f       	rla	r15		
    51e0:	0f 5f       	rla	r15		
    51e2:	0f 5f       	rla	r15		
    51e4:	3e 40 02 fe 	mov	#-510,	r14	;#0xfe02
    51e8:	0e 54       	add	r4,	r14	
    51ea:	0f 5e       	add	r14,	r15	
    51ec:	3f 50 c0 00 	add	#192,	r15	;#0x00c0
    51f0:	2c 4f       	mov	@r15,	r12	
    51f2:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    51f6:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    51fa:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    51fe:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    5202:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    5206:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    520a:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    L1[X1_48-1] = fa_0 ^ L1[X2_48-1] ^ (L1[X3_48-1] & L1[X4_48-1]) ^ (L1[X5_48-1] & IR[i])       ^ k[2*i];
    L2[Y1_48]   = fb_1 ^ L2[Y2_48]   ^ (L2[Y3_48] & L2[Y4_48])     ^ (L2[Y5_48] & L2[Y6_48])     ^ k[2*i+1];
    L2[Y1_48-1] = fb_0 ^ L2[Y2_48-1] ^ (L2[Y3_48-1] & L2[Y4_48-1]) ^ (L2[Y5_48-1] & L2[Y6_48-1]) ^ k[2*i+1];
  }
  
  for(i=0;i<29;++i) 
    520e:	94 53 02 fe 	inc	-510(r4)	;0xfe02(r4)
    5212:	b4 90 1d 00 	cmp	#29,	-510(r4);#0x001d, 0xfe02(r4)
    5216:	02 fe 
    5218:	d8 3b       	jl	$-78     	;abs 0x51ca
    plain[i] = L2[i];
  for(i=0;i<19;++i) 
    521a:	84 43 02 fe 	mov	#0,	-510(r4);r3 As==00, 0xfe02(r4)
    521e:	26 3c       	jmp	$+78     	;abs 0x526c
    plain[i+29] = L1[i];
    5220:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    5224:	3f 50 1d 00 	add	#29,	r15	;#0x001d
    5228:	0f 5f       	rla	r15		
    522a:	0f 5f       	rla	r15		
    522c:	0f 5f       	rla	r15		
    522e:	1b 44 ac ff 	mov	-84(r4),r11	;0xffac(r4)
    5232:	0b 5f       	add	r15,	r11	
    5234:	1f 44 02 fe 	mov	-510(r4),r15	;0xfe02(r4)
    5238:	0f 5f       	rla	r15		
    523a:	0f 5f       	rla	r15		
    523c:	0f 5f       	rla	r15		
    523e:	3a 40 02 fe 	mov	#-510,	r10	;#0xfe02
    5242:	0a 54       	add	r4,	r10	
    5244:	0f 5a       	add	r10,	r15	
    5246:	3f 50 28 00 	add	#40,	r15	;#0x0028
    524a:	2c 4f       	mov	@r15,	r12	
    524c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    5250:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    5254:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    5258:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    525c:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    5260:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    5264:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    L2[Y1_48-1] = fb_0 ^ L2[Y2_48-1] ^ (L2[Y3_48-1] & L2[Y4_48-1]) ^ (L2[Y5_48-1] & L2[Y6_48-1]) ^ k[2*i+1];
  }
  
  for(i=0;i<29;++i) 
    plain[i] = L2[i];
  for(i=0;i<19;++i) 
    5268:	94 53 02 fe 	inc	-510(r4)	;0xfe02(r4)
    526c:	b4 90 13 00 	cmp	#19,	-510(r4);#0x0013, 0xfe02(r4)
    5270:	02 fe 
    5272:	d6 3b       	jl	$-82     	;abs 0x5220
    5274:	01 46       	mov	r6,	r1	
    plain[i+29] = L1[i];

}
    5276:	01 47       	mov	r7,	r1	
    5278:	31 50 f0 01 	add	#496,	r1	;#0x01f0
    527c:	34 41       	pop	r4		
    527e:	36 41       	pop	r6		
    5280:	37 41       	pop	r7		
    5282:	38 41       	pop	r8		
    5284:	39 41       	pop	r9		
    5286:	3a 41       	pop	r10		
    5288:	3b 41       	pop	r11		
    528a:	30 41       	ret			

0000528c <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    528c:	04 12       	push	r4		
    528e:	04 41       	mov	r1,	r4	
    5290:	24 53       	incd	r4		
    5292:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    5296:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    529a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    529e:	0d 3c       	jmp	$+28     	;abs 0x52ba
    {
      for (i = 0; i<d; i++) 
    52a0:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    52a4:	04 3c       	jmp	$+10     	;abs 0x52ae
	{
	  nop();
    52a6:	03 43       	nop			
	  nop();
    52a8:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    52aa:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    52ae:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    52b2:	f8 ff 
    52b4:	f8 2b       	jnc	$-14     	;abs 0x52a6
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    52b6:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    52ba:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    52be:	fa ff 
    52c0:	ef 2b       	jnc	$-32     	;abs 0x52a0
	{
	  nop();
	  nop();
	}
    }
}
    52c2:	31 50 06 00 	add	#6,	r1	;#0x0006
    52c6:	34 41       	pop	r4		
    52c8:	30 41       	ret			

000052ca <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    52ca:	04 12       	push	r4		
    52cc:	04 41       	mov	r1,	r4	
    52ce:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    52d0:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    52d4:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    52d6:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    52da:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    52de:	5f 42 1b 00 	mov.b	&0x001b,r15	
    52e2:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    52e6:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    52ea:	5f 42 05 00 	mov.b	&0x0005,r15	
    52ee:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    52f2:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    52f6:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    52fa:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    52fe:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    5300:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    5304:	79 00 
  U1RCTL = 0;
    5306:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    530a:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    530e:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    5312:	7c 00 
  U1MCTL = U1MCTL_INIT;
    5314:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    5318:	7b 00 

  delay(0x800);
    531a:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    531e:	b0 12 8c 52 	call	#0x528c	
  return 0;
    5322:	0f 43       	clr	r15		
}
    5324:	34 41       	pop	r4		
    5326:	30 41       	ret			

00005328 <uart1_putchar>:

int uart1_putchar(int c)
{
    5328:	04 12       	push	r4		
    532a:	04 41       	mov	r1,	r4	
    532c:	24 53       	incd	r4		
    532e:	21 83       	decd	r1		
    5330:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    5334:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    5338:	4f 4f       	mov.b	r15,	r15	
    533a:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    533e:	03 43       	nop			
    5340:	5f 42 79 00 	mov.b	&0x0079,r15	
    5344:	4f 4f       	mov.b	r15,	r15	
    5346:	1f f3       	and	#1,	r15	;r3 As==01
    5348:	0f 93       	tst	r15		
    534a:	fa 27       	jz	$-10     	;abs 0x5340
  return (unsigned char)c;
    534c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    5350:	4f 4f       	mov.b	r15,	r15	
    5352:	4f 4f       	mov.b	r15,	r15	
}
    5354:	21 53       	incd	r1		
    5356:	34 41       	pop	r4		
    5358:	30 41       	ret			

0000535a <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    535a:	04 12       	push	r4		
    535c:	04 41       	mov	r1,	r4	
    535e:	24 53       	incd	r4		
    5360:	21 83       	decd	r1		
    5362:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    5366:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    536a:	b0 12 28 53 	call	#0x5328	
}
    536e:	21 53       	incd	r1		
    5370:	34 41       	pop	r4		
    5372:	30 41       	ret			

00005374 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    5374:	04 12       	push	r4		
    5376:	04 41       	mov	r1,	r4	
    5378:	24 53       	incd	r4		
  ;
}
    537a:	34 41       	pop	r4		
    537c:	30 41       	ret			

0000537e <start_decrypt>:
void
start_decrypt()
{
    537e:	04 12       	push	r4		
    5380:	04 41       	mov	r1,	r4	
    5382:	24 53       	incd	r4		
  ;
}
    5384:	34 41       	pop	r4		
    5386:	30 41       	ret			

00005388 <end_expe>:


void
end_expe()
{
    5388:	04 12       	push	r4		
    538a:	04 41       	mov	r1,	r4	
    538c:	24 53       	incd	r4		
  ;
}
    538e:	34 41       	pop	r4		
    5390:	30 41       	ret			

00005392 <_unexpected_>:
    5392:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	00 41 00 41 00 41 00 41 00 41 00 41 00 41 00 41     .A.A.A.A.A.A.A.A
    fff0:	00 41 00 41 00 41 00 41 00 41 00 41 00 41 00 40     .A.A.A.A.A.A.A.@
