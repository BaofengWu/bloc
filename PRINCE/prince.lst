
prince.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00004c44 l    d  .rodata	00000000 .rodata
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 prince.c
00004c44 l     O .rodata	00000010 sBox
00004c54 l     O .rodata	00000010 sBoxInv
00004c64 l     O .rodata	00000060 RC
00004cc4 l     O .rodata	00000200 MPrime
00004ec4 l     O .rodata	00000200 M
000050c4 l     O .rodata	00000200 MInv
000040c2 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004c0a g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040c2  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000043ce g     F .text	000000da MatrixMul
000040c2  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
000047ea g     F .text	00000352 Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
000052c4 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004b7a g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040bc  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040c2  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004c38 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040c2  w      .text	00000000 __isr_5
000052c4 g       *ABS*	00000000 __data_load_start
000040c2 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040c2  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040c2  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
000040c6 g     F .text	0000017a Substitution
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040c2  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040c2  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004c42  w      .text	00000000 _unexpected_
000040c2  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040c2  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004bd8 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040c2 g       .text	00000000 __ctors_start
000040c2  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .rodata	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	0000007e main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040c2  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004b3c g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040c2  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040c2 g       .text	00000000 __dtors_start
000040c2  w      .text	00000000 __isr_6
000040c2 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040c2  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .rodata	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004c24 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040bc  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004240 g     F .text	0000018e Parity
00004c2e g     F .text	0000000a start_decrypt
00001100 g       .rodata	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
000044a8 g     F .text	00000342 Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f c4 52 	mov	21188(r15),4352(r15);0x52c4(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:




int main()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    u64 k[2] = {0x0,0xfedcba9876543210};
    4046:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    404a:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    404e:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
    4052:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    4056:	b4 40 10 32 	mov	#12816,	-18(r4)	;#0x3210, 0xffee(r4)
    405a:	ee ff 
    405c:	b4 40 54 76 	mov	#30292,	-16(r4)	;#0x7654, 0xfff0(r4)
    4060:	f0 ff 
    4062:	b4 40 98 ba 	mov	#-17768,-14(r4)	;#0xba98, 0xfff2(r4)
    4066:	f2 ff 
    4068:	b4 40 dc fe 	mov	#-292,	-12(r4)	;#0xfedc, 0xfff4(r4)
    406c:	f4 ff 
    u64 t = 0x0123456789abcdef;
    406e:	b4 40 ef cd 	mov	#-12817,-10(r4)	;#0xcdef, 0xfff6(r4)
    4072:	f6 ff 
    4074:	b4 40 ab 89 	mov	#-30293,-8(r4)	;#0x89ab, 0xfff8(r4)
    4078:	f8 ff 
    407a:	b4 40 67 45 	mov	#17767,	-6(r4)	;#0x4567, 0xfffa(r4)
    407e:	fa ff 
    4080:	b4 40 23 01 	mov	#291,	-4(r4)	;#0x0123, 0xfffc(r4)
    4084:	fc ff 

	START_ENCRYPT();
    4086:	b0 12 24 4c 	call	#0x4c24	
    Encrypt(k,&t);
    408a:	0f 44       	mov	r4,	r15	
    408c:	3f 50 f6 ff 	add	#-10,	r15	;#0xfff6
    4090:	0e 4f       	mov	r15,	r14	
    4092:	0f 44       	mov	r4,	r15	
    4094:	3f 50 e6 ff 	add	#-26,	r15	;#0xffe6
    4098:	b0 12 a8 44 	call	#0x44a8	
    //printf("%llx\n\n",t);
	START_DECRYPT();
    409c:	b0 12 2e 4c 	call	#0x4c2e	
    Decrypt(k,&t);
    40a0:	0f 44       	mov	r4,	r15	
    40a2:	3f 50 f6 ff 	add	#-10,	r15	;#0xfff6
    40a6:	0e 4f       	mov	r15,	r14	
    40a8:	0f 44       	mov	r4,	r15	
    40aa:	3f 50 e6 ff 	add	#-26,	r15	;#0xffe6
    40ae:	b0 12 ea 47 	call	#0x47ea	
    //printf("%llx\n\n",t);
	END_EXPE();
    40b2:	b0 12 38 4c 	call	#0x4c38	
    return 0;
    40b6:	0f 43       	clr	r15		
}
    40b8:	31 50 18 00 	add	#24,	r1	;#0x0018

000040bc <__stop_progExec__>:
    40bc:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40c0:	fd 3f       	jmp	$-4      	;abs 0x40bc

000040c2 <__ctors_end>:
    40c2:	30 40 42 4c 	br	#0x4c42	

000040c6 <Substitution>:
	0x0000002002002000,
	0x0001001001000000
};

void Substitution (u64 * block, u8 sbox[])
{
    40c6:	0b 12       	push	r11		
    40c8:	0a 12       	push	r10		
    40ca:	09 12       	push	r9		
    40cc:	08 12       	push	r8		
    40ce:	07 12       	push	r7		
    40d0:	04 12       	push	r4		
    40d2:	04 41       	mov	r1,	r4	
    40d4:	34 50 0c 00 	add	#12,	r4	;#0x000c
    40d8:	31 50 ea ff 	add	#-22,	r1	;#0xffea
    40dc:	84 4f e8 ff 	mov	r15,	-24(r4)	;0xffe8(r4)
    40e0:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
    u8 i;
    u64 mask = 0xf;
    40e4:	b4 40 0f 00 	mov	#15,	-32(r4)	;#0x000f, 0xffe0(r4)
    40e8:	e0 ff 
    40ea:	84 43 e2 ff 	mov	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    40ee:	84 43 e4 ff 	mov	#0,	-28(r4)	;r3 As==00, 0xffe4(r4)
    40f2:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)

    for (i=0 ; i<16 ; i++)
    40f6:	c4 43 de ff 	mov.b	#0,	-34(r4)	;r3 As==00, 0xffde(r4)
    40fa:	95 3c       	jmp	$+300    	;abs 0x4226
    {
        *block = (*block & (~mask)) | ((u64)(sbox[(*block & mask) >> (i<<2)]) << (i<<2));
    40fc:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4100:	28 4f       	mov	@r15,	r8	
    4102:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    4106:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    410a:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    410e:	1c 44 e0 ff 	mov	-32(r4),r12	;0xffe0(r4)
    4112:	1d 44 e2 ff 	mov	-30(r4),r13	;0xffe2(r4)
    4116:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    411a:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    411e:	3c e3       	inv	r12		
    4120:	3d e3       	inv	r13		
    4122:	3e e3       	inv	r14		
    4124:	3f e3       	inv	r15		
    4126:	07 48       	mov	r8,	r7	
    4128:	08 49       	mov	r9,	r8	
    412a:	09 4a       	mov	r10,	r9	
    412c:	0a 4b       	mov	r11,	r10	
    412e:	07 fc       	and	r12,	r7	
    4130:	08 fd       	and	r13,	r8	
    4132:	09 fe       	and	r14,	r9	
    4134:	0a ff       	and	r15,	r10	
    4136:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    413a:	2c 4f       	mov	@r15,	r12	
    413c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4140:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4144:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4148:	1c f4 e0 ff 	and	-32(r4),r12	;0xffe0(r4)
    414c:	1d f4 e2 ff 	and	-30(r4),r13	;0xffe2(r4)
    4150:	1e f4 e4 ff 	and	-28(r4),r14	;0xffe4(r4)
    4154:	1f f4 e6 ff 	and	-26(r4),r15	;0xffe6(r4)
    4158:	5b 44 de ff 	mov.b	-34(r4),r11	;0xffde(r4)
    415c:	0b 5b       	rla	r11		
    415e:	0b 5b       	rla	r11		
    4160:	4b 4b       	mov.b	r11,	r11	
    4162:	7b f0 3f 00 	and.b	#63,	r11	;#0x003f
    4166:	4b 93       	tst.b	r11		
    4168:	08 24       	jz	$+18     	;abs 0x417a
    416a:	12 c3       	clrc			
    416c:	0f 10       	rrc	r15		
    416e:	0e 10       	rrc	r14		
    4170:	0d 10       	rrc	r13		
    4172:	0c 10       	rrc	r12		
    4174:	7b 53       	add.b	#-1,	r11	;r3 As==11
    4176:	4b 93       	tst.b	r11		
    4178:	f8 23       	jnz	$-14     	;abs 0x416a
    417a:	0f 4c       	mov	r12,	r15	
    417c:	1f 54 ea ff 	add	-22(r4),r15	;0xffea(r4)
    4180:	6f 4f       	mov.b	@r15,	r15	
    4182:	4f 4f       	mov.b	r15,	r15	
    4184:	84 4f ec ff 	mov	r15,	-20(r4)	;0xffec(r4)
    4188:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    418c:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    4190:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    4194:	5f 44 de ff 	mov.b	-34(r4),r15	;0xffde(r4)
    4198:	0b 4f       	mov	r15,	r11	
    419a:	0b 5b       	rla	r11		
    419c:	0b 5b       	rla	r11		
    419e:	1c 44 ec ff 	mov	-20(r4),r12	;0xffec(r4)
    41a2:	1d 44 ee ff 	mov	-18(r4),r13	;0xffee(r4)
    41a6:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    41aa:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    41ae:	4b 4b       	mov.b	r11,	r11	
    41b0:	7b f0 3f 00 	and.b	#63,	r11	;#0x003f
    41b4:	4b 93       	tst.b	r11		
    41b6:	07 24       	jz	$+16     	;abs 0x41c6
    41b8:	0c 5c       	rla	r12		
    41ba:	0d 6d       	rlc	r13		
    41bc:	0e 6e       	rlc	r14		
    41be:	0f 6f       	rlc	r15		
    41c0:	7b 53       	add.b	#-1,	r11	;r3 As==11
    41c2:	4b 93       	tst.b	r11		
    41c4:	f9 23       	jnz	$-12     	;abs 0x41b8
    41c6:	0c d7       	bis	r7,	r12	
    41c8:	0d d8       	bis	r8,	r13	
    41ca:	0e d9       	bis	r9,	r14	
    41cc:	0f da       	bis	r10,	r15	
    41ce:	1b 44 e8 ff 	mov	-24(r4),r11	;0xffe8(r4)
    41d2:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    41d6:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    41da:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    41de:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        mask = mask << 4;
    41e2:	1c 44 e0 ff 	mov	-32(r4),r12	;0xffe0(r4)
    41e6:	1d 44 e2 ff 	mov	-30(r4),r13	;0xffe2(r4)
    41ea:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    41ee:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    41f2:	0c 5c       	rla	r12		
    41f4:	0d 6d       	rlc	r13		
    41f6:	0e 6e       	rlc	r14		
    41f8:	0f 6f       	rlc	r15		
    41fa:	0c 5c       	rla	r12		
    41fc:	0d 6d       	rlc	r13		
    41fe:	0e 6e       	rlc	r14		
    4200:	0f 6f       	rlc	r15		
    4202:	0c 5c       	rla	r12		
    4204:	0d 6d       	rlc	r13		
    4206:	0e 6e       	rlc	r14		
    4208:	0f 6f       	rlc	r15		
    420a:	0c 5c       	rla	r12		
    420c:	0d 6d       	rlc	r13		
    420e:	0e 6e       	rlc	r14		
    4210:	0f 6f       	rlc	r15		
    4212:	84 4c e0 ff 	mov	r12,	-32(r4)	;0xffe0(r4)
    4216:	84 4d e2 ff 	mov	r13,	-30(r4)	;0xffe2(r4)
    421a:	84 4e e4 ff 	mov	r14,	-28(r4)	;0xffe4(r4)
    421e:	84 4f e6 ff 	mov	r15,	-26(r4)	;0xffe6(r4)
void Substitution (u64 * block, u8 sbox[])
{
    u8 i;
    u64 mask = 0xf;

    for (i=0 ; i<16 ; i++)
    4222:	d4 53 de ff 	inc.b	-34(r4)	;0xffde(r4)
    4226:	f4 90 10 00 	cmp.b	#16,	-34(r4)	;#0x0010, 0xffde(r4)
    422a:	de ff 
    422c:	67 2b       	jnc	$-304    	;abs 0x40fc
    {
        *block = (*block & (~mask)) | ((u64)(sbox[(*block & mask) >> (i<<2)]) << (i<<2));
        mask = mask << 4;
    }
}
    422e:	31 50 16 00 	add	#22,	r1	;#0x0016
    4232:	34 41       	pop	r4		
    4234:	37 41       	pop	r7		
    4236:	38 41       	pop	r8		
    4238:	39 41       	pop	r9		
    423a:	3a 41       	pop	r10		
    423c:	3b 41       	pop	r11		
    423e:	30 41       	ret			

00004240 <Parity>:

u64 Parity (u64 block)
{
    4240:	0b 12       	push	r11		
    4242:	0a 12       	push	r10		
    4244:	09 12       	push	r9		
    4246:	08 12       	push	r8		
    4248:	07 12       	push	r7		
    424a:	06 12       	push	r6		
    424c:	04 12       	push	r4		
    424e:	04 41       	mov	r1,	r4	
    4250:	34 50 0e 00 	add	#14,	r4	;#0x000e
    4254:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    4258:	84 4c e2 ff 	mov	r12,	-30(r4)	;0xffe2(r4)
    425c:	84 4d e4 ff 	mov	r13,	-28(r4)	;0xffe4(r4)
    4260:	84 4e e6 ff 	mov	r14,	-26(r4)	;0xffe6(r4)
    4264:	84 4f e8 ff 	mov	r15,	-24(r4)	;0xffe8(r4)
    block = (block >> 32) ^ block;
    4268:	16 44 e6 ff 	mov	-26(r4),r6	;0xffe6(r4)
    426c:	17 44 e8 ff 	mov	-24(r4),r7	;0xffe8(r4)
    4270:	0c 46       	mov	r6,	r12	
    4272:	0d 47       	mov	r7,	r13	
    4274:	0e 43       	clr	r14		
    4276:	0f 43       	clr	r15		
    4278:	84 4c ea ff 	mov	r12,	-22(r4)	;0xffea(r4)
    427c:	84 4d ec ff 	mov	r13,	-20(r4)	;0xffec(r4)
    4280:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    4284:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    4288:	94 e4 ea ff 	xor	-22(r4),-30(r4)	;0xffea(r4), 0xffe2(r4)
    428c:	e2 ff 
    428e:	94 e4 ec ff 	xor	-20(r4),-28(r4)	;0xffec(r4), 0xffe4(r4)
    4292:	e4 ff 
    4294:	94 e4 ee ff 	xor	-18(r4),-26(r4)	;0xffee(r4), 0xffe6(r4)
    4298:	e6 ff 
    429a:	94 e4 f0 ff 	xor	-16(r4),-24(r4)	;0xfff0(r4), 0xffe8(r4)
    429e:	e8 ff 
    block = (block >> 16) ^ block;
    42a0:	1c 44 e4 ff 	mov	-28(r4),r12	;0xffe4(r4)
    42a4:	1d 44 e6 ff 	mov	-26(r4),r13	;0xffe6(r4)
    42a8:	1e 44 e8 ff 	mov	-24(r4),r14	;0xffe8(r4)
    42ac:	0f 43       	clr	r15		
    42ae:	08 4c       	mov	r12,	r8	
    42b0:	09 4d       	mov	r13,	r9	
    42b2:	0a 4e       	mov	r14,	r10	
    42b4:	0b 4f       	mov	r15,	r11	
    42b6:	84 e8 e2 ff 	xor	r8,	-30(r4)	;0xffe2(r4)
    42ba:	84 e9 e4 ff 	xor	r9,	-28(r4)	;0xffe4(r4)
    42be:	84 ea e6 ff 	xor	r10,	-26(r4)	;0xffe6(r4)
    42c2:	84 eb e8 ff 	xor	r11,	-24(r4)	;0xffe8(r4)
    block = (block >> 8) ^ block;
    42c6:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffe2(r4)
    42ca:	1d 44 e4 ff 	mov	-28(r4),r13	;0xffe4(r4)
    42ce:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    42d2:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    42d6:	8c 10       	swpb	r12		
    42d8:	8d 10       	swpb	r13		
    42da:	4c ed       	xor.b	r13,	r12	
    42dc:	0c ed       	xor	r13,	r12	
    42de:	8e 10       	swpb	r14		
    42e0:	4d ee       	xor.b	r14,	r13	
    42e2:	0d ee       	xor	r14,	r13	
    42e4:	8f 10       	swpb	r15		
    42e6:	4e ef       	xor.b	r15,	r14	
    42e8:	0e ef       	xor	r15,	r14	
    42ea:	4f 4f       	mov.b	r15,	r15	
    42ec:	84 ec e2 ff 	xor	r12,	-30(r4)	;0xffe2(r4)
    42f0:	84 ed e4 ff 	xor	r13,	-28(r4)	;0xffe4(r4)
    42f4:	84 ee e6 ff 	xor	r14,	-26(r4)	;0xffe6(r4)
    42f8:	84 ef e8 ff 	xor	r15,	-24(r4)	;0xffe8(r4)
    block = (block >> 4) ^ block;
    42fc:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffe2(r4)
    4300:	1d 44 e4 ff 	mov	-28(r4),r13	;0xffe4(r4)
    4304:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    4308:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    430c:	12 c3       	clrc			
    430e:	0f 10       	rrc	r15		
    4310:	0e 10       	rrc	r14		
    4312:	0d 10       	rrc	r13		
    4314:	0c 10       	rrc	r12		
    4316:	12 c3       	clrc			
    4318:	0f 10       	rrc	r15		
    431a:	0e 10       	rrc	r14		
    431c:	0d 10       	rrc	r13		
    431e:	0c 10       	rrc	r12		
    4320:	12 c3       	clrc			
    4322:	0f 10       	rrc	r15		
    4324:	0e 10       	rrc	r14		
    4326:	0d 10       	rrc	r13		
    4328:	0c 10       	rrc	r12		
    432a:	12 c3       	clrc			
    432c:	0f 10       	rrc	r15		
    432e:	0e 10       	rrc	r14		
    4330:	0d 10       	rrc	r13		
    4332:	0c 10       	rrc	r12		
    4334:	84 ec e2 ff 	xor	r12,	-30(r4)	;0xffe2(r4)
    4338:	84 ed e4 ff 	xor	r13,	-28(r4)	;0xffe4(r4)
    433c:	84 ee e6 ff 	xor	r14,	-26(r4)	;0xffe6(r4)
    4340:	84 ef e8 ff 	xor	r15,	-24(r4)	;0xffe8(r4)
    block = (block >> 2) ^ block;
    4344:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffe2(r4)
    4348:	1d 44 e4 ff 	mov	-28(r4),r13	;0xffe4(r4)
    434c:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    4350:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4354:	12 c3       	clrc			
    4356:	0f 10       	rrc	r15		
    4358:	0e 10       	rrc	r14		
    435a:	0d 10       	rrc	r13		
    435c:	0c 10       	rrc	r12		
    435e:	12 c3       	clrc			
    4360:	0f 10       	rrc	r15		
    4362:	0e 10       	rrc	r14		
    4364:	0d 10       	rrc	r13		
    4366:	0c 10       	rrc	r12		
    4368:	84 ec e2 ff 	xor	r12,	-30(r4)	;0xffe2(r4)
    436c:	84 ed e4 ff 	xor	r13,	-28(r4)	;0xffe4(r4)
    4370:	84 ee e6 ff 	xor	r14,	-26(r4)	;0xffe6(r4)
    4374:	84 ef e8 ff 	xor	r15,	-24(r4)	;0xffe8(r4)
    block = (block >> 1) ^ block;
    4378:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffe2(r4)
    437c:	1d 44 e4 ff 	mov	-28(r4),r13	;0xffe4(r4)
    4380:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    4384:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4388:	12 c3       	clrc			
    438a:	0f 10       	rrc	r15		
    438c:	0e 10       	rrc	r14		
    438e:	0d 10       	rrc	r13		
    4390:	0c 10       	rrc	r12		
    4392:	84 ec e2 ff 	xor	r12,	-30(r4)	;0xffe2(r4)
    4396:	84 ed e4 ff 	xor	r13,	-28(r4)	;0xffe4(r4)
    439a:	84 ee e6 ff 	xor	r14,	-26(r4)	;0xffe6(r4)
    439e:	84 ef e8 ff 	xor	r15,	-24(r4)	;0xffe8(r4)
    return block & 0x1;
    43a2:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffe2(r4)
    43a6:	1d 44 e4 ff 	mov	-28(r4),r13	;0xffe4(r4)
    43aa:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    43ae:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    43b2:	1c f3       	and	#1,	r12	;r3 As==01
    43b4:	0d f3       	and	#0,	r13	;r3 As==00
    43b6:	0e f3       	and	#0,	r14	;r3 As==00
    43b8:	0f f3       	and	#0,	r15	;r3 As==00
}
    43ba:	31 50 10 00 	add	#16,	r1	;#0x0010
    43be:	34 41       	pop	r4		
    43c0:	36 41       	pop	r6		
    43c2:	37 41       	pop	r7		
    43c4:	38 41       	pop	r8		
    43c6:	39 41       	pop	r9		
    43c8:	3a 41       	pop	r10		
    43ca:	3b 41       	pop	r11		
    43cc:	30 41       	ret			

000043ce <MatrixMul>:

void MatrixMul (u64 * block, u64 matrix[])
{
    43ce:	0b 12       	push	r11		
    43d0:	0a 12       	push	r10		
    43d2:	09 12       	push	r9		
    43d4:	08 12       	push	r8		
    43d6:	04 12       	push	r4		
    43d8:	04 41       	mov	r1,	r4	
    43da:	34 50 0a 00 	add	#10,	r4	;#0x000a
    43de:	31 50 f2 ff 	add	#-14,	r1	;#0xfff2
    43e2:	84 4f f2 ff 	mov	r15,	-14(r4)	;0xfff2(r4)
    43e6:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    u64 tmp = 0;
    43ea:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    43ee:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
    43f2:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    43f6:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
	u8 r;
	for (r = 0; r < 64; r++)
    43fa:	c4 43 f0 ff 	mov.b	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    43fe:	3a 3c       	jmp	$+118    	;abs 0x4474
	{
		tmp |= Parity(*block & matrix[r]) << (63-r);
    4400:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4404:	28 4f       	mov	@r15,	r8	
    4406:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    440a:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    440e:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    4412:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    4416:	0f 5f       	rla	r15		
    4418:	0f 5f       	rla	r15		
    441a:	0f 5f       	rla	r15		
    441c:	1f 54 f4 ff 	add	-12(r4),r15	;0xfff4(r4)
    4420:	2c 4f       	mov	@r15,	r12	
    4422:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4426:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    442a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    442e:	0c f8       	and	r8,	r12	
    4430:	0d f9       	and	r9,	r13	
    4432:	0e fa       	and	r10,	r14	
    4434:	0f fb       	and	r11,	r15	
    4436:	b0 12 40 42 	call	#0x4240	
    443a:	5b 44 f0 ff 	mov.b	-16(r4),r11	;0xfff0(r4)
    443e:	3a 40 3f 00 	mov	#63,	r10	;#0x003f
    4442:	09 4a       	mov	r10,	r9	
    4444:	09 8b       	sub	r11,	r9	
    4446:	0b 49       	mov	r9,	r11	
    4448:	4b 4b       	mov.b	r11,	r11	
    444a:	7b f0 3f 00 	and.b	#63,	r11	;#0x003f
    444e:	4b 93       	tst.b	r11		
    4450:	07 24       	jz	$+16     	;abs 0x4460
    4452:	0c 5c       	rla	r12		
    4454:	0d 6d       	rlc	r13		
    4456:	0e 6e       	rlc	r14		
    4458:	0f 6f       	rlc	r15		
    445a:	7b 53       	add.b	#-1,	r11	;r3 As==11
    445c:	4b 93       	tst.b	r11		
    445e:	f9 23       	jnz	$-12     	;abs 0x4452
    4460:	84 dc e8 ff 	bis	r12,	-24(r4)	;0xffe8(r4)
    4464:	84 dd ea ff 	bis	r13,	-22(r4)	;0xffea(r4)
    4468:	84 de ec ff 	bis	r14,	-20(r4)	;0xffec(r4)
    446c:	84 df ee ff 	bis	r15,	-18(r4)	;0xffee(r4)

void MatrixMul (u64 * block, u64 matrix[])
{
    u64 tmp = 0;
	u8 r;
	for (r = 0; r < 64; r++)
    4470:	d4 53 f0 ff 	inc.b	-16(r4)	;0xfff0(r4)
    4474:	f4 90 40 00 	cmp.b	#64,	-16(r4)	;#0x0040, 0xfff0(r4)
    4478:	f0 ff 
    447a:	c2 2b       	jnc	$-122    	;abs 0x4400
	{
		tmp |= Parity(*block & matrix[r]) << (63-r);
	}
	*block = tmp;
    447c:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4480:	9f 44 e8 ff 	mov	-24(r4),0(r15)	;0xffe8(r4), 0x0000(r15)
    4484:	00 00 
    4486:	9f 44 ea ff 	mov	-22(r4),2(r15)	;0xffea(r4), 0x0002(r15)
    448a:	02 00 
    448c:	9f 44 ec ff 	mov	-20(r4),4(r15)	;0xffec(r4), 0x0004(r15)
    4490:	04 00 
    4492:	9f 44 ee ff 	mov	-18(r4),6(r15)	;0xffee(r4), 0x0006(r15)
    4496:	06 00 
}
    4498:	31 50 0e 00 	add	#14,	r1	;#0x000e
    449c:	34 41       	pop	r4		
    449e:	38 41       	pop	r8		
    44a0:	39 41       	pop	r9		
    44a2:	3a 41       	pop	r10		
    44a4:	3b 41       	pop	r11		
    44a6:	30 41       	ret			

000044a8 <Encrypt>:


void Encrypt(u64 k[], u64 * block)
{
    44a8:	0b 12       	push	r11		
    44aa:	0a 12       	push	r10		
    44ac:	09 12       	push	r9		
    44ae:	08 12       	push	r8		
    44b0:	07 12       	push	r7		
    44b2:	04 12       	push	r4		
    44b4:	04 41       	mov	r1,	r4	
    44b6:	34 50 0c 00 	add	#12,	r4	;#0x000c
    44ba:	31 50 da ff 	add	#-38,	r1	;#0xffda
    44be:	84 4f d8 ff 	mov	r15,	-40(r4)	;0xffd8(r4)
    44c2:	84 4e da ff 	mov	r14,	-38(r4)	;0xffda(r4)
    u8 i;
    u64 k1 = k[1];
    44c6:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    44ca:	94 4f 08 00 	mov	8(r15),	-48(r4)	;0x0008(r15), 0xffd0(r4)
    44ce:	d0 ff 
    44d0:	94 4f 0a 00 	mov	10(r15),-46(r4)	;0x000a(r15), 0xffd2(r4)
    44d4:	d2 ff 
    44d6:	94 4f 0c 00 	mov	12(r15),-44(r4)	;0x000c(r15), 0xffd4(r4)
    44da:	d4 ff 
    44dc:	94 4f 0e 00 	mov	14(r15),-42(r4)	;0x000e(r15), 0xffd6(r4)
    44e0:	d6 ff 

    *block = *block ^ k[0];
    44e2:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    44e6:	28 4f       	mov	@r15,	r8	
    44e8:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    44ec:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    44f0:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    44f4:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    44f8:	2c 4f       	mov	@r15,	r12	
    44fa:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    44fe:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4502:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4506:	0c e8       	xor	r8,	r12	
    4508:	0d e9       	xor	r9,	r13	
    450a:	0e ea       	xor	r10,	r14	
    450c:	0f eb       	xor	r11,	r15	
    450e:	1b 44 da ff 	mov	-38(r4),r11	;0xffda(r4)
    4512:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4516:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    451a:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    451e:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)


    *block = *block ^ k1 ^ RC[0];
    4522:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    4526:	2c 4f       	mov	@r15,	r12	
    4528:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    452c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4530:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4534:	08 4c       	mov	r12,	r8	
    4536:	09 4d       	mov	r13,	r9	
    4538:	0a 4e       	mov	r14,	r10	
    453a:	0b 4f       	mov	r15,	r11	
    453c:	18 e4 d0 ff 	xor	-48(r4),r8	;0xffd0(r4)
    4540:	19 e4 d2 ff 	xor	-46(r4),r9	;0xffd2(r4)
    4544:	1a e4 d4 ff 	xor	-44(r4),r10	;0xffd4(r4)
    4548:	1b e4 d6 ff 	xor	-42(r4),r11	;0xffd6(r4)
    454c:	1c 42 64 4c 	mov	&0x4c64,r12	
    4550:	1d 42 66 4c 	mov	&0x4c66,r13	
    4554:	1e 42 68 4c 	mov	&0x4c68,r14	
    4558:	1f 42 6a 4c 	mov	&0x4c6a,r15	
    455c:	0c e8       	xor	r8,	r12	
    455e:	0d e9       	xor	r9,	r13	
    4560:	0e ea       	xor	r10,	r14	
    4562:	0f eb       	xor	r11,	r15	
    4564:	1b 44 da ff 	mov	-38(r4),r11	;0xffda(r4)
    4568:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    456c:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4570:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4574:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    for (i=1;i<6;i++)
    4578:	d4 43 ce ff 	mov.b	#1,	-50(r4)	;r3 As==01, 0xffce(r4)
    457c:	3f 3c       	jmp	$+128    	;abs 0x45fc
    {
        Substitution(block,sBox);
    457e:	3e 40 44 4c 	mov	#19524,	r14	;#0x4c44
    4582:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    4586:	b0 12 c6 40 	call	#0x40c6	
        MatrixMul(block,M);
    458a:	3e 40 c4 4e 	mov	#20164,	r14	;#0x4ec4
    458e:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    4592:	b0 12 ce 43 	call	#0x43ce	
        *block = *block ^ k1 ^ RC[i];
    4596:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    459a:	2c 4f       	mov	@r15,	r12	
    459c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    45a0:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    45a4:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    45a8:	08 4c       	mov	r12,	r8	
    45aa:	09 4d       	mov	r13,	r9	
    45ac:	0a 4e       	mov	r14,	r10	
    45ae:	0b 4f       	mov	r15,	r11	
    45b0:	18 e4 d0 ff 	xor	-48(r4),r8	;0xffd0(r4)
    45b4:	19 e4 d2 ff 	xor	-46(r4),r9	;0xffd2(r4)
    45b8:	1a e4 d4 ff 	xor	-44(r4),r10	;0xffd4(r4)
    45bc:	1b e4 d6 ff 	xor	-42(r4),r11	;0xffd6(r4)
    45c0:	5f 44 ce ff 	mov.b	-50(r4),r15	;0xffce(r4)
    45c4:	0f 5f       	rla	r15		
    45c6:	0f 5f       	rla	r15		
    45c8:	0f 5f       	rla	r15		
    45ca:	3f 50 64 4c 	add	#19556,	r15	;#0x4c64
    45ce:	2c 4f       	mov	@r15,	r12	
    45d0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    45d4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    45d8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    45dc:	0c e8       	xor	r8,	r12	
    45de:	0d e9       	xor	r9,	r13	
    45e0:	0e ea       	xor	r10,	r14	
    45e2:	0f eb       	xor	r11,	r15	
    45e4:	1b 44 da ff 	mov	-38(r4),r11	;0xffda(r4)
    45e8:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    45ec:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    45f0:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    45f4:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    *block = *block ^ k[0];


    *block = *block ^ k1 ^ RC[0];
    for (i=1;i<6;i++)
    45f8:	d4 53 ce ff 	inc.b	-50(r4)	;0xffce(r4)
    45fc:	f4 90 06 00 	cmp.b	#6,	-50(r4)	;#0x0006, 0xffce(r4)
    4600:	ce ff 
    4602:	bd 2b       	jnc	$-132    	;abs 0x457e
    {
        Substitution(block,sBox);
        MatrixMul(block,M);
        *block = *block ^ k1 ^ RC[i];
    }
    Substitution(block,sBox);
    4604:	3e 40 44 4c 	mov	#19524,	r14	;#0x4c44
    4608:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    460c:	b0 12 c6 40 	call	#0x40c6	
    MatrixMul(block,MPrime);
    4610:	3e 40 c4 4c 	mov	#19652,	r14	;#0x4cc4
    4614:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    4618:	b0 12 ce 43 	call	#0x43ce	
    Substitution(block,sBoxInv);
    461c:	3e 40 54 4c 	mov	#19540,	r14	;#0x4c54
    4620:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    4624:	b0 12 c6 40 	call	#0x40c6	
    for (i=6;i<11;i++)
    4628:	f4 40 06 00 	mov.b	#6,	-50(r4)	;#0x0006, 0xffce(r4)
    462c:	ce ff 
    462e:	3f 3c       	jmp	$+128    	;abs 0x46ae
    {
        *block = *block ^ k1 ^ RC[i];
    4630:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    4634:	2c 4f       	mov	@r15,	r12	
    4636:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    463a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    463e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4642:	08 4c       	mov	r12,	r8	
    4644:	09 4d       	mov	r13,	r9	
    4646:	0a 4e       	mov	r14,	r10	
    4648:	0b 4f       	mov	r15,	r11	
    464a:	18 e4 d0 ff 	xor	-48(r4),r8	;0xffd0(r4)
    464e:	19 e4 d2 ff 	xor	-46(r4),r9	;0xffd2(r4)
    4652:	1a e4 d4 ff 	xor	-44(r4),r10	;0xffd4(r4)
    4656:	1b e4 d6 ff 	xor	-42(r4),r11	;0xffd6(r4)
    465a:	5f 44 ce ff 	mov.b	-50(r4),r15	;0xffce(r4)
    465e:	0f 5f       	rla	r15		
    4660:	0f 5f       	rla	r15		
    4662:	0f 5f       	rla	r15		
    4664:	3f 50 64 4c 	add	#19556,	r15	;#0x4c64
    4668:	2c 4f       	mov	@r15,	r12	
    466a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    466e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4672:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4676:	0c e8       	xor	r8,	r12	
    4678:	0d e9       	xor	r9,	r13	
    467a:	0e ea       	xor	r10,	r14	
    467c:	0f eb       	xor	r11,	r15	
    467e:	1b 44 da ff 	mov	-38(r4),r11	;0xffda(r4)
    4682:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4686:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    468a:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    468e:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        MatrixMul(block,MInv);
    4692:	3e 40 c4 50 	mov	#20676,	r14	;#0x50c4
    4696:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    469a:	b0 12 ce 43 	call	#0x43ce	
        Substitution(block,sBoxInv);
    469e:	3e 40 54 4c 	mov	#19540,	r14	;#0x4c54
    46a2:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    46a6:	b0 12 c6 40 	call	#0x40c6	
        *block = *block ^ k1 ^ RC[i];
    }
    Substitution(block,sBox);
    MatrixMul(block,MPrime);
    Substitution(block,sBoxInv);
    for (i=6;i<11;i++)
    46aa:	d4 53 ce ff 	inc.b	-50(r4)	;0xffce(r4)
    46ae:	f4 90 0b 00 	cmp.b	#11,	-50(r4)	;#0x000b, 0xffce(r4)
    46b2:	ce ff 
    46b4:	bd 2b       	jnc	$-132    	;abs 0x4630
    {
        *block = *block ^ k1 ^ RC[i];
        MatrixMul(block,MInv);
        Substitution(block,sBoxInv);
    }
    *block = *block ^ k1 ^ RC[11];
    46b6:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    46ba:	2c 4f       	mov	@r15,	r12	
    46bc:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    46c0:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    46c4:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    46c8:	08 4c       	mov	r12,	r8	
    46ca:	09 4d       	mov	r13,	r9	
    46cc:	0a 4e       	mov	r14,	r10	
    46ce:	0b 4f       	mov	r15,	r11	
    46d0:	18 e4 d0 ff 	xor	-48(r4),r8	;0xffd0(r4)
    46d4:	19 e4 d2 ff 	xor	-46(r4),r9	;0xffd2(r4)
    46d8:	1a e4 d4 ff 	xor	-44(r4),r10	;0xffd4(r4)
    46dc:	1b e4 d6 ff 	xor	-42(r4),r11	;0xffd6(r4)
    46e0:	1c 42 bc 4c 	mov	&0x4cbc,r12	
    46e4:	1d 42 be 4c 	mov	&0x4cbe,r13	
    46e8:	1e 42 c0 4c 	mov	&0x4cc0,r14	
    46ec:	1f 42 c2 4c 	mov	&0x4cc2,r15	
    46f0:	0c e8       	xor	r8,	r12	
    46f2:	0d e9       	xor	r9,	r13	
    46f4:	0e ea       	xor	r10,	r14	
    46f6:	0f eb       	xor	r11,	r15	
    46f8:	1b 44 da ff 	mov	-38(r4),r11	;0xffda(r4)
    46fc:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4700:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4704:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4708:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    *block = *block ^ ROTATE_RIGHT_64(k[0],1) ^ (k[0] >> 63);
    470c:	1f 44 da ff 	mov	-38(r4),r15	;0xffda(r4)
    4710:	a4 4f ec ff 	mov	@r15,	-20(r4)	;0xffec(r4)
    4714:	94 4f 02 00 	mov	2(r15),	-18(r4)	;0x0002(r15), 0xffee(r4)
    4718:	ee ff 
    471a:	94 4f 04 00 	mov	4(r15),	-16(r4)	;0x0004(r15), 0xfff0(r4)
    471e:	f0 ff 
    4720:	94 4f 06 00 	mov	6(r15),	-14(r4)	;0x0006(r15), 0xfff2(r4)
    4724:	f2 ff 
    4726:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    472a:	2c 4f       	mov	@r15,	r12	
    472c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4730:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4734:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4738:	07 4c       	mov	r12,	r7	
    473a:	07 11       	rra	r7		
    473c:	07 43       	clr	r7		
    473e:	07 10       	rrc	r7		
    4740:	84 43 e4 ff 	mov	#0,	-28(r4)	;r3 As==00, 0xffe4(r4)
    4744:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    4748:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    474c:	84 47 ea ff 	mov	r7,	-22(r4)	;0xffea(r4)
    4750:	12 c3       	clrc			
    4752:	0f 10       	rrc	r15		
    4754:	0e 10       	rrc	r14		
    4756:	0d 10       	rrc	r13		
    4758:	0c 10       	rrc	r12		
    475a:	1c d4 e4 ff 	bis	-28(r4),r12	;0xffe4(r4)
    475e:	1d d4 e6 ff 	bis	-26(r4),r13	;0xffe6(r4)
    4762:	1e d4 e8 ff 	bis	-24(r4),r14	;0xffe8(r4)
    4766:	1f d4 ea ff 	bis	-22(r4),r15	;0xffea(r4)
    476a:	0b 4c       	mov	r12,	r11	
    476c:	0c 4d       	mov	r13,	r12	
    476e:	0d 4e       	mov	r14,	r13	
    4770:	0e 4f       	mov	r15,	r14	
    4772:	1b e4 ec ff 	xor	-20(r4),r11	;0xffec(r4)
    4776:	1c e4 ee ff 	xor	-18(r4),r12	;0xffee(r4)
    477a:	1d e4 f0 ff 	xor	-16(r4),r13	;0xfff0(r4)
    477e:	1e e4 f2 ff 	xor	-14(r4),r14	;0xfff2(r4)
    4782:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    4786:	27 4f       	mov	@r15,	r7	
    4788:	18 4f 02 00 	mov	2(r15),	r8	;0x0002(r15)
    478c:	19 4f 04 00 	mov	4(r15),	r9	;0x0004(r15)
    4790:	1a 4f 06 00 	mov	6(r15),	r10	;0x0006(r15)
    4794:	0f 4a       	mov	r10,	r15	
    4796:	0f 5f       	rla	r15		
    4798:	0f 43       	clr	r15		
    479a:	0f 6f       	rlc	r15		
    479c:	84 4f dc ff 	mov	r15,	-36(r4)	;0xffdc(r4)
    47a0:	84 43 de ff 	mov	#0,	-34(r4)	;r3 As==00, 0xffde(r4)
    47a4:	84 43 e0 ff 	mov	#0,	-32(r4)	;r3 As==00, 0xffe0(r4)
    47a8:	84 43 e2 ff 	mov	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    47ac:	0f 4e       	mov	r14,	r15	
    47ae:	0e 4d       	mov	r13,	r14	
    47b0:	0d 4c       	mov	r12,	r13	
    47b2:	0c 4b       	mov	r11,	r12	
    47b4:	1c e4 dc ff 	xor	-36(r4),r12	;0xffdc(r4)
    47b8:	1d e4 de ff 	xor	-34(r4),r13	;0xffde(r4)
    47bc:	1e e4 e0 ff 	xor	-32(r4),r14	;0xffe0(r4)
    47c0:	1f e4 e2 ff 	xor	-30(r4),r15	;0xffe2(r4)
    47c4:	1b 44 da ff 	mov	-38(r4),r11	;0xffda(r4)
    47c8:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    47cc:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    47d0:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    47d4:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
}
    47d8:	31 50 26 00 	add	#38,	r1	;#0x0026
    47dc:	34 41       	pop	r4		
    47de:	37 41       	pop	r7		
    47e0:	38 41       	pop	r8		
    47e2:	39 41       	pop	r9		
    47e4:	3a 41       	pop	r10		
    47e6:	3b 41       	pop	r11		
    47e8:	30 41       	ret			

000047ea <Decrypt>:


void Decrypt(u64 k[], u64 * block)
{
    47ea:	0b 12       	push	r11		
    47ec:	0a 12       	push	r10		
    47ee:	09 12       	push	r9		
    47f0:	08 12       	push	r8		
    47f2:	07 12       	push	r7		
    47f4:	04 12       	push	r4		
    47f6:	04 41       	mov	r1,	r4	
    47f8:	34 50 0c 00 	add	#12,	r4	;#0x000c
    47fc:	31 50 e2 ff 	add	#-30,	r1	;#0xffe2
    4800:	84 4f e0 ff 	mov	r15,	-32(r4)	;0xffe0(r4)
    4804:	84 4e e2 ff 	mov	r14,	-30(r4)	;0xffe2(r4)
    u8 i;
    u64 k1 = k[1] ^ ALPHA;
    4808:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    480c:	3f 52       	add	#8,	r15	;r2 As==11
    480e:	2c 4f       	mov	@r15,	r12	
    4810:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4814:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4818:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    481c:	08 4c       	mov	r12,	r8	
    481e:	09 4d       	mov	r13,	r9	
    4820:	0a 4e       	mov	r14,	r10	
    4822:	0b 4f       	mov	r15,	r11	
    4824:	38 e0 dd 50 	xor	#20701,	r8	;#0x50dd
    4828:	39 e0 7c c9 	xor	#-13956,r9	;#0xc97c
    482c:	3a e0 b7 29 	xor	#10679,	r10	;#0x29b7
    4830:	3b e0 ac c0 	xor	#-16212,r11	;#0xc0ac
    4834:	84 48 d8 ff 	mov	r8,	-40(r4)	;0xffd8(r4)
    4838:	84 49 da ff 	mov	r9,	-38(r4)	;0xffda(r4)
    483c:	84 4a dc ff 	mov	r10,	-36(r4)	;0xffdc(r4)
    4840:	84 4b de ff 	mov	r11,	-34(r4)	;0xffde(r4)

    *block = *block ^ ROTATE_RIGHT_64(k[0],1) ^ (k[0] >> 63);
    4844:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4848:	a4 4f e4 ff 	mov	@r15,	-28(r4)	;0xffe4(r4)
    484c:	94 4f 02 00 	mov	2(r15),	-26(r4)	;0x0002(r15), 0xffe6(r4)
    4850:	e6 ff 
    4852:	94 4f 04 00 	mov	4(r15),	-24(r4)	;0x0004(r15), 0xffe8(r4)
    4856:	e8 ff 
    4858:	94 4f 06 00 	mov	6(r15),	-22(r4)	;0x0006(r15), 0xffea(r4)
    485c:	ea ff 
    485e:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    4862:	2c 4f       	mov	@r15,	r12	
    4864:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4868:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    486c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4870:	07 4c       	mov	r12,	r7	
    4872:	07 11       	rra	r7		
    4874:	07 43       	clr	r7		
    4876:	07 10       	rrc	r7		
    4878:	08 43       	clr	r8		
    487a:	09 43       	clr	r9		
    487c:	0a 43       	clr	r10		
    487e:	0b 47       	mov	r7,	r11	
    4880:	12 c3       	clrc			
    4882:	0f 10       	rrc	r15		
    4884:	0e 10       	rrc	r14		
    4886:	0d 10       	rrc	r13		
    4888:	0c 10       	rrc	r12		
    488a:	0c d8       	bis	r8,	r12	
    488c:	0d d9       	bis	r9,	r13	
    488e:	0e da       	bis	r10,	r14	
    4890:	0f db       	bis	r11,	r15	
    4892:	0b 4c       	mov	r12,	r11	
    4894:	0c 4d       	mov	r13,	r12	
    4896:	0d 4e       	mov	r14,	r13	
    4898:	0e 4f       	mov	r15,	r14	
    489a:	1b e4 e4 ff 	xor	-28(r4),r11	;0xffe4(r4)
    489e:	1c e4 e6 ff 	xor	-26(r4),r12	;0xffe6(r4)
    48a2:	1d e4 e8 ff 	xor	-24(r4),r13	;0xffe8(r4)
    48a6:	1e e4 ea ff 	xor	-22(r4),r14	;0xffea(r4)
    48aa:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    48ae:	27 4f       	mov	@r15,	r7	
    48b0:	18 4f 02 00 	mov	2(r15),	r8	;0x0002(r15)
    48b4:	19 4f 04 00 	mov	4(r15),	r9	;0x0004(r15)
    48b8:	1a 4f 06 00 	mov	6(r15),	r10	;0x0006(r15)
    48bc:	0f 4a       	mov	r10,	r15	
    48be:	0f 5f       	rla	r15		
    48c0:	0f 43       	clr	r15		
    48c2:	0f 6f       	rlc	r15		
    48c4:	84 4f ec ff 	mov	r15,	-20(r4)	;0xffec(r4)
    48c8:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    48cc:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    48d0:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    48d4:	0f 4e       	mov	r14,	r15	
    48d6:	0e 4d       	mov	r13,	r14	
    48d8:	0d 4c       	mov	r12,	r13	
    48da:	0c 4b       	mov	r11,	r12	
    48dc:	1c e4 ec ff 	xor	-20(r4),r12	;0xffec(r4)
    48e0:	1d e4 ee ff 	xor	-18(r4),r13	;0xffee(r4)
    48e4:	1e e4 f0 ff 	xor	-16(r4),r14	;0xfff0(r4)
    48e8:	1f e4 f2 ff 	xor	-14(r4),r15	;0xfff2(r4)
    48ec:	1b 44 e2 ff 	mov	-30(r4),r11	;0xffe2(r4)
    48f0:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    48f4:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    48f8:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    48fc:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    *block = *block ^ k1 ^ RC[0];
    4900:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4904:	2c 4f       	mov	@r15,	r12	
    4906:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    490a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    490e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4912:	08 4c       	mov	r12,	r8	
    4914:	09 4d       	mov	r13,	r9	
    4916:	0a 4e       	mov	r14,	r10	
    4918:	0b 4f       	mov	r15,	r11	
    491a:	18 e4 d8 ff 	xor	-40(r4),r8	;0xffd8(r4)
    491e:	19 e4 da ff 	xor	-38(r4),r9	;0xffda(r4)
    4922:	1a e4 dc ff 	xor	-36(r4),r10	;0xffdc(r4)
    4926:	1b e4 de ff 	xor	-34(r4),r11	;0xffde(r4)
    492a:	1c 42 64 4c 	mov	&0x4c64,r12	
    492e:	1d 42 66 4c 	mov	&0x4c66,r13	
    4932:	1e 42 68 4c 	mov	&0x4c68,r14	
    4936:	1f 42 6a 4c 	mov	&0x4c6a,r15	
    493a:	0c e8       	xor	r8,	r12	
    493c:	0d e9       	xor	r9,	r13	
    493e:	0e ea       	xor	r10,	r14	
    4940:	0f eb       	xor	r11,	r15	
    4942:	1b 44 e2 ff 	mov	-30(r4),r11	;0xffe2(r4)
    4946:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    494a:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    494e:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4952:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    for (i=1;i<6;i++)
    4956:	d4 43 d6 ff 	mov.b	#1,	-42(r4)	;r3 As==01, 0xffd6(r4)
    495a:	3f 3c       	jmp	$+128    	;abs 0x49da
    {
        Substitution(block,sBox);
    495c:	3e 40 44 4c 	mov	#19524,	r14	;#0x4c44
    4960:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4964:	b0 12 c6 40 	call	#0x40c6	
        MatrixMul(block,M);
    4968:	3e 40 c4 4e 	mov	#20164,	r14	;#0x4ec4
    496c:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4970:	b0 12 ce 43 	call	#0x43ce	
        *block = *block ^ k1 ^ RC[i];
    4974:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4978:	2c 4f       	mov	@r15,	r12	
    497a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    497e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4982:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4986:	08 4c       	mov	r12,	r8	
    4988:	09 4d       	mov	r13,	r9	
    498a:	0a 4e       	mov	r14,	r10	
    498c:	0b 4f       	mov	r15,	r11	
    498e:	18 e4 d8 ff 	xor	-40(r4),r8	;0xffd8(r4)
    4992:	19 e4 da ff 	xor	-38(r4),r9	;0xffda(r4)
    4996:	1a e4 dc ff 	xor	-36(r4),r10	;0xffdc(r4)
    499a:	1b e4 de ff 	xor	-34(r4),r11	;0xffde(r4)
    499e:	5f 44 d6 ff 	mov.b	-42(r4),r15	;0xffd6(r4)
    49a2:	0f 5f       	rla	r15		
    49a4:	0f 5f       	rla	r15		
    49a6:	0f 5f       	rla	r15		
    49a8:	3f 50 64 4c 	add	#19556,	r15	;#0x4c64
    49ac:	2c 4f       	mov	@r15,	r12	
    49ae:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    49b2:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    49b6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    49ba:	0c e8       	xor	r8,	r12	
    49bc:	0d e9       	xor	r9,	r13	
    49be:	0e ea       	xor	r10,	r14	
    49c0:	0f eb       	xor	r11,	r15	
    49c2:	1b 44 e2 ff 	mov	-30(r4),r11	;0xffe2(r4)
    49c6:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    49ca:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    49ce:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    49d2:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    u64 k1 = k[1] ^ ALPHA;

    *block = *block ^ ROTATE_RIGHT_64(k[0],1) ^ (k[0] >> 63);

    *block = *block ^ k1 ^ RC[0];
    for (i=1;i<6;i++)
    49d6:	d4 53 d6 ff 	inc.b	-42(r4)	;0xffd6(r4)
    49da:	f4 90 06 00 	cmp.b	#6,	-42(r4)	;#0x0006, 0xffd6(r4)
    49de:	d6 ff 
    49e0:	bd 2b       	jnc	$-132    	;abs 0x495c
    {
        Substitution(block,sBox);
        MatrixMul(block,M);
        *block = *block ^ k1 ^ RC[i];
    }
    Substitution(block,sBox);
    49e2:	3e 40 44 4c 	mov	#19524,	r14	;#0x4c44
    49e6:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    49ea:	b0 12 c6 40 	call	#0x40c6	
    MatrixMul(block,MPrime);
    49ee:	3e 40 c4 4c 	mov	#19652,	r14	;#0x4cc4
    49f2:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    49f6:	b0 12 ce 43 	call	#0x43ce	
    Substitution(block,sBoxInv);
    49fa:	3e 40 54 4c 	mov	#19540,	r14	;#0x4c54
    49fe:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4a02:	b0 12 c6 40 	call	#0x40c6	
    for (i=6;i<11;i++)
    4a06:	f4 40 06 00 	mov.b	#6,	-42(r4)	;#0x0006, 0xffd6(r4)
    4a0a:	d6 ff 
    4a0c:	3f 3c       	jmp	$+128    	;abs 0x4a8c
    {
        *block = *block ^ k1 ^ RC[i];
    4a0e:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4a12:	2c 4f       	mov	@r15,	r12	
    4a14:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a18:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a1c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a20:	08 4c       	mov	r12,	r8	
    4a22:	09 4d       	mov	r13,	r9	
    4a24:	0a 4e       	mov	r14,	r10	
    4a26:	0b 4f       	mov	r15,	r11	
    4a28:	18 e4 d8 ff 	xor	-40(r4),r8	;0xffd8(r4)
    4a2c:	19 e4 da ff 	xor	-38(r4),r9	;0xffda(r4)
    4a30:	1a e4 dc ff 	xor	-36(r4),r10	;0xffdc(r4)
    4a34:	1b e4 de ff 	xor	-34(r4),r11	;0xffde(r4)
    4a38:	5f 44 d6 ff 	mov.b	-42(r4),r15	;0xffd6(r4)
    4a3c:	0f 5f       	rla	r15		
    4a3e:	0f 5f       	rla	r15		
    4a40:	0f 5f       	rla	r15		
    4a42:	3f 50 64 4c 	add	#19556,	r15	;#0x4c64
    4a46:	2c 4f       	mov	@r15,	r12	
    4a48:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a4c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a50:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a54:	0c e8       	xor	r8,	r12	
    4a56:	0d e9       	xor	r9,	r13	
    4a58:	0e ea       	xor	r10,	r14	
    4a5a:	0f eb       	xor	r11,	r15	
    4a5c:	1b 44 e2 ff 	mov	-30(r4),r11	;0xffe2(r4)
    4a60:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4a64:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4a68:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4a6c:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        MatrixMul(block,MInv);
    4a70:	3e 40 c4 50 	mov	#20676,	r14	;#0x50c4
    4a74:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4a78:	b0 12 ce 43 	call	#0x43ce	
        Substitution(block,sBoxInv);
    4a7c:	3e 40 54 4c 	mov	#19540,	r14	;#0x4c54
    4a80:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4a84:	b0 12 c6 40 	call	#0x40c6	
        *block = *block ^ k1 ^ RC[i];
    }
    Substitution(block,sBox);
    MatrixMul(block,MPrime);
    Substitution(block,sBoxInv);
    for (i=6;i<11;i++)
    4a88:	d4 53 d6 ff 	inc.b	-42(r4)	;0xffd6(r4)
    4a8c:	f4 90 0b 00 	cmp.b	#11,	-42(r4)	;#0x000b, 0xffd6(r4)
    4a90:	d6 ff 
    4a92:	bd 2b       	jnc	$-132    	;abs 0x4a0e
    {
        *block = *block ^ k1 ^ RC[i];
        MatrixMul(block,MInv);
        Substitution(block,sBoxInv);
    }
    *block = *block ^ k1 ^ RC[11];
    4a94:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4a98:	2c 4f       	mov	@r15,	r12	
    4a9a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a9e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4aa2:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4aa6:	08 4c       	mov	r12,	r8	
    4aa8:	09 4d       	mov	r13,	r9	
    4aaa:	0a 4e       	mov	r14,	r10	
    4aac:	0b 4f       	mov	r15,	r11	
    4aae:	18 e4 d8 ff 	xor	-40(r4),r8	;0xffd8(r4)
    4ab2:	19 e4 da ff 	xor	-38(r4),r9	;0xffda(r4)
    4ab6:	1a e4 dc ff 	xor	-36(r4),r10	;0xffdc(r4)
    4aba:	1b e4 de ff 	xor	-34(r4),r11	;0xffde(r4)
    4abe:	1c 42 bc 4c 	mov	&0x4cbc,r12	
    4ac2:	1d 42 be 4c 	mov	&0x4cbe,r13	
    4ac6:	1e 42 c0 4c 	mov	&0x4cc0,r14	
    4aca:	1f 42 c2 4c 	mov	&0x4cc2,r15	
    4ace:	0c e8       	xor	r8,	r12	
    4ad0:	0d e9       	xor	r9,	r13	
    4ad2:	0e ea       	xor	r10,	r14	
    4ad4:	0f eb       	xor	r11,	r15	
    4ad6:	1b 44 e2 ff 	mov	-30(r4),r11	;0xffe2(r4)
    4ada:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4ade:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4ae2:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4ae6:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    *block = *block ^ k[0];
    4aea:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffe2(r4)
    4aee:	28 4f       	mov	@r15,	r8	
    4af0:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    4af4:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    4af8:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    4afc:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    4b00:	2c 4f       	mov	@r15,	r12	
    4b02:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4b06:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4b0a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4b0e:	0c e8       	xor	r8,	r12	
    4b10:	0d e9       	xor	r9,	r13	
    4b12:	0e ea       	xor	r10,	r14	
    4b14:	0f eb       	xor	r11,	r15	
    4b16:	1b 44 e2 ff 	mov	-30(r4),r11	;0xffe2(r4)
    4b1a:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4b1e:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4b22:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4b26:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
}
    4b2a:	31 50 1e 00 	add	#30,	r1	;#0x001e
    4b2e:	34 41       	pop	r4		
    4b30:	37 41       	pop	r7		
    4b32:	38 41       	pop	r8		
    4b34:	39 41       	pop	r9		
    4b36:	3a 41       	pop	r10		
    4b38:	3b 41       	pop	r11		
    4b3a:	30 41       	ret			

00004b3c <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4b3c:	04 12       	push	r4		
    4b3e:	04 41       	mov	r1,	r4	
    4b40:	24 53       	incd	r4		
    4b42:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4b46:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b4a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4b4e:	0d 3c       	jmp	$+28     	;abs 0x4b6a
    {
      for (i = 0; i<d; i++) 
    4b50:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4b54:	04 3c       	jmp	$+10     	;abs 0x4b5e
	{
	  nop();
    4b56:	03 43       	nop			
	  nop();
    4b58:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4b5a:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4b5e:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4b62:	f8 ff 
    4b64:	f8 2b       	jnc	$-14     	;abs 0x4b56
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b66:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4b6a:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4b6e:	fa ff 
    4b70:	ef 2b       	jnc	$-32     	;abs 0x4b50
	{
	  nop();
	  nop();
	}
    }
}
    4b72:	31 50 06 00 	add	#6,	r1	;#0x0006
    4b76:	34 41       	pop	r4		
    4b78:	30 41       	ret			

00004b7a <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4b7a:	04 12       	push	r4		
    4b7c:	04 41       	mov	r1,	r4	
    4b7e:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4b80:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4b84:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4b86:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4b8a:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4b8e:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4b92:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4b96:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4b9a:	5f 42 05 00 	mov.b	&0x0005,r15	
    4b9e:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4ba2:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4ba6:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4baa:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4bae:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4bb0:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4bb4:	79 00 
  U1RCTL = 0;
    4bb6:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4bba:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4bbe:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4bc2:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4bc4:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4bc8:	7b 00 

  delay(0x800);
    4bca:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4bce:	b0 12 3c 4b 	call	#0x4b3c	
  return 0;
    4bd2:	0f 43       	clr	r15		
}
    4bd4:	34 41       	pop	r4		
    4bd6:	30 41       	ret			

00004bd8 <uart1_putchar>:

int uart1_putchar(int c)
{
    4bd8:	04 12       	push	r4		
    4bda:	04 41       	mov	r1,	r4	
    4bdc:	24 53       	incd	r4		
    4bde:	21 83       	decd	r1		
    4be0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4be4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4be8:	4f 4f       	mov.b	r15,	r15	
    4bea:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4bee:	03 43       	nop			
    4bf0:	5f 42 79 00 	mov.b	&0x0079,r15	
    4bf4:	4f 4f       	mov.b	r15,	r15	
    4bf6:	1f f3       	and	#1,	r15	;r3 As==01
    4bf8:	0f 93       	tst	r15		
    4bfa:	fa 27       	jz	$-10     	;abs 0x4bf0
  return (unsigned char)c;
    4bfc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c00:	4f 4f       	mov.b	r15,	r15	
    4c02:	4f 4f       	mov.b	r15,	r15	
}
    4c04:	21 53       	incd	r1		
    4c06:	34 41       	pop	r4		
    4c08:	30 41       	ret			

00004c0a <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4c0a:	04 12       	push	r4		
    4c0c:	04 41       	mov	r1,	r4	
    4c0e:	24 53       	incd	r4		
    4c10:	21 83       	decd	r1		
    4c12:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4c16:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c1a:	b0 12 d8 4b 	call	#0x4bd8	
}
    4c1e:	21 53       	incd	r1		
    4c20:	34 41       	pop	r4		
    4c22:	30 41       	ret			

00004c24 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4c24:	04 12       	push	r4		
    4c26:	04 41       	mov	r1,	r4	
    4c28:	24 53       	incd	r4		
  ;
}
    4c2a:	34 41       	pop	r4		
    4c2c:	30 41       	ret			

00004c2e <start_decrypt>:
void
start_decrypt()
{
    4c2e:	04 12       	push	r4		
    4c30:	04 41       	mov	r1,	r4	
    4c32:	24 53       	incd	r4		
  ;
}
    4c34:	34 41       	pop	r4		
    4c36:	30 41       	ret			

00004c38 <end_expe>:


void
end_expe()
{
    4c38:	04 12       	push	r4		
    4c3a:	04 41       	mov	r1,	r4	
    4c3c:	24 53       	incd	r4		
  ;
}
    4c3e:	34 41       	pop	r4		
    4c40:	30 41       	ret			

00004c42 <_unexpected_>:
    4c42:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	c2 40 c2 40 c2 40 c2 40 c2 40 c2 40 c2 40 c2 40     .@.@.@.@.@.@.@.@
    fff0:	c2 40 c2 40 c2 40 c2 40 c2 40 c2 40 c2 40 00 40     .@.@.@.@.@.@.@.@
