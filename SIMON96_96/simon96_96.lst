
simon96_96.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .data	00000000 .data
0000113e l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 simon96_96.c
00001100 l     O .data	0000003e z
00004132 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004c0a g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
0000003e g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
00004132  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
00004132  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000476c g     F .text	000003d0 Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004c44 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004b7a g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
0000412c  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
00004132  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004c38 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
00004136 g     F .text	0000027c KeyExpansion
0000019e g       *ABS*	00000000 __TBCCR6
00004132  w      .text	00000000 __isr_5
00004c44 g       *ABS*	00000000 __data_load_start
00004132 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
00004132  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
00004132  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
0000113e g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
00004132  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004132  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004c42  w      .text	00000000 _unexpected_
00004132  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
00004132  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004bd8 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
00004132 g       .text	00000000 __ctors_start
00004132  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
0000113e g       .data	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	000000ee main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
00004132  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004b3c g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
00004132  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
00004132 g       .text	00000000 __dtors_start
00004132  w      .text	00000000 __isr_6
00004132 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
00004132  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
0000113e g       .data	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001140 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004c24 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
0000412c  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004c2e g     F .text	0000000a start_decrypt
00001100 g       .data	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
000043b2 g     F .text	000003ba Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 3e 11 	mov	r5,	&0x113e	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 3e 11 	mov	&0x113e,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 44 4c 	mov	19524(r15),4352(r15);0x4c44(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 3e 11 	mov	&0x113e,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 3e 11 	mov.b	#0,	4414(r15);r3 As==00, 0x113e(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
        crypt[0] = tmp;
    }
}

int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 40 fe 	add	#-448,	r1	;#0xfe40

    u64 text[2];
    text[0] = 0x2072616c6c69;
    4046:	b4 40 69 6c 	mov	#27753,	-450(r4);#0x6c69, 0xfe3e(r4)
    404a:	3e fe 
    404c:	b4 40 6c 61 	mov	#24940,	-448(r4);#0x616c, 0xfe40(r4)
    4050:	40 fe 
    4052:	b4 40 72 20 	mov	#8306,	-446(r4);#0x2072, 0xfe42(r4)
    4056:	42 fe 
    4058:	84 43 44 fe 	mov	#0,	-444(r4);r3 As==00, 0xfe44(r4)
    text[1] = 0x702065687420;
    405c:	b4 40 20 74 	mov	#29728,	-442(r4);#0x7420, 0xfe46(r4)
    4060:	46 fe 
    4062:	b4 40 68 65 	mov	#25960,	-440(r4);#0x6568, 0xfe48(r4)
    4066:	48 fe 
    4068:	b4 40 20 70 	mov	#28704,	-438(r4);#0x7020, 0xfe4a(r4)
    406c:	4a fe 
    406e:	84 43 4c fe 	mov	#0,	-436(r4);r3 As==00, 0xfe4c(r4)
    u64 crypt[2] = {0};
    4072:	0f 44       	mov	r4,	r15	
    4074:	3f 50 4e fe 	add	#-434,	r15	;#0xfe4e
    4078:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    407c:	2f 53       	incd	r15		
    407e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4082:	2f 53       	incd	r15		
    4084:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4088:	2f 53       	incd	r15		
    408a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    408e:	2f 53       	incd	r15		
    4090:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4094:	2f 53       	incd	r15		
    4096:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    409a:	2f 53       	incd	r15		
    409c:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a0:	2f 53       	incd	r15		
    40a2:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a6:	2f 53       	incd	r15		
    u64 k[52];
    k[1] = 0x0d0c0b0a0908;
    40a8:	b4 40 08 09 	mov	#2312,	-410(r4);#0x0908, 0xfe66(r4)
    40ac:	66 fe 
    40ae:	b4 40 0a 0b 	mov	#2826,	-408(r4);#0x0b0a, 0xfe68(r4)
    40b2:	68 fe 
    40b4:	b4 40 0c 0d 	mov	#3340,	-406(r4);#0x0d0c, 0xfe6a(r4)
    40b8:	6a fe 
    40ba:	84 43 6c fe 	mov	#0,	-404(r4);r3 As==00, 0xfe6c(r4)
    k[0] = 0x050403020100;
    40be:	b4 40 00 01 	mov	#256,	-418(r4);#0x0100, 0xfe5e(r4)
    40c2:	5e fe 
    40c4:	b4 40 02 03 	mov	#770,	-416(r4);#0x0302, 0xfe60(r4)
    40c8:	60 fe 
    40ca:	b4 40 04 05 	mov	#1284,	-414(r4);#0x0504, 0xfe62(r4)
    40ce:	62 fe 
    40d0:	84 43 64 fe 	mov	#0,	-412(r4);r3 As==00, 0xfe64(r4)
	
	START_ENCRYPT();
    40d4:	b0 12 24 4c 	call	#0x4c24	
	KeyExpansion ( k );
    40d8:	0f 44       	mov	r4,	r15	
    40da:	3f 50 5e fe 	add	#-418,	r15	;#0xfe5e
    40de:	b0 12 36 41 	call	#0x4136	
    Encrypt ( text, crypt, k );
    40e2:	0e 44       	mov	r4,	r14	
    40e4:	3e 50 5e fe 	add	#-418,	r14	;#0xfe5e
    40e8:	0f 44       	mov	r4,	r15	
    40ea:	3f 50 4e fe 	add	#-434,	r15	;#0xfe4e
    40ee:	0d 4e       	mov	r14,	r13	
    40f0:	0e 4f       	mov	r15,	r14	
    40f2:	0f 44       	mov	r4,	r15	
    40f4:	3f 50 3e fe 	add	#-450,	r15	;#0xfe3e
    40f8:	b0 12 b2 43 	call	#0x43b2	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0]&0xffffffffffff, crypt[1]&0xffffffffffff);
    
	START_DECRYPT();
    40fc:	b0 12 2e 4c 	call	#0x4c2e	
	KeyExpansion ( k );
    4100:	0f 44       	mov	r4,	r15	
    4102:	3f 50 5e fe 	add	#-418,	r15	;#0xfe5e
    4106:	b0 12 36 41 	call	#0x4136	
	Decrypt ( crypt, text, k );
    410a:	0e 44       	mov	r4,	r14	
    410c:	3e 50 5e fe 	add	#-418,	r14	;#0xfe5e
    4110:	0f 44       	mov	r4,	r15	
    4112:	3f 50 4e fe 	add	#-434,	r15	;#0xfe4e
    4116:	0d 4e       	mov	r14,	r13	
    4118:	0e 44       	mov	r4,	r14	
    411a:	3e 50 3e fe 	add	#-450,	r14	;#0xfe3e
    411e:	b0 12 6c 47 	call	#0x476c	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0]&0xffffffffffff, crypt[1]&0xffffffffffff);
	END_EXPE();
    4122:	b0 12 38 4c 	call	#0x4c38	
    return 0;
    4126:	0f 43       	clr	r15		
}
    4128:	31 50 c0 01 	add	#448,	r1	;#0x01c0

0000412c <__stop_progExec__>:
    412c:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    4130:	fd 3f       	jmp	$-4      	;abs 0x412c

00004132 <__ctors_end>:
    4132:	30 40 42 4c 	br	#0x4c42	

00004136 <KeyExpansion>:

#define ROTATE_LEFT_48(x,bits) ( (x << bits) | ((x & 0xffffffffffff) >> (48-bits)) )
#define ROTATE_RIGHT_48(x,bits) ( ((x & 0xffffffffffff) >> bits) | (x << (48-bits)) )

void KeyExpansion ( u64 k[] )
{
    4136:	0b 12       	push	r11		
    4138:	0a 12       	push	r10		
    413a:	09 12       	push	r9		
    413c:	08 12       	push	r8		
    413e:	07 12       	push	r7		
    4140:	06 12       	push	r6		
    4142:	04 12       	push	r4		
    4144:	04 41       	mov	r1,	r4	
    4146:	34 50 0e 00 	add	#14,	r4	;#0x000e
    414a:	31 50 d8 ff 	add	#-40,	r1	;#0xffd8
    414e:	84 4f d4 ff 	mov	r15,	-44(r4)	;0xffd4(r4)
    u8 i;
    u64 tmp = 0;
    4152:	84 43 cc ff 	mov	#0,	-52(r4)	;r3 As==00, 0xffcc(r4)
    4156:	84 43 ce ff 	mov	#0,	-50(r4)	;r3 As==00, 0xffce(r4)
    415a:	84 43 d0 ff 	mov	#0,	-48(r4)	;r3 As==00, 0xffd0(r4)
    415e:	84 43 d2 ff 	mov	#0,	-46(r4)	;r3 As==00, 0xffd2(r4)
    for ( i=2 ; i<52 ; i++ )
    4162:	e4 43 ca ff 	mov.b	#2,	-54(r4)	;r3 As==10, 0xffca(r4)
    4166:	30 40 92 43 	br	#0x4392	
    {
        tmp = ROTATE_RIGHT_48(k[i-1],3);
    416a:	5f 44 ca ff 	mov.b	-54(r4),r15	;0xffca(r4)
    416e:	3f 53       	add	#-1,	r15	;r3 As==11
    4170:	0f 5f       	rla	r15		
    4172:	0f 5f       	rla	r15		
    4174:	0f 5f       	rla	r15		
    4176:	1f 54 d4 ff 	add	-44(r4),r15	;0xffd4(r4)
    417a:	2c 4f       	mov	@r15,	r12	
    417c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4180:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4184:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4188:	3c f3       	and	#-1,	r12	;r3 As==11
    418a:	3d f3       	and	#-1,	r13	;r3 As==11
    418c:	3e f3       	and	#-1,	r14	;r3 As==11
    418e:	0f f3       	and	#0,	r15	;r3 As==00
    4190:	08 4c       	mov	r12,	r8	
    4192:	09 4d       	mov	r13,	r9	
    4194:	0a 4e       	mov	r14,	r10	
    4196:	0b 4f       	mov	r15,	r11	
    4198:	12 c3       	clrc			
    419a:	0b 10       	rrc	r11		
    419c:	0a 10       	rrc	r10		
    419e:	09 10       	rrc	r9		
    41a0:	08 10       	rrc	r8		
    41a2:	12 c3       	clrc			
    41a4:	0b 10       	rrc	r11		
    41a6:	0a 10       	rrc	r10		
    41a8:	09 10       	rrc	r9		
    41aa:	08 10       	rrc	r8		
    41ac:	12 c3       	clrc			
    41ae:	0b 10       	rrc	r11		
    41b0:	0a 10       	rrc	r10		
    41b2:	09 10       	rrc	r9		
    41b4:	08 10       	rrc	r8		
    41b6:	5f 44 ca ff 	mov.b	-54(r4),r15	;0xffca(r4)
    41ba:	3f 53       	add	#-1,	r15	;r3 As==11
    41bc:	0f 5f       	rla	r15		
    41be:	0f 5f       	rla	r15		
    41c0:	0f 5f       	rla	r15		
    41c2:	1f 54 d4 ff 	add	-44(r4),r15	;0xffd4(r4)
    41c6:	2c 4f       	mov	@r15,	r12	
    41c8:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41cc:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    41d0:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    41d4:	84 4c ee ff 	mov	r12,	-18(r4)	;0xffee(r4)
    41d8:	84 4d f0 ff 	mov	r13,	-16(r4)	;0xfff0(r4)
    41dc:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfff0(r4)
    41e0:	1d 44 ee ff 	mov	-18(r4),r13	;0xffee(r4)
    41e4:	4c ed       	xor.b	r13,	r12	
    41e6:	0c ed       	xor	r13,	r12	
    41e8:	8c 10       	swpb	r12		
    41ea:	84 4c f0 ff 	mov	r12,	-16(r4)	;0xfff0(r4)
    41ee:	5e 44 ee ff 	mov.b	-18(r4),r14	;0xffee(r4)
    41f2:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    41f6:	94 10 ee ff 	swpb	-18(r4)	;0xffee(r4)
    41fa:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    41fe:	ee ff 
    4200:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    4204:	f0 ff 
    4206:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    420a:	ee ff 
    420c:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    4210:	f0 ff 
    4212:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    4216:	ee ff 
    4218:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    421c:	f0 ff 
    421e:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    4222:	ee ff 
    4224:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    4228:	f0 ff 
    422a:	94 54 ee ff 	rla	-18(r4)	;0xffee(r4)
    422e:	ee ff 
    4230:	94 64 f0 ff 	rlc	-16(r4)	;0xfff0(r4)
    4234:	f0 ff 
    4236:	1c 44 ee ff 	mov	-18(r4),r12	;0xffee(r4)
    423a:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    423e:	0e 43       	clr	r14		
    4240:	0f 43       	clr	r15		
    4242:	84 4e d6 ff 	mov	r14,	-42(r4)	;0xffd6(r4)
    4246:	84 4f d8 ff 	mov	r15,	-40(r4)	;0xffd8(r4)
    424a:	84 4c da ff 	mov	r12,	-38(r4)	;0xffda(r4)
    424e:	84 4d dc ff 	mov	r13,	-36(r4)	;0xffdc(r4)
    4252:	1c 44 d6 ff 	mov	-42(r4),r12	;0xffd6(r4)
    4256:	1d 44 d8 ff 	mov	-40(r4),r13	;0xffd8(r4)
    425a:	1e 44 da ff 	mov	-38(r4),r14	;0xffda(r4)
    425e:	1f 44 dc ff 	mov	-36(r4),r15	;0xffdc(r4)
    4262:	0c d8       	bis	r8,	r12	
    4264:	0d d9       	bis	r9,	r13	
    4266:	0e da       	bis	r10,	r14	
    4268:	0f db       	bis	r11,	r15	
    426a:	84 4c cc ff 	mov	r12,	-52(r4)	;0xffcc(r4)
    426e:	84 4d ce ff 	mov	r13,	-50(r4)	;0xffce(r4)
    4272:	84 4e d0 ff 	mov	r14,	-48(r4)	;0xffd0(r4)
    4276:	84 4f d2 ff 	mov	r15,	-46(r4)	;0xffd2(r4)
        tmp = tmp ^ ROTATE_RIGHT_48(tmp,1);
    427a:	1c 44 cc ff 	mov	-52(r4),r12	;0xffcc(r4)
    427e:	1d 44 ce ff 	mov	-50(r4),r13	;0xffce(r4)
    4282:	1e 44 d0 ff 	mov	-48(r4),r14	;0xffd0(r4)
    4286:	1f 44 d2 ff 	mov	-46(r4),r15	;0xffd2(r4)
    428a:	3c f3       	and	#-1,	r12	;r3 As==11
    428c:	3d f3       	and	#-1,	r13	;r3 As==11
    428e:	3e f3       	and	#-1,	r14	;r3 As==11
    4290:	0f f3       	and	#0,	r15	;r3 As==00
    4292:	12 c3       	clrc			
    4294:	0f 10       	rrc	r15		
    4296:	0e 10       	rrc	r14		
    4298:	0d 10       	rrc	r13		
    429a:	0c 10       	rrc	r12		
    429c:	16 44 cc ff 	mov	-52(r4),r6	;0xffcc(r4)
    42a0:	17 44 ce ff 	mov	-50(r4),r7	;0xffce(r4)
    42a4:	47 e6       	xor.b	r6,	r7	
    42a6:	07 e6       	xor	r6,	r7	
    42a8:	87 10       	swpb	r7		
    42aa:	46 46       	mov.b	r6,	r6	
    42ac:	86 10       	swpb	r6		
    42ae:	06 56       	rla	r6		
    42b0:	07 67       	rlc	r7		
    42b2:	06 56       	rla	r6		
    42b4:	07 67       	rlc	r7		
    42b6:	06 56       	rla	r6		
    42b8:	07 67       	rlc	r7		
    42ba:	06 56       	rla	r6		
    42bc:	07 67       	rlc	r7		
    42be:	06 56       	rla	r6		
    42c0:	07 67       	rlc	r7		
    42c2:	06 56       	rla	r6		
    42c4:	07 67       	rlc	r7		
    42c6:	06 56       	rla	r6		
    42c8:	07 67       	rlc	r7		
    42ca:	08 46       	mov	r6,	r8	
    42cc:	09 47       	mov	r7,	r9	
    42ce:	0a 43       	clr	r10		
    42d0:	0b 43       	clr	r11		
    42d2:	84 4a de ff 	mov	r10,	-34(r4)	;0xffde(r4)
    42d6:	84 4b e0 ff 	mov	r11,	-32(r4)	;0xffe0(r4)
    42da:	84 48 e2 ff 	mov	r8,	-30(r4)	;0xffe2(r4)
    42de:	84 49 e4 ff 	mov	r9,	-28(r4)	;0xffe4(r4)
    42e2:	1c d4 de ff 	bis	-34(r4),r12	;0xffde(r4)
    42e6:	1d d4 e0 ff 	bis	-32(r4),r13	;0xffe0(r4)
    42ea:	1e d4 e2 ff 	bis	-30(r4),r14	;0xffe2(r4)
    42ee:	1f d4 e4 ff 	bis	-28(r4),r15	;0xffe4(r4)
    42f2:	84 ec cc ff 	xor	r12,	-52(r4)	;0xffcc(r4)
    42f6:	84 ed ce ff 	xor	r13,	-50(r4)	;0xffce(r4)
    42fa:	84 ee d0 ff 	xor	r14,	-48(r4)	;0xffd0(r4)
    42fe:	84 ef d2 ff 	xor	r15,	-46(r4)	;0xffd2(r4)
        k[i] = (~k[i-2] ^ tmp ^ z[(i-2)] ^ 3);
    4302:	5f 44 ca ff 	mov.b	-54(r4),r15	;0xffca(r4)
    4306:	0f 5f       	rla	r15		
    4308:	0f 5f       	rla	r15		
    430a:	0f 5f       	rla	r15		
    430c:	1a 44 d4 ff 	mov	-44(r4),r10	;0xffd4(r4)
    4310:	0a 5f       	add	r15,	r10	
    4312:	5f 44 ca ff 	mov.b	-54(r4),r15	;0xffca(r4)
    4316:	2f 83       	decd	r15		
    4318:	0f 5f       	rla	r15		
    431a:	0f 5f       	rla	r15		
    431c:	0f 5f       	rla	r15		
    431e:	1f 54 d4 ff 	add	-44(r4),r15	;0xffd4(r4)
    4322:	2c 4f       	mov	@r15,	r12	
    4324:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4328:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    432c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4330:	3c e3       	inv	r12		
    4332:	3d e3       	inv	r13		
    4334:	3e e3       	inv	r14		
    4336:	3f e3       	inv	r15		
    4338:	1c e4 cc ff 	xor	-52(r4),r12	;0xffcc(r4)
    433c:	1d e4 ce ff 	xor	-50(r4),r13	;0xffce(r4)
    4340:	1e e4 d0 ff 	xor	-48(r4),r14	;0xffd0(r4)
    4344:	1f e4 d2 ff 	xor	-46(r4),r15	;0xffd2(r4)
    4348:	5b 44 ca ff 	mov.b	-54(r4),r11	;0xffca(r4)
    434c:	2b 83       	decd	r11		
    434e:	5b 4b 00 11 	mov.b	4352(r11),r11	;0x1100(r11)
    4352:	4b 4b       	mov.b	r11,	r11	
    4354:	84 4b e6 ff 	mov	r11,	-26(r4)	;0xffe6(r4)
    4358:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    435c:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
    4360:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec(r4)
    4364:	1c e4 e6 ff 	xor	-26(r4),r12	;0xffe6(r4)
    4368:	1d e4 e8 ff 	xor	-24(r4),r13	;0xffe8(r4)
    436c:	1e e4 ea ff 	xor	-22(r4),r14	;0xffea(r4)
    4370:	1f e4 ec ff 	xor	-20(r4),r15	;0xffec(r4)
    4374:	3c e0 03 00 	xor	#3,	r12	;#0x0003
    4378:	0d e3       	xor	#0,	r13	;r3 As==00
    437a:	0e e3       	xor	#0,	r14	;r3 As==00
    437c:	0f e3       	xor	#0,	r15	;r3 As==00
    437e:	8a 4c 00 00 	mov	r12,	0(r10)	;0x0000(r10)
    4382:	8a 4d 02 00 	mov	r13,	2(r10)	;0x0002(r10)
    4386:	8a 4e 04 00 	mov	r14,	4(r10)	;0x0004(r10)
    438a:	8a 4f 06 00 	mov	r15,	6(r10)	;0x0006(r10)

void KeyExpansion ( u64 k[] )
{
    u8 i;
    u64 tmp = 0;
    for ( i=2 ; i<52 ; i++ )
    438e:	d4 53 ca ff 	inc.b	-54(r4)	;0xffca(r4)
    4392:	f4 90 34 00 	cmp.b	#52,	-54(r4)	;#0x0034, 0xffca(r4)
    4396:	ca ff 
    4398:	02 2c       	jc	$+6      	;abs 0x439e
    439a:	30 40 6a 41 	br	#0x416a	
    {
        tmp = ROTATE_RIGHT_48(k[i-1],3);
        tmp = tmp ^ ROTATE_RIGHT_48(tmp,1);
        k[i] = (~k[i-2] ^ tmp ^ z[(i-2)] ^ 3);
    }
}
    439e:	31 50 28 00 	add	#40,	r1	;#0x0028
    43a2:	34 41       	pop	r4		
    43a4:	36 41       	pop	r6		
    43a6:	37 41       	pop	r7		
    43a8:	38 41       	pop	r8		
    43aa:	39 41       	pop	r9		
    43ac:	3a 41       	pop	r10		
    43ae:	3b 41       	pop	r11		
    43b0:	30 41       	ret			

000043b2 <Encrypt>:

void Encrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    43b2:	0b 12       	push	r11		
    43b4:	0a 12       	push	r10		
    43b6:	09 12       	push	r9		
    43b8:	08 12       	push	r8		
    43ba:	07 12       	push	r7		
    43bc:	06 12       	push	r6		
    43be:	04 12       	push	r4		
    43c0:	04 41       	mov	r1,	r4	
    43c2:	34 50 0e 00 	add	#14,	r4	;#0x000e
    43c6:	31 50 b8 ff 	add	#-72,	r1	;#0xffb8
    43ca:	84 4f b4 ff 	mov	r15,	-76(r4)	;0xffb4(r4)
    43ce:	84 4e b6 ff 	mov	r14,	-74(r4)	;0xffb6(r4)
    43d2:	84 4d b8 ff 	mov	r13,	-72(r4)	;0xffb8(r4)
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    43d6:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    43da:	2c 4f       	mov	@r15,	r12	
    43dc:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    43e0:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    43e4:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    43e8:	1b 44 b6 ff 	mov	-74(r4),r11	;0xffb6(r4)
    43ec:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    43f0:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    43f4:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    43f8:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    43fc:	1b 44 b6 ff 	mov	-74(r4),r11	;0xffb6(r4)
    4400:	3b 52       	add	#8,	r11	;r2 As==11
    4402:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4406:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    440a:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    440e:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    4412:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    4416:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    441a:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    441e:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4422:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<52 ; i++ )
    4426:	c4 43 aa ff 	mov.b	#0,	-86(r4)	;r3 As==00, 0xffaa(r4)
    442a:	30 40 4c 47 	br	#0x474c	
    {
        tmp = crypt[0];
    442e:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4432:	a4 4f ac ff 	mov	@r15,	-84(r4)	;0xffac(r4)
    4436:	94 4f 02 00 	mov	2(r15),	-82(r4)	;0x0002(r15), 0xffae(r4)
    443a:	ae ff 
    443c:	94 4f 04 00 	mov	4(r15),	-80(r4)	;0x0004(r15), 0xffb0(r4)
    4440:	b0 ff 
    4442:	94 4f 06 00 	mov	6(r15),	-78(r4)	;0x0006(r15), 0xffb2(r4)
    4446:	b2 ff 
        crypt[0] = crypt[1] ^ ((ROTATE_LEFT_48(crypt[0],1)) & (ROTATE_LEFT_48(crypt[0],8))) ^ (ROTATE_LEFT_48(crypt[0],2)) ^ key[i];
    4448:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    444c:	3f 52       	add	#8,	r15	;r2 As==11
    444e:	a4 4f ba ff 	mov	@r15,	-70(r4)	;0xffba(r4)
    4452:	94 4f 02 00 	mov	2(r15),	-68(r4)	;0x0002(r15), 0xffbc(r4)
    4456:	bc ff 
    4458:	94 4f 04 00 	mov	4(r15),	-66(r4)	;0x0004(r15), 0xffbe(r4)
    445c:	be ff 
    445e:	94 4f 06 00 	mov	6(r15),	-64(r4)	;0x0006(r15), 0xffc0(r4)
    4462:	c0 ff 
    4464:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4468:	2c 4f       	mov	@r15,	r12	
    446a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    446e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4472:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4476:	08 4c       	mov	r12,	r8	
    4478:	09 4d       	mov	r13,	r9	
    447a:	0a 4e       	mov	r14,	r10	
    447c:	0b 4f       	mov	r15,	r11	
    447e:	08 58       	rla	r8		
    4480:	09 69       	rlc	r9		
    4482:	0a 6a       	rlc	r10		
    4484:	0b 6b       	rlc	r11		
    4486:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    448a:	2c 4f       	mov	@r15,	r12	
    448c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4490:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4494:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4498:	3c f3       	and	#-1,	r12	;r3 As==11
    449a:	3d f3       	and	#-1,	r13	;r3 As==11
    449c:	3e f3       	and	#-1,	r14	;r3 As==11
    449e:	0f f3       	and	#0,	r15	;r3 As==00
    44a0:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
    44a4:	84 4f ec ff 	mov	r15,	-20(r4)	;0xffec(r4)
    44a8:	94 10 ea ff 	swpb	-22(r4)	;0xffea(r4)
    44ac:	1c 44 ea ff 	mov	-22(r4),r12	;0xffea(r4)
    44b0:	1d 44 ec ff 	mov	-20(r4),r13	;0xffec(r4)
    44b4:	8d 10       	swpb	r13		
    44b6:	4c ed       	xor.b	r13,	r12	
    44b8:	0c ed       	xor	r13,	r12	
    44ba:	84 4d ec ff 	mov	r13,	-20(r4)	;0xffec(r4)
    44be:	84 4c ea ff 	mov	r12,	-22(r4)	;0xffea(r4)
    44c2:	5e 44 ec ff 	mov.b	-20(r4),r14	;0xffec(r4)
    44c6:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
    44ca:	12 c3       	clrc			
    44cc:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    44d0:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    44d4:	12 c3       	clrc			
    44d6:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    44da:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    44de:	12 c3       	clrc			
    44e0:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    44e4:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    44e8:	12 c3       	clrc			
    44ea:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    44ee:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    44f2:	12 c3       	clrc			
    44f4:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    44f8:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    44fc:	12 c3       	clrc			
    44fe:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    4502:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    4506:	12 c3       	clrc			
    4508:	14 10 ec ff 	rrc	-20(r4)	;0xffec(r4)
    450c:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    4510:	1c 44 ea ff 	mov	-22(r4),r12	;0xffea(r4)
    4514:	1d 44 ec ff 	mov	-20(r4),r13	;0xffec(r4)
    4518:	0e 43       	clr	r14		
    451a:	0f 43       	clr	r15		
    451c:	84 4c c2 ff 	mov	r12,	-62(r4)	;0xffc2(r4)
    4520:	84 4d c4 ff 	mov	r13,	-60(r4)	;0xffc4(r4)
    4524:	84 4e c6 ff 	mov	r14,	-58(r4)	;0xffc6(r4)
    4528:	84 4f c8 ff 	mov	r15,	-56(r4)	;0xffc8(r4)
    452c:	1c 44 c2 ff 	mov	-62(r4),r12	;0xffc2(r4)
    4530:	1d 44 c4 ff 	mov	-60(r4),r13	;0xffc4(r4)
    4534:	1e 44 c6 ff 	mov	-58(r4),r14	;0xffc6(r4)
    4538:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffc8(r4)
    453c:	0c d8       	bis	r8,	r12	
    453e:	0d d9       	bis	r9,	r13	
    4540:	0e da       	bis	r10,	r14	
    4542:	0f db       	bis	r11,	r15	
    4544:	84 4c ca ff 	mov	r12,	-54(r4)	;0xffca(r4)
    4548:	84 4d cc ff 	mov	r13,	-52(r4)	;0xffcc(r4)
    454c:	84 4e ce ff 	mov	r14,	-50(r4)	;0xffce(r4)
    4550:	84 4f d0 ff 	mov	r15,	-48(r4)	;0xffd0(r4)
    4554:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4558:	2c 4f       	mov	@r15,	r12	
    455a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    455e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4562:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4566:	08 4c       	mov	r12,	r8	
    4568:	09 4d       	mov	r13,	r9	
    456a:	0a 4e       	mov	r14,	r10	
    456c:	0b 4f       	mov	r15,	r11	
    456e:	4b ea       	xor.b	r10,	r11	
    4570:	0b ea       	xor	r10,	r11	
    4572:	8b 10       	swpb	r11		
    4574:	4a e9       	xor.b	r9,	r10	
    4576:	0a e9       	xor	r9,	r10	
    4578:	8a 10       	swpb	r10		
    457a:	49 e8       	xor.b	r8,	r9	
    457c:	09 e8       	xor	r8,	r9	
    457e:	89 10       	swpb	r9		
    4580:	48 48       	mov.b	r8,	r8	
    4582:	88 10       	swpb	r8		
    4584:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4588:	2c 4f       	mov	@r15,	r12	
    458a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    458e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4592:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4596:	3c f3       	and	#-1,	r12	;r3 As==11
    4598:	3d f3       	and	#-1,	r13	;r3 As==11
    459a:	3e f3       	and	#-1,	r14	;r3 As==11
    459c:	0f f3       	and	#0,	r15	;r3 As==00
    459e:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    45a2:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    45a6:	94 10 ee ff 	swpb	-18(r4)	;0xffee(r4)
    45aa:	1d 44 ee ff 	mov	-18(r4),r13	;0xffee(r4)
    45ae:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    45b2:	8e 10       	swpb	r14		
    45b4:	4d ee       	xor.b	r14,	r13	
    45b6:	0d ee       	xor	r14,	r13	
    45b8:	84 4e f0 ff 	mov	r14,	-16(r4)	;0xfff0(r4)
    45bc:	84 4d ee ff 	mov	r13,	-18(r4)	;0xffee(r4)
    45c0:	5f 44 f0 ff 	mov.b	-16(r4),r15	;0xfff0(r4)
    45c4:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    45c8:	1c 44 ee ff 	mov	-18(r4),r12	;0xffee(r4)
    45cc:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    45d0:	0e 43       	clr	r14		
    45d2:	0f 43       	clr	r15		
    45d4:	84 4c d2 ff 	mov	r12,	-46(r4)	;0xffd2(r4)
    45d8:	84 4d d4 ff 	mov	r13,	-44(r4)	;0xffd4(r4)
    45dc:	84 4e d6 ff 	mov	r14,	-42(r4)	;0xffd6(r4)
    45e0:	84 4f d8 ff 	mov	r15,	-40(r4)	;0xffd8(r4)
    45e4:	1c 44 d2 ff 	mov	-46(r4),r12	;0xffd2(r4)
    45e8:	1d 44 d4 ff 	mov	-44(r4),r13	;0xffd4(r4)
    45ec:	1e 44 d6 ff 	mov	-42(r4),r14	;0xffd6(r4)
    45f0:	1f 44 d8 ff 	mov	-40(r4),r15	;0xffd8(r4)
    45f4:	0c d8       	bis	r8,	r12	
    45f6:	0d d9       	bis	r9,	r13	
    45f8:	0e da       	bis	r10,	r14	
    45fa:	0f db       	bis	r11,	r15	
    45fc:	1c f4 ca ff 	and	-54(r4),r12	;0xffca(r4)
    4600:	1d f4 cc ff 	and	-52(r4),r13	;0xffcc(r4)
    4604:	1e f4 ce ff 	and	-50(r4),r14	;0xffce(r4)
    4608:	1f f4 d0 ff 	and	-48(r4),r15	;0xffd0(r4)
    460c:	18 44 ba ff 	mov	-70(r4),r8	;0xffba(r4)
    4610:	19 44 bc ff 	mov	-68(r4),r9	;0xffbc(r4)
    4614:	1a 44 be ff 	mov	-66(r4),r10	;0xffbe(r4)
    4618:	1b 44 c0 ff 	mov	-64(r4),r11	;0xffc0(r4)
    461c:	08 ec       	xor	r12,	r8	
    461e:	09 ed       	xor	r13,	r9	
    4620:	0a ee       	xor	r14,	r10	
    4622:	0b ef       	xor	r15,	r11	
    4624:	84 48 da ff 	mov	r8,	-38(r4)	;0xffda(r4)
    4628:	84 49 dc ff 	mov	r9,	-36(r4)	;0xffdc(r4)
    462c:	84 4a de ff 	mov	r10,	-34(r4)	;0xffde(r4)
    4630:	84 4b e0 ff 	mov	r11,	-32(r4)	;0xffe0(r4)
    4634:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4638:	2c 4f       	mov	@r15,	r12	
    463a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    463e:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4642:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4646:	08 4c       	mov	r12,	r8	
    4648:	09 4d       	mov	r13,	r9	
    464a:	0a 4e       	mov	r14,	r10	
    464c:	0b 4f       	mov	r15,	r11	
    464e:	08 58       	rla	r8		
    4650:	09 69       	rlc	r9		
    4652:	0a 6a       	rlc	r10		
    4654:	0b 6b       	rlc	r11		
    4656:	08 58       	rla	r8		
    4658:	09 69       	rlc	r9		
    465a:	0a 6a       	rlc	r10		
    465c:	0b 6b       	rlc	r11		
    465e:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    4662:	2c 4f       	mov	@r15,	r12	
    4664:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4668:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    466c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4670:	3c f3       	and	#-1,	r12	;r3 As==11
    4672:	3d f3       	and	#-1,	r13	;r3 As==11
    4674:	3e f3       	and	#-1,	r14	;r3 As==11
    4676:	0f f3       	and	#0,	r15	;r3 As==00
    4678:	06 4e       	mov	r14,	r6	
    467a:	07 4f       	mov	r15,	r7	
    467c:	86 10       	swpb	r6		
    467e:	87 10       	swpb	r7		
    4680:	46 e7       	xor.b	r7,	r6	
    4682:	06 e7       	xor	r7,	r6	
    4684:	47 47       	mov.b	r7,	r7	
    4686:	12 c3       	clrc			
    4688:	07 10       	rrc	r7		
    468a:	06 10       	rrc	r6		
    468c:	12 c3       	clrc			
    468e:	07 10       	rrc	r7		
    4690:	06 10       	rrc	r6		
    4692:	12 c3       	clrc			
    4694:	07 10       	rrc	r7		
    4696:	06 10       	rrc	r6		
    4698:	12 c3       	clrc			
    469a:	07 10       	rrc	r7		
    469c:	06 10       	rrc	r6		
    469e:	12 c3       	clrc			
    46a0:	07 10       	rrc	r7		
    46a2:	06 10       	rrc	r6		
    46a4:	12 c3       	clrc			
    46a6:	07 10       	rrc	r7		
    46a8:	06 10       	rrc	r6		
    46aa:	0c 46       	mov	r6,	r12	
    46ac:	0d 47       	mov	r7,	r13	
    46ae:	0e 43       	clr	r14		
    46b0:	0f 43       	clr	r15		
    46b2:	84 4c e2 ff 	mov	r12,	-30(r4)	;0xffe2(r4)
    46b6:	84 4d e4 ff 	mov	r13,	-28(r4)	;0xffe4(r4)
    46ba:	84 4e e6 ff 	mov	r14,	-26(r4)	;0xffe6(r4)
    46be:	84 4f e8 ff 	mov	r15,	-24(r4)	;0xffe8(r4)
    46c2:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffe2(r4)
    46c6:	1d 44 e4 ff 	mov	-28(r4),r13	;0xffe4(r4)
    46ca:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    46ce:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    46d2:	0c d8       	bis	r8,	r12	
    46d4:	0d d9       	bis	r9,	r13	
    46d6:	0e da       	bis	r10,	r14	
    46d8:	0f db       	bis	r11,	r15	
    46da:	18 44 da ff 	mov	-38(r4),r8	;0xffda(r4)
    46de:	19 44 dc ff 	mov	-36(r4),r9	;0xffdc(r4)
    46e2:	1a 44 de ff 	mov	-34(r4),r10	;0xffde(r4)
    46e6:	1b 44 e0 ff 	mov	-32(r4),r11	;0xffe0(r4)
    46ea:	08 ec       	xor	r12,	r8	
    46ec:	09 ed       	xor	r13,	r9	
    46ee:	0a ee       	xor	r14,	r10	
    46f0:	0b ef       	xor	r15,	r11	
    46f2:	5f 44 aa ff 	mov.b	-86(r4),r15	;0xffaa(r4)
    46f6:	0f 5f       	rla	r15		
    46f8:	0f 5f       	rla	r15		
    46fa:	0f 5f       	rla	r15		
    46fc:	1f 54 b8 ff 	add	-72(r4),r15	;0xffb8(r4)
    4700:	2c 4f       	mov	@r15,	r12	
    4702:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4706:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    470a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    470e:	0c e8       	xor	r8,	r12	
    4710:	0d e9       	xor	r9,	r13	
    4712:	0e ea       	xor	r10,	r14	
    4714:	0f eb       	xor	r11,	r15	
    4716:	1b 44 b6 ff 	mov	-74(r4),r11	;0xffb6(r4)
    471a:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    471e:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4722:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4726:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        crypt[1] = tmp;
    472a:	1f 44 b6 ff 	mov	-74(r4),r15	;0xffb6(r4)
    472e:	3f 52       	add	#8,	r15	;r2 As==11
    4730:	9f 44 ac ff 	mov	-84(r4),0(r15)	;0xffac(r4), 0x0000(r15)
    4734:	00 00 
    4736:	9f 44 ae ff 	mov	-82(r4),2(r15)	;0xffae(r4), 0x0002(r15)
    473a:	02 00 
    473c:	9f 44 b0 ff 	mov	-80(r4),4(r15)	;0xffb0(r4), 0x0004(r15)
    4740:	04 00 
    4742:	9f 44 b2 ff 	mov	-78(r4),6(r15)	;0xffb2(r4), 0x0006(r15)
    4746:	06 00 
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<52 ; i++ )
    4748:	d4 53 aa ff 	inc.b	-86(r4)	;0xffaa(r4)
    474c:	f4 90 34 00 	cmp.b	#52,	-86(r4)	;#0x0034, 0xffaa(r4)
    4750:	aa ff 
    4752:	02 2c       	jc	$+6      	;abs 0x4758
    4754:	30 40 2e 44 	br	#0x442e	
    {
        tmp = crypt[0];
        crypt[0] = crypt[1] ^ ((ROTATE_LEFT_48(crypt[0],1)) & (ROTATE_LEFT_48(crypt[0],8))) ^ (ROTATE_LEFT_48(crypt[0],2)) ^ key[i];
        crypt[1] = tmp;
    }
}
    4758:	31 50 48 00 	add	#72,	r1	;#0x0048
    475c:	34 41       	pop	r4		
    475e:	36 41       	pop	r6		
    4760:	37 41       	pop	r7		
    4762:	38 41       	pop	r8		
    4764:	39 41       	pop	r9		
    4766:	3a 41       	pop	r10		
    4768:	3b 41       	pop	r11		
    476a:	30 41       	ret			

0000476c <Decrypt>:

void Decrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    476c:	0b 12       	push	r11		
    476e:	0a 12       	push	r10		
    4770:	09 12       	push	r9		
    4772:	08 12       	push	r8		
    4774:	07 12       	push	r7		
    4776:	06 12       	push	r6		
    4778:	05 12       	push	r5		
    477a:	04 12       	push	r4		
    477c:	04 41       	mov	r1,	r4	
    477e:	34 50 10 00 	add	#16,	r4	;#0x0010
    4782:	31 50 b8 ff 	add	#-72,	r1	;#0xffb8
    4786:	84 4f b2 ff 	mov	r15,	-78(r4)	;0xffb2(r4)
    478a:	84 4e b4 ff 	mov	r14,	-76(r4)	;0xffb4(r4)
    478e:	84 4d b6 ff 	mov	r13,	-74(r4)	;0xffb6(r4)
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    4792:	1f 44 b2 ff 	mov	-78(r4),r15	;0xffb2(r4)
    4796:	2c 4f       	mov	@r15,	r12	
    4798:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    479c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    47a0:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    47a4:	1b 44 b4 ff 	mov	-76(r4),r11	;0xffb4(r4)
    47a8:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    47ac:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    47b0:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    47b4:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    47b8:	1b 44 b4 ff 	mov	-76(r4),r11	;0xffb4(r4)
    47bc:	3b 52       	add	#8,	r11	;r2 As==11
    47be:	1f 44 b2 ff 	mov	-78(r4),r15	;0xffb2(r4)
    47c2:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    47c6:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    47ca:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    47ce:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    47d2:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    47d6:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    47da:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    47de:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<52 ; i++ )
    47e2:	c4 43 a8 ff 	mov.b	#0,	-88(r4)	;r3 As==00, 0xffa8(r4)
    47e6:	30 40 1a 4b 	br	#0x4b1a	
    {
        tmp = crypt[1];
    47ea:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    47ee:	94 4f 08 00 	mov	8(r15),	-86(r4)	;0x0008(r15), 0xffaa(r4)
    47f2:	aa ff 
    47f4:	94 4f 0a 00 	mov	10(r15),-84(r4)	;0x000a(r15), 0xffac(r4)
    47f8:	ac ff 
    47fa:	94 4f 0c 00 	mov	12(r15),-82(r4)	;0x000c(r15), 0xffae(r4)
    47fe:	ae ff 
    4800:	94 4f 0e 00 	mov	14(r15),-80(r4)	;0x000e(r15), 0xffb0(r4)
    4804:	b0 ff 
        crypt[1] = crypt[0] ^ ((ROTATE_LEFT_48(crypt[1],1)) & (ROTATE_LEFT_48(crypt[1],8))) ^ (ROTATE_LEFT_48(crypt[1],2)) ^ key[51-i];
    4806:	15 44 b4 ff 	mov	-76(r4),r5	;0xffb4(r4)
    480a:	35 52       	add	#8,	r5	;r2 As==11
    480c:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4810:	a4 4f b8 ff 	mov	@r15,	-72(r4)	;0xffb8(r4)
    4814:	94 4f 02 00 	mov	2(r15),	-70(r4)	;0x0002(r15), 0xffba(r4)
    4818:	ba ff 
    481a:	94 4f 04 00 	mov	4(r15),	-68(r4)	;0x0004(r15), 0xffbc(r4)
    481e:	bc ff 
    4820:	94 4f 06 00 	mov	6(r15),	-66(r4)	;0x0006(r15), 0xffbe(r4)
    4824:	be ff 
    4826:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    482a:	3f 52       	add	#8,	r15	;r2 As==11
    482c:	2c 4f       	mov	@r15,	r12	
    482e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4832:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4836:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    483a:	08 4c       	mov	r12,	r8	
    483c:	09 4d       	mov	r13,	r9	
    483e:	0a 4e       	mov	r14,	r10	
    4840:	0b 4f       	mov	r15,	r11	
    4842:	08 58       	rla	r8		
    4844:	09 69       	rlc	r9		
    4846:	0a 6a       	rlc	r10		
    4848:	0b 6b       	rlc	r11		
    484a:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    484e:	3f 52       	add	#8,	r15	;r2 As==11
    4850:	2c 4f       	mov	@r15,	r12	
    4852:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4856:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    485a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    485e:	3c f3       	and	#-1,	r12	;r3 As==11
    4860:	3d f3       	and	#-1,	r13	;r3 As==11
    4862:	3e f3       	and	#-1,	r14	;r3 As==11
    4864:	0f f3       	and	#0,	r15	;r3 As==00
    4866:	84 4e e8 ff 	mov	r14,	-24(r4)	;0xffe8(r4)
    486a:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
    486e:	94 10 e8 ff 	swpb	-24(r4)	;0xffe8(r4)
    4872:	1c 44 e8 ff 	mov	-24(r4),r12	;0xffe8(r4)
    4876:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    487a:	8d 10       	swpb	r13		
    487c:	4c ed       	xor.b	r13,	r12	
    487e:	0c ed       	xor	r13,	r12	
    4880:	84 4d ea ff 	mov	r13,	-22(r4)	;0xffea(r4)
    4884:	84 4c e8 ff 	mov	r12,	-24(r4)	;0xffe8(r4)
    4888:	5e 44 ea ff 	mov.b	-22(r4),r14	;0xffea(r4)
    488c:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
    4890:	12 c3       	clrc			
    4892:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    4896:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    489a:	12 c3       	clrc			
    489c:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48a0:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48a4:	12 c3       	clrc			
    48a6:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48aa:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48ae:	12 c3       	clrc			
    48b0:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48b4:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48b8:	12 c3       	clrc			
    48ba:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48be:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48c2:	12 c3       	clrc			
    48c4:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48c8:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48cc:	12 c3       	clrc			
    48ce:	14 10 ea ff 	rrc	-22(r4)	;0xffea(r4)
    48d2:	14 10 e8 ff 	rrc	-24(r4)	;0xffe8(r4)
    48d6:	1c 44 e8 ff 	mov	-24(r4),r12	;0xffe8(r4)
    48da:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    48de:	0e 43       	clr	r14		
    48e0:	0f 43       	clr	r15		
    48e2:	84 4c c0 ff 	mov	r12,	-64(r4)	;0xffc0(r4)
    48e6:	84 4d c2 ff 	mov	r13,	-62(r4)	;0xffc2(r4)
    48ea:	84 4e c4 ff 	mov	r14,	-60(r4)	;0xffc4(r4)
    48ee:	84 4f c6 ff 	mov	r15,	-58(r4)	;0xffc6(r4)
    48f2:	1c 44 c0 ff 	mov	-64(r4),r12	;0xffc0(r4)
    48f6:	1d 44 c2 ff 	mov	-62(r4),r13	;0xffc2(r4)
    48fa:	1e 44 c4 ff 	mov	-60(r4),r14	;0xffc4(r4)
    48fe:	1f 44 c6 ff 	mov	-58(r4),r15	;0xffc6(r4)
    4902:	0c d8       	bis	r8,	r12	
    4904:	0d d9       	bis	r9,	r13	
    4906:	0e da       	bis	r10,	r14	
    4908:	0f db       	bis	r11,	r15	
    490a:	84 4c c8 ff 	mov	r12,	-56(r4)	;0xffc8(r4)
    490e:	84 4d ca ff 	mov	r13,	-54(r4)	;0xffca(r4)
    4912:	84 4e cc ff 	mov	r14,	-52(r4)	;0xffcc(r4)
    4916:	84 4f ce ff 	mov	r15,	-50(r4)	;0xffce(r4)
    491a:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    491e:	3f 52       	add	#8,	r15	;r2 As==11
    4920:	2c 4f       	mov	@r15,	r12	
    4922:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4926:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    492a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    492e:	08 4c       	mov	r12,	r8	
    4930:	09 4d       	mov	r13,	r9	
    4932:	0a 4e       	mov	r14,	r10	
    4934:	0b 4f       	mov	r15,	r11	
    4936:	4b ea       	xor.b	r10,	r11	
    4938:	0b ea       	xor	r10,	r11	
    493a:	8b 10       	swpb	r11		
    493c:	4a e9       	xor.b	r9,	r10	
    493e:	0a e9       	xor	r9,	r10	
    4940:	8a 10       	swpb	r10		
    4942:	49 e8       	xor.b	r8,	r9	
    4944:	09 e8       	xor	r8,	r9	
    4946:	89 10       	swpb	r9		
    4948:	48 48       	mov.b	r8,	r8	
    494a:	88 10       	swpb	r8		
    494c:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4950:	3f 52       	add	#8,	r15	;r2 As==11
    4952:	2c 4f       	mov	@r15,	r12	
    4954:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4958:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    495c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4960:	3c f3       	and	#-1,	r12	;r3 As==11
    4962:	3d f3       	and	#-1,	r13	;r3 As==11
    4964:	3e f3       	and	#-1,	r14	;r3 As==11
    4966:	0f f3       	and	#0,	r15	;r3 As==00
    4968:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
    496c:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    4970:	94 10 ec ff 	swpb	-20(r4)	;0xffec(r4)
    4974:	1d 44 ec ff 	mov	-20(r4),r13	;0xffec(r4)
    4978:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    497c:	8e 10       	swpb	r14		
    497e:	4d ee       	xor.b	r14,	r13	
    4980:	0d ee       	xor	r14,	r13	
    4982:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    4986:	84 4d ec ff 	mov	r13,	-20(r4)	;0xffec(r4)
    498a:	5f 44 ee ff 	mov.b	-18(r4),r15	;0xffee(r4)
    498e:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    4992:	1c 44 ec ff 	mov	-20(r4),r12	;0xffec(r4)
    4996:	1d 44 ee ff 	mov	-18(r4),r13	;0xffee(r4)
    499a:	0e 43       	clr	r14		
    499c:	0f 43       	clr	r15		
    499e:	84 4c d0 ff 	mov	r12,	-48(r4)	;0xffd0(r4)
    49a2:	84 4d d2 ff 	mov	r13,	-46(r4)	;0xffd2(r4)
    49a6:	84 4e d4 ff 	mov	r14,	-44(r4)	;0xffd4(r4)
    49aa:	84 4f d6 ff 	mov	r15,	-42(r4)	;0xffd6(r4)
    49ae:	1c 44 d0 ff 	mov	-48(r4),r12	;0xffd0(r4)
    49b2:	1d 44 d2 ff 	mov	-46(r4),r13	;0xffd2(r4)
    49b6:	1e 44 d4 ff 	mov	-44(r4),r14	;0xffd4(r4)
    49ba:	1f 44 d6 ff 	mov	-42(r4),r15	;0xffd6(r4)
    49be:	0c d8       	bis	r8,	r12	
    49c0:	0d d9       	bis	r9,	r13	
    49c2:	0e da       	bis	r10,	r14	
    49c4:	0f db       	bis	r11,	r15	
    49c6:	1c f4 c8 ff 	and	-56(r4),r12	;0xffc8(r4)
    49ca:	1d f4 ca ff 	and	-54(r4),r13	;0xffca(r4)
    49ce:	1e f4 cc ff 	and	-52(r4),r14	;0xffcc(r4)
    49d2:	1f f4 ce ff 	and	-50(r4),r15	;0xffce(r4)
    49d6:	18 44 b8 ff 	mov	-72(r4),r8	;0xffb8(r4)
    49da:	19 44 ba ff 	mov	-70(r4),r9	;0xffba(r4)
    49de:	1a 44 bc ff 	mov	-68(r4),r10	;0xffbc(r4)
    49e2:	1b 44 be ff 	mov	-66(r4),r11	;0xffbe(r4)
    49e6:	08 ec       	xor	r12,	r8	
    49e8:	09 ed       	xor	r13,	r9	
    49ea:	0a ee       	xor	r14,	r10	
    49ec:	0b ef       	xor	r15,	r11	
    49ee:	84 48 d8 ff 	mov	r8,	-40(r4)	;0xffd8(r4)
    49f2:	84 49 da ff 	mov	r9,	-38(r4)	;0xffda(r4)
    49f6:	84 4a dc ff 	mov	r10,	-36(r4)	;0xffdc(r4)
    49fa:	84 4b de ff 	mov	r11,	-34(r4)	;0xffde(r4)
    49fe:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4a02:	3f 52       	add	#8,	r15	;r2 As==11
    4a04:	2c 4f       	mov	@r15,	r12	
    4a06:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a0a:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a0e:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a12:	08 4c       	mov	r12,	r8	
    4a14:	09 4d       	mov	r13,	r9	
    4a16:	0a 4e       	mov	r14,	r10	
    4a18:	0b 4f       	mov	r15,	r11	
    4a1a:	08 58       	rla	r8		
    4a1c:	09 69       	rlc	r9		
    4a1e:	0a 6a       	rlc	r10		
    4a20:	0b 6b       	rlc	r11		
    4a22:	08 58       	rla	r8		
    4a24:	09 69       	rlc	r9		
    4a26:	0a 6a       	rlc	r10		
    4a28:	0b 6b       	rlc	r11		
    4a2a:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4a2e:	3f 52       	add	#8,	r15	;r2 As==11
    4a30:	2c 4f       	mov	@r15,	r12	
    4a32:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4a36:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4a3a:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4a3e:	3c f3       	and	#-1,	r12	;r3 As==11
    4a40:	3d f3       	and	#-1,	r13	;r3 As==11
    4a42:	3e f3       	and	#-1,	r14	;r3 As==11
    4a44:	0f f3       	and	#0,	r15	;r3 As==00
    4a46:	06 4e       	mov	r14,	r6	
    4a48:	07 4f       	mov	r15,	r7	
    4a4a:	86 10       	swpb	r6		
    4a4c:	87 10       	swpb	r7		
    4a4e:	46 e7       	xor.b	r7,	r6	
    4a50:	06 e7       	xor	r7,	r6	
    4a52:	47 47       	mov.b	r7,	r7	
    4a54:	12 c3       	clrc			
    4a56:	07 10       	rrc	r7		
    4a58:	06 10       	rrc	r6		
    4a5a:	12 c3       	clrc			
    4a5c:	07 10       	rrc	r7		
    4a5e:	06 10       	rrc	r6		
    4a60:	12 c3       	clrc			
    4a62:	07 10       	rrc	r7		
    4a64:	06 10       	rrc	r6		
    4a66:	12 c3       	clrc			
    4a68:	07 10       	rrc	r7		
    4a6a:	06 10       	rrc	r6		
    4a6c:	12 c3       	clrc			
    4a6e:	07 10       	rrc	r7		
    4a70:	06 10       	rrc	r6		
    4a72:	12 c3       	clrc			
    4a74:	07 10       	rrc	r7		
    4a76:	06 10       	rrc	r6		
    4a78:	0c 46       	mov	r6,	r12	
    4a7a:	0d 47       	mov	r7,	r13	
    4a7c:	0e 43       	clr	r14		
    4a7e:	0f 43       	clr	r15		
    4a80:	84 4c e0 ff 	mov	r12,	-32(r4)	;0xffe0(r4)
    4a84:	84 4d e2 ff 	mov	r13,	-30(r4)	;0xffe2(r4)
    4a88:	84 4e e4 ff 	mov	r14,	-28(r4)	;0xffe4(r4)
    4a8c:	84 4f e6 ff 	mov	r15,	-26(r4)	;0xffe6(r4)
    4a90:	1c 44 e0 ff 	mov	-32(r4),r12	;0xffe0(r4)
    4a94:	1d 44 e2 ff 	mov	-30(r4),r13	;0xffe2(r4)
    4a98:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffe4(r4)
    4a9c:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    4aa0:	0c d8       	bis	r8,	r12	
    4aa2:	0d d9       	bis	r9,	r13	
    4aa4:	0e da       	bis	r10,	r14	
    4aa6:	0f db       	bis	r11,	r15	
    4aa8:	18 44 d8 ff 	mov	-40(r4),r8	;0xffd8(r4)
    4aac:	19 44 da ff 	mov	-38(r4),r9	;0xffda(r4)
    4ab0:	1a 44 dc ff 	mov	-36(r4),r10	;0xffdc(r4)
    4ab4:	1b 44 de ff 	mov	-34(r4),r11	;0xffde(r4)
    4ab8:	08 ec       	xor	r12,	r8	
    4aba:	09 ed       	xor	r13,	r9	
    4abc:	0a ee       	xor	r14,	r10	
    4abe:	0b ef       	xor	r15,	r11	
    4ac0:	5e 44 a8 ff 	mov.b	-88(r4),r14	;0xffa8(r4)
    4ac4:	3f 40 33 00 	mov	#51,	r15	;#0x0033
    4ac8:	0f 8e       	sub	r14,	r15	
    4aca:	0f 5f       	rla	r15		
    4acc:	0f 5f       	rla	r15		
    4ace:	0f 5f       	rla	r15		
    4ad0:	1f 54 b6 ff 	add	-74(r4),r15	;0xffb6(r4)
    4ad4:	2c 4f       	mov	@r15,	r12	
    4ad6:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4ada:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4ade:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4ae2:	0c e8       	xor	r8,	r12	
    4ae4:	0d e9       	xor	r9,	r13	
    4ae6:	0e ea       	xor	r10,	r14	
    4ae8:	0f eb       	xor	r11,	r15	
    4aea:	85 4c 00 00 	mov	r12,	0(r5)	;0x0000(r5)
    4aee:	85 4d 02 00 	mov	r13,	2(r5)	;0x0002(r5)
    4af2:	85 4e 04 00 	mov	r14,	4(r5)	;0x0004(r5)
    4af6:	85 4f 06 00 	mov	r15,	6(r5)	;0x0006(r5)
        crypt[0] = tmp;
    4afa:	1f 44 b4 ff 	mov	-76(r4),r15	;0xffb4(r4)
    4afe:	9f 44 aa ff 	mov	-86(r4),0(r15)	;0xffaa(r4), 0x0000(r15)
    4b02:	00 00 
    4b04:	9f 44 ac ff 	mov	-84(r4),2(r15)	;0xffac(r4), 0x0002(r15)
    4b08:	02 00 
    4b0a:	9f 44 ae ff 	mov	-82(r4),4(r15)	;0xffae(r4), 0x0004(r15)
    4b0e:	04 00 
    4b10:	9f 44 b0 ff 	mov	-80(r4),6(r15)	;0xffb0(r4), 0x0006(r15)
    4b14:	06 00 
    u8 i;
    u64 tmp;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<52 ; i++ )
    4b16:	d4 53 a8 ff 	inc.b	-88(r4)	;0xffa8(r4)
    4b1a:	f4 90 34 00 	cmp.b	#52,	-88(r4)	;#0x0034, 0xffa8(r4)
    4b1e:	a8 ff 
    4b20:	02 2c       	jc	$+6      	;abs 0x4b26
    4b22:	30 40 ea 47 	br	#0x47ea	
    {
        tmp = crypt[1];
        crypt[1] = crypt[0] ^ ((ROTATE_LEFT_48(crypt[1],1)) & (ROTATE_LEFT_48(crypt[1],8))) ^ (ROTATE_LEFT_48(crypt[1],2)) ^ key[51-i];
        crypt[0] = tmp;
    }
}
    4b26:	31 50 48 00 	add	#72,	r1	;#0x0048
    4b2a:	34 41       	pop	r4		
    4b2c:	35 41       	pop	r5		
    4b2e:	36 41       	pop	r6		
    4b30:	37 41       	pop	r7		
    4b32:	38 41       	pop	r8		
    4b34:	39 41       	pop	r9		
    4b36:	3a 41       	pop	r10		
    4b38:	3b 41       	pop	r11		
    4b3a:	30 41       	ret			

00004b3c <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4b3c:	04 12       	push	r4		
    4b3e:	04 41       	mov	r1,	r4	
    4b40:	24 53       	incd	r4		
    4b42:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4b46:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b4a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4b4e:	0d 3c       	jmp	$+28     	;abs 0x4b6a
    {
      for (i = 0; i<d; i++) 
    4b50:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4b54:	04 3c       	jmp	$+10     	;abs 0x4b5e
	{
	  nop();
    4b56:	03 43       	nop			
	  nop();
    4b58:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4b5a:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4b5e:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4b62:	f8 ff 
    4b64:	f8 2b       	jnc	$-14     	;abs 0x4b56
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4b66:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4b6a:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4b6e:	fa ff 
    4b70:	ef 2b       	jnc	$-32     	;abs 0x4b50
	{
	  nop();
	  nop();
	}
    }
}
    4b72:	31 50 06 00 	add	#6,	r1	;#0x0006
    4b76:	34 41       	pop	r4		
    4b78:	30 41       	ret			

00004b7a <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4b7a:	04 12       	push	r4		
    4b7c:	04 41       	mov	r1,	r4	
    4b7e:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4b80:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4b84:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4b86:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4b8a:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4b8e:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4b92:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4b96:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4b9a:	5f 42 05 00 	mov.b	&0x0005,r15	
    4b9e:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4ba2:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4ba6:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4baa:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4bae:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4bb0:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4bb4:	79 00 
  U1RCTL = 0;
    4bb6:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4bba:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4bbe:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4bc2:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4bc4:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4bc8:	7b 00 

  delay(0x800);
    4bca:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4bce:	b0 12 3c 4b 	call	#0x4b3c	
  return 0;
    4bd2:	0f 43       	clr	r15		
}
    4bd4:	34 41       	pop	r4		
    4bd6:	30 41       	ret			

00004bd8 <uart1_putchar>:

int uart1_putchar(int c)
{
    4bd8:	04 12       	push	r4		
    4bda:	04 41       	mov	r1,	r4	
    4bdc:	24 53       	incd	r4		
    4bde:	21 83       	decd	r1		
    4be0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4be4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4be8:	4f 4f       	mov.b	r15,	r15	
    4bea:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4bee:	03 43       	nop			
    4bf0:	5f 42 79 00 	mov.b	&0x0079,r15	
    4bf4:	4f 4f       	mov.b	r15,	r15	
    4bf6:	1f f3       	and	#1,	r15	;r3 As==01
    4bf8:	0f 93       	tst	r15		
    4bfa:	fa 27       	jz	$-10     	;abs 0x4bf0
  return (unsigned char)c;
    4bfc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c00:	4f 4f       	mov.b	r15,	r15	
    4c02:	4f 4f       	mov.b	r15,	r15	
}
    4c04:	21 53       	incd	r1		
    4c06:	34 41       	pop	r4		
    4c08:	30 41       	ret			

00004c0a <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4c0a:	04 12       	push	r4		
    4c0c:	04 41       	mov	r1,	r4	
    4c0e:	24 53       	incd	r4		
    4c10:	21 83       	decd	r1		
    4c12:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4c16:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4c1a:	b0 12 d8 4b 	call	#0x4bd8	
}
    4c1e:	21 53       	incd	r1		
    4c20:	34 41       	pop	r4		
    4c22:	30 41       	ret			

00004c24 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4c24:	04 12       	push	r4		
    4c26:	04 41       	mov	r1,	r4	
    4c28:	24 53       	incd	r4		
  ;
}
    4c2a:	34 41       	pop	r4		
    4c2c:	30 41       	ret			

00004c2e <start_decrypt>:
void
start_decrypt()
{
    4c2e:	04 12       	push	r4		
    4c30:	04 41       	mov	r1,	r4	
    4c32:	24 53       	incd	r4		
  ;
}
    4c34:	34 41       	pop	r4		
    4c36:	30 41       	ret			

00004c38 <end_expe>:


void
end_expe()
{
    4c38:	04 12       	push	r4		
    4c3a:	04 41       	mov	r1,	r4	
    4c3c:	24 53       	incd	r4		
  ;
}
    4c3e:	34 41       	pop	r4		
    4c40:	30 41       	ret			

00004c42 <_unexpected_>:
    4c42:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	32 41 32 41 32 41 32 41 32 41 32 41 32 41 32 41     2A2A2A2A2A2A2A2A
    fff0:	32 41 32 41 32 41 32 41 32 41 32 41 32 41 00 40     2A2A2A2A2A2A2A.@
