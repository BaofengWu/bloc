
speck128_128.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 speck128_128.c
0000416a l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00000000 l    df *ABS*	00000000 memset.c
00004710 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
0000416a  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
0000416a  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000453e g     F .text	00000104 Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
000047b4 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004680 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
00004164  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
0000416a  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
0000473e g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000416e g     F .text	000001e8 KeyExpansion
0000019e g       *ABS*	00000000 __TBCCR6
0000416a  w      .text	00000000 __isr_5
000047b4 g       *ABS*	00000000 __data_load_start
0000416a g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
0000416a  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
0000416a  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
0000416a  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
0000416a  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
000047b2  w      .text	00000000 _unexpected_
0000416a  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
0000416a  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
000046de g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
0000416a g       .text	00000000 __ctors_start
0000416a  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .text	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
00004748 g     F .text	0000006a memset
0000403e g     F .text	00000126 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
0000416a  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004642 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
0000416a  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
0000416a g       .text	00000000 __dtors_start
0000416a  w      .text	00000000 __isr_6
0000416a g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
0000416a  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .text	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
0000472a g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
00004164  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004734 g     F .text	0000000a start_decrypt
00001100 g       .text	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00004356 g     F .text	000001e8 Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f b4 47 	mov	18356(r15),4352(r15);0x47b4(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
        crypt[0] = ROTATE_LEFT_64( (crypt[0] ^ key[31-i]) - crypt[1], 8 );
    }
}

int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 e0 fd 	add	#-544,	r1	;#0xfde0

    u64 text[2];
    text[0] = 0x6c61766975716520;
    4046:	b4 40 20 65 	mov	#25888,	-546(r4);#0x6520, 0xfdde(r4)
    404a:	de fd 
    404c:	b4 40 71 75 	mov	#30065,	-544(r4);#0x7571, 0xfde0(r4)
    4050:	e0 fd 
    4052:	b4 40 69 76 	mov	#30313,	-542(r4);#0x7669, 0xfde2(r4)
    4056:	e2 fd 
    4058:	b4 40 61 6c 	mov	#27745,	-540(r4);#0x6c61, 0xfde4(r4)
    405c:	e4 fd 
    text[1] = 0x7469206564616d20;
    405e:	b4 40 20 6d 	mov	#27936,	-538(r4);#0x6d20, 0xfde6(r4)
    4062:	e6 fd 
    4064:	b4 40 61 64 	mov	#25697,	-536(r4);#0x6461, 0xfde8(r4)
    4068:	e8 fd 
    406a:	b4 40 65 20 	mov	#8293,	-534(r4);#0x2065, 0xfdea(r4)
    406e:	ea fd 
    4070:	b4 40 69 74 	mov	#29801,	-532(r4);#0x7469, 0xfdec(r4)
    4074:	ec fd 
    u64 crypt[2] = {0};
    4076:	0f 44       	mov	r4,	r15	
    4078:	3f 50 ee fd 	add	#-530,	r15	;#0xfdee
    407c:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4080:	2f 53       	incd	r15		
    4082:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4086:	2f 53       	incd	r15		
    4088:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    408c:	2f 53       	incd	r15		
    408e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4092:	2f 53       	incd	r15		
    4094:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4098:	2f 53       	incd	r15		
    409a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    409e:	2f 53       	incd	r15		
    40a0:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40a4:	2f 53       	incd	r15		
    40a6:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    40aa:	2f 53       	incd	r15		
    u64 l[32] = {0};
    40ac:	0f 44       	mov	r4,	r15	
    40ae:	3f 50 fe fd 	add	#-514,	r15	;#0xfdfe
    40b2:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    40b6:	0d 4e       	mov	r14,	r13	
    40b8:	0e 43       	clr	r14		
    40ba:	b0 12 48 47 	call	#0x4748	
    u64 k[32] = {0};
    40be:	0f 44       	mov	r4,	r15	
    40c0:	3f 50 fe fe 	add	#-258,	r15	;#0xfefe
    40c4:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    40c8:	0d 4e       	mov	r14,	r13	
    40ca:	0e 43       	clr	r14		
    40cc:	b0 12 48 47 	call	#0x4748	
    l[0] = 0x0f0e0d0c0b0a0908;
    40d0:	b4 40 08 09 	mov	#2312,	-514(r4);#0x0908, 0xfdfe(r4)
    40d4:	fe fd 
    40d6:	b4 40 0a 0b 	mov	#2826,	-512(r4);#0x0b0a, 0xfe00(r4)
    40da:	00 fe 
    40dc:	b4 40 0c 0d 	mov	#3340,	-510(r4);#0x0d0c, 0xfe02(r4)
    40e0:	02 fe 
    40e2:	b4 40 0e 0f 	mov	#3854,	-508(r4);#0x0f0e, 0xfe04(r4)
    40e6:	04 fe 
    k[0] = 0x0706050403020100;
    40e8:	b4 40 00 01 	mov	#256,	-258(r4);#0x0100, 0xfefe(r4)
    40ec:	fe fe 
    40ee:	b4 40 02 03 	mov	#770,	-256(r4);#0x0302, 0xff00(r4)
    40f2:	00 ff 
    40f4:	b4 40 04 05 	mov	#1284,	-254(r4);#0x0504, 0xff02(r4)
    40f8:	02 ff 
    40fa:	b4 40 06 07 	mov	#1798,	-252(r4);#0x0706, 0xff04(r4)
    40fe:	04 ff 

	START_ENCRYPT();
    4100:	b0 12 2a 47 	call	#0x472a	
    KeyExpansion ( l, k );
    4104:	0e 44       	mov	r4,	r14	
    4106:	3e 50 fe fe 	add	#-258,	r14	;#0xfefe
    410a:	0f 44       	mov	r4,	r15	
    410c:	3f 50 fe fd 	add	#-514,	r15	;#0xfdfe
    4110:	b0 12 6e 41 	call	#0x416e	
    Encrypt ( text, crypt, k );
    4114:	0e 44       	mov	r4,	r14	
    4116:	3e 50 fe fe 	add	#-258,	r14	;#0xfefe
    411a:	0f 44       	mov	r4,	r15	
    411c:	3f 50 ee fd 	add	#-530,	r15	;#0xfdee
    4120:	0d 4e       	mov	r14,	r13	
    4122:	0e 4f       	mov	r15,	r14	
    4124:	0f 44       	mov	r4,	r15	
    4126:	3f 50 de fd 	add	#-546,	r15	;#0xfdde
    412a:	b0 12 56 43 	call	#0x4356	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	START_DECRYPT();
    412e:	b0 12 34 47 	call	#0x4734	
    KeyExpansion ( l, k );
    4132:	0e 44       	mov	r4,	r14	
    4134:	3e 50 fe fe 	add	#-258,	r14	;#0xfefe
    4138:	0f 44       	mov	r4,	r15	
    413a:	3f 50 fe fd 	add	#-514,	r15	;#0xfdfe
    413e:	b0 12 6e 41 	call	#0x416e	
    Decrypt ( crypt, text, k );
    4142:	0e 44       	mov	r4,	r14	
    4144:	3e 50 fe fe 	add	#-258,	r14	;#0xfefe
    4148:	0f 44       	mov	r4,	r15	
    414a:	3f 50 ee fd 	add	#-530,	r15	;#0xfdee
    414e:	0d 4e       	mov	r14,	r13	
    4150:	0e 44       	mov	r4,	r14	
    4152:	3e 50 de fd 	add	#-546,	r14	;#0xfdde
    4156:	b0 12 3e 45 	call	#0x453e	
    //printf("%llx %llx\n%llx %llx\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	END_EXPE();
    415a:	b0 12 3e 47 	call	#0x473e	

    return 0;
    415e:	0f 43       	clr	r15		
}
    4160:	31 50 20 02 	add	#544,	r1	;#0x0220

00004164 <__stop_progExec__>:
    4164:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    4168:	fd 3f       	jmp	$-4      	;abs 0x4164

0000416a <__ctors_end>:
    416a:	30 40 b2 47 	br	#0x47b2	

0000416e <KeyExpansion>:
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint64_t u64;

void KeyExpansion ( u64 l[], u64 k[] )
{
    416e:	0b 12       	push	r11		
    4170:	0a 12       	push	r10		
    4172:	09 12       	push	r9		
    4174:	08 12       	push	r8		
    4176:	07 12       	push	r7		
    4178:	06 12       	push	r6		
    417a:	05 12       	push	r5		
    417c:	04 12       	push	r4		
    417e:	04 41       	mov	r1,	r4	
    4180:	34 50 10 00 	add	#16,	r4	;#0x0010
    4184:	31 50 de ff 	add	#-34,	r1	;#0xffde
    4188:	84 4f d0 ff 	mov	r15,	-48(r4)	;0xffd0(r4)
    418c:	84 4e d2 ff 	mov	r14,	-46(r4)	;0xffd2(r4)
    u8 i;
    for ( i=0 ; i<31 ; i++ )
    4190:	c4 43 ce ff 	mov.b	#0,	-50(r4)	;r3 As==00, 0xffce(r4)
    4194:	d1 3c       	jmp	$+420    	;abs 0x4338
    {
        l[i+1] = ( k[i] + ROTATE_RIGHT_64(l[i], 8) ) ^ i;
    4196:	5f 44 ce ff 	mov.b	-50(r4),r15	;0xffce(r4)
    419a:	1f 53       	inc	r15		
    419c:	0f 5f       	rla	r15		
    419e:	0f 5f       	rla	r15		
    41a0:	0f 5f       	rla	r15		
    41a2:	1b 44 d0 ff 	mov	-48(r4),r11	;0xffd0(r4)
    41a6:	0b 5f       	add	r15,	r11	
    41a8:	84 4b d4 ff 	mov	r11,	-44(r4)	;0xffd4(r4)
    41ac:	5f 44 ce ff 	mov.b	-50(r4),r15	;0xffce(r4)
    41b0:	0f 5f       	rla	r15		
    41b2:	0f 5f       	rla	r15		
    41b4:	0f 5f       	rla	r15		
    41b6:	1f 54 d2 ff 	add	-46(r4),r15	;0xffd2(r4)
    41ba:	28 4f       	mov	@r15,	r8	
    41bc:	19 4f 02 00 	mov	2(r15),	r9	;0x0002(r15)
    41c0:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    41c4:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    41c8:	5f 44 ce ff 	mov.b	-50(r4),r15	;0xffce(r4)
    41cc:	0f 5f       	rla	r15		
    41ce:	0f 5f       	rla	r15		
    41d0:	0f 5f       	rla	r15		
    41d2:	1f 54 d0 ff 	add	-48(r4),r15	;0xffd0(r4)
    41d6:	2c 4f       	mov	@r15,	r12	
    41d8:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    41dc:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    41e0:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    41e4:	06 4c       	mov	r12,	r6	
    41e6:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    41ea:	05 43       	clr	r5		
    41ec:	07 43       	clr	r7		
    41ee:	46 46       	mov.b	r6,	r6	
    41f0:	86 10       	swpb	r6		
    41f2:	84 47 e6 ff 	mov	r7,	-26(r4)	;0xffe6(r4)
    41f6:	84 45 e8 ff 	mov	r5,	-24(r4)	;0xffe8(r4)
    41fa:	94 44 ee ff 	mov	-18(r4),-22(r4)	;0xffee(r4), 0xffea(r4)
    41fe:	ea ff 
    4200:	84 46 ec ff 	mov	r6,	-20(r4)	;0xffec(r4)
    4204:	8c 10       	swpb	r12		
    4206:	8d 10       	swpb	r13		
    4208:	4c ed       	xor.b	r13,	r12	
    420a:	0c ed       	xor	r13,	r12	
    420c:	8e 10       	swpb	r14		
    420e:	4d ee       	xor.b	r14,	r13	
    4210:	0d ee       	xor	r14,	r13	
    4212:	8f 10       	swpb	r15		
    4214:	4e ef       	xor.b	r15,	r14	
    4216:	0e ef       	xor	r15,	r14	
    4218:	4f 4f       	mov.b	r15,	r15	
    421a:	1c d4 e6 ff 	bis	-26(r4),r12	;0xffe6(r4)
    421e:	1d d4 e8 ff 	bis	-24(r4),r13	;0xffe8(r4)
    4222:	1e d4 ea ff 	bis	-22(r4),r14	;0xffea(r4)
    4226:	1f d4 ec ff 	bis	-20(r4),r15	;0xffec(r4)
    422a:	0c 58       	add	r8,	r12	
    422c:	0d 69       	addc	r9,	r13	
    422e:	0e 6a       	addc	r10,	r14	
    4230:	0f 6b       	addc	r11,	r15	
    4232:	5b 44 ce ff 	mov.b	-50(r4),r11	;0xffce(r4)
    4236:	84 4b d6 ff 	mov	r11,	-42(r4)	;0xffd6(r4)
    423a:	84 43 d8 ff 	mov	#0,	-40(r4)	;r3 As==00, 0xffd8(r4)
    423e:	84 43 da ff 	mov	#0,	-38(r4)	;r3 As==00, 0xffda(r4)
    4242:	84 43 dc ff 	mov	#0,	-36(r4)	;r3 As==00, 0xffdc(r4)
    4246:	1c e4 d6 ff 	xor	-42(r4),r12	;0xffd6(r4)
    424a:	1d e4 d8 ff 	xor	-40(r4),r13	;0xffd8(r4)
    424e:	1e e4 da ff 	xor	-38(r4),r14	;0xffda(r4)
    4252:	1f e4 dc ff 	xor	-36(r4),r15	;0xffdc(r4)
    4256:	1b 44 d4 ff 	mov	-44(r4),r11	;0xffd4(r4)
    425a:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    425e:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4262:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4266:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        k[i+1] = ROTATE_LEFT_64(k[i], 3) ^ l[i+1];
    426a:	5f 44 ce ff 	mov.b	-50(r4),r15	;0xffce(r4)
    426e:	1f 53       	inc	r15		
    4270:	0f 5f       	rla	r15		
    4272:	0f 5f       	rla	r15		
    4274:	0f 5f       	rla	r15		
    4276:	17 44 d2 ff 	mov	-46(r4),r7	;0xffd2(r4)
    427a:	07 5f       	add	r15,	r7	
    427c:	5f 44 ce ff 	mov.b	-50(r4),r15	;0xffce(r4)
    4280:	0f 5f       	rla	r15		
    4282:	0f 5f       	rla	r15		
    4284:	0f 5f       	rla	r15		
    4286:	1f 54 d2 ff 	add	-46(r4),r15	;0xffd2(r4)
    428a:	2c 4f       	mov	@r15,	r12	
    428c:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4290:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4294:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4298:	08 4c       	mov	r12,	r8	
    429a:	09 4d       	mov	r13,	r9	
    429c:	0a 4e       	mov	r14,	r10	
    429e:	0b 4f       	mov	r15,	r11	
    42a0:	08 58       	rla	r8		
    42a2:	09 69       	rlc	r9		
    42a4:	0a 6a       	rlc	r10		
    42a6:	0b 6b       	rlc	r11		
    42a8:	08 58       	rla	r8		
    42aa:	09 69       	rlc	r9		
    42ac:	0a 6a       	rlc	r10		
    42ae:	0b 6b       	rlc	r11		
    42b0:	08 58       	rla	r8		
    42b2:	09 69       	rlc	r9		
    42b4:	0a 6a       	rlc	r10		
    42b6:	0b 6b       	rlc	r11		
    42b8:	0e 43       	clr	r14		
    42ba:	0c 4e       	mov	r14,	r12	
    42bc:	0d 4e       	mov	r14,	r13	
    42be:	8f 10       	swpb	r15		
    42c0:	4f 4f       	mov.b	r15,	r15	
    42c2:	12 c3       	clrc			
    42c4:	0f 10       	rrc	r15		
    42c6:	12 c3       	clrc			
    42c8:	0f 10       	rrc	r15		
    42ca:	12 c3       	clrc			
    42cc:	0f 10       	rrc	r15		
    42ce:	12 c3       	clrc			
    42d0:	0f 10       	rrc	r15		
    42d2:	12 c3       	clrc			
    42d4:	0f 10       	rrc	r15		
    42d6:	84 4f de ff 	mov	r15,	-34(r4)	;0xffde(r4)
    42da:	84 4d e0 ff 	mov	r13,	-32(r4)	;0xffe0(r4)
    42de:	84 4c e2 ff 	mov	r12,	-30(r4)	;0xffe2(r4)
    42e2:	84 4e e4 ff 	mov	r14,	-28(r4)	;0xffe4(r4)
    42e6:	84 d8 de ff 	bis	r8,	-34(r4)	;0xffde(r4)
    42ea:	84 d9 e0 ff 	bis	r9,	-32(r4)	;0xffe0(r4)
    42ee:	84 da e2 ff 	bis	r10,	-30(r4)	;0xffe2(r4)
    42f2:	84 db e4 ff 	bis	r11,	-28(r4)	;0xffe4(r4)
    42f6:	5f 44 ce ff 	mov.b	-50(r4),r15	;0xffce(r4)
    42fa:	1f 53       	inc	r15		
    42fc:	0f 5f       	rla	r15		
    42fe:	0f 5f       	rla	r15		
    4300:	0f 5f       	rla	r15		
    4302:	1f 54 d0 ff 	add	-48(r4),r15	;0xffd0(r4)
    4306:	2c 4f       	mov	@r15,	r12	
    4308:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    430c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4310:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4314:	1c e4 de ff 	xor	-34(r4),r12	;0xffde(r4)
    4318:	1d e4 e0 ff 	xor	-32(r4),r13	;0xffe0(r4)
    431c:	1e e4 e2 ff 	xor	-30(r4),r14	;0xffe2(r4)
    4320:	1f e4 e4 ff 	xor	-28(r4),r15	;0xffe4(r4)
    4324:	87 4c 00 00 	mov	r12,	0(r7)	;0x0000(r7)
    4328:	87 4d 02 00 	mov	r13,	2(r7)	;0x0002(r7)
    432c:	87 4e 04 00 	mov	r14,	4(r7)	;0x0004(r7)
    4330:	87 4f 06 00 	mov	r15,	6(r7)	;0x0006(r7)
typedef uint64_t u64;

void KeyExpansion ( u64 l[], u64 k[] )
{
    u8 i;
    for ( i=0 ; i<31 ; i++ )
    4334:	d4 53 ce ff 	inc.b	-50(r4)	;0xffce(r4)
    4338:	f4 90 1f 00 	cmp.b	#31,	-50(r4)	;#0x001f, 0xffce(r4)
    433c:	ce ff 
    433e:	2b 2b       	jnc	$-424    	;abs 0x4196
    {
        l[i+1] = ( k[i] + ROTATE_RIGHT_64(l[i], 8) ) ^ i;
        k[i+1] = ROTATE_LEFT_64(k[i], 3) ^ l[i+1];
    }
}
    4340:	31 50 22 00 	add	#34,	r1	;#0x0022
    4344:	34 41       	pop	r4		
    4346:	35 41       	pop	r5		
    4348:	36 41       	pop	r6		
    434a:	37 41       	pop	r7		
    434c:	38 41       	pop	r8		
    434e:	39 41       	pop	r9		
    4350:	3a 41       	pop	r10		
    4352:	3b 41       	pop	r11		
    4354:	30 41       	ret			

00004356 <Encrypt>:

void Encrypt ( u64 text[], u64 crypt[], u64 key[] )
{
    4356:	0b 12       	push	r11		
    4358:	0a 12       	push	r10		
    435a:	09 12       	push	r9		
    435c:	08 12       	push	r8		
    435e:	07 12       	push	r7		
    4360:	04 12       	push	r4		
    4362:	04 41       	mov	r1,	r4	
    4364:	34 50 0c 00 	add	#12,	r4	;#0x000c
    4368:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    436c:	84 4f de ff 	mov	r15,	-34(r4)	;0xffde(r4)
    4370:	84 4e e0 ff 	mov	r14,	-32(r4)	;0xffe0(r4)
    4374:	84 4d e2 ff 	mov	r13,	-30(r4)	;0xffe2(r4)
    u8 i;
    crypt[0] = text[0];
    4378:	1f 44 de ff 	mov	-34(r4),r15	;0xffde(r4)
    437c:	2c 4f       	mov	@r15,	r12	
    437e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4382:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4386:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    438a:	1b 44 e0 ff 	mov	-32(r4),r11	;0xffe0(r4)
    438e:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    4392:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    4396:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    439a:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    crypt[1] = text[1];
    439e:	1b 44 e0 ff 	mov	-32(r4),r11	;0xffe0(r4)
    43a2:	3b 52       	add	#8,	r11	;r2 As==11
    43a4:	1f 44 de ff 	mov	-34(r4),r15	;0xffde(r4)
    43a8:	1c 4f 08 00 	mov	8(r15),	r12	;0x0008(r15)
    43ac:	1d 4f 0a 00 	mov	10(r15),r13	;0x000a(r15)
    43b0:	1e 4f 0c 00 	mov	12(r15),r14	;0x000c(r15)
    43b4:	1f 4f 0e 00 	mov	14(r15),r15	;0x000e(r15)
    43b8:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    43bc:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    43c0:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    43c4:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)

    for ( i=0 ; i<32 ; i++ )
    43c8:	c4 43 dc ff 	mov.b	#0,	-36(r4)	;r3 As==00, 0xffdc(r4)
    43cc:	ab 3c       	jmp	$+344    	;abs 0x4524
    {
        crypt[0] = ( ROTATE_RIGHT_64(crypt[0], 8) + crypt[1] ) ^ key[i];
    43ce:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    43d2:	2c 4f       	mov	@r15,	r12	
    43d4:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    43d8:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    43dc:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    43e0:	0a 4c       	mov	r12,	r10	
    43e2:	08 43       	clr	r8		
    43e4:	09 43       	clr	r9		
    43e6:	0b 43       	clr	r11		
    43e8:	4a 4a       	mov.b	r10,	r10	
    43ea:	8a 10       	swpb	r10		
    43ec:	84 4b ec ff 	mov	r11,	-20(r4)	;0xffec(r4)
    43f0:	84 49 ee ff 	mov	r9,	-18(r4)	;0xffee(r4)
    43f4:	84 48 f0 ff 	mov	r8,	-16(r4)	;0xfff0(r4)
    43f8:	84 4a f2 ff 	mov	r10,	-14(r4)	;0xfff2(r4)
    43fc:	8c 10       	swpb	r12		
    43fe:	8d 10       	swpb	r13		
    4400:	4c ed       	xor.b	r13,	r12	
    4402:	0c ed       	xor	r13,	r12	
    4404:	8e 10       	swpb	r14		
    4406:	4d ee       	xor.b	r14,	r13	
    4408:	0d ee       	xor	r14,	r13	
    440a:	8f 10       	swpb	r15		
    440c:	4e ef       	xor.b	r15,	r14	
    440e:	0e ef       	xor	r15,	r14	
    4410:	4f 4f       	mov.b	r15,	r15	
    4412:	1c d4 ec ff 	bis	-20(r4),r12	;0xffec(r4)
    4416:	1d d4 ee ff 	bis	-18(r4),r13	;0xffee(r4)
    441a:	1e d4 f0 ff 	bis	-16(r4),r14	;0xfff0(r4)
    441e:	1f d4 f2 ff 	bis	-14(r4),r15	;0xfff2(r4)
    4422:	1b 44 e0 ff 	mov	-32(r4),r11	;0xffe0(r4)
    4426:	3b 52       	add	#8,	r11	;r2 As==11
    4428:	28 4b       	mov	@r11,	r8	
    442a:	19 4b 02 00 	mov	2(r11),	r9	;0x0002(r11)
    442e:	1a 4b 04 00 	mov	4(r11),	r10	;0x0004(r11)
    4432:	1b 4b 06 00 	mov	6(r11),	r11	;0x0006(r11)
    4436:	08 5c       	add	r12,	r8	
    4438:	09 6d       	addc	r13,	r9	
    443a:	0a 6e       	addc	r14,	r10	
    443c:	0b 6f       	addc	r15,	r11	
    443e:	5f 44 dc ff 	mov.b	-36(r4),r15	;0xffdc(r4)
    4442:	0f 5f       	rla	r15		
    4444:	0f 5f       	rla	r15		
    4446:	0f 5f       	rla	r15		
    4448:	1f 54 e2 ff 	add	-30(r4),r15	;0xffe2(r4)
    444c:	2c 4f       	mov	@r15,	r12	
    444e:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4452:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4456:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    445a:	0c e8       	xor	r8,	r12	
    445c:	0d e9       	xor	r9,	r13	
    445e:	0e ea       	xor	r10,	r14	
    4460:	0f eb       	xor	r11,	r15	
    4462:	1b 44 e0 ff 	mov	-32(r4),r11	;0xffe0(r4)
    4466:	8b 4c 00 00 	mov	r12,	0(r11)	;0x0000(r11)
    446a:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    446e:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    4472:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
        crypt[1] = ROTATE_LEFT_64(crypt[1], 3) ^ crypt[0];
    4476:	17 44 e0 ff 	mov	-32(r4),r7	;0xffe0(r4)
    447a:	37 52       	add	#8,	r7	;r2 As==11
    447c:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    4480:	3f 52       	add	#8,	r15	;r2 As==11
    4482:	2c 4f       	mov	@r15,	r12	
    4484:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    4488:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    448c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4490:	08 4c       	mov	r12,	r8	
    4492:	09 4d       	mov	r13,	r9	
    4494:	0a 4e       	mov	r14,	r10	
    4496:	0b 4f       	mov	r15,	r11	
    4498:	08 58       	rla	r8		
    449a:	09 69       	rlc	r9		
    449c:	0a 6a       	rlc	r10		
    449e:	0b 6b       	rlc	r11		
    44a0:	08 58       	rla	r8		
    44a2:	09 69       	rlc	r9		
    44a4:	0a 6a       	rlc	r10		
    44a6:	0b 6b       	rlc	r11		
    44a8:	08 58       	rla	r8		
    44aa:	09 69       	rlc	r9		
    44ac:	0a 6a       	rlc	r10		
    44ae:	0b 6b       	rlc	r11		
    44b0:	0e 43       	clr	r14		
    44b2:	0c 4e       	mov	r14,	r12	
    44b4:	0d 4e       	mov	r14,	r13	
    44b6:	8f 10       	swpb	r15		
    44b8:	4f 4f       	mov.b	r15,	r15	
    44ba:	12 c3       	clrc			
    44bc:	0f 10       	rrc	r15		
    44be:	12 c3       	clrc			
    44c0:	0f 10       	rrc	r15		
    44c2:	12 c3       	clrc			
    44c4:	0f 10       	rrc	r15		
    44c6:	12 c3       	clrc			
    44c8:	0f 10       	rrc	r15		
    44ca:	12 c3       	clrc			
    44cc:	0f 10       	rrc	r15		
    44ce:	84 4f e4 ff 	mov	r15,	-28(r4)	;0xffe4(r4)
    44d2:	84 4d e6 ff 	mov	r13,	-26(r4)	;0xffe6(r4)
    44d6:	84 4c e8 ff 	mov	r12,	-24(r4)	;0xffe8(r4)
    44da:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
    44de:	84 d8 e4 ff 	bis	r8,	-28(r4)	;0xffe4(r4)
    44e2:	84 d9 e6 ff 	bis	r9,	-26(r4)	;0xffe6(r4)
    44e6:	84 da e8 ff 	bis	r10,	-24(r4)	;0xffe8(r4)
    44ea:	84 db ea ff 	bis	r11,	-22(r4)	;0xffea(r4)
    44ee:	1f 44 e0 ff 	mov	-32(r4),r15	;0xffe0(r4)
    44f2:	2c 4f       	mov	@r15,	r12	
    44f4:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    44f8:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    44fc:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4500:	1c e4 e4 ff 	xor	-28(r4),r12	;0xffe4(r4)
    4504:	1d e4 e6 ff 	xor	-26(r4),r13	;0xffe6(r4)
    4508:	1e e4 e8 ff 	xor	-24(r4),r14	;0xffe8(r4)
    450c:	1f e4 ea ff 	xor	-22(r4),r15	;0xffea(r4)
    4510:	87 4c 00 00 	mov	r12,	0(r7)	;0x0000(r7)
    4514:	87 4d 02 00 	mov	r13,	2(r7)	;0x0002(r7)
    4518:	87 4e 04 00 	mov	r14,	4(r7)	;0x0004(r7)
    451c:	87 4f 06 00 	mov	r15,	6(r7)	;0x0006(r7)
{
    u8 i;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<32 ; i++ )
    4520:	d4 53 dc ff 	inc.b	-36(r4)	;0xffdc(r4)
    4524:	f4 90 20 00 	cmp.b	#32,	-36(r4)	;#0x0020, 0xffdc(r4)
    4528:	dc ff 
    452a:	51 2b       	jnc	$-348    	;abs 0x43ce
    {
        crypt[0] = ( ROTATE_RIGHT_64(crypt[0], 8) + crypt[1] ) ^ key[i];
        crypt[1] = ROTATE_LEFT_64(crypt[1], 3) ^ crypt[0];
    }
}
    452c:	31 50 18 00 	add	#24,	r1	;#0x0018
    4530:	34 41       	pop	r4		
    4532:	37 41       	pop	r7		
    4534:	38 41       	pop	r8		
    4536:	39 41       	pop	r9		
    4538:	3a 41       	pop	r10		
    453a:	3b 41       	pop	r11		
    453c:	30 41       	ret			

0000453e <Decrypt>:

void Decrypt ( u16 text[], u16 crypt[], u16 key[] )
{
    453e:	0b 12       	push	r11		
    4540:	04 12       	push	r4		
    4542:	04 41       	mov	r1,	r4	
    4544:	24 52       	add	#4,	r4	;r2 As==10
    4546:	31 82       	sub	#8,	r1	;r2 As==11
    4548:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    454c:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    4550:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
    u8 i;
    crypt[0] = text[0];
    4554:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4558:	2e 4f       	mov	@r15,	r14	
    455a:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    455e:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
    crypt[1] = text[1];
    4562:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4566:	2f 53       	incd	r15		
    4568:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    456c:	1e 4e 02 00 	mov	2(r14),	r14	;0x0002(r14)
    4570:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)

    for ( i=0 ; i<32 ; i++ )
    4574:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    4578:	5c 3c       	jmp	$+186    	;abs 0x4632
    {
        crypt[1] = ROTATE_RIGHT_64( crypt[0] ^ crypt[1], 3);
    457a:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    457e:	2d 53       	incd	r13		
    4580:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4584:	2e 4f       	mov	@r15,	r14	
    4586:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    458a:	2f 53       	incd	r15		
    458c:	2f 4f       	mov	@r15,	r15	
    458e:	0f ee       	xor	r14,	r15	
    4590:	0e 4f       	mov	r15,	r14	
    4592:	12 c3       	clrc			
    4594:	0e 10       	rrc	r14		
    4596:	12 c3       	clrc			
    4598:	0e 10       	rrc	r14		
    459a:	12 c3       	clrc			
    459c:	0e 10       	rrc	r14		
    459e:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45a2:	2c 4f       	mov	@r15,	r12	
    45a4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45a8:	2f 53       	incd	r15		
    45aa:	2f 4f       	mov	@r15,	r15	
    45ac:	0f ec       	xor	r12,	r15	
    45ae:	4f 4f       	mov.b	r15,	r15	
    45b0:	8f 10       	swpb	r15		
    45b2:	0f 5f       	rla	r15		
    45b4:	0f 5f       	rla	r15		
    45b6:	0f 5f       	rla	r15		
    45b8:	0f 5f       	rla	r15		
    45ba:	0f 5f       	rla	r15		
    45bc:	0f de       	bis	r14,	r15	
    45be:	8d 4f 00 00 	mov	r15,	0(r13)	;0x0000(r13)
        crypt[0] = ROTATE_LEFT_64( (crypt[0] ^ key[31-i]) - crypt[1], 8 );
    45c2:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45c6:	2e 4f       	mov	@r15,	r14	
    45c8:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    45cc:	3d 40 1f 00 	mov	#31,	r13	;#0x001f
    45d0:	0b 4d       	mov	r13,	r11	
    45d2:	0b 8f       	sub	r15,	r11	
    45d4:	0f 4b       	mov	r11,	r15	
    45d6:	0f 5f       	rla	r15		
    45d8:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    45dc:	2f 4f       	mov	@r15,	r15	
    45de:	0e ef       	xor	r15,	r14	
    45e0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45e4:	2f 53       	incd	r15		
    45e6:	2f 4f       	mov	@r15,	r15	
    45e8:	0c 4e       	mov	r14,	r12	
    45ea:	0c 8f       	sub	r15,	r12	
    45ec:	0f 4c       	mov	r12,	r15	
    45ee:	0e 4f       	mov	r15,	r14	
    45f0:	4e 4e       	mov.b	r14,	r14	
    45f2:	8e 10       	swpb	r14		
    45f4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    45f8:	2d 4f       	mov	@r15,	r13	
    45fa:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    45fe:	3c 40 1f 00 	mov	#31,	r12	;#0x001f
    4602:	0b 4c       	mov	r12,	r11	
    4604:	0b 8f       	sub	r15,	r11	
    4606:	0f 4b       	mov	r11,	r15	
    4608:	0f 5f       	rla	r15		
    460a:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    460e:	2f 4f       	mov	@r15,	r15	
    4610:	0d ef       	xor	r15,	r13	
    4612:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4616:	2f 53       	incd	r15		
    4618:	2f 4f       	mov	@r15,	r15	
    461a:	0c 4d       	mov	r13,	r12	
    461c:	0c 8f       	sub	r15,	r12	
    461e:	0f 4c       	mov	r12,	r15	
    4620:	8f 10       	swpb	r15		
    4622:	4f 4f       	mov.b	r15,	r15	
    4624:	0e df       	bis	r15,	r14	
    4626:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    462a:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
{
    u8 i;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<32 ; i++ )
    462e:	d4 53 f4 ff 	inc.b	-12(r4)	;0xfff4(r4)
    4632:	f4 90 20 00 	cmp.b	#32,	-12(r4)	;#0x0020, 0xfff4(r4)
    4636:	f4 ff 
    4638:	a0 2b       	jnc	$-190    	;abs 0x457a
    {
        crypt[1] = ROTATE_RIGHT_64( crypt[0] ^ crypt[1], 3);
        crypt[0] = ROTATE_LEFT_64( (crypt[0] ^ key[31-i]) - crypt[1], 8 );
    }
}
    463a:	31 52       	add	#8,	r1	;r2 As==11
    463c:	34 41       	pop	r4		
    463e:	3b 41       	pop	r11		
    4640:	30 41       	ret			

00004642 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4642:	04 12       	push	r4		
    4644:	04 41       	mov	r1,	r4	
    4646:	24 53       	incd	r4		
    4648:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    464c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4650:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4654:	0d 3c       	jmp	$+28     	;abs 0x4670
    {
      for (i = 0; i<d; i++) 
    4656:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    465a:	04 3c       	jmp	$+10     	;abs 0x4664
	{
	  nop();
    465c:	03 43       	nop			
	  nop();
    465e:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4660:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4664:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4668:	f8 ff 
    466a:	f8 2b       	jnc	$-14     	;abs 0x465c
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    466c:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4670:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4674:	fa ff 
    4676:	ef 2b       	jnc	$-32     	;abs 0x4656
	{
	  nop();
	  nop();
	}
    }
}
    4678:	31 50 06 00 	add	#6,	r1	;#0x0006
    467c:	34 41       	pop	r4		
    467e:	30 41       	ret			

00004680 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4680:	04 12       	push	r4		
    4682:	04 41       	mov	r1,	r4	
    4684:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4686:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    468a:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    468c:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4690:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4694:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4698:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    469c:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    46a0:	5f 42 05 00 	mov.b	&0x0005,r15	
    46a4:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    46a8:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    46ac:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    46b0:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    46b4:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    46b6:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    46ba:	79 00 
  U1RCTL = 0;
    46bc:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    46c0:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    46c4:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    46c8:	7c 00 
  U1MCTL = U1MCTL_INIT;
    46ca:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    46ce:	7b 00 

  delay(0x800);
    46d0:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    46d4:	b0 12 42 46 	call	#0x4642	
  return 0;
    46d8:	0f 43       	clr	r15		
}
    46da:	34 41       	pop	r4		
    46dc:	30 41       	ret			

000046de <uart1_putchar>:

int uart1_putchar(int c)
{
    46de:	04 12       	push	r4		
    46e0:	04 41       	mov	r1,	r4	
    46e2:	24 53       	incd	r4		
    46e4:	21 83       	decd	r1		
    46e6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    46ea:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    46ee:	4f 4f       	mov.b	r15,	r15	
    46f0:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    46f4:	03 43       	nop			
    46f6:	5f 42 79 00 	mov.b	&0x0079,r15	
    46fa:	4f 4f       	mov.b	r15,	r15	
    46fc:	1f f3       	and	#1,	r15	;r3 As==01
    46fe:	0f 93       	tst	r15		
    4700:	fa 27       	jz	$-10     	;abs 0x46f6
  return (unsigned char)c;
    4702:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4706:	4f 4f       	mov.b	r15,	r15	
    4708:	4f 4f       	mov.b	r15,	r15	
}
    470a:	21 53       	incd	r1		
    470c:	34 41       	pop	r4		
    470e:	30 41       	ret			

00004710 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4710:	04 12       	push	r4		
    4712:	04 41       	mov	r1,	r4	
    4714:	24 53       	incd	r4		
    4716:	21 83       	decd	r1		
    4718:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    471c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4720:	b0 12 de 46 	call	#0x46de	
}
    4724:	21 53       	incd	r1		
    4726:	34 41       	pop	r4		
    4728:	30 41       	ret			

0000472a <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    472a:	04 12       	push	r4		
    472c:	04 41       	mov	r1,	r4	
    472e:	24 53       	incd	r4		
  ;
}
    4730:	34 41       	pop	r4		
    4732:	30 41       	ret			

00004734 <start_decrypt>:
void
start_decrypt()
{
    4734:	04 12       	push	r4		
    4736:	04 41       	mov	r1,	r4	
    4738:	24 53       	incd	r4		
  ;
}
    473a:	34 41       	pop	r4		
    473c:	30 41       	ret			

0000473e <end_expe>:


void
end_expe()
{
    473e:	04 12       	push	r4		
    4740:	04 41       	mov	r1,	r4	
    4742:	24 53       	incd	r4		
  ;
}
    4744:	34 41       	pop	r4		
    4746:	30 41       	ret			

00004748 <memset>:
    4748:	0b 12       	push	r11		
    474a:	0a 12       	push	r10		
    474c:	09 12       	push	r9		
    474e:	08 12       	push	r8		
    4750:	3d 90 06 00 	cmp	#6,	r13	;#0x0006
    4754:	09 2c       	jc	$+20     	;abs 0x4768
    4756:	0c 4f       	mov	r15,	r12	
    4758:	04 3c       	jmp	$+10     	;abs 0x4762
    475a:	cc 4e 00 00 	mov.b	r14,	0(r12)	;0x0000(r12)
    475e:	1c 53       	inc	r12		
    4760:	3d 53       	add	#-1,	r13	;r3 As==11
    4762:	0d 93       	tst	r13		
    4764:	fa 23       	jnz	$-10     	;abs 0x475a
    4766:	20 3c       	jmp	$+66     	;abs 0x47a8
    4768:	4e 4e       	mov.b	r14,	r14	
    476a:	4b 4e       	mov.b	r14,	r11	
    476c:	0b 93       	tst	r11		
    476e:	03 24       	jz	$+8      	;abs 0x4776
    4770:	0c 4b       	mov	r11,	r12	
    4772:	8c 10       	swpb	r12		
    4774:	0b dc       	bis	r12,	r11	
    4776:	1f b3       	bit	#1,	r15	;r3 As==01
    4778:	06 24       	jz	$+14     	;abs 0x4786
    477a:	3d 53       	add	#-1,	r13	;r3 As==11
    477c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    4780:	09 4f       	mov	r15,	r9	
    4782:	19 53       	inc	r9		
    4784:	01 3c       	jmp	$+4      	;abs 0x4788
    4786:	09 4f       	mov	r15,	r9	
    4788:	0c 4d       	mov	r13,	r12	
    478a:	12 c3       	clrc			
    478c:	0c 10       	rrc	r12		
    478e:	0a 49       	mov	r9,	r10	
    4790:	08 4c       	mov	r12,	r8	
    4792:	8a 4b 00 00 	mov	r11,	0(r10)	;0x0000(r10)
    4796:	2a 53       	incd	r10		
    4798:	38 53       	add	#-1,	r8	;r3 As==11
    479a:	fb 23       	jnz	$-8      	;abs 0x4792
    479c:	0c 5c       	rla	r12		
    479e:	0c 59       	add	r9,	r12	
    47a0:	1d f3       	and	#1,	r13	;r3 As==01
    47a2:	02 24       	jz	$+6      	;abs 0x47a8
    47a4:	cc 4e 00 00 	mov.b	r14,	0(r12)	;0x0000(r12)
    47a8:	38 41       	pop	r8		
    47aa:	39 41       	pop	r9		
    47ac:	3a 41       	pop	r10		
    47ae:	3b 41       	pop	r11		
    47b0:	30 41       	ret			

000047b2 <_unexpected_>:
    47b2:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	6a 41 6a 41 6a 41 6a 41 6a 41 6a 41 6a 41 6a 41     jAjAjAjAjAjAjAjA
    fff0:	6a 41 6a 41 6a 41 6a 41 6a 41 6a 41 6a 41 00 40     jAjAjAjAjAjAjA.@
