
simon64_128.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .data	00000000 .data
0000113e l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 simon64_128.c
00001100 l     O .data	0000003e z
00004106 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004662 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
0000003e g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
00004106  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
00004106  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
000043e6 g     F .text	000001ae Decrypt
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
0000469c g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
000045d2 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
00004100  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
00004106  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004690 g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000410a g     F .text	00000142 KeyExpansion
0000019e g       *ABS*	00000000 __TBCCR6
00004106  w      .text	00000000 __isr_5
0000469c g       *ABS*	00000000 __data_load_start
00004106 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
00004106  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
00004106  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
0000113e g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
00004106  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
00004106  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
0000469a  w      .text	00000000 _unexpected_
00004106  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
00004106  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004630 g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
00004106 g       .text	00000000 __ctors_start
00004106  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
0000113e g       .data	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	000000c2 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
00004106  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004594 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
00004106  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
00004106 g       .text	00000000 __dtors_start
00004106  w      .text	00000000 __isr_6
00004106 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
00004106  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
0000113e g       .data	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001140 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
0000467c g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
00004100  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004686 g     F .text	0000000a start_decrypt
00001100 g       .data	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000424c g     F .text	0000019a Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 3e 11 	mov	r5,	&0x113e	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 3e 11 	mov	&0x113e,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 9c 46 	mov	18076(r15),4352(r15);0x469c(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 3e 11 	mov	&0x113e,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 3e 11 	mov.b	#0,	4414(r15);r3 As==00, 0x113e(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
        crypt[0] = tmp;
    }
}

int main ()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 40 ff 	add	#-192,	r1	;#0xff40

    u32 text[2];
    text[0] = 0x656b696c;
    4046:	b4 40 6c 69 	mov	#26988,	-194(r4);#0x696c, 0xff3e(r4)
    404a:	3e ff 
    404c:	b4 40 6b 65 	mov	#25963,	-192(r4);#0x656b, 0xff40(r4)
    4050:	40 ff 
    text[1] = 0x20646e75;
    4052:	b4 40 75 6e 	mov	#28277,	-190(r4);#0x6e75, 0xff42(r4)
    4056:	42 ff 
    4058:	b4 40 64 20 	mov	#8292,	-188(r4);#0x2064, 0xff44(r4)
    405c:	44 ff 
    u32 crypt[2] = {0};
    405e:	84 43 46 ff 	mov	#0,	-186(r4);r3 As==00, 0xff46(r4)
    4062:	84 43 48 ff 	mov	#0,	-184(r4);r3 As==00, 0xff48(r4)
    4066:	84 43 4a ff 	mov	#0,	-182(r4);r3 As==00, 0xff4a(r4)
    406a:	84 43 4c ff 	mov	#0,	-180(r4);r3 As==00, 0xff4c(r4)
    u32 k[44];
    k[3] = 0x1b1a1918;
    406e:	b4 40 18 19 	mov	#6424,	-166(r4);#0x1918, 0xff5a(r4)
    4072:	5a ff 
    4074:	b4 40 1a 1b 	mov	#6938,	-164(r4);#0x1b1a, 0xff5c(r4)
    4078:	5c ff 
    k[2] = 0x13121110;
    407a:	b4 40 10 11 	mov	#4368,	-170(r4);#0x1110, 0xff56(r4)
    407e:	56 ff 
    4080:	b4 40 12 13 	mov	#4882,	-168(r4);#0x1312, 0xff58(r4)
    4084:	58 ff 
    k[1] = 0x0b0a0908;
    4086:	b4 40 08 09 	mov	#2312,	-174(r4);#0x0908, 0xff52(r4)
    408a:	52 ff 
    408c:	b4 40 0a 0b 	mov	#2826,	-172(r4);#0x0b0a, 0xff54(r4)
    4090:	54 ff 
    k[0] = 0x03020100;
    4092:	b4 40 00 01 	mov	#256,	-178(r4);#0x0100, 0xff4e(r4)
    4096:	4e ff 
    4098:	b4 40 02 03 	mov	#770,	-176(r4);#0x0302, 0xff50(r4)
    409c:	50 ff 
    KeyExpansion ( k );
    409e:	0f 44       	mov	r4,	r15	
    40a0:	3f 50 4e ff 	add	#-178,	r15	;#0xff4e
    40a4:	b0 12 0a 41 	call	#0x410a	



	START_ENCRYPT();
    40a8:	b0 12 7c 46 	call	#0x467c	
    KeyExpansion ( k );
    40ac:	0f 44       	mov	r4,	r15	
    40ae:	3f 50 4e ff 	add	#-178,	r15	;#0xff4e
    40b2:	b0 12 0a 41 	call	#0x410a	
    Encrypt ( text, crypt, k );
    40b6:	0e 44       	mov	r4,	r14	
    40b8:	3e 50 4e ff 	add	#-178,	r14	;#0xff4e
    40bc:	0f 44       	mov	r4,	r15	
    40be:	3f 50 46 ff 	add	#-186,	r15	;#0xff46
    40c2:	0d 4e       	mov	r14,	r13	
    40c4:	0e 4f       	mov	r15,	r14	
    40c6:	0f 44       	mov	r4,	r15	
    40c8:	3f 50 3e ff 	add	#-194,	r15	;#0xff3e
    40cc:	b0 12 4c 42 	call	#0x424c	
    //printf("%x %x\n%x %x\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	START_DECRYPT();
    40d0:	b0 12 86 46 	call	#0x4686	
    KeyExpansion ( k );
    40d4:	0f 44       	mov	r4,	r15	
    40d6:	3f 50 4e ff 	add	#-178,	r15	;#0xff4e
    40da:	b0 12 0a 41 	call	#0x410a	
    Decrypt ( crypt, text, k );
    40de:	0e 44       	mov	r4,	r14	
    40e0:	3e 50 4e ff 	add	#-178,	r14	;#0xff4e
    40e4:	0f 44       	mov	r4,	r15	
    40e6:	3f 50 46 ff 	add	#-186,	r15	;#0xff46
    40ea:	0d 4e       	mov	r14,	r13	
    40ec:	0e 44       	mov	r4,	r14	
    40ee:	3e 50 3e ff 	add	#-194,	r14	;#0xff3e
    40f2:	b0 12 e6 43 	call	#0x43e6	
    //printf("%x %x\n%x %x\n\n\n", text[0], text[1], crypt[0], crypt[1]);
	END_EXPE();
    40f6:	b0 12 90 46 	call	#0x4690	

    return 0;
    40fa:	0f 43       	clr	r15		
}
    40fc:	31 50 c0 00 	add	#192,	r1	;#0x00c0

00004100 <__stop_progExec__>:
    4100:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    4104:	fd 3f       	jmp	$-4      	;abs 0x4100

00004106 <__ctors_end>:
    4106:	30 40 9a 46 	br	#0x469a	

0000410a <KeyExpansion>:

static u8 z[62] =
{1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,1};

void KeyExpansion ( u32 k[] )
{
    410a:	0b 12       	push	r11		
    410c:	0a 12       	push	r10		
    410e:	09 12       	push	r9		
    4110:	08 12       	push	r8		
    4112:	07 12       	push	r7		
    4114:	06 12       	push	r6		
    4116:	04 12       	push	r4		
    4118:	04 41       	mov	r1,	r4	
    411a:	34 50 0e 00 	add	#14,	r4	;#0x000e
    411e:	31 82       	sub	#8,	r1	;r2 As==11
    4120:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    u8 i;
    u32 tmp;
    for ( i=4 ; i<44 ; i++ )
    4124:	e4 42 ea ff 	mov.b	#4,	-22(r4)	;r2 As==10, 0xffea(r4)
    4128:	84 3c       	jmp	$+266    	;abs 0x4232
    {
        tmp = ROTATE_RIGHT_32(k[i-1],3);
    412a:	5f 44 ea ff 	mov.b	-22(r4),r15	;0xffea(r4)
    412e:	3f 53       	add	#-1,	r15	;r3 As==11
    4130:	0f 5f       	rla	r15		
    4132:	0f 5f       	rla	r15		
    4134:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    4138:	2c 4f       	mov	@r15,	r12	
    413a:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    413e:	0f 4c       	mov	r12,	r15	
    4140:	4f 4f       	mov.b	r15,	r15	
    4142:	8f 10       	swpb	r15		
    4144:	0f 5f       	rla	r15		
    4146:	0f 5f       	rla	r15		
    4148:	0f 5f       	rla	r15		
    414a:	0f 5f       	rla	r15		
    414c:	0f 5f       	rla	r15		
    414e:	0e 4d       	mov	r13,	r14	
    4150:	12 c3       	clrc			
    4152:	0e 10       	rrc	r14		
    4154:	12 c3       	clrc			
    4156:	0e 10       	rrc	r14		
    4158:	12 c3       	clrc			
    415a:	0e 10       	rrc	r14		
    415c:	07 4f       	mov	r15,	r7	
    415e:	07 de       	bis	r14,	r7	
    4160:	0f 4d       	mov	r13,	r15	
    4162:	4f 4f       	mov.b	r15,	r15	
    4164:	8f 10       	swpb	r15		
    4166:	0f 5f       	rla	r15		
    4168:	0f 5f       	rla	r15		
    416a:	0f 5f       	rla	r15		
    416c:	0f 5f       	rla	r15		
    416e:	0f 5f       	rla	r15		
    4170:	0e 4c       	mov	r12,	r14	
    4172:	12 c3       	clrc			
    4174:	0e 10       	rrc	r14		
    4176:	12 c3       	clrc			
    4178:	0e 10       	rrc	r14		
    417a:	12 c3       	clrc			
    417c:	0e 10       	rrc	r14		
    417e:	06 4f       	mov	r15,	r6	
    4180:	06 de       	bis	r14,	r6	
    4182:	84 46 ec ff 	mov	r6,	-20(r4)	;0xffec(r4)
    4186:	84 47 ee ff 	mov	r7,	-18(r4)	;0xffee(r4)
        tmp = tmp ^ k[i-3];
    418a:	5f 44 ea ff 	mov.b	-22(r4),r15	;0xffea(r4)
    418e:	3f 50 fd ff 	add	#-3,	r15	;#0xfffd
    4192:	0f 5f       	rla	r15		
    4194:	0f 5f       	rla	r15		
    4196:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    419a:	2e 4f       	mov	@r15,	r14	
    419c:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    41a0:	84 ee ec ff 	xor	r14,	-20(r4)	;0xffec(r4)
    41a4:	84 ef ee ff 	xor	r15,	-18(r4)	;0xffee(r4)
        tmp = tmp ^ ROTATE_RIGHT_32(tmp,1);
    41a8:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    41ac:	0f 11       	rra	r15		
    41ae:	0f 43       	clr	r15		
    41b0:	0f 10       	rrc	r15		
    41b2:	0e 4f       	mov	r15,	r14	
    41b4:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    41b8:	12 c3       	clrc			
    41ba:	0f 10       	rrc	r15		
    41bc:	09 4e       	mov	r14,	r9	
    41be:	09 df       	bis	r15,	r9	
    41c0:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    41c4:	0f 11       	rra	r15		
    41c6:	0f 43       	clr	r15		
    41c8:	0f 10       	rrc	r15		
    41ca:	0e 4f       	mov	r15,	r14	
    41cc:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    41d0:	12 c3       	clrc			
    41d2:	0f 10       	rrc	r15		
    41d4:	08 4e       	mov	r14,	r8	
    41d6:	08 df       	bis	r15,	r8	
    41d8:	84 e8 ec ff 	xor	r8,	-20(r4)	;0xffec(r4)
    41dc:	84 e9 ee ff 	xor	r9,	-18(r4)	;0xffee(r4)
        k[i] = ~k[i-4] ^ tmp ^ z[i-4] ^ 3;
    41e0:	5f 44 ea ff 	mov.b	-22(r4),r15	;0xffea(r4)
    41e4:	0f 5f       	rla	r15		
    41e6:	0f 5f       	rla	r15		
    41e8:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    41ec:	0d 5f       	add	r15,	r13	
    41ee:	5f 44 ea ff 	mov.b	-22(r4),r15	;0xffea(r4)
    41f2:	2f 82       	sub	#4,	r15	;r2 As==10
    41f4:	0f 5f       	rla	r15		
    41f6:	0f 5f       	rla	r15		
    41f8:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    41fc:	2e 4f       	mov	@r15,	r14	
    41fe:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4202:	3e e3       	inv	r14		
    4204:	3f e3       	inv	r15		
    4206:	1e e4 ec ff 	xor	-20(r4),r14	;0xffec(r4)
    420a:	1f e4 ee ff 	xor	-18(r4),r15	;0xffee(r4)
    420e:	5c 44 ea ff 	mov.b	-22(r4),r12	;0xffea(r4)
    4212:	2c 82       	sub	#4,	r12	;r2 As==10
    4214:	5c 4c 00 11 	mov.b	4352(r12),r12	;0x1100(r12)
    4218:	4a 4c       	mov.b	r12,	r10	
    421a:	0b 43       	clr	r11		
    421c:	0e ea       	xor	r10,	r14	
    421e:	0f eb       	xor	r11,	r15	
    4220:	3e e0 03 00 	xor	#3,	r14	;#0x0003
    4224:	0f e3       	xor	#0,	r15	;r3 As==00
    4226:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    422a:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)

void KeyExpansion ( u32 k[] )
{
    u8 i;
    u32 tmp;
    for ( i=4 ; i<44 ; i++ )
    422e:	d4 53 ea ff 	inc.b	-22(r4)	;0xffea(r4)
    4232:	f4 90 2c 00 	cmp.b	#44,	-22(r4)	;#0x002c, 0xffea(r4)
    4236:	ea ff 
    4238:	78 2b       	jnc	$-270    	;abs 0x412a
        tmp = ROTATE_RIGHT_32(k[i-1],3);
        tmp = tmp ^ k[i-3];
        tmp = tmp ^ ROTATE_RIGHT_32(tmp,1);
        k[i] = ~k[i-4] ^ tmp ^ z[i-4] ^ 3;
    }
}
    423a:	31 52       	add	#8,	r1	;r2 As==11
    423c:	34 41       	pop	r4		
    423e:	36 41       	pop	r6		
    4240:	37 41       	pop	r7		
    4242:	38 41       	pop	r8		
    4244:	39 41       	pop	r9		
    4246:	3a 41       	pop	r10		
    4248:	3b 41       	pop	r11		
    424a:	30 41       	ret			

0000424c <Encrypt>:

void Encrypt ( u32 text[], u32 crypt[], u32 key[] )
{
    424c:	0b 12       	push	r11		
    424e:	0a 12       	push	r10		
    4250:	09 12       	push	r9		
    4252:	08 12       	push	r8		
    4254:	07 12       	push	r7		
    4256:	06 12       	push	r6		
    4258:	04 12       	push	r4		
    425a:	04 41       	mov	r1,	r4	
    425c:	34 50 0e 00 	add	#14,	r4	;#0x000e
    4260:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    4264:	84 4f e8 ff 	mov	r15,	-24(r4)	;0xffe8(r4)
    4268:	84 4e ea ff 	mov	r14,	-22(r4)	;0xffea(r4)
    426c:	84 4d ec ff 	mov	r13,	-20(r4)	;0xffec(r4)
    u8 i;
    u32 tmp;
    crypt[0] = text[0];
    4270:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4274:	2e 4f       	mov	@r15,	r14	
    4276:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    427a:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    427e:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    4282:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
    crypt[1] = text[1];
    4286:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    428a:	2d 52       	add	#4,	r13	;r2 As==10
    428c:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4290:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4294:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4298:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    429c:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)

    for ( i=0 ; i<44 ; i++ )
    42a0:	c4 43 e2 ff 	mov.b	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    42a4:	92 3c       	jmp	$+294    	;abs 0x43ca
    {
        tmp = crypt[0];
    42a6:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    42aa:	a4 4f e4 ff 	mov	@r15,	-28(r4)	;0xffe4(r4)
    42ae:	94 4f 02 00 	mov	2(r15),	-26(r4)	;0x0002(r15), 0xffe6(r4)
    42b2:	e6 ff 
        crypt[0] = crypt[1] ^ ((ROTATE_LEFT_32(crypt[0],1)) & (ROTATE_LEFT_32(crypt[0],8))) ^ (ROTATE_LEFT_32(crypt[0],2)) ^ key[i];
    42b4:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    42b8:	2f 52       	add	#4,	r15	;r2 As==10
    42ba:	2a 4f       	mov	@r15,	r10	
    42bc:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    42c0:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    42c4:	2d 4f       	mov	@r15,	r13	
    42c6:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    42ca:	0f 4d       	mov	r13,	r15	
    42cc:	0f 5f       	rla	r15		
    42ce:	0f 43       	clr	r15		
    42d0:	0f 6f       	rlc	r15		
    42d2:	0c 4f       	mov	r15,	r12	
    42d4:	0f 4e       	mov	r14,	r15	
    42d6:	0f 5f       	rla	r15		
    42d8:	09 4c       	mov	r12,	r9	
    42da:	09 df       	bis	r15,	r9	
    42dc:	84 49 f0 ff 	mov	r9,	-16(r4)	;0xfff0(r4)
    42e0:	0f 4e       	mov	r14,	r15	
    42e2:	0f 5f       	rla	r15		
    42e4:	0f 43       	clr	r15		
    42e6:	0f 6f       	rlc	r15		
    42e8:	0c 4f       	mov	r15,	r12	
    42ea:	0f 4d       	mov	r13,	r15	
    42ec:	0f 5f       	rla	r15		
    42ee:	0e 4c       	mov	r12,	r14	
    42f0:	0e df       	bis	r15,	r14	
    42f2:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    42f6:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    42fa:	2e 4f       	mov	@r15,	r14	
    42fc:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4300:	0c 4e       	mov	r14,	r12	
    4302:	8c 10       	swpb	r12		
    4304:	4c 4c       	mov.b	r12,	r12	
    4306:	0d 4f       	mov	r15,	r13	
    4308:	4d 4d       	mov.b	r13,	r13	
    430a:	8d 10       	swpb	r13		
    430c:	07 4c       	mov	r12,	r7	
    430e:	07 dd       	bis	r13,	r7	
    4310:	0d 4f       	mov	r15,	r13	
    4312:	8d 10       	swpb	r13		
    4314:	4d 4d       	mov.b	r13,	r13	
    4316:	0f 4e       	mov	r14,	r15	
    4318:	4f 4f       	mov.b	r15,	r15	
    431a:	8f 10       	swpb	r15		
    431c:	06 4d       	mov	r13,	r6	
    431e:	06 df       	bis	r15,	r6	
    4320:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    4324:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4328:	0e f6       	and	r6,	r14	
    432a:	0f f7       	and	r7,	r15	
    432c:	0a ee       	xor	r14,	r10	
    432e:	0b ef       	xor	r15,	r11	
    4330:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4334:	2d 4f       	mov	@r15,	r13	
    4336:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    433a:	0c 4d       	mov	r13,	r12	
    433c:	8c 10       	swpb	r12		
    433e:	4c 4c       	mov.b	r12,	r12	
    4340:	12 c3       	clrc			
    4342:	0c 10       	rrc	r12		
    4344:	12 c3       	clrc			
    4346:	0c 10       	rrc	r12		
    4348:	12 c3       	clrc			
    434a:	0c 10       	rrc	r12		
    434c:	12 c3       	clrc			
    434e:	0c 10       	rrc	r12		
    4350:	12 c3       	clrc			
    4352:	0c 10       	rrc	r12		
    4354:	12 c3       	clrc			
    4356:	0c 10       	rrc	r12		
    4358:	0f 4e       	mov	r14,	r15	
    435a:	0f 5f       	rla	r15		
    435c:	0f 5f       	rla	r15		
    435e:	09 4c       	mov	r12,	r9	
    4360:	09 df       	bis	r15,	r9	
    4362:	0f 4e       	mov	r14,	r15	
    4364:	8f 10       	swpb	r15		
    4366:	4f 4f       	mov.b	r15,	r15	
    4368:	12 c3       	clrc			
    436a:	0f 10       	rrc	r15		
    436c:	12 c3       	clrc			
    436e:	0f 10       	rrc	r15		
    4370:	12 c3       	clrc			
    4372:	0f 10       	rrc	r15		
    4374:	12 c3       	clrc			
    4376:	0f 10       	rrc	r15		
    4378:	12 c3       	clrc			
    437a:	0f 10       	rrc	r15		
    437c:	12 c3       	clrc			
    437e:	0f 10       	rrc	r15		
    4380:	0e 4d       	mov	r13,	r14	
    4382:	0e 5e       	rla	r14		
    4384:	0e 5e       	rla	r14		
    4386:	08 4f       	mov	r15,	r8	
    4388:	08 de       	bis	r14,	r8	
    438a:	0c 4a       	mov	r10,	r12	
    438c:	0d 4b       	mov	r11,	r13	
    438e:	0c e8       	xor	r8,	r12	
    4390:	0d e9       	xor	r9,	r13	
    4392:	5f 44 e2 ff 	mov.b	-30(r4),r15	;0xffe2(r4)
    4396:	0f 5f       	rla	r15		
    4398:	0f 5f       	rla	r15		
    439a:	1f 54 ec ff 	add	-20(r4),r15	;0xffec(r4)
    439e:	2e 4f       	mov	@r15,	r14	
    43a0:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    43a4:	0e ec       	xor	r12,	r14	
    43a6:	0f ed       	xor	r13,	r15	
    43a8:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    43ac:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    43b0:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
        crypt[1] = tmp;
    43b4:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    43b8:	2f 52       	add	#4,	r15	;r2 As==10
    43ba:	9f 44 e4 ff 	mov	-28(r4),0(r15)	;0xffe4(r4), 0x0000(r15)
    43be:	00 00 
    43c0:	9f 44 e6 ff 	mov	-26(r4),2(r15)	;0xffe6(r4), 0x0002(r15)
    43c4:	02 00 
    u8 i;
    u32 tmp;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<44 ; i++ )
    43c6:	d4 53 e2 ff 	inc.b	-30(r4)	;0xffe2(r4)
    43ca:	f4 90 2c 00 	cmp.b	#44,	-30(r4)	;#0x002c, 0xffe2(r4)
    43ce:	e2 ff 
    43d0:	6a 2b       	jnc	$-298    	;abs 0x42a6
    {
        tmp = crypt[0];
        crypt[0] = crypt[1] ^ ((ROTATE_LEFT_32(crypt[0],1)) & (ROTATE_LEFT_32(crypt[0],8))) ^ (ROTATE_LEFT_32(crypt[0],2)) ^ key[i];
        crypt[1] = tmp;
    }
}
    43d2:	31 50 10 00 	add	#16,	r1	;#0x0010
    43d6:	34 41       	pop	r4		
    43d8:	36 41       	pop	r6		
    43da:	37 41       	pop	r7		
    43dc:	38 41       	pop	r8		
    43de:	39 41       	pop	r9		
    43e0:	3a 41       	pop	r10		
    43e2:	3b 41       	pop	r11		
    43e4:	30 41       	ret			

000043e6 <Decrypt>:

void Decrypt ( u32 text[], u32 crypt[], u32 key[] )
{
    43e6:	0b 12       	push	r11		
    43e8:	0a 12       	push	r10		
    43ea:	09 12       	push	r9		
    43ec:	08 12       	push	r8		
    43ee:	07 12       	push	r7		
    43f0:	06 12       	push	r6		
    43f2:	05 12       	push	r5		
    43f4:	04 12       	push	r4		
    43f6:	04 41       	mov	r1,	r4	
    43f8:	34 50 10 00 	add	#16,	r4	;#0x0010
    43fc:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    4400:	84 4f e6 ff 	mov	r15,	-26(r4)	;0xffe6(r4)
    4404:	84 4e e8 ff 	mov	r14,	-24(r4)	;0xffe8(r4)
    4408:	84 4d ea ff 	mov	r13,	-22(r4)	;0xffea(r4)
    u8 i;
    u32 tmp;
    crypt[0] = text[0];
    440c:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    4410:	2e 4f       	mov	@r15,	r14	
    4412:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4416:	1d 44 e8 ff 	mov	-24(r4),r13	;0xffe8(r4)
    441a:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    441e:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
    crypt[1] = text[1];
    4422:	1d 44 e8 ff 	mov	-24(r4),r13	;0xffe8(r4)
    4426:	2d 52       	add	#4,	r13	;r2 As==10
    4428:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    442c:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    4430:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    4434:	8d 4e 00 00 	mov	r14,	0(r13)	;0x0000(r13)
    4438:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)

    for ( i=0 ; i<44 ; i++ )
    443c:	c4 43 e0 ff 	mov.b	#0,	-32(r4)	;r3 As==00, 0xffe0(r4)
    4440:	9a 3c       	jmp	$+310    	;abs 0x4576
    {
        tmp = crypt[1];
    4442:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4446:	94 4f 04 00 	mov	4(r15),	-30(r4)	;0x0004(r15), 0xffe2(r4)
    444a:	e2 ff 
    444c:	94 4f 06 00 	mov	6(r15),	-28(r4)	;0x0006(r15), 0xffe4(r4)
    4450:	e4 ff 
        crypt[1] = crypt[0] ^ ((ROTATE_LEFT_32(crypt[1],1)) & (ROTATE_LEFT_32(crypt[1],8))) ^ (ROTATE_LEFT_32(crypt[1],2)) ^ key[43-i];
    4452:	15 44 e8 ff 	mov	-24(r4),r5	;0xffe8(r4)
    4456:	25 52       	add	#4,	r5	;r2 As==10
    4458:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    445c:	2a 4f       	mov	@r15,	r10	
    445e:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    4462:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4466:	2f 52       	add	#4,	r15	;r2 As==10
    4468:	2d 4f       	mov	@r15,	r13	
    446a:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    446e:	0f 4d       	mov	r13,	r15	
    4470:	0f 5f       	rla	r15		
    4472:	0f 43       	clr	r15		
    4474:	0f 6f       	rlc	r15		
    4476:	0c 4f       	mov	r15,	r12	
    4478:	0f 4e       	mov	r14,	r15	
    447a:	0f 5f       	rla	r15		
    447c:	09 4c       	mov	r12,	r9	
    447e:	09 df       	bis	r15,	r9	
    4480:	84 49 ee ff 	mov	r9,	-18(r4)	;0xffee(r4)
    4484:	0f 4e       	mov	r14,	r15	
    4486:	0f 5f       	rla	r15		
    4488:	0f 43       	clr	r15		
    448a:	0f 6f       	rlc	r15		
    448c:	0c 4f       	mov	r15,	r12	
    448e:	0f 4d       	mov	r13,	r15	
    4490:	0f 5f       	rla	r15		
    4492:	0e 4c       	mov	r12,	r14	
    4494:	0e df       	bis	r15,	r14	
    4496:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
    449a:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    449e:	2f 52       	add	#4,	r15	;r2 As==10
    44a0:	2e 4f       	mov	@r15,	r14	
    44a2:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    44a6:	0c 4e       	mov	r14,	r12	
    44a8:	8c 10       	swpb	r12		
    44aa:	4c 4c       	mov.b	r12,	r12	
    44ac:	0d 4f       	mov	r15,	r13	
    44ae:	4d 4d       	mov.b	r13,	r13	
    44b0:	8d 10       	swpb	r13		
    44b2:	07 4c       	mov	r12,	r7	
    44b4:	07 dd       	bis	r13,	r7	
    44b6:	0d 4f       	mov	r15,	r13	
    44b8:	8d 10       	swpb	r13		
    44ba:	4d 4d       	mov.b	r13,	r13	
    44bc:	0f 4e       	mov	r14,	r15	
    44be:	4f 4f       	mov.b	r15,	r15	
    44c0:	8f 10       	swpb	r15		
    44c2:	06 4d       	mov	r13,	r6	
    44c4:	06 df       	bis	r15,	r6	
    44c6:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    44ca:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    44ce:	0e f6       	and	r6,	r14	
    44d0:	0f f7       	and	r7,	r15	
    44d2:	0a ee       	xor	r14,	r10	
    44d4:	0b ef       	xor	r15,	r11	
    44d6:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    44da:	2f 52       	add	#4,	r15	;r2 As==10
    44dc:	2c 4f       	mov	@r15,	r12	
    44de:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    44e2:	0e 4c       	mov	r12,	r14	
    44e4:	8e 10       	swpb	r14		
    44e6:	4e 4e       	mov.b	r14,	r14	
    44e8:	12 c3       	clrc			
    44ea:	0e 10       	rrc	r14		
    44ec:	12 c3       	clrc			
    44ee:	0e 10       	rrc	r14		
    44f0:	12 c3       	clrc			
    44f2:	0e 10       	rrc	r14		
    44f4:	12 c3       	clrc			
    44f6:	0e 10       	rrc	r14		
    44f8:	12 c3       	clrc			
    44fa:	0e 10       	rrc	r14		
    44fc:	12 c3       	clrc			
    44fe:	0e 10       	rrc	r14		
    4500:	0f 4d       	mov	r13,	r15	
    4502:	0f 5f       	rla	r15		
    4504:	0f 5f       	rla	r15		
    4506:	09 4e       	mov	r14,	r9	
    4508:	09 df       	bis	r15,	r9	
    450a:	0e 4d       	mov	r13,	r14	
    450c:	8e 10       	swpb	r14		
    450e:	4e 4e       	mov.b	r14,	r14	
    4510:	12 c3       	clrc			
    4512:	0e 10       	rrc	r14		
    4514:	12 c3       	clrc			
    4516:	0e 10       	rrc	r14		
    4518:	12 c3       	clrc			
    451a:	0e 10       	rrc	r14		
    451c:	12 c3       	clrc			
    451e:	0e 10       	rrc	r14		
    4520:	12 c3       	clrc			
    4522:	0e 10       	rrc	r14		
    4524:	12 c3       	clrc			
    4526:	0e 10       	rrc	r14		
    4528:	0f 4c       	mov	r12,	r15	
    452a:	0f 5f       	rla	r15		
    452c:	0f 5f       	rla	r15		
    452e:	08 4e       	mov	r14,	r8	
    4530:	08 df       	bis	r15,	r8	
    4532:	0c 4a       	mov	r10,	r12	
    4534:	0d 4b       	mov	r11,	r13	
    4536:	0c e8       	xor	r8,	r12	
    4538:	0d e9       	xor	r9,	r13	
    453a:	5f 44 e0 ff 	mov.b	-32(r4),r15	;0xffe0(r4)
    453e:	3e 40 2b 00 	mov	#43,	r14	;#0x002b
    4542:	0b 4e       	mov	r14,	r11	
    4544:	0b 8f       	sub	r15,	r11	
    4546:	0f 4b       	mov	r11,	r15	
    4548:	0f 5f       	rla	r15		
    454a:	0f 5f       	rla	r15		
    454c:	1f 54 ea ff 	add	-22(r4),r15	;0xffea(r4)
    4550:	2e 4f       	mov	@r15,	r14	
    4552:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    4556:	0e ec       	xor	r12,	r14	
    4558:	0f ed       	xor	r13,	r15	
    455a:	85 4e 00 00 	mov	r14,	0(r5)	;0x0000(r5)
    455e:	85 4f 02 00 	mov	r15,	2(r5)	;0x0002(r5)
        crypt[0] = tmp;
    4562:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4566:	9f 44 e2 ff 	mov	-30(r4),0(r15)	;0xffe2(r4), 0x0000(r15)
    456a:	00 00 
    456c:	9f 44 e4 ff 	mov	-28(r4),2(r15)	;0xffe4(r4), 0x0002(r15)
    4570:	02 00 
    u8 i;
    u32 tmp;
    crypt[0] = text[0];
    crypt[1] = text[1];

    for ( i=0 ; i<44 ; i++ )
    4572:	d4 53 e0 ff 	inc.b	-32(r4)	;0xffe0(r4)
    4576:	f4 90 2c 00 	cmp.b	#44,	-32(r4)	;#0x002c, 0xffe0(r4)
    457a:	e0 ff 
    457c:	62 2b       	jnc	$-314    	;abs 0x4442
    {
        tmp = crypt[1];
        crypt[1] = crypt[0] ^ ((ROTATE_LEFT_32(crypt[1],1)) & (ROTATE_LEFT_32(crypt[1],8))) ^ (ROTATE_LEFT_32(crypt[1],2)) ^ key[43-i];
        crypt[0] = tmp;
    }
}
    457e:	31 50 10 00 	add	#16,	r1	;#0x0010
    4582:	34 41       	pop	r4		
    4584:	35 41       	pop	r5		
    4586:	36 41       	pop	r6		
    4588:	37 41       	pop	r7		
    458a:	38 41       	pop	r8		
    458c:	39 41       	pop	r9		
    458e:	3a 41       	pop	r10		
    4590:	3b 41       	pop	r11		
    4592:	30 41       	ret			

00004594 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4594:	04 12       	push	r4		
    4596:	04 41       	mov	r1,	r4	
    4598:	24 53       	incd	r4		
    459a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    459e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    45a2:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    45a6:	0d 3c       	jmp	$+28     	;abs 0x45c2
    {
      for (i = 0; i<d; i++) 
    45a8:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    45ac:	04 3c       	jmp	$+10     	;abs 0x45b6
	{
	  nop();
    45ae:	03 43       	nop			
	  nop();
    45b0:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    45b2:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    45b6:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    45ba:	f8 ff 
    45bc:	f8 2b       	jnc	$-14     	;abs 0x45ae
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    45be:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    45c2:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    45c6:	fa ff 
    45c8:	ef 2b       	jnc	$-32     	;abs 0x45a8
	{
	  nop();
	  nop();
	}
    }
}
    45ca:	31 50 06 00 	add	#6,	r1	;#0x0006
    45ce:	34 41       	pop	r4		
    45d0:	30 41       	ret			

000045d2 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    45d2:	04 12       	push	r4		
    45d4:	04 41       	mov	r1,	r4	
    45d6:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    45d8:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    45dc:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    45de:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    45e2:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    45e6:	5f 42 1b 00 	mov.b	&0x001b,r15	
    45ea:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    45ee:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    45f2:	5f 42 05 00 	mov.b	&0x0005,r15	
    45f6:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    45fa:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    45fe:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4602:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4606:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4608:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    460c:	79 00 
  U1RCTL = 0;
    460e:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4612:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4616:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    461a:	7c 00 
  U1MCTL = U1MCTL_INIT;
    461c:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4620:	7b 00 

  delay(0x800);
    4622:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4626:	b0 12 94 45 	call	#0x4594	
  return 0;
    462a:	0f 43       	clr	r15		
}
    462c:	34 41       	pop	r4		
    462e:	30 41       	ret			

00004630 <uart1_putchar>:

int uart1_putchar(int c)
{
    4630:	04 12       	push	r4		
    4632:	04 41       	mov	r1,	r4	
    4634:	24 53       	incd	r4		
    4636:	21 83       	decd	r1		
    4638:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    463c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4640:	4f 4f       	mov.b	r15,	r15	
    4642:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4646:	03 43       	nop			
    4648:	5f 42 79 00 	mov.b	&0x0079,r15	
    464c:	4f 4f       	mov.b	r15,	r15	
    464e:	1f f3       	and	#1,	r15	;r3 As==01
    4650:	0f 93       	tst	r15		
    4652:	fa 27       	jz	$-10     	;abs 0x4648
  return (unsigned char)c;
    4654:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4658:	4f 4f       	mov.b	r15,	r15	
    465a:	4f 4f       	mov.b	r15,	r15	
}
    465c:	21 53       	incd	r1		
    465e:	34 41       	pop	r4		
    4660:	30 41       	ret			

00004662 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4662:	04 12       	push	r4		
    4664:	04 41       	mov	r1,	r4	
    4666:	24 53       	incd	r4		
    4668:	21 83       	decd	r1		
    466a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    466e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4672:	b0 12 30 46 	call	#0x4630	
}
    4676:	21 53       	incd	r1		
    4678:	34 41       	pop	r4		
    467a:	30 41       	ret			

0000467c <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    467c:	04 12       	push	r4		
    467e:	04 41       	mov	r1,	r4	
    4680:	24 53       	incd	r4		
  ;
}
    4682:	34 41       	pop	r4		
    4684:	30 41       	ret			

00004686 <start_decrypt>:
void
start_decrypt()
{
    4686:	04 12       	push	r4		
    4688:	04 41       	mov	r1,	r4	
    468a:	24 53       	incd	r4		
  ;
}
    468c:	34 41       	pop	r4		
    468e:	30 41       	ret			

00004690 <end_expe>:


void
end_expe()
{
    4690:	04 12       	push	r4		
    4692:	04 41       	mov	r1,	r4	
    4694:	24 53       	incd	r4		
  ;
}
    4696:	34 41       	pop	r4		
    4698:	30 41       	ret			

0000469a <_unexpected_>:
    469a:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	06 41 06 41 06 41 06 41 06 41 06 41 06 41 06 41     .A.A.A.A.A.A.A.A
    fff0:	06 41 06 41 06 41 06 41 06 41 06 41 06 41 00 40     .A.A.A.A.A.A.A.@
