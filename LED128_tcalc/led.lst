
led.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00004b24 l    d  .rodata	00000000 .rodata
00001100 l    d  .data	00000000 .data
00001130 l    d  .bss	00000000 .bss
00001230 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 LED128_tcalc.c
00004b24 l     O .rodata	00000010 MixColMatrix
00004b34 l     O .rodata	00000010 sbox
00004b44 l     O .rodata	00000010 invMixColMatrix
00004b54 l     O .rodata	00000010 invSbox
000040e8 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00000000 l    df *ABS*	00000000 memcpy.c
000049f0 g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000030 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040e8  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040e8  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004b64 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000100 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004960 g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040e2  w      .text	00000000 __stop_progExec__
00004a28 g     F .text	000000fa memcpy
000047b8 g     F .text	000000f0 invSCShRMCS
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
00001130 g     O .bss	00000080 Table
000001e4 g       *ABS*	00000000 __DMA0DA
00004474 g     F .text	000000ba MixColumn
00000192 g       *ABS*	00000000 __TBCCR0
000040e8  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004a1e g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040e8  w      .text	00000000 __isr_5
00004b64 g       *ABS*	00000000 __data_load_start
000040e8 g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
0000452e g     F .text	00000096 BuildTableSCShRMCS
000011b0 g     O .bss	00000080 invTable
000040e8  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040e8  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001230 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040e8  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040e8  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000417c g     F .text	000000ea AddKey
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
000040ec g     F .text	00000090 FieldMult
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
000048a8 g     F .text	0000007a invLEDRound
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
00004b22  w      .text	00000000 _unexpected_
000040e8  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040e8  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
000049be g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000045c4 g     F .text	000000ea SCShRMCS
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040e8 g       .text	00000000 __ctors_start
000040e8  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001130 g       .bss	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	000000a4 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040e8  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
000043d8 g     F .text	0000009c ShiftRow
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004922 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040e8  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040e8 g       .text	00000000 __dtors_start
000040e8  w      .text	00000000 __isr_6
000040e8 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040e8  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001130 g       .data	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
000046ae g     F .text	00000078 LEDRound
00001232 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004a0a g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040e2  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004a14 g     F .text	0000000a start_decrypt
00004372 g     F .text	00000066 SubCell
00001100 g       .data	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00004726 g     F .text	00000092 invBuildTableSCShRMCS
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT
00004266 g     F .text	0000010c AddConstants



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 30 12 	mov	r5,	&0x1230	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 30 12 	mov	&0x1230,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 64 4b 	mov	19300(r15),4352(r15);0x4b64(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 01 	mov	#256,	r15	;#0x0100
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 30 12 	mov	&0x1230,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 30 11 	mov.b	#0,	4400(r15);r3 As==00, 0x1130(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
	



int main(int argc, char*argv[])
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 c8 ff 	add	#-56,	r1	;#0xffc8
    4046:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    404a:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i,j;

	u8 state[4][4];
	u8 keys[128/4];

	START_ENCRYPT();
    404e:	b0 12 0a 4a 	call	#0x4a0a	

	for(i = 0; i < 4; i++)
    4052:	84 43 c6 ff 	mov	#0,	-58(r4)	;r3 As==00, 0xffc6(r4)
    4056:	17 3c       	jmp	$+48     	;abs 0x4086
	  for(j = 0; j < 4; j++)
    4058:	84 43 c8 ff 	mov	#0,	-56(r4)	;r3 As==00, 0xffc8(r4)
    405c:	0f 3c       	jmp	$+32     	;abs 0x407c
	    state[i][j] = 0;
    405e:	1f 44 c6 ff 	mov	-58(r4),r15	;0xffc6(r4)
    4062:	0f 5f       	rla	r15		
    4064:	0f 5f       	rla	r15		
    4066:	3e 40 c6 ff 	mov	#-58,	r14	;#0xffc6
    406a:	0e 54       	add	r4,	r14	
    406c:	0f 5e       	add	r14,	r15	
    406e:	1f 54 c8 ff 	add	-56(r4),r15	;0xffc8(r4)
    4072:	2f 52       	add	#4,	r15	;r2 As==10
    4074:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
	u8 keys[128/4];

	START_ENCRYPT();

	for(i = 0; i < 4; i++)
	  for(j = 0; j < 4; j++)
    4078:	94 53 c8 ff 	inc	-56(r4)	;0xffc8(r4)
    407c:	a4 92 c8 ff 	cmp	#4,	-56(r4)	;r2 As==10, 0xffc8(r4)
    4080:	ee 3b       	jl	$-34     	;abs 0x405e
	u8 state[4][4];
	u8 keys[128/4];

	START_ENCRYPT();

	for(i = 0; i < 4; i++)
    4082:	94 53 c6 ff 	inc	-58(r4)	;0xffc6(r4)
    4086:	a4 92 c6 ff 	cmp	#4,	-58(r4)	;r2 As==10, 0xffc6(r4)
    408a:	e6 3b       	jl	$-50     	;abs 0x4058
	  for(j = 0; j < 4; j++)
	    state[i][j] = 0;

	for(i=0; i < 32; i++)
    408c:	84 43 c6 ff 	mov	#0,	-58(r4)	;r3 As==00, 0xffc6(r4)
    4090:	09 3c       	jmp	$+20     	;abs 0x40a4
	  keys[i] = 0;
    4092:	0f 44       	mov	r4,	r15	
    4094:	3f 50 da ff 	add	#-38,	r15	;#0xffda
    4098:	1f 54 c6 ff 	add	-58(r4),r15	;0xffc6(r4)
    409c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)

	for(i = 0; i < 4; i++)
	  for(j = 0; j < 4; j++)
	    state[i][j] = 0;

	for(i=0; i < 32; i++)
    40a0:	94 53 c6 ff 	inc	-58(r4)	;0xffc6(r4)
    40a4:	b4 90 20 00 	cmp	#32,	-58(r4)	;#0x0020, 0xffc6(r4)
    40a8:	c6 ff 
    40aa:	f3 3b       	jl	$-24     	;abs 0x4092
	  keys[i] = 0;
	
	
	BuildTableSCShRMCS();
    40ac:	b0 12 2e 45 	call	#0x452e	
	LEDRound(state, keys);
    40b0:	0e 44       	mov	r4,	r14	
    40b2:	3e 50 da ff 	add	#-38,	r14	;#0xffda
    40b6:	0f 44       	mov	r4,	r15	
    40b8:	3f 50 ca ff 	add	#-54,	r15	;#0xffca
    40bc:	b0 12 ae 46 	call	#0x46ae	

	START_DECRYPT();
    40c0:	b0 12 14 4a 	call	#0x4a14	
	invBuildTableSCShRMCS();
    40c4:	b0 12 26 47 	call	#0x4726	
	invLEDRound(state, keys);
    40c8:	0e 44       	mov	r4,	r14	
    40ca:	3e 50 da ff 	add	#-38,	r14	;#0xffda
    40ce:	0f 44       	mov	r4,	r15	
    40d0:	3f 50 ca ff 	add	#-54,	r15	;#0xffca
    40d4:	b0 12 a8 48 	call	#0x48a8	
	END_EXPE();
    40d8:	b0 12 1e 4a 	call	#0x4a1e	
	return 0;
    40dc:	0f 43       	clr	r15		
}
    40de:	31 50 38 00 	add	#56,	r1	;#0x0038

000040e2 <__stop_progExec__>:
    40e2:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40e6:	fd 3f       	jmp	$-4      	;abs 0x40e2

000040e8 <__ctors_end>:
    40e8:	30 40 22 4b 	br	#0x4b22	

000040ec <FieldMult>:
static const u8 invSbox[16] = {5, 14, 15, 8, 12, 1, 2, 13,11,4,6,3,0,7,9,10};



 u8 FieldMult(u8 a, u8 b)
{
    40ec:	04 12       	push	r4		
    40ee:	04 41       	mov	r1,	r4	
    40f0:	24 53       	incd	r4		
    40f2:	31 82       	sub	#8,	r1	;r2 As==11
    40f4:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    40f8:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
	const u8 ReductionPoly = 0x3;
    40fc:	f4 40 03 00 	mov.b	#3,	-6(r4)	;#0x0003, 0xfffa(r4)
    4100:	fa ff 
	u8 x = a, ret = 0;
    4102:	d4 44 fc ff 	mov.b	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    4106:	f6 ff 
    4108:	c4 43 f7 ff 	mov.b	#0,	-9(r4)	;r3 As==00, 0xfff7(r4)
	int i;
	for(i = 0; i < 4; i++) {
    410c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4110:	2b 3c       	jmp	$+88     	;abs 0x4168
		if((b>>i)&1) ret ^= x;
    4112:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    4116:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    411a:	4e 4e       	mov.b	r14,	r14	
    411c:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    4120:	4e 93       	tst.b	r14		
    4122:	04 24       	jz	$+10     	;abs 0x412c
    4124:	0f 11       	rra	r15		
    4126:	7e 53       	add.b	#-1,	r14	;r3 As==11
    4128:	4e 93       	tst.b	r14		
    412a:	fc 23       	jnz	$-6      	;abs 0x4124
    412c:	1f f3       	and	#1,	r15	;r3 As==01
    412e:	4f 4f       	mov.b	r15,	r15	
    4130:	4f 93       	tst.b	r15		
    4132:	03 24       	jz	$+8      	;abs 0x413a
    4134:	d4 e4 f6 ff 	xor.b	-10(r4),-9(r4)	;0xfff6(r4), 0xfff7(r4)
    4138:	f7 ff 
		if(x&0x8) {
    413a:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    413e:	3f f2       	and	#8,	r15	;r2 As==11
    4140:	0f 93       	tst	r15		
    4142:	0a 24       	jz	$+22     	;abs 0x4158
			x <<= 1;
    4144:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    4148:	4f 4f       	mov.b	r15,	r15	
    414a:	4f 5f       	rla.b	r15		
    414c:	c4 4f f6 ff 	mov.b	r15,	-10(r4)	;0xfff6(r4)
			x ^= ReductionPoly;
    4150:	d4 e4 fa ff 	xor.b	-6(r4),	-10(r4)	;0xfffa(r4), 0xfff6(r4)
    4154:	f6 ff 
    4156:	06 3c       	jmp	$+14     	;abs 0x4164
		}
		else x <<= 1;
    4158:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    415c:	4f 4f       	mov.b	r15,	r15	
    415e:	4f 5f       	rla.b	r15		
    4160:	c4 4f f6 ff 	mov.b	r15,	-10(r4)	;0xfff6(r4)
 u8 FieldMult(u8 a, u8 b)
{
	const u8 ReductionPoly = 0x3;
	u8 x = a, ret = 0;
	int i;
	for(i = 0; i < 4; i++) {
    4164:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4168:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    416c:	d2 3b       	jl	$-90     	;abs 0x4112
			x <<= 1;
			x ^= ReductionPoly;
		}
		else x <<= 1;
	}
	return ret&WORDFILTER;
    416e:	5f 44 f7 ff 	mov.b	-9(r4),	r15	;0xfff7(r4)
    4172:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
}
    4176:	31 52       	add	#8,	r1	;r2 As==11
    4178:	34 41       	pop	r4		
    417a:	30 41       	ret			

0000417c <AddKey>:
 * else use the second half of the key
 * 
 * The key bytes are added row wise, i.e., first row , then second row etc.
 * */
 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
    417c:	04 12       	push	r4		
    417e:	04 41       	mov	r1,	r4	
    4180:	24 53       	incd	r4		
    4182:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    4186:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    418a:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    418e:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	int i, j;
	if((half&1) == 0){
    4192:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4196:	1f f3       	and	#1,	r15	;r3 As==01
    4198:	0f 93       	tst	r15		
    419a:	30 20       	jnz	$+98     	;abs 0x41fc
		for(i = 0; i < 4; i++)
    419c:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    41a0:	29 3c       	jmp	$+84     	;abs 0x41f4
			for(j = 0; j < 4; j++)
    41a2:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    41a6:	21 3c       	jmp	$+68     	;abs 0x41ea
				state[i][j] ^= keyBytes[4*i+j];
    41a8:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    41ac:	0f 5f       	rla	r15		
    41ae:	0f 5f       	rla	r15		
    41b0:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    41b4:	0d 5f       	add	r15,	r13	
    41b6:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    41ba:	0f 5f       	rla	r15		
    41bc:	0f 5f       	rla	r15		
    41be:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    41c2:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    41c6:	6e 4f       	mov.b	@r15,	r14	
    41c8:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    41cc:	0f 5f       	rla	r15		
    41ce:	0f 5f       	rla	r15		
    41d0:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    41d4:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    41d8:	6f 4f       	mov.b	@r15,	r15	
    41da:	4e ef       	xor.b	r15,	r14	
    41dc:	0f 4d       	mov	r13,	r15	
    41de:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    41e2:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
	int i, j;
	if((half&1) == 0){
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
    41e6:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    41ea:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    41ee:	dc 3b       	jl	$-70     	;abs 0x41a8
 * */
 void AddKey(u8 state[4][4], u8* keyBytes, int half)
{
	int i, j;
	if((half&1) == 0){
		for(i = 0; i < 4; i++)
    41f0:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    41f4:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    41f8:	d4 3b       	jl	$-86     	;abs 0x41a2
    41fa:	31 3c       	jmp	$+100    	;abs 0x425e
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
    41fc:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    4200:	2b 3c       	jmp	$+88     	;abs 0x4258
			for(j = 0; j < 4; j++)
    4202:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    4206:	23 3c       	jmp	$+72     	;abs 0x424e
				state[i][j] ^= keyBytes[4*i+j+((LED-64)>>2)];
    4208:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    420c:	0f 5f       	rla	r15		
    420e:	0f 5f       	rla	r15		
    4210:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    4214:	0d 5f       	add	r15,	r13	
    4216:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    421a:	0f 5f       	rla	r15		
    421c:	0f 5f       	rla	r15		
    421e:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4222:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4226:	6e 4f       	mov.b	@r15,	r14	
    4228:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    422c:	0f 5f       	rla	r15		
    422e:	0f 5f       	rla	r15		
    4230:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4234:	3f 50 10 00 	add	#16,	r15	;#0x0010
    4238:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    423c:	6f 4f       	mov.b	@r15,	r15	
    423e:	4e ef       	xor.b	r15,	r14	
    4240:	0f 4d       	mov	r13,	r15	
    4242:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4246:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
    424a:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    424e:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    4252:	da 3b       	jl	$-74     	;abs 0x4208
		for(i = 0; i < 4; i++)
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j];
	}
	else{
		for(i = 0; i < 4; i++)
    4254:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    4258:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    425c:	d2 3b       	jl	$-90     	;abs 0x4202
			for(j = 0; j < 4; j++)
				state[i][j] ^= keyBytes[4*i+j+((LED-64)>>2)];
	}
}
    425e:	31 50 0a 00 	add	#10,	r1	;#0x000a
    4262:	34 41       	pop	r4		
    4264:	30 41       	ret			

00004266 <AddConstants>:

 void AddConstants(u8 state[4][4], int r)
{
    4266:	04 12       	push	r4		
    4268:	04 41       	mov	r1,	r4	
    426a:	24 53       	incd	r4		
    426c:	31 50 ca ff 	add	#-54,	r1	;#0xffca
    4270:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    4274:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	const u8 RC[48] = {
    4278:	0f 44       	mov	r4,	r15	
    427a:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    427e:	3e 40 00 11 	mov	#4352,	r14	;#0x1100
    4282:	3d 40 30 00 	mov	#48,	r13	;#0x0030
    4286:	b0 12 28 4a 	call	#0x4a28	
		0x1E, 0x3C, 0x39, 0x33, 0x27, 0x0E, 0x1D, 0x3A, 0x35, 0x2B,
		0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0B, 0x17, 0x2E,
		0x1C, 0x38, 0x31, 0x23, 0x06, 0x0D, 0x1B, 0x36, 0x2D, 0x1A,
		0x34, 0x29, 0x12, 0x24, 0x08, 0x11, 0x22, 0x04
	};
	state[1][0] ^= 1;
    428a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    428e:	2f 52       	add	#4,	r15	;r2 As==10
    4290:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4294:	2e 52       	add	#4,	r14	;r2 As==10
    4296:	6e 4e       	mov.b	@r14,	r14	
    4298:	5e e3       	xor.b	#1,	r14	;r3 As==01
    429a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[2][0] ^= 2;
    429e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42a2:	3f 52       	add	#8,	r15	;r2 As==11
    42a4:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    42a8:	3e 52       	add	#8,	r14	;r2 As==11
    42aa:	6e 4e       	mov.b	@r14,	r14	
    42ac:	6e e3       	xor.b	#2,	r14	;r3 As==10
    42ae:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	state[3][0] ^= 3;
    42b2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42b6:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    42ba:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    42be:	3e 50 0c 00 	add	#12,	r14	;#0x000c
    42c2:	6e 4e       	mov.b	@r14,	r14	
    42c4:	7e e0 03 00 	xor.b	#3,	r14	;#0x0003
    42c8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

	u8 tmp = (RC[r] >> 3) & 7;
    42cc:	0f 44       	mov	r4,	r15	
    42ce:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    42d2:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    42d6:	6f 4f       	mov.b	@r15,	r15	
    42d8:	4f 4f       	mov.b	r15,	r15	
    42da:	4f 4f       	mov.b	r15,	r15	
    42dc:	12 c3       	clrc			
    42de:	4f 10       	rrc.b	r15		
    42e0:	12 c3       	clrc			
    42e2:	4f 10       	rrc.b	r15		
    42e4:	12 c3       	clrc			
    42e6:	4f 10       	rrc.b	r15		
    42e8:	4e 4f       	mov.b	r15,	r14	
    42ea:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    42ee:	c4 4e c8 ff 	mov.b	r14,	-56(r4)	;0xffc8(r4)
	state[0][1] ^= tmp;
    42f2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    42f6:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    42fa:	4e 4f       	mov.b	r15,	r14	
    42fc:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    4300:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4304:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	state[2][1] ^= tmp;
    4308:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    430c:	3f 52       	add	#8,	r15	;r2 As==11
    430e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4312:	3e 52       	add	#8,	r14	;r2 As==11
    4314:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    4318:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    431c:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	tmp =  RC[r] & 7;
    4320:	0f 44       	mov	r4,	r15	
    4322:	3f 50 c9 ff 	add	#-55,	r15	;#0xffc9
    4326:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    432a:	6f 4f       	mov.b	@r15,	r15	
    432c:	4e 4f       	mov.b	r15,	r14	
    432e:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    4332:	c4 4e c8 ff 	mov.b	r14,	-56(r4)	;0xffc8(r4)
	state[1][1] ^= tmp;
    4336:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    433a:	2f 52       	add	#4,	r15	;r2 As==10
    433c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4340:	2e 52       	add	#4,	r14	;r2 As==10
    4342:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    4346:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    434a:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
	state[3][1] ^= tmp;
    434e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4352:	3f 50 0c 00 	add	#12,	r15	;#0x000c
    4356:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    435a:	3e 50 0c 00 	add	#12,	r14	;#0x000c
    435e:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    4362:	5e e4 c8 ff 	xor.b	-56(r4),r14	;0xffc8(r4)
    4366:	cf 4e 01 00 	mov.b	r14,	1(r15)	;0x0001(r15)
}
    436a:	31 50 36 00 	add	#54,	r1	;#0x0036
    436e:	34 41       	pop	r4		
    4370:	30 41       	ret			

00004372 <SubCell>:

 void SubCell(u8 state[4][4])
{
    4372:	04 12       	push	r4		
    4374:	04 41       	mov	r1,	r4	
    4376:	24 53       	incd	r4		
    4378:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    437c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i,j;
	for(i = 0; i < 4; i++)
    4380:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4384:	22 3c       	jmp	$+70     	;abs 0x43ca
		for(j = 0; j <  4; j++)
    4386:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    438a:	1a 3c       	jmp	$+54     	;abs 0x43c0
			state[i][j] = sbox[state[i][j]];
    438c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4390:	0f 5f       	rla	r15		
    4392:	0f 5f       	rla	r15		
    4394:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    4398:	0d 5f       	add	r15,	r13	
    439a:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    439e:	0f 5f       	rla	r15		
    43a0:	0f 5f       	rla	r15		
    43a2:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    43a6:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    43aa:	6f 4f       	mov.b	@r15,	r15	
    43ac:	4f 4f       	mov.b	r15,	r15	
    43ae:	5e 4f 34 4b 	mov.b	19252(r15),r14	;0x4b34(r15)
    43b2:	0f 4d       	mov	r13,	r15	
    43b4:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    43b8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

 void SubCell(u8 state[4][4])
{
	int i,j;
	for(i = 0; i < 4; i++)
		for(j = 0; j <  4; j++)
    43bc:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    43c0:	a4 92 fa ff 	cmp	#4,	-6(r4)	;r2 As==10, 0xfffa(r4)
    43c4:	e3 3b       	jl	$-56     	;abs 0x438c
}

 void SubCell(u8 state[4][4])
{
	int i,j;
	for(i = 0; i < 4; i++)
    43c6:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    43ca:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    43ce:	db 3b       	jl	$-72     	;abs 0x4386
		for(j = 0; j <  4; j++)
			state[i][j] = sbox[state[i][j]];
}
    43d0:	31 50 06 00 	add	#6,	r1	;#0x0006
    43d4:	34 41       	pop	r4		
    43d6:	30 41       	ret			

000043d8 <ShiftRow>:

 void ShiftRow(u8 state[4][4])
{
    43d8:	04 12       	push	r4		
    43da:	04 41       	mov	r1,	r4	
    43dc:	24 53       	incd	r4		
    43de:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    43e2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) {
    43e6:	94 43 f4 ff 	mov	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    43ea:	3d 3c       	jmp	$+124    	;abs 0x4466
		for(j = 0; j < 4; j++)
    43ec:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    43f0:	11 3c       	jmp	$+36     	;abs 0x4414
			tmp[j] = state[i][j];
    43f2:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    43f6:	0f 5f       	rla	r15		
    43f8:	0f 5f       	rla	r15		
    43fa:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    43fe:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4402:	6e 4f       	mov.b	@r15,	r14	
    4404:	0f 44       	mov	r4,	r15	
    4406:	3f 82       	sub	#8,	r15	;r2 As==11
    4408:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    440c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
 void ShiftRow(u8 state[4][4])
{
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) {
		for(j = 0; j < 4; j++)
    4410:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    4414:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    4418:	ec 3b       	jl	$-38     	;abs 0x43f2
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
    441a:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    441e:	1e 3c       	jmp	$+62     	;abs 0x445c
			state[i][j] = tmp[(j+i)%4];
    4420:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4424:	0f 5f       	rla	r15		
    4426:	0f 5f       	rla	r15		
    4428:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    442c:	0d 5f       	add	r15,	r13	
    442e:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4432:	1f 54 f4 ff 	add	-12(r4),r15	;0xfff4(r4)
    4436:	3f f0 03 80 	and	#-32765,r15	;#0x8003
    443a:	0f 93       	tst	r15		
    443c:	04 34       	jge	$+10     	;abs 0x4446
    443e:	3f 53       	add	#-1,	r15	;r3 As==11
    4440:	3f d0 fc ff 	bis	#-4,	r15	;#0xfffc
    4444:	1f 53       	inc	r15		
    4446:	0e 44       	mov	r4,	r14	
    4448:	3e 82       	sub	#8,	r14	;r2 As==11
    444a:	0f 5e       	add	r14,	r15	
    444c:	6e 4f       	mov.b	@r15,	r14	
    444e:	0f 4d       	mov	r13,	r15	
    4450:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4454:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) {
		for(j = 0; j < 4; j++)
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
    4458:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    445c:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    4460:	df 3b       	jl	$-64     	;abs 0x4420

 void ShiftRow(u8 state[4][4])
{
	int i, j;
	u8 tmp[4];
	for(i = 1; i < 4; i++) {
    4462:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    4466:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    446a:	c0 3b       	jl	$-126    	;abs 0x43ec
		for(j = 0; j < 4; j++)
			tmp[j] = state[i][j];
		for(j = 0; j < 4; j++)
			state[i][j] = tmp[(j+i)%4];
	}
}
    446c:	31 50 0a 00 	add	#10,	r1	;#0x000a
    4470:	34 41       	pop	r4		
    4472:	30 41       	ret			

00004474 <MixColumn>:

 void MixColumn(u8 state[4][4])
{
    4474:	04 12       	push	r4		
    4476:	04 41       	mov	r1,	r4	
    4478:	24 53       	incd	r4		
    447a:	31 50 f2 ff 	add	#-14,	r1	;#0xfff2
    447e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
    4482:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    4486:	4c 3c       	jmp	$+154    	;abs 0x4520
		for(i = 0; i < 4; i++) {
    4488:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    448c:	2a 3c       	jmp	$+86     	;abs 0x44e2
			u8 sum = 0;
    448e:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
			for(k = 0; k < 4; k++)
    4492:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    4496:	18 3c       	jmp	$+50     	;abs 0x44c8
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
    4498:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    449c:	0f 5f       	rla	r15		
    449e:	0f 5f       	rla	r15		
    44a0:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    44a4:	1f 54 f2 ff 	add	-14(r4),r15	;0xfff2(r4)
    44a8:	6e 4f       	mov.b	@r15,	r14	
    44aa:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    44ae:	0f 5f       	rla	r15		
    44b0:	0f 5f       	rla	r15		
    44b2:	1f 54 f4 ff 	add	-12(r4),r15	;0xfff4(r4)
    44b6:	3f 50 24 4b 	add	#19236,	r15	;#0x4b24
    44ba:	6f 4f       	mov.b	@r15,	r15	
    44bc:	b0 12 ec 40 	call	#0x40ec	
    44c0:	c4 ef f6 ff 	xor.b	r15,	-10(r4)	;0xfff6(r4)
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++) {
			u8 sum = 0;
			for(k = 0; k < 4; k++)
    44c4:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
    44c8:	a4 92 f4 ff 	cmp	#4,	-12(r4)	;r2 As==10, 0xfff4(r4)
    44cc:	e5 3b       	jl	$-52     	;abs 0x4498
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
    44ce:	0f 44       	mov	r4,	r15	
    44d0:	3f 50 f7 ff 	add	#-9,	r15	;#0xfff7
    44d4:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    44d8:	df 44 f6 ff 	mov.b	-10(r4),0(r15)	;0xfff6(r4), 0x0000(r15)
    44dc:	00 00 
 void MixColumn(u8 state[4][4])
{
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++) {
    44de:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    44e2:	a4 92 f0 ff 	cmp	#4,	-16(r4)	;r2 As==10, 0xfff0(r4)
    44e6:	d3 3b       	jl	$-88     	;abs 0x448e
			u8 sum = 0;
			for(k = 0; k < 4; k++)
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
    44e8:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    44ec:	14 3c       	jmp	$+42     	;abs 0x4516
			state[i][j] = tmp[i];
    44ee:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    44f2:	0f 5f       	rla	r15		
    44f4:	0f 5f       	rla	r15		
    44f6:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    44fa:	0d 5f       	add	r15,	r13	
    44fc:	0f 44       	mov	r4,	r15	
    44fe:	3f 50 f7 ff 	add	#-9,	r15	;#0xfff7
    4502:	1f 54 f0 ff 	add	-16(r4),r15	;0xfff0(r4)
    4506:	6e 4f       	mov.b	@r15,	r14	
    4508:	0f 4d       	mov	r13,	r15	
    450a:	1f 54 f2 ff 	add	-14(r4),r15	;0xfff2(r4)
    450e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			u8 sum = 0;
			for(k = 0; k < 4; k++)
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
    4512:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    4516:	a4 92 f0 ff 	cmp	#4,	-16(r4)	;r2 As==10, 0xfff0(r4)
    451a:	e9 3b       	jl	$-44     	;abs 0x44ee

 void MixColumn(u8 state[4][4])
{
	int i, j, k;
	u8 tmp[4];
	for(j = 0; j < 4; j++){
    451c:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
    4520:	a4 92 f2 ff 	cmp	#4,	-14(r4)	;r2 As==10, 0xfff2(r4)
    4524:	b1 3b       	jl	$-156    	;abs 0x4488
			tmp[i] = sum;
		}
		for(i = 0; i < 4; i++)
			state[i][j] = tmp[i];
	}
}
    4526:	31 50 0e 00 	add	#14,	r1	;#0x000e
    452a:	34 41       	pop	r4		
    452c:	30 41       	ret			

0000452e <BuildTableSCShRMCS>:

u16 Table[4][1<<4];
 void BuildTableSCShRMCS()
{
    452e:	04 12       	push	r4		
    4530:	04 41       	mov	r1,	r4	
    4532:	24 53       	incd	r4		
    4534:	31 82       	sub	#8,	r1	;r2 As==11
	int c, v, r;
	u16 tv;
	for(v = 0; v < (1<<4); v++) {
    4536:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    453a:	3d 3c       	jmp	$+124    	;abs 0x45b6
		for(c = 0; c < 4; c++){ // compute the entry Table[c][v]
    453c:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    4540:	35 3c       	jmp	$+108    	;abs 0x45ac
			tv = 0;
    4542:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
			for(r = 0; r < 4; r++){
    4546:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    454a:	1d 3c       	jmp	$+60     	;abs 0x4586
				tv <<= 4;
    454c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4550:	0f 5f       	rla	r15		
    4552:	0f 5f       	rla	r15		
    4554:	0f 5f       	rla	r15		
    4556:	0f 5f       	rla	r15		
    4558:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
				tv |= (u16) FieldMult(MixColMatrix[r][c], sbox[v]);
    455c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4560:	3f 50 34 4b 	add	#19252,	r15	;#0x4b34
    4564:	6e 4f       	mov.b	@r15,	r14	
    4566:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    456a:	0f 5f       	rla	r15		
    456c:	0f 5f       	rla	r15		
    456e:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4572:	3f 50 24 4b 	add	#19236,	r15	;#0x4b24
    4576:	6f 4f       	mov.b	@r15,	r15	
    4578:	b0 12 ec 40 	call	#0x40ec	
    457c:	4f 4f       	mov.b	r15,	r15	
    457e:	84 df fc ff 	bis	r15,	-4(r4)	;0xfffc(r4)
	int c, v, r;
	u16 tv;
	for(v = 0; v < (1<<4); v++) {
		for(c = 0; c < 4; c++){ // compute the entry Table[c][v]
			tv = 0;
			for(r = 0; r < 4; r++){
    4582:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4586:	a4 92 fa ff 	cmp	#4,	-6(r4)	;r2 As==10, 0xfffa(r4)
    458a:	e0 3b       	jl	$-62     	;abs 0x454c
				tv <<= 4;
				tv |= (u16) FieldMult(MixColMatrix[r][c], sbox[v]);
			}
			Table[c][v] = tv;
    458c:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4590:	0f 5f       	rla	r15		
    4592:	0f 5f       	rla	r15		
    4594:	0f 5f       	rla	r15		
    4596:	0f 5f       	rla	r15		
    4598:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    459c:	0f 5f       	rla	r15		
    459e:	3f 50 30 11 	add	#4400,	r15	;#0x1130
    45a2:	9f 44 fc ff 	mov	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    45a6:	00 00 
 void BuildTableSCShRMCS()
{
	int c, v, r;
	u16 tv;
	for(v = 0; v < (1<<4); v++) {
		for(c = 0; c < 4; c++){ // compute the entry Table[c][v]
    45a8:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    45ac:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    45b0:	c8 3b       	jl	$-110    	;abs 0x4542
u16 Table[4][1<<4];
 void BuildTableSCShRMCS()
{
	int c, v, r;
	u16 tv;
	for(v = 0; v < (1<<4); v++) {
    45b2:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    45b6:	b4 90 10 00 	cmp	#16,	-8(r4)	;#0x0010, 0xfff8(r4)
    45ba:	f8 ff 
    45bc:	bf 3b       	jl	$-128    	;abs 0x453c
				tv |= (u16) FieldMult(MixColMatrix[r][c], sbox[v]);
			}
			Table[c][v] = tv;
		}
	}
}
    45be:	31 52       	add	#8,	r1	;r2 As==11
    45c0:	34 41       	pop	r4		
    45c2:	30 41       	ret			

000045c4 <SCShRMCS>:

 void SCShRMCS(u8 state[4][4])
{
    45c4:	04 12       	push	r4		
    45c6:	04 41       	mov	r1,	r4	
    45c8:	24 53       	incd	r4		
    45ca:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    45ce:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int c,r;
	u16 v;
	u8 os[4][4];
	memcpy(os, state, 4*4);
    45d2:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    45d6:	0f 44       	mov	r4,	r15	
    45d8:	3f 50 ec ff 	add	#-20,	r15	;#0xffec
    45dc:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    45e0:	b0 12 28 4a 	call	#0x4a28	

	for(c = 0; c < 4; c++){
    45e4:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    45e8:	5b 3c       	jmp	$+184    	;abs 0x46a0
		v = 0;
    45ea:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
		for(r = 0; r < 4; r++)
    45ee:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    45f2:	29 3c       	jmp	$+84     	;abs 0x4646
			v ^= Table[r][os[r][(r+c)%4]];
    45f4:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    45f8:	1f 54 e6 ff 	add	-26(r4),r15	;0xffe6(r4)
    45fc:	3f f0 03 80 	and	#-32765,r15	;#0x8003
    4600:	0f 93       	tst	r15		
    4602:	04 34       	jge	$+10     	;abs 0x460c
    4604:	3f 53       	add	#-1,	r15	;r3 As==11
    4606:	3f d0 fc ff 	bis	#-4,	r15	;#0xfffc
    460a:	1f 53       	inc	r15		
    460c:	0e 4f       	mov	r15,	r14	
    460e:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4612:	0f 5f       	rla	r15		
    4614:	0f 5f       	rla	r15		
    4616:	3d 40 e6 ff 	mov	#-26,	r13	;#0xffe6
    461a:	0d 54       	add	r4,	r13	
    461c:	0f 5d       	add	r13,	r15	
    461e:	0f 5e       	add	r14,	r15	
    4620:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4624:	6f 4f       	mov.b	@r15,	r15	
    4626:	4e 4f       	mov.b	r15,	r14	
    4628:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    462c:	0f 5f       	rla	r15		
    462e:	0f 5f       	rla	r15		
    4630:	0f 5f       	rla	r15		
    4632:	0f 5f       	rla	r15		
    4634:	0f 5e       	add	r14,	r15	
    4636:	0f 5f       	rla	r15		
    4638:	3f 50 30 11 	add	#4400,	r15	;#0x1130
    463c:	2f 4f       	mov	@r15,	r15	
    463e:	84 ef ea ff 	xor	r15,	-22(r4)	;0xffea(r4)
	u8 os[4][4];
	memcpy(os, state, 4*4);

	for(c = 0; c < 4; c++){
		v = 0;
		for(r = 0; r < 4; r++)
    4642:	94 53 e8 ff 	inc	-24(r4)	;0xffe8(r4)
    4646:	a4 92 e8 ff 	cmp	#4,	-24(r4)	;r2 As==10, 0xffe8(r4)
    464a:	d4 3b       	jl	$-86     	;abs 0x45f4
			v ^= Table[r][os[r][(r+c)%4]];

		for(r = 1; r <= 4; r++){
    464c:	94 43 e8 ff 	mov	#1,	-24(r4)	;r3 As==01, 0xffe8(r4)
    4650:	21 3c       	jmp	$+68     	;abs 0x4694
			state[4-r][c] = (u8)v & WORDFILTER;
    4652:	2f 42       	mov	#4,	r15	;r2 As==10
    4654:	1f 84 e8 ff 	sub	-24(r4),r15	;0xffe8(r4)
    4658:	0f 5f       	rla	r15		
    465a:	0f 5f       	rla	r15		
    465c:	1d 44 fc ff 	mov	-4(r4),	r13	;0xfffc(r4)
    4660:	0d 5f       	add	r15,	r13	
    4662:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4666:	4f 4f       	mov.b	r15,	r15	
    4668:	4e 4f       	mov.b	r15,	r14	
    466a:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    466e:	0f 4d       	mov	r13,	r15	
    4670:	1f 54 e6 ff 	add	-26(r4),r15	;0xffe6(r4)
    4674:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			v >>= 4;
    4678:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    467c:	12 c3       	clrc			
    467e:	0f 10       	rrc	r15		
    4680:	12 c3       	clrc			
    4682:	0f 10       	rrc	r15		
    4684:	12 c3       	clrc			
    4686:	0f 10       	rrc	r15		
    4688:	12 c3       	clrc			
    468a:	0f 10       	rrc	r15		
    468c:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
	for(c = 0; c < 4; c++){
		v = 0;
		for(r = 0; r < 4; r++)
			v ^= Table[r][os[r][(r+c)%4]];

		for(r = 1; r <= 4; r++){
    4690:	94 53 e8 ff 	inc	-24(r4)	;0xffe8(r4)
    4694:	b4 90 05 00 	cmp	#5,	-24(r4)	;#0x0005, 0xffe8(r4)
    4698:	e8 ff 
    469a:	db 3b       	jl	$-72     	;abs 0x4652
	int c,r;
	u16 v;
	u8 os[4][4];
	memcpy(os, state, 4*4);

	for(c = 0; c < 4; c++){
    469c:	94 53 e6 ff 	inc	-26(r4)	;0xffe6(r4)
    46a0:	a4 92 e6 ff 	cmp	#4,	-26(r4)	;r2 As==10, 0xffe6(r4)
    46a4:	a2 3b       	jl	$-186    	;abs 0x45ea
		for(r = 1; r <= 4; r++){
			state[4-r][c] = (u8)v & WORDFILTER;
			v >>= 4;
		}
	}
}
    46a6:	31 50 18 00 	add	#24,	r1	;#0x0018
    46aa:	34 41       	pop	r4		
    46ac:	30 41       	ret			

000046ae <LEDRound>:

 void LEDRound(u8 state[4][4], u8* keyBytes)
{
    46ae:	04 12       	push	r4		
    46b0:	04 41       	mov	r1,	r4	
    46b2:	24 53       	incd	r4		
    46b4:	31 82       	sub	#8,	r1	;r2 As==11
    46b6:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    46ba:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i,j;
	AddKey(state, keyBytes, 0);
    46be:	0d 43       	clr	r13		
    46c0:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    46c4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    46c8:	b0 12 7c 41 	call	#0x417c	
	for(i = 0; i < RN/4; i++){
    46cc:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    46d0:	23 3c       	jmp	$+72     	;abs 0x4718
		for(j = 0; j < 4; j++)
    46d2:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    46d6:	11 3c       	jmp	$+36     	;abs 0x46fa
		{
			AddConstants(state, i*4+j);
    46d8:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    46dc:	0f 5f       	rla	r15		
    46de:	0f 5f       	rla	r15		
    46e0:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    46e4:	0e 4f       	mov	r15,	r14	
    46e6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    46ea:	b0 12 66 42 	call	#0x4266	
			SCShRMCS(state);
    46ee:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    46f2:	b0 12 c4 45 	call	#0x45c4	
 void LEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	AddKey(state, keyBytes, 0);
	for(i = 0; i < RN/4; i++){
		for(j = 0; j < 4; j++)
    46f6:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    46fa:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    46fe:	ec 3b       	jl	$-38     	;abs 0x46d8
		{
			AddConstants(state, i*4+j);
			SCShRMCS(state);
		}
		AddKey(state, keyBytes, i+1);
    4700:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4704:	1f 53       	inc	r15		
    4706:	0d 4f       	mov	r15,	r13	
    4708:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    470c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4710:	b0 12 7c 41 	call	#0x417c	

 void LEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	AddKey(state, keyBytes, 0);
	for(i = 0; i < RN/4; i++){
    4714:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    4718:	b4 90 0c 00 	cmp	#12,	-10(r4)	;#0x000c, 0xfff6(r4)
    471c:	f6 ff 
    471e:	d9 3b       	jl	$-76     	;abs 0x46d2
			AddConstants(state, i*4+j);
			SCShRMCS(state);
		}
		AddKey(state, keyBytes, i+1);
	}
}
    4720:	31 52       	add	#8,	r1	;r2 As==11
    4722:	34 41       	pop	r4		
    4724:	30 41       	ret			

00004726 <invBuildTableSCShRMCS>:


u16 invTable[4][1<<4];
 void invBuildTableSCShRMCS()
{
    4726:	04 12       	push	r4		
    4728:	04 41       	mov	r1,	r4	
    472a:	24 53       	incd	r4		
    472c:	31 82       	sub	#8,	r1	;r2 As==11
	int c, v, r;
	u16 tv;
	for(v = 0; v < (1<<4); v++)
    472e:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4732:	3b 3c       	jmp	$+120    	;abs 0x47aa
	{
		for(c = 0; c < 4; c++)
    4734:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    4738:	33 3c       	jmp	$+104    	;abs 0x47a0
		{ // compute the entry Table[c][v]
			tv = 0;
    473a:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
			for(r = 0; r < 4; r++)
    473e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4742:	1b 3c       	jmp	$+56     	;abs 0x477a
			{
				tv <<= 4;
    4744:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4748:	0f 5f       	rla	r15		
    474a:	0f 5f       	rla	r15		
    474c:	0f 5f       	rla	r15		
    474e:	0f 5f       	rla	r15		
    4750:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
				tv |= (u16) FieldMult(invMixColMatrix[r][c], v);
    4754:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4758:	4e 4f       	mov.b	r15,	r14	
    475a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    475e:	0f 5f       	rla	r15		
    4760:	0f 5f       	rla	r15		
    4762:	1f 54 f6 ff 	add	-10(r4),r15	;0xfff6(r4)
    4766:	3f 50 44 4b 	add	#19268,	r15	;#0x4b44
    476a:	6f 4f       	mov.b	@r15,	r15	
    476c:	b0 12 ec 40 	call	#0x40ec	
    4770:	4f 4f       	mov.b	r15,	r15	
    4772:	84 df fc ff 	bis	r15,	-4(r4)	;0xfffc(r4)
	for(v = 0; v < (1<<4); v++)
	{
		for(c = 0; c < 4; c++)
		{ // compute the entry Table[c][v]
			tv = 0;
			for(r = 0; r < 4; r++)
    4776:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    477a:	a4 92 fa ff 	cmp	#4,	-6(r4)	;r2 As==10, 0xfffa(r4)
    477e:	e2 3b       	jl	$-58     	;abs 0x4744
			{
				tv <<= 4;
				tv |= (u16) FieldMult(invMixColMatrix[r][c], v);
			}
			invTable[c][v] = tv;
    4780:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    4784:	0f 5f       	rla	r15		
    4786:	0f 5f       	rla	r15		
    4788:	0f 5f       	rla	r15		
    478a:	0f 5f       	rla	r15		
    478c:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    4790:	0f 5f       	rla	r15		
    4792:	3f 50 b0 11 	add	#4528,	r15	;#0x11b0
    4796:	9f 44 fc ff 	mov	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    479a:	00 00 
{
	int c, v, r;
	u16 tv;
	for(v = 0; v < (1<<4); v++)
	{
		for(c = 0; c < 4; c++)
    479c:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    47a0:	a4 92 f6 ff 	cmp	#4,	-10(r4)	;r2 As==10, 0xfff6(r4)
    47a4:	ca 3b       	jl	$-106    	;abs 0x473a
u16 invTable[4][1<<4];
 void invBuildTableSCShRMCS()
{
	int c, v, r;
	u16 tv;
	for(v = 0; v < (1<<4); v++)
    47a6:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    47aa:	b4 90 10 00 	cmp	#16,	-8(r4)	;#0x0010, 0xfff8(r4)
    47ae:	f8 ff 
    47b0:	c1 3b       	jl	$-124    	;abs 0x4734
				tv |= (u16) FieldMult(invMixColMatrix[r][c], v);
			}
			invTable[c][v] = tv;
		}
	}
}
    47b2:	31 52       	add	#8,	r1	;r2 As==11
    47b4:	34 41       	pop	r4		
    47b6:	30 41       	ret			

000047b8 <invSCShRMCS>:

 void invSCShRMCS(u8 state[4][4])
{
    47b8:	04 12       	push	r4		
    47ba:	04 41       	mov	r1,	r4	
    47bc:	24 53       	incd	r4		
    47be:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    47c2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	int c,r;
	u16 v;
	u8 os[4][4];
	memcpy(os, state, 4*4);
    47c6:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    47ca:	0f 44       	mov	r4,	r15	
    47cc:	3f 50 ec ff 	add	#-20,	r15	;#0xffec
    47d0:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    47d4:	b0 12 28 4a 	call	#0x4a28	

	for(c = 0; c < 4; c++){
    47d8:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    47dc:	5e 3c       	jmp	$+190    	;abs 0x489a
		v = 0;
    47de:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
		for(r = 0; r < 4; r++)
    47e2:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    47e6:	1d 3c       	jmp	$+60     	;abs 0x4822
			v ^= invTable[r][os[r][c]];
    47e8:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    47ec:	0f 5f       	rla	r15		
    47ee:	0f 5f       	rla	r15		
    47f0:	3e 40 e6 ff 	mov	#-26,	r14	;#0xffe6
    47f4:	0e 54       	add	r4,	r14	
    47f6:	0f 5e       	add	r14,	r15	
    47f8:	1f 54 e6 ff 	add	-26(r4),r15	;0xffe6(r4)
    47fc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4800:	6f 4f       	mov.b	@r15,	r15	
    4802:	4e 4f       	mov.b	r15,	r14	
    4804:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    4808:	0f 5f       	rla	r15		
    480a:	0f 5f       	rla	r15		
    480c:	0f 5f       	rla	r15		
    480e:	0f 5f       	rla	r15		
    4810:	0f 5e       	add	r14,	r15	
    4812:	0f 5f       	rla	r15		
    4814:	3f 50 b0 11 	add	#4528,	r15	;#0x11b0
    4818:	2f 4f       	mov	@r15,	r15	
    481a:	84 ef ea ff 	xor	r15,	-22(r4)	;0xffea(r4)
	u8 os[4][4];
	memcpy(os, state, 4*4);

	for(c = 0; c < 4; c++){
		v = 0;
		for(r = 0; r < 4; r++)
    481e:	94 53 e8 ff 	inc	-24(r4)	;0xffe8(r4)
    4822:	a4 92 e8 ff 	cmp	#4,	-24(r4)	;r2 As==10, 0xffe8(r4)
    4826:	e0 3b       	jl	$-62     	;abs 0x47e8
			v ^= invTable[r][os[r][c]];

		for(r = 1; r <= 4; r++){
    4828:	94 43 e8 ff 	mov	#1,	-24(r4)	;r3 As==01, 0xffe8(r4)
    482c:	30 3c       	jmp	$+98     	;abs 0x488e
			state[4-r][(c+(4-r))%4] = invSbox[(u8)v & WORDFILTER];
    482e:	2f 42       	mov	#4,	r15	;r2 As==10
    4830:	1f 84 e8 ff 	sub	-24(r4),r15	;0xffe8(r4)
    4834:	0f 5f       	rla	r15		
    4836:	0f 5f       	rla	r15		
    4838:	1c 44 fc ff 	mov	-4(r4),	r12	;0xfffc(r4)
    483c:	0c 5f       	add	r15,	r12	
    483e:	2f 42       	mov	#4,	r15	;r2 As==10
    4840:	1f 84 e8 ff 	sub	-24(r4),r15	;0xffe8(r4)
    4844:	1f 54 e6 ff 	add	-26(r4),r15	;0xffe6(r4)
    4848:	3f f0 03 80 	and	#-32765,r15	;#0x8003
    484c:	0f 93       	tst	r15		
    484e:	04 34       	jge	$+10     	;abs 0x4858
    4850:	3f 53       	add	#-1,	r15	;r3 As==11
    4852:	3f d0 fc ff 	bis	#-4,	r15	;#0xfffc
    4856:	1f 53       	inc	r15		
    4858:	0d 4f       	mov	r15,	r13	
    485a:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    485e:	4f 4f       	mov.b	r15,	r15	
    4860:	4f 4f       	mov.b	r15,	r15	
    4862:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    4866:	5e 4f 54 4b 	mov.b	19284(r15),r14	;0x4b54(r15)
    486a:	0f 4c       	mov	r12,	r15	
    486c:	0f 5d       	add	r13,	r15	
    486e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
			v >>= 4;
    4872:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    4876:	12 c3       	clrc			
    4878:	0f 10       	rrc	r15		
    487a:	12 c3       	clrc			
    487c:	0f 10       	rrc	r15		
    487e:	12 c3       	clrc			
    4880:	0f 10       	rrc	r15		
    4882:	12 c3       	clrc			
    4884:	0f 10       	rrc	r15		
    4886:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
	for(c = 0; c < 4; c++){
		v = 0;
		for(r = 0; r < 4; r++)
			v ^= invTable[r][os[r][c]];

		for(r = 1; r <= 4; r++){
    488a:	94 53 e8 ff 	inc	-24(r4)	;0xffe8(r4)
    488e:	b4 90 05 00 	cmp	#5,	-24(r4)	;#0x0005, 0xffe8(r4)
    4892:	e8 ff 
    4894:	cc 3b       	jl	$-102    	;abs 0x482e
	int c,r;
	u16 v;
	u8 os[4][4];
	memcpy(os, state, 4*4);

	for(c = 0; c < 4; c++){
    4896:	94 53 e6 ff 	inc	-26(r4)	;0xffe6(r4)
    489a:	a4 92 e6 ff 	cmp	#4,	-26(r4)	;r2 As==10, 0xffe6(r4)
    489e:	9f 3b       	jl	$-192    	;abs 0x47de
		for(r = 1; r <= 4; r++){
			state[4-r][(c+(4-r))%4] = invSbox[(u8)v & WORDFILTER];
			v >>= 4;
		}
	}
}
    48a0:	31 50 18 00 	add	#24,	r1	;#0x0018
    48a4:	34 41       	pop	r4		
    48a6:	30 41       	ret			

000048a8 <invLEDRound>:

 void invLEDRound(u8 state[4][4], u8* keyBytes)
{
    48a8:	04 12       	push	r4		
    48aa:	04 41       	mov	r1,	r4	
    48ac:	24 53       	incd	r4		
    48ae:	31 82       	sub	#8,	r1	;r2 As==11
    48b0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    48b4:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i,j;
	for(i = (RN/4)-1; i >=0; i--)
    48b8:	b4 40 0b 00 	mov	#11,	-10(r4)	;#0x000b, 0xfff6(r4)
    48bc:	f6 ff 
    48be:	24 3c       	jmp	$+74     	;abs 0x4908
	{
		AddKey(state, keyBytes, i+1);
    48c0:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    48c4:	1f 53       	inc	r15		
    48c6:	0d 4f       	mov	r15,	r13	
    48c8:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    48cc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48d0:	b0 12 7c 41 	call	#0x417c	
		for(j = 3; j >= 0; j--)
    48d4:	b4 40 03 00 	mov	#3,	-8(r4)	;#0x0003, 0xfff8(r4)
    48d8:	f8 ff 
    48da:	11 3c       	jmp	$+36     	;abs 0x48fe
		{
			invSCShRMCS(state);
    48dc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48e0:	b0 12 b8 47 	call	#0x47b8	
			AddConstants(state, i*4+j);
    48e4:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    48e8:	0f 5f       	rla	r15		
    48ea:	0f 5f       	rla	r15		
    48ec:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    48f0:	0e 4f       	mov	r15,	r14	
    48f2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    48f6:	b0 12 66 42 	call	#0x4266	
{
	int i,j;
	for(i = (RN/4)-1; i >=0; i--)
	{
		AddKey(state, keyBytes, i+1);
		for(j = 3; j >= 0; j--)
    48fa:	b4 53 f8 ff 	add	#-1,	-8(r4)	;r3 As==11, 0xfff8(r4)
    48fe:	84 93 f8 ff 	tst	-8(r4)		;0xfff8(r4)
    4902:	ec 37       	jge	$-38     	;abs 0x48dc
}

 void invLEDRound(u8 state[4][4], u8* keyBytes)
{
	int i,j;
	for(i = (RN/4)-1; i >=0; i--)
    4904:	b4 53 f6 ff 	add	#-1,	-10(r4)	;r3 As==11, 0xfff6(r4)
    4908:	84 93 f6 ff 	tst	-10(r4)	;0xfff6(r4)
    490c:	d9 37       	jge	$-76     	;abs 0x48c0
		{
			invSCShRMCS(state);
			AddConstants(state, i*4+j);
		}
	}
	AddKey(state, keyBytes, 0);
    490e:	0d 43       	clr	r13		
    4910:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    4914:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4918:	b0 12 7c 41 	call	#0x417c	
}
    491c:	31 52       	add	#8,	r1	;r2 As==11
    491e:	34 41       	pop	r4		
    4920:	30 41       	ret			

00004922 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4922:	04 12       	push	r4		
    4924:	04 41       	mov	r1,	r4	
    4926:	24 53       	incd	r4		
    4928:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    492c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4930:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4934:	0d 3c       	jmp	$+28     	;abs 0x4950
    {
      for (i = 0; i<d; i++) 
    4936:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    493a:	04 3c       	jmp	$+10     	;abs 0x4944
	{
	  nop();
    493c:	03 43       	nop			
	  nop();
    493e:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4940:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4944:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4948:	f8 ff 
    494a:	f8 2b       	jnc	$-14     	;abs 0x493c
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    494c:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4950:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4954:	fa ff 
    4956:	ef 2b       	jnc	$-32     	;abs 0x4936
	{
	  nop();
	  nop();
	}
    }
}
    4958:	31 50 06 00 	add	#6,	r1	;#0x0006
    495c:	34 41       	pop	r4		
    495e:	30 41       	ret			

00004960 <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4960:	04 12       	push	r4		
    4962:	04 41       	mov	r1,	r4	
    4964:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4966:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    496a:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    496c:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4970:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4974:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4978:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    497c:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4980:	5f 42 05 00 	mov.b	&0x0005,r15	
    4984:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4988:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    498c:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4990:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4994:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4996:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    499a:	79 00 
  U1RCTL = 0;
    499c:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    49a0:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    49a4:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    49a8:	7c 00 
  U1MCTL = U1MCTL_INIT;
    49aa:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    49ae:	7b 00 

  delay(0x800);
    49b0:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    49b4:	b0 12 22 49 	call	#0x4922	
  return 0;
    49b8:	0f 43       	clr	r15		
}
    49ba:	34 41       	pop	r4		
    49bc:	30 41       	ret			

000049be <uart1_putchar>:

int uart1_putchar(int c)
{
    49be:	04 12       	push	r4		
    49c0:	04 41       	mov	r1,	r4	
    49c2:	24 53       	incd	r4		
    49c4:	21 83       	decd	r1		
    49c6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    49ca:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    49ce:	4f 4f       	mov.b	r15,	r15	
    49d0:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    49d4:	03 43       	nop			
    49d6:	5f 42 79 00 	mov.b	&0x0079,r15	
    49da:	4f 4f       	mov.b	r15,	r15	
    49dc:	1f f3       	and	#1,	r15	;r3 As==01
    49de:	0f 93       	tst	r15		
    49e0:	fa 27       	jz	$-10     	;abs 0x49d6
  return (unsigned char)c;
    49e2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    49e6:	4f 4f       	mov.b	r15,	r15	
    49e8:	4f 4f       	mov.b	r15,	r15	
}
    49ea:	21 53       	incd	r1		
    49ec:	34 41       	pop	r4		
    49ee:	30 41       	ret			

000049f0 <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    49f0:	04 12       	push	r4		
    49f2:	04 41       	mov	r1,	r4	
    49f4:	24 53       	incd	r4		
    49f6:	21 83       	decd	r1		
    49f8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    49fc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4a00:	b0 12 be 49 	call	#0x49be	
}
    4a04:	21 53       	incd	r1		
    4a06:	34 41       	pop	r4		
    4a08:	30 41       	ret			

00004a0a <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4a0a:	04 12       	push	r4		
    4a0c:	04 41       	mov	r1,	r4	
    4a0e:	24 53       	incd	r4		
  ;
}
    4a10:	34 41       	pop	r4		
    4a12:	30 41       	ret			

00004a14 <start_decrypt>:
void
start_decrypt()
{
    4a14:	04 12       	push	r4		
    4a16:	04 41       	mov	r1,	r4	
    4a18:	24 53       	incd	r4		
  ;
}
    4a1a:	34 41       	pop	r4		
    4a1c:	30 41       	ret			

00004a1e <end_expe>:


void
end_expe()
{
    4a1e:	04 12       	push	r4		
    4a20:	04 41       	mov	r1,	r4	
    4a22:	24 53       	incd	r4		
  ;
}
    4a24:	34 41       	pop	r4		
    4a26:	30 41       	ret			

00004a28 <memcpy>:
    4a28:	0b 12       	push	r11		
    4a2a:	0a 12       	push	r10		
    4a2c:	09 12       	push	r9		
    4a2e:	08 12       	push	r8		
    4a30:	07 12       	push	r7		
    4a32:	0d 93       	tst	r13		
    4a34:	70 24       	jz	$+226    	;abs 0x4b16
    4a36:	0f 9e       	cmp	r14,	r15	
    4a38:	6e 24       	jz	$+222    	;abs 0x4b16
    4a3a:	34 2c       	jc	$+106    	;abs 0x4aa4
    4a3c:	0c 4e       	mov	r14,	r12	
    4a3e:	0c df       	bis	r15,	r12	
    4a40:	1c f3       	and	#1,	r12	;r3 As==01
    4a42:	1b 24       	jz	$+56     	;abs 0x4a7a
    4a44:	0c 4e       	mov	r14,	r12	
    4a46:	0c ef       	xor	r15,	r12	
    4a48:	1c f3       	and	#1,	r12	;r3 As==01
    4a4a:	07 20       	jnz	$+16     	;abs 0x4a5a
    4a4c:	2d 93       	cmp	#2,	r13	;r3 As==10
    4a4e:	07 28       	jnc	$+16     	;abs 0x4a5e
    4a50:	0b 4e       	mov	r14,	r11	
    4a52:	1b f3       	and	#1,	r11	;r3 As==01
    4a54:	2c 43       	mov	#2,	r12	;r3 As==10
    4a56:	0c 8b       	sub	r11,	r12	
    4a58:	03 3c       	jmp	$+8      	;abs 0x4a60
    4a5a:	0c 4d       	mov	r13,	r12	
    4a5c:	01 3c       	jmp	$+4      	;abs 0x4a60
    4a5e:	1c 43       	mov	#1,	r12	;r3 As==01
    4a60:	0d 8c       	sub	r12,	r13	
    4a62:	0a 4c       	mov	r12,	r10	
    4a64:	09 4e       	mov	r14,	r9	
    4a66:	0b 4f       	mov	r15,	r11	
    4a68:	fb 49 00 00 	mov.b	@r9+,	0(r11)	;0x0000(r11)
    4a6c:	1b 53       	inc	r11		
    4a6e:	3a 53       	add	#-1,	r10	;r3 As==11
    4a70:	fb 23       	jnz	$-8      	;abs 0x4a68
    4a72:	0a 4f       	mov	r15,	r10	
    4a74:	0a 5c       	add	r12,	r10	
    4a76:	0e 5c       	add	r12,	r14	
    4a78:	01 3c       	jmp	$+4      	;abs 0x4a7c
    4a7a:	0a 4f       	mov	r15,	r10	
    4a7c:	0b 4d       	mov	r13,	r11	
    4a7e:	12 c3       	clrc			
    4a80:	0b 10       	rrc	r11		
    4a82:	0b 24       	jz	$+24     	;abs 0x4a9a
    4a84:	09 4b       	mov	r11,	r9	
    4a86:	08 4e       	mov	r14,	r8	
    4a88:	0c 4a       	mov	r10,	r12	
    4a8a:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    4a8e:	2c 53       	incd	r12		
    4a90:	39 53       	add	#-1,	r9	;r3 As==11
    4a92:	fb 23       	jnz	$-8      	;abs 0x4a8a
    4a94:	0b 5b       	rla	r11		
    4a96:	0e 5b       	add	r11,	r14	
    4a98:	0a 5b       	add	r11,	r10	
    4a9a:	1d f3       	and	#1,	r13	;r3 As==01
    4a9c:	3c 24       	jz	$+122    	;abs 0x4b16
    4a9e:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    4aa2:	39 3c       	jmp	$+116    	;abs 0x4b16
    4aa4:	0e 5d       	add	r13,	r14	
    4aa6:	0c 4f       	mov	r15,	r12	
    4aa8:	0c 5d       	add	r13,	r12	
    4aaa:	0b 4c       	mov	r12,	r11	
    4aac:	0b de       	bis	r14,	r11	
    4aae:	1b f3       	and	#1,	r11	;r3 As==01
    4ab0:	1b 24       	jz	$+56     	;abs 0x4ae8
    4ab2:	0b 4c       	mov	r12,	r11	
    4ab4:	0b ee       	xor	r14,	r11	
    4ab6:	1b f3       	and	#1,	r11	;r3 As==01
    4ab8:	06 20       	jnz	$+14     	;abs 0x4ac6
    4aba:	3d 90 03 00 	cmp	#3,	r13	;#0x0003
    4abe:	03 28       	jnc	$+8      	;abs 0x4ac6
    4ac0:	0b 4e       	mov	r14,	r11	
    4ac2:	1b f3       	and	#1,	r11	;r3 As==01
    4ac4:	01 3c       	jmp	$+4      	;abs 0x4ac8
    4ac6:	0b 4d       	mov	r13,	r11	
    4ac8:	0d 8b       	sub	r11,	r13	
    4aca:	09 4e       	mov	r14,	r9	
    4acc:	0a 4c       	mov	r12,	r10	
    4ace:	08 4b       	mov	r11,	r8	
    4ad0:	08 8c       	sub	r12,	r8	
    4ad2:	3a 53       	add	#-1,	r10	;r3 As==11
    4ad4:	39 53       	add	#-1,	r9	;r3 As==11
    4ad6:	ea 49 00 00 	mov.b	@r9,	0(r10)	;0x0000(r10)
    4ada:	07 4a       	mov	r10,	r7	
    4adc:	07 58       	add	r8,	r7	
    4ade:	f9 23       	jnz	$-12     	;abs 0x4ad2
    4ae0:	3b e3       	inv	r11		
    4ae2:	1b 53       	inc	r11		
    4ae4:	0c 5b       	add	r11,	r12	
    4ae6:	0e 5b       	add	r11,	r14	
    4ae8:	0b 4d       	mov	r13,	r11	
    4aea:	12 c3       	clrc			
    4aec:	0b 10       	rrc	r11		
    4aee:	0e 24       	jz	$+30     	;abs 0x4b0c
    4af0:	0a 4b       	mov	r11,	r10	
    4af2:	08 4e       	mov	r14,	r8	
    4af4:	09 4c       	mov	r12,	r9	
    4af6:	28 83       	decd	r8		
    4af8:	29 83       	decd	r9		
    4afa:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    4afe:	3a 53       	add	#-1,	r10	;r3 As==11
    4b00:	fa 23       	jnz	$-10     	;abs 0x4af6
    4b02:	0a 8b       	sub	r11,	r10	
    4b04:	0b 4a       	mov	r10,	r11	
    4b06:	0b 5b       	rla	r11		
    4b08:	0e 5b       	add	r11,	r14	
    4b0a:	0c 5b       	add	r11,	r12	
    4b0c:	1d f3       	and	#1,	r13	;r3 As==01
    4b0e:	03 24       	jz	$+8      	;abs 0x4b16
    4b10:	dc 4e ff ff 	mov.b	-1(r14),-1(r12)	;0xffff(r14), 0xffff(r12)
    4b14:	ff ff 
    4b16:	37 41       	pop	r7		
    4b18:	38 41       	pop	r8		
    4b1a:	39 41       	pop	r9		
    4b1c:	3a 41       	pop	r10		
    4b1e:	3b 41       	pop	r11		
    4b20:	30 41       	ret			

00004b22 <_unexpected_>:
    4b22:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	e8 40 e8 40 e8 40 e8 40 e8 40 e8 40 e8 40 e8 40     .@.@.@.@.@.@.@.@
    fff0:	e8 40 e8 40 e8 40 e8 40 e8 40 e8 40 e8 40 00 40     .@.@.@.@.@.@.@.@
