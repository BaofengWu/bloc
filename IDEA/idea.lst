
idea.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 idea.c
000040dc l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 tools.c
00004b7e g     F .text	0000001a putchar
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
00000174 g       *ABS*	00000000 __TACCR1
00000084 g       *ABS*	00000000 __ADC12MCTL4
00000000 g       *ABS*	00000000 __data_size
0000015a g       *ABS*	00000000 __ADC12MEM13
00000052 g       *ABS*	00000000 __I2CNDAT
000040dc  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000024 g       *ABS*	00000000 __P1IES
0000007b g       *ABS*	00000000 __U1MCTL
000001f6 g       *ABS*	00000000 __DMA2SZ
000040dc  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000076 g       *ABS*	00000000 __I2CDRW
0000007e g       *ABS*	00000000 __U1RXBUF
00000138 g       *ABS*	00000000 __OP2
00000076 g       *ABS*	00000000 __U0RXBUF
000001a4 g       *ABS*	00000000 __ADC12IFG
0000012e g       *ABS*	00000000 __TAIV
000001e6 g       *ABS*	00000000 __DMA0SZ
00000000 g       .vectors	00000000 _efartext
0000007c g       *ABS*	00000000 __U1BR0
00000130 g       *ABS*	00000000 __MPY
00000001 g       *ABS*	00000000 __IE2
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
00000087 g       *ABS*	00000000 __ADC12MCTL7
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00004c24 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
0000001d g       *ABS*	00000000 __P4OUT
000001f4 g       *ABS*	00000000 __DMA2DA
00000000 g       *ABS*	00000000 __bss_size
00000081 g       *ABS*	00000000 __ADC12MCTL1
00004aee g     F .text	0000005e uart1_init
00000152 g       *ABS*	00000000 __ADC12MEM9
00004000  w      .text	00000000 __watchdog_support
000040d6  w      .text	00000000 __stop_progExec__
00000050 g       *ABS*	00000000 __I2CIE
0000002d g       *ABS*	00000000 __P2IE
000001e4 g       *ABS*	00000000 __DMA0DA
00000192 g       *ABS*	00000000 __TBCCR0
000040dc  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00004be2 g     F .text	00000000 __udivsi3
00004bac g     F .text	0000000a end_expe
00000025 g       *ABS*	00000000 __P1IE
000001a0 g       *ABS*	00000000 __ADC12CTL0
00000072 g       *ABS*	00000000 __I2CDCTL
00000073 g       *ABS*	00000000 __U0MCTL
0000007a g       *ABS*	00000000 __U1RCTL
00000082 g       *ABS*	00000000 __ADC12MCTL2
0000019c g       *ABS*	00000000 __TBCCR5
00000035 g       *ABS*	00000000 __P6OUT
00000034 g       *ABS*	00000000 __P6IN
000001c8 g       *ABS*	00000000 __DAC12_0DAT
00000182 g       *ABS*	00000000 __TBCCTL0
0000019e g       *ABS*	00000000 __TBCCR6
000040dc  w      .text	00000000 __isr_5
00004c24 g       *ABS*	00000000 __data_load_start
000040dc g       .text	00000000 __dtors_end
000001ea g       *ABS*	00000000 __DMA1SA
00000088 g       *ABS*	00000000 __ADC12MCTL8
00000166 g       *ABS*	00000000 __TACCTL2
000001f0 g       *ABS*	00000000 __DMA2CTL
000040dc  w      .text	00000000 __isr_2
00000156 g       *ABS*	00000000 __ADC12MEM11
00000160 g       *ABS*	00000000 __TACTL
00000158 g       *ABS*	00000000 __ADC12MEM12
00000071 g       *ABS*	00000000 __I2CTCTL
0000012c g       *ABS*	00000000 __FCTL3
000040dc  w      .text	00000000 __isr_10
00000148 g       *ABS*	00000000 __ADC12MEM4
0000011a g       *ABS*	00000000 __I2CSA
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000008d g       *ABS*	00000000 __ADC12MCTL13
0000014c g       *ABS*	00000000 __ADC12MEM6
00000023 g       *ABS*	00000000 __P1IFG
0000013c g       *ABS*	00000000 __RESHI
00000072 g       *ABS*	00000000 __U0RCTL
00000172 g       *ABS*	00000000 __TACCR0
00000071 g       *ABS*	00000000 __U0TCTL
00000056 g       *ABS*	00000000 __DCOCTL
00000085 g       *ABS*	00000000 __ADC12MCTL5
00004606 g     F .text	00000270 KeyScheduleDecrypt
00000003 g       *ABS*	00000000 __IFG2
00000005 g       *ABS*	00000000 __ME2
00001100 g     O .noinit	00000002 __wdt_clear_value
00000079 g       *ABS*	00000000 __U1TCTL
0000001b g       *ABS*	00000000 __P3SEL
000001e0 g       *ABS*	00000000 __DMA0CTL
000040dc  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
00004c18 g     F .text	00000000 __umodsi3
00000028 g       *ABS*	00000000 __P2IN
0000014e g       *ABS*	00000000 __ADC12MEM7
00000184 g       *ABS*	00000000 __TBCCTL1
0000005b g       *ABS*	00000000 __CAPD
00000075 g       *ABS*	00000000 __I2CSCLL
000040dc  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00004028  w      .text	00000000 __do_clear_bss
0000008f g       *ABS*	00000000 __ADC12MCTL15
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
0000015c g       *ABS*	00000000 __ADC12MEM14
00000026 g       *ABS*	00000000 __P1SEL
00000198 g       *ABS*	00000000 __TBCCR3
00000080 g       *ABS*	00000000 __ADC12MCTL0
00000140 g       *ABS*	00000000 __ADC12MEM0
00000074 g       *ABS*	00000000 __U0BR0
00000051 g       *ABS*	00000000 __I2CIFG
000042f0 g     F .text	00000316 KeyScheduleEncrypt
00004be2 g       .text	00000000 __ext_udivmod32
00004bb6 g       .text	00000000 __mulsi3
00004c22  w      .text	00000000 _unexpected_
000040dc  w      .text	00000000 __isr_8
0000014a g       *ABS*	00000000 __ADC12MEM5
00000070 g       *ABS*	00000000 __U0CTL
0000018a g       *ABS*	00000000 __TBCCTL4
00000073 g       *ABS*	00000000 __I2CPSC
0000008e g       *ABS*	00000000 __ADC12MCTL14
000040dc  w      .text	00000000 __isr_3
000001a6 g       *ABS*	00000000 __ADC12IE
00004b4c g     F .text	00000032 uart1_putchar
00000144 g       *ABS*	00000000 __ADC12MEM2
000001ee g       *ABS*	00000000 __DMA1SZ
00000033 g       *ABS*	00000000 __P5SEL
00000030 g       *ABS*	00000000 __P5IN
00004000  w      .text	00000000 _reset_vector__
000040dc g       .text	00000000 __ctors_start
000040dc  w      .text	00000000 __isr_12
00000036 g       *ABS*	00000000 __P6DIR
000040e0 g     F .text	000000c0 mul
00000018 g       *ABS*	00000000 __P3IN
00004010  w      .text	00000000 __do_copy_data
00000150 g       *ABS*	00000000 __ADC12MEM8
00000142 g       *ABS*	00000000 __ADC12MEM1
00001100 g       .text	00000000 __bss_start
0000007d g       *ABS*	00000000 __U1BR1
0000403e g     F .text	00000098 main
00000176 g       *ABS*	00000000 __TACCR2
0000019a g       *ABS*	00000000 __TBCCR4
000040dc  w      .text	00000000 __isr_13
00000078 g       *ABS*	00000000 __U1CTL
000001e2 g       *ABS*	00000000 __DMA0SA
00000170 g       *ABS*	00000000 __TAR
00000124 g       *ABS*	00000000 __DMACTL1
0000001e g       *ABS*	00000000 __P4DIR
000041a0 g     F .text	00000150 invMod
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00000154 g       *ABS*	00000000 __ADC12MEM10
000001f2 g       *ABS*	00000000 __DMA2SA
0000002a g       *ABS*	00000000 __P2DIR
00000089 g       *ABS*	00000000 __ADC12MCTL9
0000008a g       *ABS*	00000000 __ADC12MCTL10
00004ab0 g     F .text	0000003e delay
00000032 g       *ABS*	00000000 __P5DIR
000001c2 g       *ABS*	00000000 __DAC12_1CTL
000001a2 g       *ABS*	00000000 __ADC12CTL1
000001a8 g       *ABS*	00000000 __ADC12IV
000001e8 g       *ABS*	00000000 __DMA1CTL
00000075 g       *ABS*	00000000 __U0BR1
000040dc  w      .text	00000000 __isr_9
0000018c g       *ABS*	00000000 __TBCCTL5
0000400c  w      .text	00000000 __init_stack
00000086 g       *ABS*	00000000 __ADC12MCTL6
00000188 g       *ABS*	00000000 __TBCCTL3
00000019 g       *ABS*	00000000 __P3OUT
000001ca g       *ABS*	00000000 __DAC12_1DAT
000040dc g       .text	00000000 __dtors_start
000040dc  w      .text	00000000 __isr_6
000040dc g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
0000011c g       *ABS*	00000000 __I2CIV
00000004 g       *ABS*	00000000 __ME1
00003900 g       *ABS*	00000000 __stack
00000037 g       *ABS*	00000000 __P6SEL
000040dc  w      .text	00000000 __isr_1
0000008c g       *ABS*	00000000 __ADC12MCTL12
00001100 g       .text	00000000 _edata
00000077 g       *ABS*	00000000 __U0TXBUF
00001102 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000011e g       *ABS*	00000000 __TBIV
000001c0 g       *ABS*	00000000 __DAC12_0CTL
00004b98 g     F .text	0000000a start_encrypt
0000015e g       *ABS*	00000000 __ADC12MEM15
00000134 g       *ABS*	00000000 __MAC
00000058 g       *ABS*	00000000 __BCSCTL2
000040d6  w      .text	00000000 _endless_loop__
00000122 g       *ABS*	00000000 __DMACTL0
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00000146 g       *ABS*	00000000 __ADC12MEM3
00000076 g       *ABS*	00000000 __I2CDRB
00000118 g       *ABS*	00000000 __I2COA
00000164 g       *ABS*	00000000 __TACCTL1
0000007f g       *ABS*	00000000 __U1TXBUF
00000055 g       *ABS*	00000000 __SVSCTL
00004010  w      .text	00000000 __low_level_init
00004ba2 g     F .text	0000000a start_decrypt
00001100 g       .text	00000000 __data_start
0000018e g       *ABS*	00000000 __TBCCTL6
00000074 g       *ABS*	00000000 __I2CSCLH
000001ec g       *ABS*	00000000 __DMA1DA
00000120 g       *ABS*	00000000 __WDTCTL
00000083 g       *ABS*	00000000 __ADC12MCTL3
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00004876 g     F .text	0000023a Encrypt
0000008b g       *ABS*	00000000 __ADC12MCTL11
0000013e g       *ABS*	00000000 __SUMEXT
00000031 g       *ABS*	00000000 __P5OUT



Disassembly of section .text:

00004000 <__watchdog_support>:
    4000:	55 42 20 01 	mov.b	&0x0120,r5	
    4004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    4008:	82 45 00 11 	mov	r5,	&0x1100	

0000400c <__init_stack>:
    400c:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004010 <__do_copy_data>:
    4010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    4014:	0f 93       	tst	r15		
    4016:	08 24       	jz	$+18     	;abs 0x4028
    4018:	92 42 00 11 	mov	&0x1100,&0x0120	
    401c:	20 01 
    401e:	2f 83       	decd	r15		
    4020:	9f 4f 24 4c 	mov	19492(r15),4352(r15);0x4c24(r15), 0x1100(r15)
    4024:	00 11 
    4026:	f8 23       	jnz	$-14     	;abs 0x4018

00004028 <__do_clear_bss>:
    4028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    402c:	0f 93       	tst	r15		
    402e:	07 24       	jz	$+16     	;abs 0x403e
    4030:	92 42 00 11 	mov	&0x1100,&0x0120	
    4034:	20 01 
    4036:	1f 83       	dec	r15		
    4038:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    403c:	f9 23       	jnz	$-12     	;abs 0x4030

0000403e <main>:
	return;
}

/**********************************************************************/
int main()
{
    403e:	04 41       	mov	r1,	r4	
    4040:	24 53       	incd	r4		
    4042:	31 50 80 ff 	add	#-128,	r1	;#0xff80
#ifdef PRINT
uart1_init();
u16 i,j;
#endif
	u16 state[4]={0,1,2,3};
    4046:	84 43 7e ff 	mov	#0,	-130(r4);r3 As==00, 0xff7e(r4)
    404a:	94 43 80 ff 	mov	#1,	-128(r4);r3 As==01, 0xff80(r4)
    404e:	a4 43 82 ff 	mov	#2,	-126(r4);r3 As==10, 0xff82(r4)
    4052:	b4 40 03 00 	mov	#3,	-124(r4);#0x0003, 0xff84(r4)
    4056:	84 ff 
	u16 key[8]={1,2,3,4,5,6,7,8};
    4058:	94 43 86 ff 	mov	#1,	-122(r4);r3 As==01, 0xff86(r4)
    405c:	a4 43 88 ff 	mov	#2,	-120(r4);r3 As==10, 0xff88(r4)
    4060:	b4 40 03 00 	mov	#3,	-118(r4);#0x0003, 0xff8a(r4)
    4064:	8a ff 
    4066:	a4 42 8c ff 	mov	#4,	-116(r4);r2 As==10, 0xff8c(r4)
    406a:	b4 40 05 00 	mov	#5,	-114(r4);#0x0005, 0xff8e(r4)
    406e:	8e ff 
    4070:	b4 40 06 00 	mov	#6,	-112(r4);#0x0006, 0xff90(r4)
    4074:	90 ff 
    4076:	b4 40 07 00 	mov	#7,	-110(r4);#0x0007, 0xff92(r4)
    407a:	92 ff 
    407c:	b4 42 94 ff 	mov	#8,	-108(r4);r2 As==11, 0xff94(r4)
	//u16 key[8]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};
	//u16 state[4]={0,0,0,0};
	//u16 key[8]={0,0,0,0,0,0,0,0};
	u16 subkey[52];

	START_ENCRYPT();
    4080:	b0 12 98 4b 	call	#0x4b98	

	KeyScheduleEncrypt(key,subkey);
    4084:	0e 44       	mov	r4,	r14	
    4086:	3e 50 96 ff 	add	#-106,	r14	;#0xff96
    408a:	0f 44       	mov	r4,	r15	
    408c:	3f 50 86 ff 	add	#-122,	r15	;#0xff86
    4090:	b0 12 f0 42 	call	#0x42f0	
	printf("\n\n----------Encryption Keys----------\n\n");
	for(j=0;j<8;j++){for(i=0;i<6;i++)printf("%4X ",subkey[6*j + i]);printf("\n");}
	for(i=0;i<4;i++)printf("%4X ",subkey[48 + i]);printf("\n\n");
	printf("\n\n----------Fin Encryption Keys----------\n\n");
#endif
	Encrypt(state,subkey);
    4094:	0f 44       	mov	r4,	r15	
    4096:	3f 50 96 ff 	add	#-106,	r15	;#0xff96
    409a:	0e 4f       	mov	r15,	r14	
    409c:	0f 44       	mov	r4,	r15	
    409e:	3f 50 7e ff 	add	#-130,	r15	;#0xff7e
    40a2:	b0 12 76 48 	call	#0x4876	
	printf("\n\n----------Cipher text----------\n\n");
	for(i=0;i<4;i++)printf("%4X ",state[i]);printf("\n\n");
	printf("\n\n----------Fin Cipher text----------\n\n");
#endif

	START_DECRYPT();
    40a6:	b0 12 a2 4b 	call	#0x4ba2	

	KeyScheduleDecrypt(key,subkey);
    40aa:	0e 44       	mov	r4,	r14	
    40ac:	3e 50 96 ff 	add	#-106,	r14	;#0xff96
    40b0:	0f 44       	mov	r4,	r15	
    40b2:	3f 50 86 ff 	add	#-122,	r15	;#0xff86
    40b6:	b0 12 06 46 	call	#0x4606	
	printf("\n\n----------Decryption Keys----------\n\n");
	for(j=0;j<8;j++){for(i=0;i<6;i++)printf("%4X ",subkey[6*j + i]);printf("\n");}
	for(i=0;i<4;i++)printf("%4X ",subkey[48 + i]);printf("\n\n");
	printf("\n\n----------Fin Decryption Keys----------\n\n");
#endif
	Encrypt(state,subkey);
    40ba:	0f 44       	mov	r4,	r15	
    40bc:	3f 50 96 ff 	add	#-106,	r15	;#0xff96
    40c0:	0e 4f       	mov	r15,	r14	
    40c2:	0f 44       	mov	r4,	r15	
    40c4:	3f 50 7e ff 	add	#-130,	r15	;#0xff7e
    40c8:	b0 12 76 48 	call	#0x4876	
#ifdef PRINT
printf("\n\n----------Plain text----------\n\n");
	for(i=0;i<4;i++)printf("%4X ",state[i]);printf("\n\n");
printf("\n\n----------Fin Plain text----------\n\n");
#endif
	END_EXPE();
    40cc:	b0 12 ac 4b 	call	#0x4bac	
	return 0;
    40d0:	0f 43       	clr	r15		
}
    40d2:	31 50 80 00 	add	#128,	r1	;#0x0080

000040d6 <__stop_progExec__>:
    40d6:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    40da:	fd 3f       	jmp	$-4      	;abs 0x40d6

000040dc <__ctors_end>:
    40dc:	30 40 22 4c 	br	#0x4c22	

000040e0 <mul>:

#include "tools.h"


 u16 mul(u16 a,u16 b)
{
    40e0:	04 12       	push	r4		
    40e2:	04 41       	mov	r1,	r4	
    40e4:	24 53       	incd	r4		
    40e6:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    40ea:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    40ee:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	u32 r;
	u32 A=a,B=b;
    40f2:	94 44 fa ff 	mov	-6(r4),	-14(r4)	;0xfffa(r4), 0xfff2(r4)
    40f6:	f2 ff 
    40f8:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    40fc:	94 44 fc ff 	mov	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    4100:	f6 ff 
    4102:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)

	if(A==0 && B==0) return 0x0001;
    4106:	84 93 f2 ff 	tst	-14(r4)	;0xfff2(r4)
    410a:	0b 20       	jnz	$+24     	;abs 0x4122
    410c:	84 93 f4 ff 	tst	-12(r4)	;0xfff4(r4)
    4110:	08 20       	jnz	$+18     	;abs 0x4122
    4112:	84 93 f6 ff 	tst	-10(r4)	;0xfff6(r4)
    4116:	05 20       	jnz	$+12     	;abs 0x4122
    4118:	84 93 f8 ff 	tst	-8(r4)		;0xfff8(r4)
    411c:	02 20       	jnz	$+6      	;abs 0x4122
    411e:	1f 43       	mov	#1,	r15	;r3 As==01
    4120:	3b 3c       	jmp	$+120    	;abs 0x4198
	if(A == 0)
    4122:	84 93 f2 ff 	tst	-14(r4)	;0xfff2(r4)
    4126:	08 20       	jnz	$+18     	;abs 0x4138
    4128:	84 93 f4 ff 	tst	-12(r4)	;0xfff4(r4)
    412c:	05 20       	jnz	$+12     	;abs 0x4138
	{
		A=0x10000;
    412e:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    4132:	94 43 f4 ff 	mov	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    4136:	0a 3c       	jmp	$+22     	;abs 0x414c
	}
	else if(B == 0)
    4138:	84 93 f6 ff 	tst	-10(r4)	;0xfff6(r4)
    413c:	07 20       	jnz	$+16     	;abs 0x414c
    413e:	84 93 f8 ff 	tst	-8(r4)		;0xfff8(r4)
    4142:	04 20       	jnz	$+10     	;abs 0x414c
	{
		B=0x10000;
    4144:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    4148:	94 43 f8 ff 	mov	#1,	-8(r4)	;r3 As==01, 0xfff8(r4)
	}
	r = A*B;
    414c:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfff6(r4)
    4150:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    4154:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    4158:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    415c:	b0 12 b6 4b 	call	#0x4bb6	
    4160:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    4164:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
	r%=0x10001;
    4168:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    416c:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4170:	1c 43       	mov	#1,	r12	;r3 As==01
    4172:	1d 43       	mov	#1,	r13	;r3 As==01
    4174:	b0 12 18 4c 	call	#0x4c18	
    4178:	84 4e ee ff 	mov	r14,	-18(r4)	;0xffee(r4)
    417c:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
	if(r == 0x10000)r=0;
    4180:	84 93 ee ff 	tst	-18(r4)	;0xffee(r4)
    4184:	07 20       	jnz	$+16     	;abs 0x4194
    4186:	94 93 f0 ff 	cmp	#1,	-16(r4)	;r3 As==01, 0xfff0(r4)
    418a:	04 20       	jnz	$+10     	;abs 0x4194
    418c:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    4190:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
	return (u16)(r&0xFFFF);
    4194:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
}
    4198:	31 50 10 00 	add	#16,	r1	;#0x0010
    419c:	34 41       	pop	r4		
    419e:	30 41       	ret			

000041a0 <invMod>:

 u16 invMod(u16 b)
{
    41a0:	04 12       	push	r4		
    41a2:	04 41       	mov	r1,	r4	
    41a4:	24 53       	incd	r4		
    41a6:	31 50 de ff 	add	#-34,	r1	;#0xffde
    41aa:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    s32 x=0,lastx= 1,y=1,lasty=0,quotient,temp;
    41ae:	84 43 dc ff 	mov	#0,	-36(r4)	;r3 As==00, 0xffdc(r4)
    41b2:	84 43 de ff 	mov	#0,	-34(r4)	;r3 As==00, 0xffde(r4)
    41b6:	94 43 e0 ff 	mov	#1,	-32(r4)	;r3 As==01, 0xffe0(r4)
    41ba:	84 43 e2 ff 	mov	#0,	-30(r4)	;r3 As==00, 0xffe2(r4)
    41be:	94 43 e4 ff 	mov	#1,	-28(r4)	;r3 As==01, 0xffe4(r4)
    41c2:	84 43 e6 ff 	mov	#0,	-26(r4)	;r3 As==00, 0xffe6(r4)
    41c6:	84 43 e8 ff 	mov	#0,	-24(r4)	;r3 As==00, 0xffe8(r4)
    41ca:	84 43 ea ff 	mov	#0,	-22(r4)	;r3 As==00, 0xffea(r4)
    u32 A=0x10001, B=b;
    41ce:	94 43 ec ff 	mov	#1,	-20(r4)	;r3 As==01, 0xffec(r4)
    41d2:	94 43 ee ff 	mov	#1,	-18(r4)	;r3 As==01, 0xffee(r4)
    41d6:	94 44 fc ff 	mov	-4(r4),	-16(r4)	;0xfffc(r4), 0xfff0(r4)
    41da:	f0 ff 
    41dc:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    while(B != 0)
    41e0:	68 3c       	jmp	$+210    	;abs 0x42b2
    {
        quotient = A/B;
    41e2:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfff0(r4)
    41e6:	1d 44 f2 ff 	mov	-14(r4),r13	;0xfff2(r4)
    41ea:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    41ee:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    41f2:	b0 12 e2 4b 	call	#0x4be2	
    41f6:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    41fa:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
        temp=B;
    41fe:	94 44 f0 ff 	mov	-16(r4),-8(r4)	;0xfff0(r4), 0xfff8(r4)
    4202:	f8 ff 
    4204:	94 44 f2 ff 	mov	-14(r4),-6(r4)	;0xfff2(r4), 0xfffa(r4)
    4208:	fa ff 
        B=A%B;
    420a:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    420e:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4212:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfff0(r4)
    4216:	1d 44 f2 ff 	mov	-14(r4),r13	;0xfff2(r4)
    421a:	b0 12 18 4c 	call	#0x4c18	
    421e:	84 4e f0 ff 	mov	r14,	-16(r4)	;0xfff0(r4)
    4222:	84 4f f2 ff 	mov	r15,	-14(r4)	;0xfff2(r4)
        A=temp;
    4226:	94 44 f8 ff 	mov	-8(r4),	-20(r4)	;0xfff8(r4), 0xffec(r4)
    422a:	ec ff 
    422c:	94 44 fa ff 	mov	-6(r4),	-18(r4)	;0xfffa(r4), 0xffee(r4)
    4230:	ee ff 

        temp=x;
    4232:	94 44 dc ff 	mov	-36(r4),-8(r4)	;0xffdc(r4), 0xfff8(r4)
    4236:	f8 ff 
    4238:	94 44 de ff 	mov	-34(r4),-6(r4)	;0xffde(r4), 0xfffa(r4)
    423c:	fa ff 
        x=lastx-quotient*x;
    423e:	1c 44 dc ff 	mov	-36(r4),r12	;0xffdc(r4)
    4242:	1d 44 de ff 	mov	-34(r4),r13	;0xffde(r4)
    4246:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    424a:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    424e:	b0 12 b6 4b 	call	#0x4bb6	
    4252:	1c 44 e0 ff 	mov	-32(r4),r12	;0xffe0(r4)
    4256:	1d 44 e2 ff 	mov	-30(r4),r13	;0xffe2(r4)
    425a:	0c 8e       	sub	r14,	r12	
    425c:	0d 7f       	subc	r15,	r13	
    425e:	84 4c dc ff 	mov	r12,	-36(r4)	;0xffdc(r4)
    4262:	84 4d de ff 	mov	r13,	-34(r4)	;0xffde(r4)
        lastx=temp;
    4266:	94 44 f8 ff 	mov	-8(r4),	-32(r4)	;0xfff8(r4), 0xffe0(r4)
    426a:	e0 ff 
    426c:	94 44 fa ff 	mov	-6(r4),	-30(r4)	;0xfffa(r4), 0xffe2(r4)
    4270:	e2 ff 

        temp=y;
    4272:	94 44 e4 ff 	mov	-28(r4),-8(r4)	;0xffe4(r4), 0xfff8(r4)
    4276:	f8 ff 
    4278:	94 44 e6 ff 	mov	-26(r4),-6(r4)	;0xffe6(r4), 0xfffa(r4)
    427c:	fa ff 
        y=lasty-quotient*y;
    427e:	1c 44 e4 ff 	mov	-28(r4),r12	;0xffe4(r4)
    4282:	1d 44 e6 ff 	mov	-26(r4),r13	;0xffe6(r4)
    4286:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    428a:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    428e:	b0 12 b6 4b 	call	#0x4bb6	
    4292:	1c 44 e8 ff 	mov	-24(r4),r12	;0xffe8(r4)
    4296:	1d 44 ea ff 	mov	-22(r4),r13	;0xffea(r4)
    429a:	0c 8e       	sub	r14,	r12	
    429c:	0d 7f       	subc	r15,	r13	
    429e:	84 4c e4 ff 	mov	r12,	-28(r4)	;0xffe4(r4)
    42a2:	84 4d e6 ff 	mov	r13,	-26(r4)	;0xffe6(r4)
        lasty=temp;
    42a6:	94 44 f8 ff 	mov	-8(r4),	-24(r4)	;0xfff8(r4), 0xffe8(r4)
    42aa:	e8 ff 
    42ac:	94 44 fa ff 	mov	-6(r4),	-22(r4)	;0xfffa(r4), 0xffea(r4)
    42b0:	ea ff 

 u16 invMod(u16 b)
{
    s32 x=0,lastx= 1,y=1,lasty=0,quotient,temp;
    u32 A=0x10001, B=b;
    while(B != 0)
    42b2:	84 93 f0 ff 	tst	-16(r4)	;0xfff0(r4)
    42b6:	95 23       	jnz	$-212    	;abs 0x41e2
    42b8:	84 93 f2 ff 	tst	-14(r4)	;0xfff2(r4)
    42bc:	92 23       	jnz	$-218    	;abs 0x41e2

        temp=y;
        y=lasty-quotient*y;
        lasty=temp;
	}
	if(lasty<0)
    42be:	84 93 ea ff 	tst	-22(r4)	;0xffea(r4)
    42c2:	06 38       	jl	$+14     	;abs 0x42d0
    42c4:	94 93 ea ff 	cmp	#1,	-22(r4)	;r3 As==01, 0xffea(r4)
    42c8:	0d 34       	jge	$+28     	;abs 0x42e4
    42ca:	84 93 e8 ff 	tst	-24(r4)	;0xffe8(r4)
    42ce:	0a 2c       	jc	$+22     	;abs 0x42e4
	{
		lasty+=0x10001U;
    42d0:	1e 44 e8 ff 	mov	-24(r4),r14	;0xffe8(r4)
    42d4:	1f 44 ea ff 	mov	-22(r4),r15	;0xffea(r4)
    42d8:	1e 53       	inc	r14		
    42da:	1f 63       	addc	#1,	r15	;r3 As==01
    42dc:	84 4e e8 ff 	mov	r14,	-24(r4)	;0xffe8(r4)
    42e0:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
	}
    return (u16)lasty;
    42e4:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)

}
    42e8:	31 50 22 00 	add	#34,	r1	;#0x0022
    42ec:	34 41       	pop	r4		
    42ee:	30 41       	ret			

000042f0 <KeyScheduleEncrypt>:
/**********************************************************************/
 void KeyScheduleEncrypt(const u16 *key,u16 *subkey)
{
    42f0:	04 12       	push	r4		
    42f2:	04 41       	mov	r1,	r4	
    42f4:	24 53       	incd	r4		
    42f6:	31 50 e6 ff 	add	#-26,	r1	;#0xffe6
    42fa:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    42fe:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	u8 i;
	u16 k[8],temp0,temp1;
	for(i=0;i<8;i++)k[i]=key[i];
    4302:	c4 43 e4 ff 	mov.b	#0,	-28(r4)	;r3 As==00, 0xffe4(r4)
    4306:	14 3c       	jmp	$+42     	;abs 0x4330
    4308:	5e 44 e4 ff 	mov.b	-28(r4),r14	;0xffe4(r4)
    430c:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    4310:	0f 5f       	rla	r15		
    4312:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4316:	2d 4f       	mov	@r15,	r13	
    4318:	0f 4e       	mov	r14,	r15	
    431a:	0f 5f       	rla	r15		
    431c:	3e 40 e4 ff 	mov	#-28,	r14	;#0xffe4
    4320:	0e 54       	add	r4,	r14	
    4322:	0f 5e       	add	r14,	r15	
    4324:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4328:	8f 4d 00 00 	mov	r13,	0(r15)	;0x0000(r15)
    432c:	d4 53 e4 ff 	inc.b	-28(r4)	;0xffe4(r4)
    4330:	f4 92 e4 ff 	cmp.b	#8,	-28(r4)	;r2 As==11, 0xffe4(r4)
    4334:	e9 2b       	jnc	$-44     	;abs 0x4308


	for(i=0;i<6;i++)
    4336:	c4 43 e4 ff 	mov.b	#0,	-28(r4)	;r3 As==00, 0xffe4(r4)
    433a:	30 40 b2 45 	br	#0x45b2	
	{
		subkey[(i<<3)]=k[0];
    433e:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    4342:	0f 5f       	rla	r15		
    4344:	0f 5f       	rla	r15		
    4346:	0f 5f       	rla	r15		
    4348:	0f 5f       	rla	r15		
    434a:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    434e:	1e 44 ea ff 	mov	-22(r4),r14	;0xffea(r4)
    4352:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		subkey[(i<<3) + 1]=k[1];
    4356:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    435a:	0f 5f       	rla	r15		
    435c:	0f 5f       	rla	r15		
    435e:	0f 5f       	rla	r15		
    4360:	1f 53       	inc	r15		
    4362:	0f 5f       	rla	r15		
    4364:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4368:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    436c:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		subkey[(i<<3) + 2]=k[2];
    4370:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    4374:	0f 5f       	rla	r15		
    4376:	0f 5f       	rla	r15		
    4378:	0f 5f       	rla	r15		
    437a:	2f 53       	incd	r15		
    437c:	0f 5f       	rla	r15		
    437e:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    4382:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    4386:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		subkey[(i<<3) + 3]=k[3];
    438a:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    438e:	0f 5f       	rla	r15		
    4390:	0f 5f       	rla	r15		
    4392:	0f 5f       	rla	r15		
    4394:	3f 50 03 00 	add	#3,	r15	;#0x0003
    4398:	0f 5f       	rla	r15		
    439a:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    439e:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    43a2:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		subkey[(i<<3) + 4]=k[4];
    43a6:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    43aa:	0f 5f       	rla	r15		
    43ac:	0f 5f       	rla	r15		
    43ae:	0f 5f       	rla	r15		
    43b0:	2f 52       	add	#4,	r15	;r2 As==10
    43b2:	0f 5f       	rla	r15		
    43b4:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    43b8:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    43bc:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		subkey[(i<<3) + 5]=k[5];
    43c0:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    43c4:	0f 5f       	rla	r15		
    43c6:	0f 5f       	rla	r15		
    43c8:	0f 5f       	rla	r15		
    43ca:	3f 50 05 00 	add	#5,	r15	;#0x0005
    43ce:	0f 5f       	rla	r15		
    43d0:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    43d4:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    43d8:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		subkey[(i<<3) + 6]=k[6];
    43dc:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    43e0:	0f 5f       	rla	r15		
    43e2:	0f 5f       	rla	r15		
    43e4:	0f 5f       	rla	r15		
    43e6:	3f 50 06 00 	add	#6,	r15	;#0x0006
    43ea:	0f 5f       	rla	r15		
    43ec:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    43f0:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfff6(r4)
    43f4:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		subkey[(i<<3) + 7]=k[7];
    43f8:	5f 44 e4 ff 	mov.b	-28(r4),r15	;0xffe4(r4)
    43fc:	0f 5f       	rla	r15		
    43fe:	0f 5f       	rla	r15		
    4400:	0f 5f       	rla	r15		
    4402:	3f 50 07 00 	add	#7,	r15	;#0x0007
    4406:	0f 5f       	rla	r15		
    4408:	1f 54 fc ff 	add	-4(r4),	r15	;0xfffc(r4)
    440c:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4410:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)

		temp0=k[0];
    4414:	94 44 ea ff 	mov	-22(r4),-26(r4)	;0xffea(r4), 0xffe6(r4)
    4418:	e6 ff 
		temp1=k[1];
    441a:	94 44 ec ff 	mov	-20(r4),-24(r4)	;0xffec(r4), 0xffe8(r4)
    441e:	e8 ff 

		k[0]=((k[1]<<9)&0xFFFF) ^ (k[2]>>7);
    4420:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
    4424:	0e 4f       	mov	r15,	r14	
    4426:	4e 4e       	mov.b	r14,	r14	
    4428:	8e 10       	swpb	r14		
    442a:	0e 5e       	rla	r14		
    442c:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4430:	12 c3       	clrc			
    4432:	0f 10       	rrc	r15		
    4434:	12 c3       	clrc			
    4436:	0f 10       	rrc	r15		
    4438:	12 c3       	clrc			
    443a:	0f 10       	rrc	r15		
    443c:	12 c3       	clrc			
    443e:	0f 10       	rrc	r15		
    4440:	12 c3       	clrc			
    4442:	0f 10       	rrc	r15		
    4444:	12 c3       	clrc			
    4446:	0f 10       	rrc	r15		
    4448:	12 c3       	clrc			
    444a:	0f 10       	rrc	r15		
    444c:	0f ee       	xor	r14,	r15	
    444e:	84 4f ea ff 	mov	r15,	-22(r4)	;0xffea(r4)
		k[1]=((k[2]<<9)&0xFFFF) ^ (k[3]>>7);
    4452:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    4456:	0e 4f       	mov	r15,	r14	
    4458:	4e 4e       	mov.b	r14,	r14	
    445a:	8e 10       	swpb	r14		
    445c:	0e 5e       	rla	r14		
    445e:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4462:	12 c3       	clrc			
    4464:	0f 10       	rrc	r15		
    4466:	12 c3       	clrc			
    4468:	0f 10       	rrc	r15		
    446a:	12 c3       	clrc			
    446c:	0f 10       	rrc	r15		
    446e:	12 c3       	clrc			
    4470:	0f 10       	rrc	r15		
    4472:	12 c3       	clrc			
    4474:	0f 10       	rrc	r15		
    4476:	12 c3       	clrc			
    4478:	0f 10       	rrc	r15		
    447a:	12 c3       	clrc			
    447c:	0f 10       	rrc	r15		
    447e:	0f ee       	xor	r14,	r15	
    4480:	84 4f ec ff 	mov	r15,	-20(r4)	;0xffec(r4)
		k[2]=((k[3]<<9)&0xFFFF) ^ (k[4]>>7);
    4484:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    4488:	0e 4f       	mov	r15,	r14	
    448a:	4e 4e       	mov.b	r14,	r14	
    448c:	8e 10       	swpb	r14		
    448e:	0e 5e       	rla	r14		
    4490:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4494:	12 c3       	clrc			
    4496:	0f 10       	rrc	r15		
    4498:	12 c3       	clrc			
    449a:	0f 10       	rrc	r15		
    449c:	12 c3       	clrc			
    449e:	0f 10       	rrc	r15		
    44a0:	12 c3       	clrc			
    44a2:	0f 10       	rrc	r15		
    44a4:	12 c3       	clrc			
    44a6:	0f 10       	rrc	r15		
    44a8:	12 c3       	clrc			
    44aa:	0f 10       	rrc	r15		
    44ac:	12 c3       	clrc			
    44ae:	0f 10       	rrc	r15		
    44b0:	0f ee       	xor	r14,	r15	
    44b2:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
		k[3]=((k[4]<<9)&0xFFFF) ^ (k[5]>>7);
    44b6:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    44ba:	0e 4f       	mov	r15,	r14	
    44bc:	4e 4e       	mov.b	r14,	r14	
    44be:	8e 10       	swpb	r14		
    44c0:	0e 5e       	rla	r14		
    44c2:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    44c6:	12 c3       	clrc			
    44c8:	0f 10       	rrc	r15		
    44ca:	12 c3       	clrc			
    44cc:	0f 10       	rrc	r15		
    44ce:	12 c3       	clrc			
    44d0:	0f 10       	rrc	r15		
    44d2:	12 c3       	clrc			
    44d4:	0f 10       	rrc	r15		
    44d6:	12 c3       	clrc			
    44d8:	0f 10       	rrc	r15		
    44da:	12 c3       	clrc			
    44dc:	0f 10       	rrc	r15		
    44de:	12 c3       	clrc			
    44e0:	0f 10       	rrc	r15		
    44e2:	0f ee       	xor	r14,	r15	
    44e4:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
		k[4]=((k[5]<<9)&0xFFFF) ^ (k[6]>>7);
    44e8:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    44ec:	0e 4f       	mov	r15,	r14	
    44ee:	4e 4e       	mov.b	r14,	r14	
    44f0:	8e 10       	swpb	r14		
    44f2:	0e 5e       	rla	r14		
    44f4:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    44f8:	12 c3       	clrc			
    44fa:	0f 10       	rrc	r15		
    44fc:	12 c3       	clrc			
    44fe:	0f 10       	rrc	r15		
    4500:	12 c3       	clrc			
    4502:	0f 10       	rrc	r15		
    4504:	12 c3       	clrc			
    4506:	0f 10       	rrc	r15		
    4508:	12 c3       	clrc			
    450a:	0f 10       	rrc	r15		
    450c:	12 c3       	clrc			
    450e:	0f 10       	rrc	r15		
    4510:	12 c3       	clrc			
    4512:	0f 10       	rrc	r15		
    4514:	0f ee       	xor	r14,	r15	
    4516:	84 4f f2 ff 	mov	r15,	-14(r4)	;0xfff2(r4)
		k[5]=((k[6]<<9)&0xFFFF) ^ (k[7]>>7);
    451a:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    451e:	0e 4f       	mov	r15,	r14	
    4520:	4e 4e       	mov.b	r14,	r14	
    4522:	8e 10       	swpb	r14		
    4524:	0e 5e       	rla	r14		
    4526:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    452a:	12 c3       	clrc			
    452c:	0f 10       	rrc	r15		
    452e:	12 c3       	clrc			
    4530:	0f 10       	rrc	r15		
    4532:	12 c3       	clrc			
    4534:	0f 10       	rrc	r15		
    4536:	12 c3       	clrc			
    4538:	0f 10       	rrc	r15		
    453a:	12 c3       	clrc			
    453c:	0f 10       	rrc	r15		
    453e:	12 c3       	clrc			
    4540:	0f 10       	rrc	r15		
    4542:	12 c3       	clrc			
    4544:	0f 10       	rrc	r15		
    4546:	0f ee       	xor	r14,	r15	
    4548:	84 4f f4 ff 	mov	r15,	-12(r4)	;0xfff4(r4)
		k[6]=((k[7]<<9)&0xFFFF) ^ (temp0>>7);
    454c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4550:	0e 4f       	mov	r15,	r14	
    4552:	4e 4e       	mov.b	r14,	r14	
    4554:	8e 10       	swpb	r14		
    4556:	0e 5e       	rla	r14		
    4558:	1f 44 e6 ff 	mov	-26(r4),r15	;0xffe6(r4)
    455c:	12 c3       	clrc			
    455e:	0f 10       	rrc	r15		
    4560:	12 c3       	clrc			
    4562:	0f 10       	rrc	r15		
    4564:	12 c3       	clrc			
    4566:	0f 10       	rrc	r15		
    4568:	12 c3       	clrc			
    456a:	0f 10       	rrc	r15		
    456c:	12 c3       	clrc			
    456e:	0f 10       	rrc	r15		
    4570:	12 c3       	clrc			
    4572:	0f 10       	rrc	r15		
    4574:	12 c3       	clrc			
    4576:	0f 10       	rrc	r15		
    4578:	0f ee       	xor	r14,	r15	
    457a:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
		k[7]=((temp0<<9)&0xFFFF) ^ (temp1>>7);
    457e:	1e 44 e6 ff 	mov	-26(r4),r14	;0xffe6(r4)
    4582:	4e 4e       	mov.b	r14,	r14	
    4584:	8e 10       	swpb	r14		
    4586:	0e 5e       	rla	r14		
    4588:	1f 44 e8 ff 	mov	-24(r4),r15	;0xffe8(r4)
    458c:	12 c3       	clrc			
    458e:	0f 10       	rrc	r15		
    4590:	12 c3       	clrc			
    4592:	0f 10       	rrc	r15		
    4594:	12 c3       	clrc			
    4596:	0f 10       	rrc	r15		
    4598:	12 c3       	clrc			
    459a:	0f 10       	rrc	r15		
    459c:	12 c3       	clrc			
    459e:	0f 10       	rrc	r15		
    45a0:	12 c3       	clrc			
    45a2:	0f 10       	rrc	r15		
    45a4:	12 c3       	clrc			
    45a6:	0f 10       	rrc	r15		
    45a8:	0f ee       	xor	r14,	r15	
    45aa:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
	u8 i;
	u16 k[8],temp0,temp1;
	for(i=0;i<8;i++)k[i]=key[i];


	for(i=0;i<6;i++)
    45ae:	d4 53 e4 ff 	inc.b	-28(r4)	;0xffe4(r4)
    45b2:	f4 90 06 00 	cmp.b	#6,	-28(r4)	;#0x0006, 0xffe4(r4)
    45b6:	e4 ff 
    45b8:	02 2c       	jc	$+6      	;abs 0x45be
    45ba:	30 40 3e 43 	br	#0x433e	
		k[5]=((k[6]<<9)&0xFFFF) ^ (k[7]>>7);
		k[6]=((k[7]<<9)&0xFFFF) ^ (temp0>>7);
		k[7]=((temp0<<9)&0xFFFF) ^ (temp1>>7);
	}

	subkey[48]=k[0];
    45be:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    45c2:	3f 50 60 00 	add	#96,	r15	;#0x0060
    45c6:	1e 44 ea ff 	mov	-22(r4),r14	;0xffea(r4)
    45ca:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	subkey[49]=k[1];
    45ce:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    45d2:	3f 50 62 00 	add	#98,	r15	;#0x0062
    45d6:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    45da:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	subkey[50]=k[2];
    45de:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    45e2:	3f 50 64 00 	add	#100,	r15	;#0x0064
    45e6:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    45ea:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	subkey[51]=k[3];
    45ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    45f2:	3f 50 66 00 	add	#102,	r15	;#0x0066
    45f6:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    45fa:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	return;
}
    45fe:	31 50 1a 00 	add	#26,	r1	;#0x001a
    4602:	34 41       	pop	r4		
    4604:	30 41       	ret			

00004606 <KeyScheduleDecrypt>:

/**********************************************************************/
 void KeyScheduleDecrypt(const u16 *key,u16 *subkey)
{
    4606:	0b 12       	push	r11		
    4608:	04 12       	push	r4		
    460a:	04 41       	mov	r1,	r4	
    460c:	24 52       	add	#4,	r4	;r2 As==10
    460e:	31 50 92 ff 	add	#-110,	r1	;#0xff92
    4612:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    4616:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
	u16 i, tempkey[52];
	KeyScheduleEncrypt(key,tempkey);
    461a:	0f 44       	mov	r4,	r15	
    461c:	3f 50 90 ff 	add	#-112,	r15	;#0xff90
    4620:	0e 4f       	mov	r15,	r14	
    4622:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4626:	b0 12 f0 42 	call	#0x42f0	

	subkey[0]=invMod(tempkey[48]);
    462a:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    462e:	b0 12 a0 41 	call	#0x41a0	
    4632:	0e 4f       	mov	r15,	r14	
    4634:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4638:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	subkey[1]=(~tempkey[49])+1;
    463c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4640:	2e 53       	incd	r14		
    4642:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    4646:	3f e3       	inv	r15		
    4648:	1f 53       	inc	r15		
    464a:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
	subkey[2]=(~tempkey[50])+1;
    464e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4652:	2e 52       	add	#4,	r14	;r2 As==10
    4654:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    4658:	3f e3       	inv	r15		
    465a:	1f 53       	inc	r15		
    465c:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
	subkey[3]=invMod(tempkey[51]);
    4660:	1b 44 fa ff 	mov	-6(r4),	r11	;0xfffa(r4)
    4664:	3b 50 06 00 	add	#6,	r11	;#0x0006
    4668:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    466c:	b0 12 a0 41 	call	#0x41a0	
    4670:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)
	subkey[4]=tempkey[46];
    4674:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4678:	3f 52       	add	#8,	r15	;r2 As==11
    467a:	1e 44 ec ff 	mov	-20(r4),r14	;0xffec(r4)
    467e:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	subkey[5]=tempkey[47];
    4682:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4686:	3f 50 0a 00 	add	#10,	r15	;#0x000a
    468a:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    468e:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)

	for(i=1;i<NBROUND;i++)
    4692:	94 43 8e ff 	mov	#1,	-114(r4);r3 As==01, 0xff8e(r4)
    4696:	bf 3c       	jmp	$+384    	;abs 0x4816
	{
		subkey[(6*i)+0]=invMod(tempkey[(8-i)*6+0]);
    4698:	1e 44 8e ff 	mov	-114(r4),r14	;0xff8e(r4)
    469c:	0f 4e       	mov	r14,	r15	
    469e:	0f 5f       	rla	r15		
    46a0:	0f 5e       	add	r14,	r15	
    46a2:	0f 5f       	rla	r15		
    46a4:	0f 5f       	rla	r15		
    46a6:	1b 44 fa ff 	mov	-6(r4),	r11	;0xfffa(r4)
    46aa:	0b 5f       	add	r15,	r11	
    46ac:	1e 44 8e ff 	mov	-114(r4),r14	;0xff8e(r4)
    46b0:	0f 4e       	mov	r14,	r15	
    46b2:	0f 5f       	rla	r15		
    46b4:	0f 5e       	add	r14,	r15	
    46b6:	0f 5f       	rla	r15		
    46b8:	3f e3       	inv	r15		
    46ba:	1f 53       	inc	r15		
    46bc:	3f 50 30 00 	add	#48,	r15	;#0x0030
    46c0:	0f 5f       	rla	r15		
    46c2:	3d 40 8e ff 	mov	#-114,	r13	;#0xff8e
    46c6:	0d 54       	add	r4,	r13	
    46c8:	0f 5d       	add	r13,	r15	
    46ca:	2f 53       	incd	r15		
    46cc:	2f 4f       	mov	@r15,	r15	
    46ce:	b0 12 a0 41 	call	#0x41a0	
    46d2:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)
		subkey[(6*i)+1]=(~tempkey[(8-i)*6+2])+1;
    46d6:	1e 44 8e ff 	mov	-114(r4),r14	;0xff8e(r4)
    46da:	0f 4e       	mov	r14,	r15	
    46dc:	0f 5f       	rla	r15		
    46de:	0f 5e       	add	r14,	r15	
    46e0:	0f 5f       	rla	r15		
    46e2:	0f 5f       	rla	r15		
    46e4:	2f 53       	incd	r15		
    46e6:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    46ea:	0e 5f       	add	r15,	r14	
    46ec:	1d 44 8e ff 	mov	-114(r4),r13	;0xff8e(r4)
    46f0:	0f 4d       	mov	r13,	r15	
    46f2:	0f 5f       	rla	r15		
    46f4:	0f 5d       	add	r13,	r15	
    46f6:	0f 5f       	rla	r15		
    46f8:	3f e3       	inv	r15		
    46fa:	1f 53       	inc	r15		
    46fc:	3f 50 32 00 	add	#50,	r15	;#0x0032
    4700:	0f 5f       	rla	r15		
    4702:	3d 40 8e ff 	mov	#-114,	r13	;#0xff8e
    4706:	0d 54       	add	r4,	r13	
    4708:	0f 5d       	add	r13,	r15	
    470a:	2f 53       	incd	r15		
    470c:	2f 4f       	mov	@r15,	r15	
    470e:	3f e3       	inv	r15		
    4710:	1f 53       	inc	r15		
    4712:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		subkey[(6*i)+2]=(~tempkey[(8-i)*6+1])+1;
    4716:	1e 44 8e ff 	mov	-114(r4),r14	;0xff8e(r4)
    471a:	0f 4e       	mov	r14,	r15	
    471c:	0f 5f       	rla	r15		
    471e:	0f 5e       	add	r14,	r15	
    4720:	0f 5f       	rla	r15		
    4722:	0f 5f       	rla	r15		
    4724:	2f 52       	add	#4,	r15	;r2 As==10
    4726:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    472a:	0e 5f       	add	r15,	r14	
    472c:	1d 44 8e ff 	mov	-114(r4),r13	;0xff8e(r4)
    4730:	0f 4d       	mov	r13,	r15	
    4732:	0f 5f       	rla	r15		
    4734:	0f 5d       	add	r13,	r15	
    4736:	0f 5f       	rla	r15		
    4738:	3f e3       	inv	r15		
    473a:	1f 53       	inc	r15		
    473c:	3f 50 31 00 	add	#49,	r15	;#0x0031
    4740:	0f 5f       	rla	r15		
    4742:	3d 40 8e ff 	mov	#-114,	r13	;#0xff8e
    4746:	0d 54       	add	r4,	r13	
    4748:	0f 5d       	add	r13,	r15	
    474a:	2f 53       	incd	r15		
    474c:	2f 4f       	mov	@r15,	r15	
    474e:	3f e3       	inv	r15		
    4750:	1f 53       	inc	r15		
    4752:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		subkey[(6*i)+3]=invMod(tempkey[(8-i)*6+3]);
    4756:	1e 44 8e ff 	mov	-114(r4),r14	;0xff8e(r4)
    475a:	0f 4e       	mov	r14,	r15	
    475c:	0f 5f       	rla	r15		
    475e:	0f 5e       	add	r14,	r15	
    4760:	0f 5f       	rla	r15		
    4762:	0f 5f       	rla	r15		
    4764:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4768:	1b 44 fa ff 	mov	-6(r4),	r11	;0xfffa(r4)
    476c:	0b 5f       	add	r15,	r11	
    476e:	1e 44 8e ff 	mov	-114(r4),r14	;0xff8e(r4)
    4772:	0f 4e       	mov	r14,	r15	
    4774:	0f 5f       	rla	r15		
    4776:	0f 5e       	add	r14,	r15	
    4778:	0f 5f       	rla	r15		
    477a:	3f e3       	inv	r15		
    477c:	1f 53       	inc	r15		
    477e:	3f 50 33 00 	add	#51,	r15	;#0x0033
    4782:	0f 5f       	rla	r15		
    4784:	3e 40 8e ff 	mov	#-114,	r14	;#0xff8e
    4788:	0e 54       	add	r4,	r14	
    478a:	0f 5e       	add	r14,	r15	
    478c:	2f 53       	incd	r15		
    478e:	2f 4f       	mov	@r15,	r15	
    4790:	b0 12 a0 41 	call	#0x41a0	
    4794:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)
		subkey[(6*i)+4]=tempkey[(7-i)*6+4];
    4798:	1e 44 8e ff 	mov	-114(r4),r14	;0xff8e(r4)
    479c:	0f 4e       	mov	r14,	r15	
    479e:	0f 5f       	rla	r15		
    47a0:	0f 5e       	add	r14,	r15	
    47a2:	0f 5f       	rla	r15		
    47a4:	0f 5f       	rla	r15		
    47a6:	3f 52       	add	#8,	r15	;r2 As==11
    47a8:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    47ac:	0e 5f       	add	r15,	r14	
    47ae:	1d 44 8e ff 	mov	-114(r4),r13	;0xff8e(r4)
    47b2:	0f 4d       	mov	r13,	r15	
    47b4:	0f 5f       	rla	r15		
    47b6:	0f 5d       	add	r13,	r15	
    47b8:	0f 5f       	rla	r15		
    47ba:	3f e3       	inv	r15		
    47bc:	1f 53       	inc	r15		
    47be:	3f 50 2e 00 	add	#46,	r15	;#0x002e
    47c2:	0f 5f       	rla	r15		
    47c4:	3d 40 8e ff 	mov	#-114,	r13	;#0xff8e
    47c8:	0d 54       	add	r4,	r13	
    47ca:	0f 5d       	add	r13,	r15	
    47cc:	2f 53       	incd	r15		
    47ce:	2f 4f       	mov	@r15,	r15	
    47d0:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		subkey[(6*i)+5]=tempkey[(7-i)*6+5];
    47d4:	1e 44 8e ff 	mov	-114(r4),r14	;0xff8e(r4)
    47d8:	0f 4e       	mov	r14,	r15	
    47da:	0f 5f       	rla	r15		
    47dc:	0f 5e       	add	r14,	r15	
    47de:	0f 5f       	rla	r15		
    47e0:	0f 5f       	rla	r15		
    47e2:	3f 50 0a 00 	add	#10,	r15	;#0x000a
    47e6:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    47ea:	0e 5f       	add	r15,	r14	
    47ec:	1d 44 8e ff 	mov	-114(r4),r13	;0xff8e(r4)
    47f0:	0f 4d       	mov	r13,	r15	
    47f2:	0f 5f       	rla	r15		
    47f4:	0f 5d       	add	r13,	r15	
    47f6:	0f 5f       	rla	r15		
    47f8:	3f e3       	inv	r15		
    47fa:	1f 53       	inc	r15		
    47fc:	3f 50 2f 00 	add	#47,	r15	;#0x002f
    4800:	0f 5f       	rla	r15		
    4802:	3d 40 8e ff 	mov	#-114,	r13	;#0xff8e
    4806:	0d 54       	add	r4,	r13	
    4808:	0f 5d       	add	r13,	r15	
    480a:	2f 53       	incd	r15		
    480c:	2f 4f       	mov	@r15,	r15	
    480e:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
	subkey[2]=(~tempkey[50])+1;
	subkey[3]=invMod(tempkey[51]);
	subkey[4]=tempkey[46];
	subkey[5]=tempkey[47];

	for(i=1;i<NBROUND;i++)
    4812:	94 53 8e ff 	inc	-114(r4)	;0xff8e(r4)
    4816:	b4 92 8e ff 	cmp	#8,	-114(r4);r2 As==11, 0xff8e(r4)
    481a:	3e 2b       	jnc	$-386    	;abs 0x4698
		subkey[(6*i)+3]=invMod(tempkey[(8-i)*6+3]);
		subkey[(6*i)+4]=tempkey[(7-i)*6+4];
		subkey[(6*i)+5]=tempkey[(7-i)*6+5];
	}

	subkey[48]=invMod(tempkey[0]);
    481c:	1b 44 fa ff 	mov	-6(r4),	r11	;0xfffa(r4)
    4820:	3b 50 60 00 	add	#96,	r11	;#0x0060
    4824:	1f 44 90 ff 	mov	-112(r4),r15	;0xff90(r4)
    4828:	b0 12 a0 41 	call	#0x41a0	
    482c:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)
	subkey[49]=(~tempkey[1])+1;
    4830:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4834:	3e 50 62 00 	add	#98,	r14	;#0x0062
    4838:	1f 44 92 ff 	mov	-110(r4),r15	;0xff92(r4)
    483c:	3f e3       	inv	r15		
    483e:	1f 53       	inc	r15		
    4840:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
	subkey[50]=(~tempkey[2])+1;
    4844:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4848:	3e 50 64 00 	add	#100,	r14	;#0x0064
    484c:	1f 44 94 ff 	mov	-108(r4),r15	;0xff94(r4)
    4850:	3f e3       	inv	r15		
    4852:	1f 53       	inc	r15		
    4854:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
	subkey[51]=invMod(tempkey[3]);
    4858:	1b 44 fa ff 	mov	-6(r4),	r11	;0xfffa(r4)
    485c:	3b 50 66 00 	add	#102,	r11	;#0x0066
    4860:	1f 44 96 ff 	mov	-106(r4),r15	;0xff96(r4)
    4864:	b0 12 a0 41 	call	#0x41a0	
    4868:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)

	return;
}
    486c:	31 50 6e 00 	add	#110,	r1	;#0x006e
    4870:	34 41       	pop	r4		
    4872:	3b 41       	pop	r11		
    4874:	30 41       	ret			

00004876 <Encrypt>:
/**********************************************************************/


 void Encrypt(u16 *state,const u16 *subkey)
{
    4876:	0b 12       	push	r11		
    4878:	04 12       	push	r4		
    487a:	04 41       	mov	r1,	r4	
    487c:	24 52       	add	#4,	r4	;r2 As==10
    487e:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    4882:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    4886:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
	u16 i,t0,t1,t2;
	for(i=0;i<NBROUND;i++)
    488a:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    488e:	c7 3c       	jmp	$+400    	;abs 0x4a1e
	{
		state[0]=mul(state[0],subkey[(6*i) + 0]);
    4890:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    4894:	0f 4e       	mov	r14,	r15	
    4896:	0f 5f       	rla	r15		
    4898:	0f 5e       	add	r14,	r15	
    489a:	0f 5f       	rla	r15		
    489c:	0f 5f       	rla	r15		
    489e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    48a2:	2e 4f       	mov	@r15,	r14	
    48a4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    48a8:	2f 4f       	mov	@r15,	r15	
    48aa:	b0 12 e0 40 	call	#0x40e0	
    48ae:	0e 4f       	mov	r15,	r14	
    48b0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    48b4:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		state[1]=(state[1]+subkey[(6*i) + 1])&0xFFFF;
    48b8:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    48bc:	2e 53       	incd	r14		
    48be:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    48c2:	2f 53       	incd	r15		
    48c4:	2c 4f       	mov	@r15,	r12	
    48c6:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    48ca:	0f 4d       	mov	r13,	r15	
    48cc:	0f 5f       	rla	r15		
    48ce:	0f 5d       	add	r13,	r15	
    48d0:	0f 5f       	rla	r15		
    48d2:	0f 5f       	rla	r15		
    48d4:	2f 53       	incd	r15		
    48d6:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    48da:	2f 4f       	mov	@r15,	r15	
    48dc:	0f 5c       	add	r12,	r15	
    48de:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		state[2]=(state[2]+subkey[(6*i) + 2])&0xFFFF;
    48e2:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    48e6:	2e 52       	add	#4,	r14	;r2 As==10
    48e8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    48ec:	2f 52       	add	#4,	r15	;r2 As==10
    48ee:	2c 4f       	mov	@r15,	r12	
    48f0:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfff0(r4)
    48f4:	0f 4d       	mov	r13,	r15	
    48f6:	0f 5f       	rla	r15		
    48f8:	0f 5d       	add	r13,	r15	
    48fa:	0f 5f       	rla	r15		
    48fc:	0f 5f       	rla	r15		
    48fe:	2f 52       	add	#4,	r15	;r2 As==10
    4900:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4904:	2f 4f       	mov	@r15,	r15	
    4906:	0f 5c       	add	r12,	r15	
    4908:	8e 4f 00 00 	mov	r15,	0(r14)	;0x0000(r14)
		state[3]=mul(state[3],subkey[(6*i) + 3]);
    490c:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    4910:	3b 50 06 00 	add	#6,	r11	;#0x0006
    4914:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    4918:	0f 4e       	mov	r14,	r15	
    491a:	0f 5f       	rla	r15		
    491c:	0f 5e       	add	r14,	r15	
    491e:	0f 5f       	rla	r15		
    4920:	0f 5f       	rla	r15		
    4922:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4926:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    492a:	2e 4f       	mov	@r15,	r14	
    492c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4930:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4934:	2f 4f       	mov	@r15,	r15	
    4936:	b0 12 e0 40 	call	#0x40e0	
    493a:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)


		t0=mul(subkey[(6*i) + 4],state[0] ^ state[2]);
    493e:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4942:	2e 4f       	mov	@r15,	r14	
    4944:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4948:	2f 52       	add	#4,	r15	;r2 As==10
    494a:	2f 4f       	mov	@r15,	r15	
    494c:	0d 4e       	mov	r14,	r13	
    494e:	0d ef       	xor	r15,	r13	
    4950:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    4954:	0f 4e       	mov	r14,	r15	
    4956:	0f 5f       	rla	r15		
    4958:	0f 5e       	add	r14,	r15	
    495a:	0f 5f       	rla	r15		
    495c:	0f 5f       	rla	r15		
    495e:	3f 52       	add	#8,	r15	;r2 As==11
    4960:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    4964:	2f 4f       	mov	@r15,	r15	
    4966:	0e 4d       	mov	r13,	r14	
    4968:	b0 12 e0 40 	call	#0x40e0	
    496c:	84 4f f2 ff 	mov	r15,	-14(r4)	;0xfff2(r4)
		t1=mul(subkey[(6*i) + 5],( t0 + (state[1] ^ state[3]))&0xFFFF);
    4970:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4974:	2f 53       	incd	r15		
    4976:	2e 4f       	mov	@r15,	r14	
    4978:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    497c:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4980:	2f 4f       	mov	@r15,	r15	
    4982:	0f ee       	xor	r14,	r15	
    4984:	0d 4f       	mov	r15,	r13	
    4986:	1d 54 f2 ff 	add	-14(r4),r13	;0xfff2(r4)
    498a:	1e 44 f0 ff 	mov	-16(r4),r14	;0xfff0(r4)
    498e:	0f 4e       	mov	r14,	r15	
    4990:	0f 5f       	rla	r15		
    4992:	0f 5e       	add	r14,	r15	
    4994:	0f 5f       	rla	r15		
    4996:	0f 5f       	rla	r15		
    4998:	3f 50 0a 00 	add	#10,	r15	;#0x000a
    499c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    49a0:	2f 4f       	mov	@r15,	r15	
    49a2:	0e 4d       	mov	r13,	r14	
    49a4:	b0 12 e0 40 	call	#0x40e0	
    49a8:	84 4f f4 ff 	mov	r15,	-12(r4)	;0xfff4(r4)
		t2=(t0+t1)&0xFFFF;
    49ac:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    49b0:	1e 54 f4 ff 	add	-12(r4),r14	;0xfff4(r4)
    49b4:	84 4e f6 ff 	mov	r14,	-10(r4)	;0xfff6(r4)

		state[0]=state[0] ^ t1 ;
    49b8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    49bc:	2f 4f       	mov	@r15,	r15	
    49be:	0e 4f       	mov	r15,	r14	
    49c0:	1e e4 f4 ff 	xor	-12(r4),r14	;0xfff4(r4)
    49c4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    49c8:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		state[3]=state[3] ^ t2 ;
    49cc:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    49d0:	3f 50 06 00 	add	#6,	r15	;#0x0006
    49d4:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    49d8:	3e 50 06 00 	add	#6,	r14	;#0x0006
    49dc:	2e 4e       	mov	@r14,	r14	
    49de:	1e e4 f6 ff 	xor	-10(r4),r14	;0xfff6(r4)
    49e2:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		t0 = t2 ^ state[1];
    49e6:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    49ea:	2f 53       	incd	r15		
    49ec:	2f 4f       	mov	@r15,	r15	
    49ee:	0e 4f       	mov	r15,	r14	
    49f0:	1e e4 f6 ff 	xor	-10(r4),r14	;0xfff6(r4)
    49f4:	84 4e f2 ff 	mov	r14,	-14(r4)	;0xfff2(r4)
		state[1]=state[2]^t1;
    49f8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    49fc:	2f 53       	incd	r15		
    49fe:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4a02:	2e 52       	add	#4,	r14	;r2 As==10
    4a04:	2e 4e       	mov	@r14,	r14	
    4a06:	1e e4 f4 ff 	xor	-12(r4),r14	;0xfff4(r4)
    4a0a:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
		state[2]=t0;
    4a0e:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a12:	2f 52       	add	#4,	r15	;r2 As==10
    4a14:	9f 44 f2 ff 	mov	-14(r4),0(r15)	;0xfff2(r4), 0x0000(r15)
    4a18:	00 00 


 void Encrypt(u16 *state,const u16 *subkey)
{
	u16 i,t0,t1,t2;
	for(i=0;i<NBROUND;i++)
    4a1a:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
    4a1e:	b4 92 f0 ff 	cmp	#8,	-16(r4)	;r2 As==11, 0xfff0(r4)
    4a22:	36 2b       	jnc	$-402    	;abs 0x4890
		state[1]=state[2]^t1;
		state[2]=t0;
	}


	t1=state[1];
    4a24:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a28:	94 4f 02 00 	mov	2(r15),	-12(r4)	;0x0002(r15), 0xfff4(r4)
    4a2c:	f4 ff 
	state[0]=mul(state[0],subkey[48]);
    4a2e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4a32:	3f 50 60 00 	add	#96,	r15	;#0x0060
    4a36:	2e 4f       	mov	@r15,	r14	
    4a38:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a3c:	2f 4f       	mov	@r15,	r15	
    4a3e:	b0 12 e0 40 	call	#0x40e0	
    4a42:	0e 4f       	mov	r15,	r14	
    4a44:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a48:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	state[1]=(state[2]+subkey[49])&0xFFFF;
    4a4c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a50:	2f 53       	incd	r15		
    4a52:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    4a56:	2e 52       	add	#4,	r14	;r2 As==10
    4a58:	2d 4e       	mov	@r14,	r13	
    4a5a:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4a5e:	3e 50 62 00 	add	#98,	r14	;#0x0062
    4a62:	2e 4e       	mov	@r14,	r14	
    4a64:	0e 5d       	add	r13,	r14	
    4a66:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	state[2]=(t1+subkey[50])&0xFFFF;
    4a6a:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a6e:	2f 52       	add	#4,	r15	;r2 As==10
    4a70:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    4a74:	3e 50 64 00 	add	#100,	r14	;#0x0064
    4a78:	2e 4e       	mov	@r14,	r14	
    4a7a:	1e 54 f4 ff 	add	-12(r4),r14	;0xfff4(r4)
    4a7e:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
	state[3]=mul(state[3],subkey[51]);
    4a82:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    4a86:	3b 50 06 00 	add	#6,	r11	;#0x0006
    4a8a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    4a8e:	3f 50 66 00 	add	#102,	r15	;#0x0066
    4a92:	2e 4f       	mov	@r15,	r14	
    4a94:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    4a98:	3f 50 06 00 	add	#6,	r15	;#0x0006
    4a9c:	2f 4f       	mov	@r15,	r15	
    4a9e:	b0 12 e0 40 	call	#0x40e0	
    4aa2:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)

	return;
}
    4aa6:	31 50 0c 00 	add	#12,	r1	;#0x000c
    4aaa:	34 41       	pop	r4		
    4aac:	3b 41       	pop	r11		
    4aae:	30 41       	ret			

00004ab0 <delay>:
/**************************************************/
/********************* DELAY **********************/
/**************************************************/

void delay(unsigned int d) 
{
    4ab0:	04 12       	push	r4		
    4ab2:	04 41       	mov	r1,	r4	
    4ab4:	24 53       	incd	r4		
    4ab6:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    4aba:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4abe:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    4ac2:	0d 3c       	jmp	$+28     	;abs 0x4ade
    {
      for (i = 0; i<d; i++) 
    4ac4:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    4ac8:	04 3c       	jmp	$+10     	;abs 0x4ad2
	{
	  nop();
    4aca:	03 43       	nop			
	  nop();
    4acc:	03 43       	nop			
void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    {
      for (i = 0; i<d; i++) 
    4ace:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    4ad2:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    4ad6:	f8 ff 
    4ad8:	f8 2b       	jnc	$-14     	;abs 0x4aca
/**************************************************/

void delay(unsigned int d) 
{
  unsigned int i,j;
  for(j=0; j < 0xff; j++)
    4ada:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    4ade:	b4 90 ff 00 	cmp	#255,	-6(r4)	;#0x00ff, 0xfffa(r4)
    4ae2:	fa ff 
    4ae4:	ef 2b       	jnc	$-32     	;abs 0x4ac4
	{
	  nop();
	  nop();
	}
    }
}
    4ae6:	31 50 06 00 	add	#6,	r1	;#0x0006
    4aea:	34 41       	pop	r4		
    4aec:	30 41       	ret			

00004aee <uart1_init>:

#define UART1_BIT_RX (1 << UART1_PIN_RX)
#define UART1_BIT_TX (1 << UART1_PIN_TX)

int uart1_init()
{
    4aee:	04 12       	push	r4		
    4af0:	04 41       	mov	r1,	r4	
    4af2:	24 53       	incd	r4		

  WDTCTL = WDTPW + WDTHOLD;
    4af4:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4af8:	20 01 

  P1IE   = 0x00;        // Interrupt enable
    4afa:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
  P2IE   = 0x00;        // 0:disable 1:enable
    4afe:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00

  //Init of MSP430 Usart1 pins
  P3SEL |= (UART1_BIT_RX | UART1_BIT_TX);
    4b02:	5f 42 1b 00 	mov.b	&0x001b,r15	
    4b06:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    4b0a:	c2 4f 1b 00 	mov.b	r15,	&0x001b	

  //Init of USART1 Module
  U1ME  |= UTXE1|URXE1;           //Enable USART1 transmiter and receiver (UART mode)
    4b0e:	5f 42 05 00 	mov.b	&0x0005,r15	
    4b12:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    4b16:	c2 4f 05 00 	mov.b	r15,	&0x0005	
  
  U1CTL  = SWRST;                 //reset
    4b1a:	d2 43 78 00 	mov.b	#1,	&0x0078	;r3 As==01
  U1CTL  = CHAR;                  //init & release reset
    4b1e:	f2 40 10 00 	mov.b	#16,	&0x0078	;#0x0010
    4b22:	78 00 
  
  U1TCTL = SSEL1 | TXEPT;        //use SMCLK 
    4b24:	f2 40 21 00 	mov.b	#33,	&0x0079	;#0x0021
    4b28:	79 00 
  U1RCTL = 0;
    4b2a:	c2 43 7a 00 	mov.b	#0,	&0x007a	;r3 As==00
  // 38400 @ SMCLK 1MHz
#define U1BR1_INIT        0
#define U1BR0_INIT        0x1B
#define U1MCTL_INIT       0x03
  
  U1BR1  = U1BR1_INIT;
    4b2e:	c2 43 7d 00 	mov.b	#0,	&0x007d	;r3 As==00
  U1BR0  = U1BR0_INIT;
    4b32:	f2 40 1b 00 	mov.b	#27,	&0x007c	;#0x001b
    4b36:	7c 00 
  U1MCTL = U1MCTL_INIT;
    4b38:	f2 40 03 00 	mov.b	#3,	&0x007b	;#0x0003
    4b3c:	7b 00 

  delay(0x800);
    4b3e:	3f 40 00 08 	mov	#2048,	r15	;#0x0800
    4b42:	b0 12 b0 4a 	call	#0x4ab0	
  return 0;
    4b46:	0f 43       	clr	r15		
}
    4b48:	34 41       	pop	r4		
    4b4a:	30 41       	ret			

00004b4c <uart1_putchar>:

int uart1_putchar(int c)
{
    4b4c:	04 12       	push	r4		
    4b4e:	04 41       	mov	r1,	r4	
    4b50:	24 53       	incd	r4		
    4b52:	21 83       	decd	r1		
    4b54:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  U1TXBUF = c;
    4b58:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4b5c:	4f 4f       	mov.b	r15,	r15	
    4b5e:	c2 4f 7f 00 	mov.b	r15,	&0x007f	
  while ((U1TCTL & TXEPT) != TXEPT);
    4b62:	03 43       	nop			
    4b64:	5f 42 79 00 	mov.b	&0x0079,r15	
    4b68:	4f 4f       	mov.b	r15,	r15	
    4b6a:	1f f3       	and	#1,	r15	;r3 As==01
    4b6c:	0f 93       	tst	r15		
    4b6e:	fa 27       	jz	$-10     	;abs 0x4b64
  return (unsigned char)c;
    4b70:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4b74:	4f 4f       	mov.b	r15,	r15	
    4b76:	4f 4f       	mov.b	r15,	r15	
}
    4b78:	21 53       	incd	r1		
    4b7a:	34 41       	pop	r4		
    4b7c:	30 41       	ret			

00004b7e <putchar>:
/**************************************************/
/******************** PUT CHAR *********************/
/**************************************************/

int putchar(int c)
{
    4b7e:	04 12       	push	r4		
    4b80:	04 41       	mov	r1,	r4	
    4b82:	24 53       	incd	r4		
    4b84:	21 83       	decd	r1		
    4b86:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  return uart1_putchar(c);
    4b8a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    4b8e:	b0 12 4c 4b 	call	#0x4b4c	
}
    4b92:	21 53       	incd	r1		
    4b94:	34 41       	pop	r4		
    4b96:	30 41       	ret			

00004b98 <start_encrypt>:
/******************** END EXPE*********************/
/**************************************************/

void
start_encrypt()
{
    4b98:	04 12       	push	r4		
    4b9a:	04 41       	mov	r1,	r4	
    4b9c:	24 53       	incd	r4		
  ;
}
    4b9e:	34 41       	pop	r4		
    4ba0:	30 41       	ret			

00004ba2 <start_decrypt>:
void
start_decrypt()
{
    4ba2:	04 12       	push	r4		
    4ba4:	04 41       	mov	r1,	r4	
    4ba6:	24 53       	incd	r4		
  ;
}
    4ba8:	34 41       	pop	r4		
    4baa:	30 41       	ret			

00004bac <end_expe>:


void
end_expe()
{
    4bac:	04 12       	push	r4		
    4bae:	04 41       	mov	r1,	r4	
    4bb0:	24 53       	incd	r4		
  ;
}
    4bb2:	34 41       	pop	r4		
    4bb4:	30 41       	ret			

00004bb6 <__mulsi3>:
    4bb6:	0b 12       	push	r11		
    4bb8:	0a 12       	push	r10		
    4bba:	0b 43       	clr	r11		
    4bbc:	0a 43       	clr	r10		
    4bbe:	08 3c       	jmp	$+18     	;abs 0x4bd0
    4bc0:	12 c3       	clrc			
    4bc2:	0d 10       	rrc	r13		
    4bc4:	0c 10       	rrc	r12		
    4bc6:	02 28       	jnc	$+6      	;abs 0x4bcc
    4bc8:	0a 5e       	add	r14,	r10	
    4bca:	0b 6f       	addc	r15,	r11	
    4bcc:	0e 5e       	rla	r14		
    4bce:	0f 6f       	rlc	r15		
    4bd0:	0c 93       	tst	r12		
    4bd2:	f6 23       	jnz	$-18     	;abs 0x4bc0
    4bd4:	0d 93       	tst	r13		
    4bd6:	f4 23       	jnz	$-22     	;abs 0x4bc0
    4bd8:	0e 4a       	mov	r10,	r14	
    4bda:	0f 4b       	mov	r11,	r15	
    4bdc:	3a 41       	pop	r10		
    4bde:	3b 41       	pop	r11		
    4be0:	30 41       	ret			

00004be2 <__udivsi3>:
    4be2:	0b 12       	push	r11		
    4be4:	0a 12       	push	r10		
    4be6:	09 12       	push	r9		
    4be8:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    4bec:	0a 4c       	mov	r12,	r10	
    4bee:	0b 4d       	mov	r13,	r11	
    4bf0:	0c 43       	clr	r12		
    4bf2:	0d 43       	clr	r13		
    4bf4:	0e 5e       	rla	r14		
    4bf6:	0f 6f       	rlc	r15		
    4bf8:	0c 6c       	rlc	r12		
    4bfa:	0d 6d       	rlc	r13		
    4bfc:	0d 9b       	cmp	r11,	r13	
    4bfe:	06 28       	jnc	$+14     	;abs 0x4c0c
    4c00:	02 20       	jnz	$+6      	;abs 0x4c06
    4c02:	0c 9a       	cmp	r10,	r12	
    4c04:	03 28       	jnc	$+8      	;abs 0x4c0c
    4c06:	0c 8a       	sub	r10,	r12	
    4c08:	0d 7b       	subc	r11,	r13	
    4c0a:	1e d3       	bis	#1,	r14	;r3 As==01
    4c0c:	19 83       	dec	r9		
    4c0e:	f2 23       	jnz	$-26     	;abs 0x4bf4
    4c10:	39 41       	pop	r9		
    4c12:	3a 41       	pop	r10		
    4c14:	3b 41       	pop	r11		
    4c16:	30 41       	ret			

00004c18 <__umodsi3>:
    4c18:	b0 12 e2 4b 	call	#0x4be2	
    4c1c:	0e 4c       	mov	r12,	r14	
    4c1e:	0f 4d       	mov	r13,	r15	
    4c20:	30 41       	ret			

00004c22 <_unexpected_>:
    4c22:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	dc 40 dc 40 dc 40 dc 40 dc 40 dc 40 dc 40 dc 40     .@.@.@.@.@.@.@.@
    fff0:	dc 40 dc 40 dc 40 dc 40 dc 40 dc 40 dc 40 00 40     .@.@.@.@.@.@.@.@
